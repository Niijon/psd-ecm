
psd-ecm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a370  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800a500  0800a500  0001a500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a684  0800a684  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a684  0800a684  0001a684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a68c  0800a68c  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a68c  0800a68c  0001a68c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a690  0800a690  0001a690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800a694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c70  200001f0  0800a884  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00006000  20000e60  0800a884  00020e60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020c9a  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042cf  00000000  00000000  00040eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  00045190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001278  00000000  00000000  000465d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262d8  00000000  00000000  00047848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017890  00000000  00000000  0006db20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0299  00000000  00000000  000853b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155649  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005dfc  00000000  00000000  0015569c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a4e8 	.word	0x0800a4e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800a4e8 	.word	0x0800a4e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_CAN1_Init+0x64>)
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <MX_CAN1_Init+0x68>)
 8000570:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000572:	4b16      	ldr	r3, [pc, #88]	; (80005cc <MX_CAN1_Init+0x64>)
 8000574:	220a      	movs	r2, #10
 8000576:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_CAN1_Init+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MX_CAN1_Init+0x64>)
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_CAN1_Init+0x64>)
 8000586:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800058a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_CAN1_Init+0x64>)
 800058e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000592:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <MX_CAN1_Init+0x64>)
 8000596:	2200      	movs	r2, #0
 8000598:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_CAN1_Init+0x64>)
 800059c:	2200      	movs	r2, #0
 800059e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_CAN1_Init+0x64>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_CAN1_Init+0x64>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <MX_CAN1_Init+0x64>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_CAN1_Init+0x64>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_CAN1_Init+0x64>)
 80005ba:	f001 ff09 	bl	80023d0 <HAL_CAN_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005c4:	f001 fbe6 	bl	8001d94 <Error_Handler>
  }

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000440 	.word	0x20000440
 80005d0:	40006400 	.word	0x40006400

080005d4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <MX_CAN2_Init+0x64>)
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <MX_CAN2_Init+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 50;
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_CAN2_Init+0x64>)
 80005e0:	2232      	movs	r2, #50	; 0x32
 80005e2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <MX_CAN2_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_CAN2_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_CAN2_Init+0x64>)
 80005f2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80005f6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_CAN2_Init+0x64>)
 80005fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005fe:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_CAN2_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_CAN2_Init+0x64>)
 8000608:	2200      	movs	r2, #0
 800060a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <MX_CAN2_Init+0x64>)
 800060e:	2200      	movs	r2, #0
 8000610:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_CAN2_Init+0x64>)
 8000614:	2200      	movs	r2, #0
 8000616:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <MX_CAN2_Init+0x64>)
 800061a:	2200      	movs	r2, #0
 800061c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_CAN2_Init+0x64>)
 8000620:	2200      	movs	r2, #0
 8000622:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_CAN2_Init+0x64>)
 8000626:	f001 fed3 	bl	80023d0 <HAL_CAN_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000630:	f001 fbb0 	bl	8001d94 <Error_Handler>
  }

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200002f8 	.word	0x200002f8
 800063c:	40006800 	.word	0x40006800

08000640 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	; 0x30
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a5b      	ldr	r2, [pc, #364]	; (80007cc <HAL_CAN_MspInit+0x18c>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d14e      	bne.n	8000700 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000662:	4b5b      	ldr	r3, [pc, #364]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	4a59      	ldr	r2, [pc, #356]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 800066a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800066c:	4b58      	ldr	r3, [pc, #352]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d10d      	bne.n	8000690 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
 8000678:	4b56      	ldr	r3, [pc, #344]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a55      	ldr	r2, [pc, #340]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800067e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b53      	ldr	r3, [pc, #332]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800068c:	61bb      	str	r3, [r7, #24]
 800068e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	4b4f      	ldr	r3, [pc, #316]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	4a4e      	ldr	r2, [pc, #312]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6313      	str	r3, [r2, #48]	; 0x30
 80006a0:	4b4c      	ldr	r3, [pc, #304]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ba:	2303      	movs	r3, #3
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006be:	2309      	movs	r3, #9
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4843      	ldr	r0, [pc, #268]	; (80007d8 <HAL_CAN_MspInit+0x198>)
 80006ca:	f002 fe35 	bl	8003338 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	2013      	movs	r0, #19
 80006d4:	f002 fdf9 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80006d8:	2013      	movs	r0, #19
 80006da:	f002 fe12 	bl	8003302 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2103      	movs	r1, #3
 80006e2:	2014      	movs	r0, #20
 80006e4:	f002 fdf1 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006e8:	2014      	movs	r0, #20
 80006ea:	f002 fe0a 	bl	8003302 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 3, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2103      	movs	r1, #3
 80006f2:	2015      	movs	r0, #21
 80006f4:	f002 fde9 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006f8:	2015      	movs	r0, #21
 80006fa:	f002 fe02 	bl	8003302 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80006fe:	e060      	b.n	80007c2 <HAL_CAN_MspInit+0x182>
  else if(canHandle->Instance==CAN2)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a35      	ldr	r2, [pc, #212]	; (80007dc <HAL_CAN_MspInit+0x19c>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d15b      	bne.n	80007c2 <HAL_CAN_MspInit+0x182>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	4a30      	ldr	r2, [pc, #192]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000714:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000718:	6413      	str	r3, [r2, #64]	; 0x40
 800071a:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	3301      	adds	r3, #1
 800072c:	4a28      	ldr	r2, [pc, #160]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 800072e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d10d      	bne.n	8000754 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a24      	ldr	r2, [pc, #144]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800075e:	f043 0302 	orr.w	r3, r3, #2
 8000762:	6313      	str	r3, [r2, #48]	; 0x30
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000768:	f003 0302 	and.w	r3, r3, #2
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000770:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000782:	2309      	movs	r3, #9
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	4814      	ldr	r0, [pc, #80]	; (80007e0 <HAL_CAN_MspInit+0x1a0>)
 800078e:	f002 fdd3 	bl	8003338 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 2, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2102      	movs	r1, #2
 8000796:	203f      	movs	r0, #63	; 0x3f
 8000798:	f002 fd97 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800079c:	203f      	movs	r0, #63	; 0x3f
 800079e:	f002 fdb0 	bl	8003302 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	2040      	movs	r0, #64	; 0x40
 80007a8:	f002 fd8f 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80007ac:	2040      	movs	r0, #64	; 0x40
 80007ae:	f002 fda8 	bl	8003302 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	2041      	movs	r0, #65	; 0x41
 80007b8:	f002 fd87 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80007bc:	2041      	movs	r0, #65	; 0x41
 80007be:	f002 fda0 	bl	8003302 <HAL_NVIC_EnableIRQ>
}
 80007c2:	bf00      	nop
 80007c4:	3730      	adds	r7, #48	; 0x30
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40006400 	.word	0x40006400
 80007d0:	2000020c 	.word	0x2000020c
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40006800 	.word	0x40006800
 80007e0:	40020400 	.word	0x40020400

080007e4 <CanInit>:
/**
 * @brief: Initialize CAN network
 * @param chosen_network
 *
 **/
void CanInit(CAN_HandleTypeDef chosen_network) {
 80007e4:	b084      	sub	sp, #16
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	f107 0c08 	add.w	ip, r7, #8
 80007ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (HAL_CAN_Start(&chosen_network) != HAL_OK) {
 80007f2:	f107 0008 	add.w	r0, r7, #8
 80007f6:	f001 ffc7 	bl	8002788 <HAL_CAN_Start>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <CanInit+0x20>
		Error_Handler();
 8000800:	f001 fac8 	bl	8001d94 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&chosen_network,
 8000804:	2103      	movs	r1, #3
 8000806:	f107 0008 	add.w	r0, r7, #8
 800080a:	f002 fa23 	bl	8002c54 <HAL_CAN_ActivateNotification>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <CanInit+0x34>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 8000814:	f001 fabe 	bl	8001d94 <Error_Handler>
	}
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000820:	b004      	add	sp, #16
 8000822:	4770      	bx	lr

08000824 <CanSaveReceivedData>:
		Error_Handler();
	}
	CanClearRxDataFrame(ptr_can_rx_frame_template);
}

CanDataFrameInit CanSaveReceivedData(CAN_HandleTypeDef chosen_network, CanDataFrameInit *ptr_can_rx_frame_template) {
 8000824:	b084      	sub	sp, #16
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	f107 0014 	add.w	r0, r7, #20
 8000832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (HAL_CAN_GetRxMessage(&chosen_network, CAN_RX_FIFO0, &ptr_can_rx_frame_template->rx_header,
 8000836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000838:	f103 0220 	add.w	r2, r3, #32
			ptr_can_rx_frame_template->rx_data) != HAL_OK) {
 800083c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800083e:	333c      	adds	r3, #60	; 0x3c
	if (HAL_CAN_GetRxMessage(&chosen_network, CAN_RX_FIFO0, &ptr_can_rx_frame_template->rx_header,
 8000840:	f107 0014 	add.w	r0, r7, #20
 8000844:	2100      	movs	r1, #0
 8000846:	f002 f8f3 	bl	8002a30 <HAL_CAN_GetRxMessage>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <CanSaveReceivedData+0x30>
		/* Reception Error */
		Error_Handler();
 8000850:	f001 faa0 	bl	8001d94 <Error_Handler>
	}
	return *ptr_can_rx_frame_template;
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000858:	4610      	mov	r0, r2
 800085a:	4619      	mov	r1, r3
 800085c:	2344      	movs	r3, #68	; 0x44
 800085e:	461a      	mov	r2, r3
 8000860:	f008 fc9e 	bl	80091a0 <memcpy>
}
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800086e:	b004      	add	sp, #16
 8000870:	4770      	bx	lr
	...

08000874 <CanConfigFilter>:
 * @param can_filter_id_low: Low byte of CAN ID to be received
 * @param can_filter_mask_id_high: High byte of CAN ID mask - IDs to be received
 * @param can_filter_mask_id_low: Low byte of CAN ID mask - IDs to be received
 *
 **/
void CanConfigFilter(CAN_HandleTypeDef chosen_network, uint8_t can_filter_bank){
 8000874:	b084      	sub	sp, #16
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
 800087a:	f107 0c08 	add.w	ip, r7, #8
 800087e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	can_filter_template.FilterBank = can_filter_bank;
 8000882:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000886:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <CanConfigFilter+0x6c>)
 8000888:	6153      	str	r3, [r2, #20]
	can_filter_template.FilterMode = CAN_FILTERMODE_IDMASK;
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <CanConfigFilter+0x6c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
	can_filter_template.FilterScale = CAN_FILTERSCALE_32BIT;
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <CanConfigFilter+0x6c>)
 8000892:	2201      	movs	r2, #1
 8000894:	61da      	str	r2, [r3, #28]
	can_filter_template.FilterIdHigh = 0x0000;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <CanConfigFilter+0x6c>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
	can_filter_template.FilterIdLow = 0x0000;
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <CanConfigFilter+0x6c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
	can_filter_template.FilterMaskIdHigh = 0x0000;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <CanConfigFilter+0x6c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
	can_filter_template.FilterMaskIdLow = 0x0000;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <CanConfigFilter+0x6c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
	can_filter_template.FilterFIFOAssignment = CAN_RX_FIFO0;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <CanConfigFilter+0x6c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
	can_filter_template.FilterActivation = ENABLE;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <CanConfigFilter+0x6c>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	621a      	str	r2, [r3, #32]
	can_filter_template.SlaveStartFilterBank = 14;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <CanConfigFilter+0x6c>)
 80008bc:	220e      	movs	r2, #14
 80008be:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&chosen_network, &can_filter_template) != HAL_OK) {
 80008c0:	4907      	ldr	r1, [pc, #28]	; (80008e0 <CanConfigFilter+0x6c>)
 80008c2:	f107 0008 	add.w	r0, r7, #8
 80008c6:	f001 fe7f 	bl	80025c8 <HAL_CAN_ConfigFilter>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <CanConfigFilter+0x60>
		Error_Handler();
 80008d0:	f001 fa60 	bl	8001d94 <Error_Handler>
	}

}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008dc:	b004      	add	sp, #16
 80008de:	4770      	bx	lr
 80008e0:	20000394 	.word	0x20000394

080008e4 <CanSendNmt>:
 * @param node_id: chosen node to receive the order
 * @param ptr_can_frame_template: pointer to a structure with basic can frame parameteres
 *
 */
void CanSendNmt(CAN_HandleTypeDef chosen_network, uint8_t state,
		uint8_t node_id, CanDataFrameInit *ptr_can_frame_template) {
 80008e4:	b084      	sub	sp, #16
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	f107 0c08 	add.w	ip, r7, #8
 80008ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ptr_can_frame_template->tx_header.StdId = 0x000;
 80008f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 80008f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 80008fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = 2;
 8000904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000906:	2202      	movs	r2, #2
 8000908:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 800090a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800090c:	2200      	movs	r2, #0
 800090e:	771a      	strb	r2, [r3, #28]

	ptr_can_frame_template->tx_data[0] = state;
 8000910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000912:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000916:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = node_id;
 8000918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800091a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800091e:	705a      	strb	r2, [r3, #1]

	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000922:	f103 0108 	add.w	r1, r3, #8
			&ptr_can_frame_template->tx_header, ptr_can_frame_template->tx_data,
 8000926:	6bba      	ldr	r2, [r7, #56]	; 0x38
	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <CanSendNmt+0x78>)
 800092a:	f107 0008 	add.w	r0, r7, #8
 800092e:	f001 ff6f 	bl	8002810 <HAL_CAN_AddTxMessage>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <CanSendNmt+0x58>
			&can_tx_mailbox) != HAL_OK) {
		Error_Handler();
 8000938:	f001 fa2c 	bl	8001d94 <Error_Handler>
	}
	while (HAL_CAN_GetTxMailboxesFreeLevel(&chosen_network) != 3) {
 800093c:	bf00      	nop
 800093e:	f107 0008 	add.w	r0, r7, #8
 8000942:	f002 f840 	bl	80029c6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b03      	cmp	r3, #3
 800094a:	d1f8      	bne.n	800093e <CanSendNmt+0x5a>
	}
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000956:	b004      	add	sp, #16
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000220 	.word	0x20000220

08000960 <CanSendPdo>:
}

void CanSendPdo(CAN_HandleTypeDef chosen_network, uint32_t frame_pdo_id,
		uint8_t number_of_bytes, CanDataFrameInit *ptr_can_frame_template,
		uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3,
		uint8_t byte4, uint8_t byte5, uint8_t byte6, uint8_t byte7) {
 8000960:	b084      	sub	sp, #16
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
 8000966:	f107 0c08 	add.w	ip, r7, #8
 800096a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ptr_can_frame_template->tx_header.StdId = frame_pdo_id;
 800096e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000972:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 8000974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 800097a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = number_of_bytes;
 8000980:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8000984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000986:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 8000988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800098a:	2200      	movs	r2, #0
 800098c:	771a      	strb	r2, [r3, #28]
	ptr_can_frame_template->tx_data[0] = byte0;
 800098e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000990:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000994:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = byte1;
 8000996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000998:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800099c:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = byte2;
 800099e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009a0:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80009a4:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = byte3;
 80009a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009a8:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80009ac:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = byte4;
 80009ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009b0:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80009b4:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = byte5;
 80009b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009b8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80009bc:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = byte6;
 80009be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009c0:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80009c4:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = byte7;
 80009c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009c8:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80009cc:	71da      	strb	r2, [r3, #7]

	if (HAL_CAN_AddTxMessage(&chosen_network,
 80009ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d0:	f103 0108 	add.w	r1, r3, #8
			&ptr_can_frame_template->tx_header, ptr_can_frame_template->tx_data,
 80009d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
	if (HAL_CAN_AddTxMessage(&chosen_network,
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <CanSendPdo+0xa8>)
 80009d8:	f107 0008 	add.w	r0, r7, #8
 80009dc:	f001 ff18 	bl	8002810 <HAL_CAN_AddTxMessage>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <CanSendPdo+0x8a>
			&can_tx_mailbox) != HAL_OK) {
		Error_Handler();
 80009e6:	f001 f9d5 	bl	8001d94 <Error_Handler>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&chosen_network) != 3) {
 80009ea:	bf00      	nop
 80009ec:	f107 0008 	add.w	r0, r7, #8
 80009f0:	f001 ffe9 	bl	80029c6 <HAL_CAN_GetTxMailboxesFreeLevel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	d1f8      	bne.n	80009ec <CanSendPdo+0x8c>
	}
}
 80009fa:	bf00      	nop
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a04:	b004      	add	sp, #16
 8000a06:	4770      	bx	lr
 8000a08:	20000220 	.word	0x20000220

08000a0c <CanSendSdo>:
 *
 **/
void CanSendSdo(CAN_HandleTypeDef chosen_network, uint32_t frame_sdo_id,
		CanDataFrameInit *ptr_can_frame_template, uint8_t number_of_bytes,
		uint8_t command_byte, uint8_t byte0, uint8_t byte1, uint8_t byte2,
		uint8_t byte3, uint8_t byte4, uint8_t byte5, uint8_t byte6) {
 8000a0c:	b084      	sub	sp, #16
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	f107 0c08 	add.w	ip, r7, #8
 8000a16:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ptr_can_frame_template->tx_header.StdId = frame_sdo_id;
 8000a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a1e:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = number_of_bytes;
 8000a2c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a32:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 8000a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a36:	2200      	movs	r2, #0
 8000a38:	771a      	strb	r2, [r3, #28]
	ptr_can_frame_template->tx_data[0] = command_byte;
 8000a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3c:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000a40:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = byte0;
 8000a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a44:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000a48:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = byte1;
 8000a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000a50:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = byte2;
 8000a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a54:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8000a58:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = byte3;
 8000a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a5c:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000a60:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = byte4;
 8000a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a64:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000a68:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = byte5;
 8000a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a6c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8000a70:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = byte6;
 8000a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a74:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8000a78:	71da      	strb	r2, [r3, #7]

	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a7c:	f103 0108 	add.w	r1, r3, #8
			&ptr_can_frame_template->tx_header, ptr_can_frame_template->tx_data,
 8000a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <CanSendSdo+0xa8>)
 8000a84:	f107 0008 	add.w	r0, r7, #8
 8000a88:	f001 fec2 	bl	8002810 <HAL_CAN_AddTxMessage>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <CanSendSdo+0x8a>
			&can_tx_mailbox) != HAL_OK) {
		Error_Handler();
 8000a92:	f001 f97f 	bl	8001d94 <Error_Handler>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&chosen_network) != 3) {
 8000a96:	bf00      	nop
 8000a98:	f107 0008 	add.w	r0, r7, #8
 8000a9c:	f001 ff93 	bl	80029c6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d1f8      	bne.n	8000a98 <CanSendSdo+0x8c>
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr
 8000ab4:	20000220 	.word	0x20000220

08000ab8 <StopCanCommunication>:
			&can_frame_template);
	HAL_Delay(1);
}

void StopCanCommunication()
{
 8000ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aba:	b08b      	sub	sp, #44	; 0x2c
 8000abc:	af0a      	add	r7, sp, #40	; 0x28
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, bms.node_id,
 8000abe:	4b62      	ldr	r3, [pc, #392]	; (8000c48 <StopCanCommunication+0x190>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	4e62      	ldr	r6, [pc, #392]	; (8000c4c <StopCanCommunication+0x194>)
 8000ac4:	4a62      	ldr	r2, [pc, #392]	; (8000c50 <StopCanCommunication+0x198>)
 8000ac6:	9208      	str	r2, [sp, #32]
 8000ac8:	9307      	str	r3, [sp, #28]
 8000aca:	2302      	movs	r3, #2
 8000acc:	9306      	str	r3, [sp, #24]
 8000ace:	466d      	mov	r5, sp
 8000ad0:	f106 0410 	add.w	r4, r6, #16
 8000ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ad8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000adc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ae0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ae4:	f7ff fefe 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f001 fc4d 	bl	8002388 <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, inverter_1.node_id,
 8000aee:	4b59      	ldr	r3, [pc, #356]	; (8000c54 <StopCanCommunication+0x19c>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	4e56      	ldr	r6, [pc, #344]	; (8000c4c <StopCanCommunication+0x194>)
 8000af4:	4a56      	ldr	r2, [pc, #344]	; (8000c50 <StopCanCommunication+0x198>)
 8000af6:	9208      	str	r2, [sp, #32]
 8000af8:	9307      	str	r3, [sp, #28]
 8000afa:	2302      	movs	r3, #2
 8000afc:	9306      	str	r3, [sp, #24]
 8000afe:	466d      	mov	r5, sp
 8000b00:	f106 0410 	add.w	r4, r6, #16
 8000b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b10:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b14:	f7ff fee6 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f001 fc35 	bl	8002388 <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, inverter_2.node_id,
 8000b1e:	4b4e      	ldr	r3, [pc, #312]	; (8000c58 <StopCanCommunication+0x1a0>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4e4a      	ldr	r6, [pc, #296]	; (8000c4c <StopCanCommunication+0x194>)
 8000b24:	4a4a      	ldr	r2, [pc, #296]	; (8000c50 <StopCanCommunication+0x198>)
 8000b26:	9208      	str	r2, [sp, #32]
 8000b28:	9307      	str	r3, [sp, #28]
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	9306      	str	r3, [sp, #24]
 8000b2e:	466d      	mov	r5, sp
 8000b30:	f106 0410 	add.w	r4, r6, #16
 8000b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b40:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b44:	f7ff fece 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f001 fc1d 	bl	8002388 <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, mppt_1.node_id,
 8000b4e:	4b43      	ldr	r3, [pc, #268]	; (8000c5c <StopCanCommunication+0x1a4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	4e3e      	ldr	r6, [pc, #248]	; (8000c4c <StopCanCommunication+0x194>)
 8000b54:	4a3e      	ldr	r2, [pc, #248]	; (8000c50 <StopCanCommunication+0x198>)
 8000b56:	9208      	str	r2, [sp, #32]
 8000b58:	9307      	str	r3, [sp, #28]
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	9306      	str	r3, [sp, #24]
 8000b5e:	466d      	mov	r5, sp
 8000b60:	f106 0410 	add.w	r4, r6, #16
 8000b64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b70:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b74:	f7ff feb6 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f001 fc05 	bl	8002388 <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, mppt_2.node_id,
 8000b7e:	4b38      	ldr	r3, [pc, #224]	; (8000c60 <StopCanCommunication+0x1a8>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	4e32      	ldr	r6, [pc, #200]	; (8000c4c <StopCanCommunication+0x194>)
 8000b84:	4a32      	ldr	r2, [pc, #200]	; (8000c50 <StopCanCommunication+0x198>)
 8000b86:	9208      	str	r2, [sp, #32]
 8000b88:	9307      	str	r3, [sp, #28]
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	9306      	str	r3, [sp, #24]
 8000b8e:	466d      	mov	r5, sp
 8000b90:	f106 0410 	add.w	r4, r6, #16
 8000b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ba0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ba4:	f7ff fe9e 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f001 fbed 	bl	8002388 <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, mppt_3.node_id,
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <StopCanCommunication+0x1ac>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	4e26      	ldr	r6, [pc, #152]	; (8000c4c <StopCanCommunication+0x194>)
 8000bb4:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <StopCanCommunication+0x198>)
 8000bb6:	9208      	str	r2, [sp, #32]
 8000bb8:	9307      	str	r3, [sp, #28]
 8000bba:	2302      	movs	r3, #2
 8000bbc:	9306      	str	r3, [sp, #24]
 8000bbe:	466d      	mov	r5, sp
 8000bc0:	f106 0410 	add.w	r4, r6, #16
 8000bc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bcc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bd0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000bd4:	f7ff fe86 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f001 fbd5 	bl	8002388 <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, lights_controller.node_id,
 8000bde:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <StopCanCommunication+0x1b0>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	4e1a      	ldr	r6, [pc, #104]	; (8000c4c <StopCanCommunication+0x194>)
 8000be4:	4a1a      	ldr	r2, [pc, #104]	; (8000c50 <StopCanCommunication+0x198>)
 8000be6:	9208      	str	r2, [sp, #32]
 8000be8:	9307      	str	r3, [sp, #28]
 8000bea:	2302      	movs	r3, #2
 8000bec:	9306      	str	r3, [sp, #24]
 8000bee:	466d      	mov	r5, sp
 8000bf0:	f106 0410 	add.w	r4, r6, #16
 8000bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c00:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c04:	f7ff fe6e 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f001 fbbd 	bl	8002388 <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, dashboard.node_id,
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <StopCanCommunication+0x1b4>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	4e0e      	ldr	r6, [pc, #56]	; (8000c4c <StopCanCommunication+0x194>)
 8000c14:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <StopCanCommunication+0x198>)
 8000c16:	9208      	str	r2, [sp, #32]
 8000c18:	9307      	str	r3, [sp, #28]
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	9306      	str	r3, [sp, #24]
 8000c1e:	466d      	mov	r5, sp
 8000c20:	f106 0410 	add.w	r4, r6, #16
 8000c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c30:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c34:	f7ff fe56 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f001 fba5 	bl	8002388 <HAL_Delay>
}
 8000c3e:	bf00      	nop
 8000c40:	3704      	adds	r7, #4
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200002d8 	.word	0x200002d8
 8000c4c:	20000440 	.word	0x20000440
 8000c50:	20000278 	.word	0x20000278
 8000c54:	20000358 	.word	0x20000358
 8000c58:	20000424 	.word	0x20000424
 8000c5c:	2000025c 	.word	0x2000025c
 8000c60:	20000408 	.word	0x20000408
 8000c64:	20000320 	.word	0x20000320
 8000c68:	200002bc 	.word	0x200002bc
 8000c6c:	2000033c 	.word	0x2000033c

08000c70 <CanClearTxDataFrame>:
 * @brief: data sent over usb is not correctly shown when structure is not cleared
 *         after every message sent. Assigning zeros has no influence on the network
 * @param ptr_can_frame_template: chosen structure which helds all the data
 *
 **/
void CanClearTxDataFrame(CanDataFrameInit *ptr_can_frame_template) {
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	ptr_can_frame_template->tx_header.StdId = 0x00;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = 0;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	771a      	strb	r2, [r3, #28]

	ptr_can_frame_template->tx_data[0] = 0x0;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = 0x0;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = 0x0;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = 0x0;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = 0x0;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = 0x0;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = 0x0;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = 0x0;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	71da      	strb	r2, [r3, #7]
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <CanClearRxDataFrame>:


void CanClearRxDataFrame(CanDataFrameInit *ptr_can_frame_template) {
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
	ptr_can_frame_template->rx_header.StdId = 0x00;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
	ptr_can_frame_template->rx_header.ExtId = 0x00;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
	ptr_can_frame_template->rx_header.RTR = CAN_RTR_DATA;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
	ptr_can_frame_template->rx_header.IDE = CAN_ID_STD;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
	ptr_can_frame_template->rx_header.DLC = 0;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	631a      	str	r2, [r3, #48]	; 0x30

	ptr_can_frame_template->rx_data[0] = 0x0;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	ptr_can_frame_template->rx_data[1] = 0x0;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	ptr_can_frame_template->rx_data[2] = 0x0;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	ptr_can_frame_template->rx_data[3] = 0x0;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	ptr_can_frame_template->rx_data[4] = 0x0;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	ptr_can_frame_template->rx_data[5] = 0x0;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	ptr_can_frame_template->rx_data[6] = 0x0;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	ptr_can_frame_template->rx_data[7] = 0x0;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <CanSendExtendedIdMessage>:

void CanSendExtendedIdMessage(CAN_HandleTypeDef chosen_network,
		CanDataFrameInit *ptr_can_frame_template, uint32_t FrameId, uint8_t DLC,
		uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3,
		uint8_t byte4, uint8_t byte5, uint8_t byte6, uint8_t byte7)
{
 8000d44:	b084      	sub	sp, #16
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	f107 0c08 	add.w	ip, r7, #8
 8000d4e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ptr_can_frame_template->tx_header.ExtId = FrameId;
 8000d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d56:	60da      	str	r2, [r3, #12]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 8000d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_EXT;
 8000d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d60:	2204      	movs	r2, #4
 8000d62:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = DLC;
 8000d64:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6a:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 8000d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6e:	2200      	movs	r2, #0
 8000d70:	771a      	strb	r2, [r3, #28]
	ptr_can_frame_template->tx_data[0] = byte0;
 8000d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d74:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000d78:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = byte1;
 8000d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d7c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000d80:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = byte2;
 8000d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d84:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000d88:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = byte3;
 8000d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8000d90:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = byte4;
 8000d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d94:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000d98:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = byte5;
 8000d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000da0:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = byte6;
 8000da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da4:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8000da8:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = byte7;
 8000daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dac:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8000db0:	71da      	strb	r2, [r3, #7]

	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db4:	f103 0108 	add.w	r1, r3, #8
		&ptr_can_frame_template->tx_header, ptr_can_frame_template->tx_data,
 8000db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <CanSendExtendedIdMessage+0xa8>)
 8000dbc:	f107 0008 	add.w	r0, r7, #8
 8000dc0:	f001 fd26 	bl	8002810 <HAL_CAN_AddTxMessage>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <CanSendExtendedIdMessage+0x8a>
		&can_tx_mailbox) != HAL_OK) {
	Error_Handler();
 8000dca:	f000 ffe3 	bl	8001d94 <Error_Handler>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&chosen_network) != 3) {
 8000dce:	bf00      	nop
 8000dd0:	f107 0008 	add.w	r0, r7, #8
 8000dd4:	f001 fdf7 	bl	80029c6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d1f8      	bne.n	8000dd0 <CanSendExtendedIdMessage+0x8c>
	}
}
 8000dde:	bf00      	nop
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000de8:	b004      	add	sp, #16
 8000dea:	4770      	bx	lr
 8000dec:	20000220 	.word	0x20000220

08000df0 <testMath>:

/*My math mini library BEGIN*/
void testMath(int to_test)
{
 8000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df2:	b095      	sub	sp, #84	; 0x54
 8000df4:	af12      	add	r7, sp, #72	; 0x48
 8000df6:	6078      	str	r0, [r7, #4]
	if(to_test == 3000){
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d123      	bne.n	8000e4a <testMath+0x5a>
		CanSendPdo(hcan1, 0x69, 2, &can_frame_template, 6, 9, 0, 0, 0, 0, 0, 0);
 8000e02:	4e14      	ldr	r6, [pc, #80]	; (8000e54 <testMath+0x64>)
 8000e04:	2300      	movs	r3, #0
 8000e06:	9310      	str	r3, [sp, #64]	; 0x40
 8000e08:	2300      	movs	r3, #0
 8000e0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	930e      	str	r3, [sp, #56]	; 0x38
 8000e10:	2300      	movs	r3, #0
 8000e12:	930d      	str	r3, [sp, #52]	; 0x34
 8000e14:	2300      	movs	r3, #0
 8000e16:	930c      	str	r3, [sp, #48]	; 0x30
 8000e18:	2300      	movs	r3, #0
 8000e1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8000e1c:	2309      	movs	r3, #9
 8000e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8000e20:	2306      	movs	r3, #6
 8000e22:	9309      	str	r3, [sp, #36]	; 0x24
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <testMath+0x68>)
 8000e26:	9308      	str	r3, [sp, #32]
 8000e28:	2302      	movs	r3, #2
 8000e2a:	9307      	str	r3, [sp, #28]
 8000e2c:	2369      	movs	r3, #105	; 0x69
 8000e2e:	9306      	str	r3, [sp, #24]
 8000e30:	466d      	mov	r5, sp
 8000e32:	f106 0410 	add.w	r4, r6, #16
 8000e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e42:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000e46:	f7ff fd8b 	bl	8000960 <CanSendPdo>
	}
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000440 	.word	0x20000440
 8000e58:	20000278 	.word	0x20000278

08000e5c <unParse2Bytes>:

int unParse2Bytes(uint8_t lowerByte, uint8_t higherByte)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	460a      	mov	r2, r1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	71bb      	strb	r3, [r7, #6]
	int cas = ((int)lowerByte + (int)higherByte * byteMaxValue);
 8000e6c:	79fa      	ldrb	r2, [r7, #7]
 8000e6e:	79bb      	ldrb	r3, [r7, #6]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	4413      	add	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
	return cas;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <InitCharger>:
//	}
//		charging = canFrame->rx_header.ExtId == 0x18FF50E5;
//}

// Charging Section
void InitCharger(uint16_t charging_voltage, uint16_t charging_current){
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	460a      	mov	r2, r1
 8000e8e:	80fb      	strh	r3, [r7, #6]
 8000e90:	4613      	mov	r3, r2
 8000e92:	80bb      	strh	r3, [r7, #4]
	tc_charger.max_voltage = charging_voltage;
 8000e94:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <InitCharger+0x5c>)
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	80d3      	strh	r3, [r2, #6]
	tc_charger.max_current = charging_current;
 8000e9a:	4a11      	ldr	r2, [pc, #68]	; (8000ee0 <InitCharger+0x5c>)
 8000e9c:	88bb      	ldrh	r3, [r7, #4]
 8000e9e:	8093      	strh	r3, [r2, #4]

	tc_charger.voltage_higher_byte = (uint8_t)(charging_voltage >> 8);
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <InitCharger+0x5c>)
 8000eaa:	701a      	strb	r2, [r3, #0]
	tc_charger.voltage_lower_byte = (uint8_t)(charging_voltage & 0xFF);
 8000eac:	88fb      	ldrh	r3, [r7, #6]
 8000eae:	b2da      	uxtb	r2, r3
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <InitCharger+0x5c>)
 8000eb2:	705a      	strb	r2, [r3, #1]

	tc_charger.current_higher_byte = (uint8_t)(charging_current >> 8);
 8000eb4:	88bb      	ldrh	r3, [r7, #4]
 8000eb6:	0a1b      	lsrs	r3, r3, #8
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <InitCharger+0x5c>)
 8000ebe:	709a      	strb	r2, [r3, #2]
	tc_charger.current_lower_byte = (uint8_t)(charging_current & 0xFF);
 8000ec0:	88bb      	ldrh	r3, [r7, #4]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <InitCharger+0x5c>)
 8000ec6:	70da      	strb	r2, [r3, #3]

	tc_charger.can_charger_id = 0x1806E5F4; // Setting TC id for charging instruction via CAN
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <InitCharger+0x5c>)
 8000eca:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <InitCharger+0x60>)
 8000ecc:	609a      	str	r2, [r3, #8]
	tc_charger.can_receiving_id = 0x18FF50E5; // Setting TC id for receiving information via CAN
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <InitCharger+0x5c>)
 8000ed0:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <InitCharger+0x64>)
 8000ed2:	60da      	str	r2, [r3, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	20000468 	.word	0x20000468
 8000ee4:	1806e5f4 	.word	0x1806e5f4
 8000ee8:	18ff50e5 	.word	0x18ff50e5

08000eec <ChargingStateModule>:

void ChargingStateModule(){
 8000eec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eee:	b093      	sub	sp, #76	; 0x4c
 8000ef0:	af12      	add	r7, sp, #72	; 0x48
	if (charging == true && error == false)
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <ChargingStateModule+0xf0>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d050      	beq.n	8000f9c <ChargingStateModule+0xb0>
 8000efa:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <ChargingStateModule+0xf4>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	f083 0301 	eor.w	r3, r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d049      	beq.n	8000f9c <ChargingStateModule+0xb0>
	{
		UsbTransferDataByte(0x1C, 0x01, 0, 0, 0, 0, 0, 0, 0);
 8000f08:	2300      	movs	r3, #0
 8000f0a:	9304      	str	r3, [sp, #16]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9303      	str	r3, [sp, #12]
 8000f10:	2300      	movs	r3, #0
 8000f12:	9302      	str	r3, [sp, #8]
 8000f14:	2300      	movs	r3, #0
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	9300      	str	r3, [sp, #0]
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2101      	movs	r1, #1
 8000f22:	201c      	movs	r0, #28
 8000f24:	f007 fcb4 	bl	8008890 <UsbTransferDataByte>
		HAL_Delay(1);
 8000f28:	2001      	movs	r0, #1
 8000f2a:	f001 fa2d 	bl	8002388 <HAL_Delay>
		CanSendExtendedIdMessage(hcan1, &can_frame_template, tc_charger.can_charger_id, 8,
 8000f2e:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <ChargingStateModule+0xf8>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	4a2c      	ldr	r2, [pc, #176]	; (8000fe4 <ChargingStateModule+0xf8>)
 8000f34:	7812      	ldrb	r2, [r2, #0]
 8000f36:	492b      	ldr	r1, [pc, #172]	; (8000fe4 <ChargingStateModule+0xf8>)
 8000f38:	7849      	ldrb	r1, [r1, #1]
 8000f3a:	482a      	ldr	r0, [pc, #168]	; (8000fe4 <ChargingStateModule+0xf8>)
 8000f3c:	7880      	ldrb	r0, [r0, #2]
 8000f3e:	4c29      	ldr	r4, [pc, #164]	; (8000fe4 <ChargingStateModule+0xf8>)
 8000f40:	78e4      	ldrb	r4, [r4, #3]
 8000f42:	4e29      	ldr	r6, [pc, #164]	; (8000fe8 <ChargingStateModule+0xfc>)
 8000f44:	2500      	movs	r5, #0
 8000f46:	9510      	str	r5, [sp, #64]	; 0x40
 8000f48:	2500      	movs	r5, #0
 8000f4a:	950f      	str	r5, [sp, #60]	; 0x3c
 8000f4c:	2500      	movs	r5, #0
 8000f4e:	950e      	str	r5, [sp, #56]	; 0x38
 8000f50:	2500      	movs	r5, #0
 8000f52:	950d      	str	r5, [sp, #52]	; 0x34
 8000f54:	940c      	str	r4, [sp, #48]	; 0x30
 8000f56:	900b      	str	r0, [sp, #44]	; 0x2c
 8000f58:	910a      	str	r1, [sp, #40]	; 0x28
 8000f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	9208      	str	r2, [sp, #32]
 8000f60:	9307      	str	r3, [sp, #28]
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <ChargingStateModule+0x100>)
 8000f64:	9306      	str	r3, [sp, #24]
 8000f66:	466d      	mov	r5, sp
 8000f68:	f106 0410 	add.w	r4, r6, #16
 8000f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f74:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f78:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f7c:	f7ff fee2 	bl	8000d44 <CanSendExtendedIdMessage>
				tc_charger.voltage_higher_byte, tc_charger.voltage_lower_byte,
				tc_charger.current_higher_byte, tc_charger.current_lower_byte, 0, 0, 0, 0);
				// 0x02, 0x6C, 0x00, 0xB4

		CanClearRxDataFrame(&can_rx_frame_template);
 8000f80:	481b      	ldr	r0, [pc, #108]	; (8000ff0 <ChargingStateModule+0x104>)
 8000f82:	f7ff fea6 	bl	8000cd2 <CanClearRxDataFrame>
		HAL_Delay(1000);
 8000f86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f8a:	f001 f9fd 	bl	8002388 <HAL_Delay>
		if (error == true)
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <ChargingStateModule+0xf4>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d01d      	beq.n	8000fd2 <ChargingStateModule+0xe6>
		{
			StopCanCommunication();
 8000f96:	f7ff fd8f 	bl	8000ab8 <StopCanCommunication>
		if (error == true)
 8000f9a:	e01a      	b.n	8000fd2 <ChargingStateModule+0xe6>
		}
	}
	else if(charging == false)
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <ChargingStateModule+0xf0>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	f083 0301 	eor.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d013      	beq.n	8000fd2 <ChargingStateModule+0xe6>
	{
		UsbTransferDataByte(0x1C, 0x0, 0, 0, 0, 0, 0, 0, 0);
 8000faa:	2300      	movs	r3, #0
 8000fac:	9304      	str	r3, [sp, #16]
 8000fae:	2300      	movs	r3, #0
 8000fb0:	9303      	str	r3, [sp, #12]
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	9302      	str	r3, [sp, #8]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	2300      	movs	r3, #0
 8000fbc:	9300      	str	r3, [sp, #0]
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	201c      	movs	r0, #28
 8000fc6:	f007 fc63 	bl	8008890 <UsbTransferDataByte>
		HAL_Delay(1);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f001 f9dc 	bl	8002388 <HAL_Delay>
	}
}
 8000fd0:	e7ff      	b.n	8000fd2 <ChargingStateModule+0xe6>
 8000fd2:	bf00      	nop
 8000fd4:	3704      	adds	r7, #4
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200002f4 	.word	0x200002f4
 8000fe0:	20000404 	.word	0x20000404
 8000fe4:	20000468 	.word	0x20000468
 8000fe8:	20000440 	.word	0x20000440
 8000fec:	20000278 	.word	0x20000278
 8000ff0:	200003c0 	.word	0x200003c0

08000ff4 <ReverseManagement>:


void ReverseManagement(CanDataFrameInit *can_frame)
{
 8000ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ff6:	b095      	sub	sp, #84	; 0x54
 8000ff8:	af12      	add	r7, sp, #72	; 0x48
 8000ffa:	6078      	str	r0, [r7, #4]
	if(can_frame->rx_header.StdId == 0x90)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	2b90      	cmp	r3, #144	; 0x90
 8001002:	d15d      	bne.n	80010c0 <ReverseManagement+0xcc>
	{
		if(can_frame->rx_data[0] == 0x4)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800100a:	2b04      	cmp	r3, #4
 800100c:	d125      	bne.n	800105a <ReverseManagement+0x66>
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 800100e:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <ReverseManagement+0xd4>)
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	4e2e      	ldr	r6, [pc, #184]	; (80010cc <ReverseManagement+0xd8>)
 8001014:	2200      	movs	r2, #0
 8001016:	9210      	str	r2, [sp, #64]	; 0x40
 8001018:	2200      	movs	r2, #0
 800101a:	920f      	str	r2, [sp, #60]	; 0x3c
 800101c:	2200      	movs	r2, #0
 800101e:	920e      	str	r2, [sp, #56]	; 0x38
 8001020:	2200      	movs	r2, #0
 8001022:	920d      	str	r2, [sp, #52]	; 0x34
 8001024:	2200      	movs	r2, #0
 8001026:	920c      	str	r2, [sp, #48]	; 0x30
 8001028:	2201      	movs	r2, #1
 800102a:	920b      	str	r2, [sp, #44]	; 0x2c
 800102c:	2204      	movs	r2, #4
 800102e:	920a      	str	r2, [sp, #40]	; 0x28
 8001030:	2240      	movs	r2, #64	; 0x40
 8001032:	9209      	str	r2, [sp, #36]	; 0x24
 8001034:	2203      	movs	r2, #3
 8001036:	9208      	str	r2, [sp, #32]
 8001038:	4a25      	ldr	r2, [pc, #148]	; (80010d0 <ReverseManagement+0xdc>)
 800103a:	9207      	str	r2, [sp, #28]
 800103c:	9306      	str	r3, [sp, #24]
 800103e:	466d      	mov	r5, sp
 8001040:	f106 0410 	add.w	r4, r6, #16
 8001044:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001046:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001048:	e894 0003 	ldmia.w	r4, {r0, r1}
 800104c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001050:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001054:	f7ff fcda 	bl	8000a0c <CanSendSdo>
		else if(can_frame->rx_data[0] == 0x0)
		{
			error = true;
		}
	}
}
 8001058:	e032      	b.n	80010c0 <ReverseManagement+0xcc>
		else if (can_frame->rx_data[0] == 0x3)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001060:	2b03      	cmp	r3, #3
 8001062:	d125      	bne.n	80010b0 <ReverseManagement+0xbc>
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 8001064:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <ReverseManagement+0xd4>)
 8001066:	691b      	ldr	r3, [r3, #16]
 8001068:	4e18      	ldr	r6, [pc, #96]	; (80010cc <ReverseManagement+0xd8>)
 800106a:	2200      	movs	r2, #0
 800106c:	9210      	str	r2, [sp, #64]	; 0x40
 800106e:	2200      	movs	r2, #0
 8001070:	920f      	str	r2, [sp, #60]	; 0x3c
 8001072:	2200      	movs	r2, #0
 8001074:	920e      	str	r2, [sp, #56]	; 0x38
 8001076:	2200      	movs	r2, #0
 8001078:	920d      	str	r2, [sp, #52]	; 0x34
 800107a:	2200      	movs	r2, #0
 800107c:	920c      	str	r2, [sp, #48]	; 0x30
 800107e:	2200      	movs	r2, #0
 8001080:	920b      	str	r2, [sp, #44]	; 0x2c
 8001082:	2204      	movs	r2, #4
 8001084:	920a      	str	r2, [sp, #40]	; 0x28
 8001086:	2240      	movs	r2, #64	; 0x40
 8001088:	9209      	str	r2, [sp, #36]	; 0x24
 800108a:	2203      	movs	r2, #3
 800108c:	9208      	str	r2, [sp, #32]
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <ReverseManagement+0xdc>)
 8001090:	9207      	str	r2, [sp, #28]
 8001092:	9306      	str	r3, [sp, #24]
 8001094:	466d      	mov	r5, sp
 8001096:	f106 0410 	add.w	r4, r6, #16
 800109a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800109c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800109e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80010a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010aa:	f7ff fcaf 	bl	8000a0c <CanSendSdo>
}
 80010ae:	e007      	b.n	80010c0 <ReverseManagement+0xcc>
		else if(can_frame->rx_data[0] == 0x0)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <ReverseManagement+0xcc>
			error = true;
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <ReverseManagement+0xe0>)
 80010bc:	2201      	movs	r2, #1
 80010be:	701a      	strb	r2, [r3, #0]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010c8:	200002bc 	.word	0x200002bc
 80010cc:	200002f8 	.word	0x200002f8
 80010d0:	20000278 	.word	0x20000278
 80010d4:	20000404 	.word	0x20000404

080010d8 <BMSWarningHandler>:

void BMSWarningHandler(CanDataFrameInit *can_frame)
{
 80010d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010da:	b095      	sub	sp, #84	; 0x54
 80010dc:	af12      	add	r7, sp, #72	; 0x48
 80010de:	6078      	str	r0, [r7, #4]
	if(can_frame->rx_header.StdId == 0x86)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	2b86      	cmp	r3, #134	; 0x86
 80010e6:	d144      	bne.n	8001172 <BMSWarningHandler+0x9a>
	{
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
				0x01 & can_frame->rx_data[0],
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	b2db      	uxtb	r3, r3
				(0x02 & can_frame->rx_data[0]) >> 1,
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 80010fa:	0852      	lsrs	r2, r2, #1
 80010fc:	b2d2      	uxtb	r2, r2
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
 80010fe:	f002 0201 	and.w	r2, r2, #1
 8001102:	b2d2      	uxtb	r2, r2
				(0x04 & can_frame->rx_data[0]) >> 2,
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 800110a:	0889      	lsrs	r1, r1, #2
 800110c:	b2c9      	uxtb	r1, r1
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
 800110e:	f001 0101 	and.w	r1, r1, #1
 8001112:	b2c9      	uxtb	r1, r1
				(0x08 & can_frame->rx_data[0]) >> 3,
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 800111a:	08c0      	lsrs	r0, r0, #3
 800111c:	b2c0      	uxtb	r0, r0
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
 800111e:	f000 0001 	and.w	r0, r0, #1
 8001122:	b2c0      	uxtb	r0, r0
				(0x10 & can_frame->rx_data[0]) >> 4,
 8001124:	687c      	ldr	r4, [r7, #4]
 8001126:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 800112a:	0924      	lsrs	r4, r4, #4
 800112c:	b2e4      	uxtb	r4, r4
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
 800112e:	f004 0401 	and.w	r4, r4, #1
 8001132:	b2e4      	uxtb	r4, r4
 8001134:	4e11      	ldr	r6, [pc, #68]	; (800117c <BMSWarningHandler+0xa4>)
 8001136:	2500      	movs	r5, #0
 8001138:	9510      	str	r5, [sp, #64]	; 0x40
 800113a:	2500      	movs	r5, #0
 800113c:	950f      	str	r5, [sp, #60]	; 0x3c
 800113e:	2500      	movs	r5, #0
 8001140:	950e      	str	r5, [sp, #56]	; 0x38
 8001142:	940d      	str	r4, [sp, #52]	; 0x34
 8001144:	900c      	str	r0, [sp, #48]	; 0x30
 8001146:	910b      	str	r1, [sp, #44]	; 0x2c
 8001148:	920a      	str	r2, [sp, #40]	; 0x28
 800114a:	9309      	str	r3, [sp, #36]	; 0x24
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <BMSWarningHandler+0xa8>)
 800114e:	9308      	str	r3, [sp, #32]
 8001150:	2308      	movs	r3, #8
 8001152:	9307      	str	r3, [sp, #28]
 8001154:	2387      	movs	r3, #135	; 0x87
 8001156:	9306      	str	r3, [sp, #24]
 8001158:	466d      	mov	r5, sp
 800115a:	f106 0410 	add.w	r4, r6, #16
 800115e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001162:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001166:	e885 0003 	stmia.w	r5, {r0, r1}
 800116a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800116e:	f7ff fbf7 	bl	8000960 <CanSendPdo>
				0, 0, 0);
	}
}
 8001172:	bf00      	nop
 8001174:	370c      	adds	r7, #12
 8001176:	46bd      	mov	sp, r7
 8001178:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800117a:	bf00      	nop
 800117c:	20000440 	.word	0x20000440
 8001180:	20000278 	.word	0x20000278

08001184 <ActUponCurrentAndVoltage>:


/*CHARGING ACTIONS BEGIN*/
void ActUponCurrentAndVoltage(CanDataFrameInit *can_frame, int maxVoltage, int maxCurrent)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
	int voltage = unParse2Bytes(can_frame->rx_data[1], can_frame->rx_data[0]);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800119c:	4619      	mov	r1, r3
 800119e:	4610      	mov	r0, r2
 80011a0:	f7ff fe5c 	bl	8000e5c <unParse2Bytes>
 80011a4:	6178      	str	r0, [r7, #20]
	int current = unParse2Bytes(can_frame->rx_data[3], can_frame->rx_data[2]);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80011b2:	4619      	mov	r1, r3
 80011b4:	4610      	mov	r0, r2
 80011b6:	f7ff fe51 	bl	8000e5c <unParse2Bytes>
 80011ba:	6138      	str	r0, [r7, #16]
	testMath(voltage);
 80011bc:	6978      	ldr	r0, [r7, #20]
 80011be:	f7ff fe17 	bl	8000df0 <testMath>
	error = ( (voltage>maxVoltage) || (current>maxCurrent) );
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	429a      	cmp	r2, r3
 80011c8:	dc03      	bgt.n	80011d2 <ActUponCurrentAndVoltage+0x4e>
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	dd01      	ble.n	80011d6 <ActUponCurrentAndVoltage+0x52>
 80011d2:	2301      	movs	r3, #1
 80011d4:	e000      	b.n	80011d8 <ActUponCurrentAndVoltage+0x54>
 80011d6:	2300      	movs	r3, #0
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4b03      	ldr	r3, [pc, #12]	; (80011ec <ActUponCurrentAndVoltage+0x68>)
 80011e0:	701a      	strb	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000404 	.word	0x20000404

080011f0 <CatchChargingErrorOccuring>:

void CatchChargingErrorOccuring(CanDataFrameInit *can_frame)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	error = ( can_frame->rx_data[4] != 0 );
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011fe:	2b00      	cmp	r3, #0
 8001200:	bf14      	ite	ne
 8001202:	2301      	movne	r3, #1
 8001204:	2300      	moveq	r3, #0
 8001206:	b2da      	uxtb	r2, r3
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <CatchChargingErrorOccuring+0x28>)
 800120a:	701a      	strb	r2, [r3, #0]
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	20000404 	.word	0x20000404

0800121c <CatchErrorOccuring>:
/*CHARGING ACTIONS END*/

/*DRIVING ACTIONS BEGIN*/
void CatchErrorOccuring(CanDataFrameInit *can_frame)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
	/* BMS Errors handling */
	if( (can_frame->rx_header.StdId == 0x85) )
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	2b85      	cmp	r3, #133	; 0x85
 800122a:	d104      	bne.n	8001236 <CatchErrorOccuring+0x1a>
	{
		error = true;
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <CatchErrorOccuring+0x24>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]
		StopCanCommunication();
 8001232:	f7ff fc41 	bl	8000ab8 <StopCanCommunication>
	}
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000404 	.word	0x20000404

08001244 <WarningHandler>:

void WarningHandler(CanDataFrameInit *can_frame)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
	if(can_frame->rx_header.StdId == 0x55)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	2b55      	cmp	r3, #85	; 0x55
 8001252:	d109      	bne.n	8001268 <WarningHandler+0x24>
	{
		SendErrorFrame(can_frame->rx_data[1], can_frame->rx_data[2]);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001260:	4619      	mov	r1, r3
 8001262:	4610      	mov	r0, r2
 8001264:	f000 f804 	bl	8001270 <SendErrorFrame>
	}
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <SendErrorFrame>:

void SendErrorFrame(uint8_t highCondition, uint8_t lowCondition)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b088      	sub	sp, #32
 8001274:	af06      	add	r7, sp, #24
 8001276:	4603      	mov	r3, r0
 8001278:	460a      	mov	r2, r1
 800127a:	71fb      	strb	r3, [r7, #7]
 800127c:	4613      	mov	r3, r2
 800127e:	71bb      	strb	r3, [r7, #6]
	if( (highCondition >= 0x01) && (lowCondition>=0xD0) )
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d013      	beq.n	80012ae <SendErrorFrame+0x3e>
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	2bcf      	cmp	r3, #207	; 0xcf
 800128a:	d910      	bls.n	80012ae <SendErrorFrame+0x3e>
	{
		UsbTransferDataByte(0x56, 0x01, 0x0, 0, 0, 0, 0, 0, 0);
 800128c:	2300      	movs	r3, #0
 800128e:	9304      	str	r3, [sp, #16]
 8001290:	2300      	movs	r3, #0
 8001292:	9303      	str	r3, [sp, #12]
 8001294:	2300      	movs	r3, #0
 8001296:	9302      	str	r3, [sp, #8]
 8001298:	2300      	movs	r3, #0
 800129a:	9301      	str	r3, [sp, #4]
 800129c:	2300      	movs	r3, #0
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	2300      	movs	r3, #0
 80012a2:	2200      	movs	r2, #0
 80012a4:	2101      	movs	r1, #1
 80012a6:	2056      	movs	r0, #86	; 0x56
 80012a8:	f007 faf2 	bl	8008890 <UsbTransferDataByte>
 80012ac:	e010      	b.n	80012d0 <SendErrorFrame+0x60>
	}
	else
	{
		UsbTransferDataByte(0x56, 0x0, 0x0, 0, 0, 0, 0, 0, 0);
 80012ae:	2300      	movs	r3, #0
 80012b0:	9304      	str	r3, [sp, #16]
 80012b2:	2300      	movs	r3, #0
 80012b4:	9303      	str	r3, [sp, #12]
 80012b6:	2300      	movs	r3, #0
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	2300      	movs	r3, #0
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	2300      	movs	r3, #0
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	2300      	movs	r3, #0
 80012c4:	2200      	movs	r2, #0
 80012c6:	2100      	movs	r1, #0
 80012c8:	2056      	movs	r0, #86	; 0x56
 80012ca:	f007 fae1 	bl	8008890 <UsbTransferDataByte>
	}
}
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}

080012d8 <setCharging>:

/*DRIVING ACTIONS END*/
/*CAN COMMUNICATION SECTION END*/

/* Data assigning */
void setCharging(bool chargingSetter){
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
	charging = chargingSetter;
 80012e2:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <setCharging+0x1c>)
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	7013      	strb	r3, [r2, #0]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	200002f4 	.word	0x200002f4

080012f8 <setError>:

void setError(bool errorSetter){
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
	error = errorSetter;
 8001302:	4a04      	ldr	r2, [pc, #16]	; (8001314 <setError+0x1c>)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	7013      	strb	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	20000404 	.word	0x20000404

08001318 <setHighVoltage>:

void setHighVoltage(bool setter){
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
	highVoltageActive = setter;
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <setHighVoltage+0x1c>)
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	7013      	strb	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	20000478 	.word	0x20000478

08001338 <CanopenObjectDictInit>:
  ******************************************************************************
  */

#include <canopen_object_dict.h>

void CanopenObjectDictInit() {
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
	dashboard.node_id = 0x70;
 800133c:	4b47      	ldr	r3, [pc, #284]	; (800145c <CanopenObjectDictInit+0x124>)
 800133e:	2270      	movs	r2, #112	; 0x70
 8001340:	701a      	strb	r2, [r3, #0]
	dashboard.sdo_download_id = 0x581;		// Channel with ecm
 8001342:	4b46      	ldr	r3, [pc, #280]	; (800145c <CanopenObjectDictInit+0x124>)
 8001344:	f240 5281 	movw	r2, #1409	; 0x581
 8001348:	60da      	str	r2, [r3, #12]
	dashboard.emcy_id = 0xF0;
 800134a:	4b44      	ldr	r3, [pc, #272]	; (800145c <CanopenObjectDictInit+0x124>)
 800134c:	22f0      	movs	r2, #240	; 0xf0
 800134e:	761a      	strb	r2, [r3, #24]

	inverter_1.node_id = 0x10;
 8001350:	4b43      	ldr	r3, [pc, #268]	; (8001460 <CanopenObjectDictInit+0x128>)
 8001352:	2210      	movs	r2, #16
 8001354:	701a      	strb	r2, [r3, #0]
	inverter_1.pdo_producer_id = 0x290;	// 0x290 - 0x296 Channel with ecm
 8001356:	4b42      	ldr	r3, [pc, #264]	; (8001460 <CanopenObjectDictInit+0x128>)
 8001358:	f44f 7224 	mov.w	r2, #656	; 0x290
 800135c:	615a      	str	r2, [r3, #20]
	inverter_1.emcy_id = 0x90;
 800135e:	4b40      	ldr	r3, [pc, #256]	; (8001460 <CanopenObjectDictInit+0x128>)
 8001360:	2290      	movs	r2, #144	; 0x90
 8001362:	761a      	strb	r2, [r3, #24]

	inverter_2.node_id = 0x15;
 8001364:	4b3f      	ldr	r3, [pc, #252]	; (8001464 <CanopenObjectDictInit+0x12c>)
 8001366:	2215      	movs	r2, #21
 8001368:	701a      	strb	r2, [r3, #0]
	inverter_2.pdo_producer_id = 0x395;	// 0x395 - 0x401 Channel with ecm
 800136a:	4b3e      	ldr	r3, [pc, #248]	; (8001464 <CanopenObjectDictInit+0x12c>)
 800136c:	f240 3295 	movw	r2, #917	; 0x395
 8001370:	615a      	str	r2, [r3, #20]
	inverter_2.emcy_id = 0x95;
 8001372:	4b3c      	ldr	r3, [pc, #240]	; (8001464 <CanopenObjectDictInit+0x12c>)
 8001374:	2295      	movs	r2, #149	; 0x95
 8001376:	761a      	strb	r2, [r3, #24]

	mppt_1.node_id = 0x33;
 8001378:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <CanopenObjectDictInit+0x130>)
 800137a:	2233      	movs	r2, #51	; 0x33
 800137c:	701a      	strb	r2, [r3, #0]
	mppt_1.sdo_upload_id = 0x633;		// Channel with ecm
 800137e:	4b3a      	ldr	r3, [pc, #232]	; (8001468 <CanopenObjectDictInit+0x130>)
 8001380:	f240 6233 	movw	r2, #1587	; 0x633
 8001384:	609a      	str	r2, [r3, #8]
	mppt_1.sdo_download_id = 0x5B3;
 8001386:	4b38      	ldr	r3, [pc, #224]	; (8001468 <CanopenObjectDictInit+0x130>)
 8001388:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800138c:	60da      	str	r2, [r3, #12]
	mppt_1.emcy_id = 0xB3;
 800138e:	4b36      	ldr	r3, [pc, #216]	; (8001468 <CanopenObjectDictInit+0x130>)
 8001390:	22b3      	movs	r2, #179	; 0xb3
 8001392:	761a      	strb	r2, [r3, #24]
	mppt_1.index = 0xAAAB;
 8001394:	4b34      	ldr	r3, [pc, #208]	; (8001468 <CanopenObjectDictInit+0x130>)
 8001396:	f64a 22ab 	movw	r2, #43691	; 0xaaab
 800139a:	805a      	strh	r2, [r3, #2]
	mppt_1.subindex_1 = 0x01;
 800139c:	4b32      	ldr	r3, [pc, #200]	; (8001468 <CanopenObjectDictInit+0x130>)
 800139e:	2201      	movs	r2, #1
 80013a0:	711a      	strb	r2, [r3, #4]
	mppt_1.subindex_2 = 0x02;
 80013a2:	4b31      	ldr	r3, [pc, #196]	; (8001468 <CanopenObjectDictInit+0x130>)
 80013a4:	2202      	movs	r2, #2
 80013a6:	715a      	strb	r2, [r3, #5]
	mppt_1.subindex_3 = 0x03;			// 0x01 - 0x03
 80013a8:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <CanopenObjectDictInit+0x130>)
 80013aa:	2203      	movs	r2, #3
 80013ac:	719a      	strb	r2, [r3, #6]

	mppt_2.node_id = 0x36;
 80013ae:	4b2f      	ldr	r3, [pc, #188]	; (800146c <CanopenObjectDictInit+0x134>)
 80013b0:	2236      	movs	r2, #54	; 0x36
 80013b2:	701a      	strb	r2, [r3, #0]
	mppt_2.sdo_upload_id = 0x636;		// Channel with ecm
 80013b4:	4b2d      	ldr	r3, [pc, #180]	; (800146c <CanopenObjectDictInit+0x134>)
 80013b6:	f240 6236 	movw	r2, #1590	; 0x636
 80013ba:	609a      	str	r2, [r3, #8]
	mppt_2.sdo_download_id = 0x5B6;
 80013bc:	4b2b      	ldr	r3, [pc, #172]	; (800146c <CanopenObjectDictInit+0x134>)
 80013be:	f240 52b6 	movw	r2, #1462	; 0x5b6
 80013c2:	60da      	str	r2, [r3, #12]
	mppt_2.emcy_id = 0xB6;
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <CanopenObjectDictInit+0x134>)
 80013c6:	22b6      	movs	r2, #182	; 0xb6
 80013c8:	761a      	strb	r2, [r3, #24]
	mppt_2.index = 0xAAAA;
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <CanopenObjectDictInit+0x134>)
 80013cc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80013d0:	805a      	strh	r2, [r3, #2]
	mppt_2.subindex_1 = 0x01;
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <CanopenObjectDictInit+0x134>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	711a      	strb	r2, [r3, #4]
	mppt_2.subindex_2 = 0x02;
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <CanopenObjectDictInit+0x134>)
 80013da:	2202      	movs	r2, #2
 80013dc:	715a      	strb	r2, [r3, #5]
	mppt_2.subindex_3 = 0x03;			// 0x01 - 0x03
 80013de:	4b23      	ldr	r3, [pc, #140]	; (800146c <CanopenObjectDictInit+0x134>)
 80013e0:	2203      	movs	r2, #3
 80013e2:	719a      	strb	r2, [r3, #6]

	mppt_3.node_id = 0x39;
 80013e4:	4b22      	ldr	r3, [pc, #136]	; (8001470 <CanopenObjectDictInit+0x138>)
 80013e6:	2239      	movs	r2, #57	; 0x39
 80013e8:	701a      	strb	r2, [r3, #0]
	mppt_3.sdo_upload_id = 0x639;		// Channel with ecm
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <CanopenObjectDictInit+0x138>)
 80013ec:	f240 6239 	movw	r2, #1593	; 0x639
 80013f0:	609a      	str	r2, [r3, #8]
	mppt_3.sdo_download_id = 0x5B9;
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <CanopenObjectDictInit+0x138>)
 80013f4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80013f8:	60da      	str	r2, [r3, #12]
	mppt_3.emcy_id = 0xB9;
 80013fa:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <CanopenObjectDictInit+0x138>)
 80013fc:	22b9      	movs	r2, #185	; 0xb9
 80013fe:	761a      	strb	r2, [r3, #24]
	mppt_3.index = 0xAAAA;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <CanopenObjectDictInit+0x138>)
 8001402:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001406:	805a      	strh	r2, [r3, #2]
	mppt_3.subindex_1 = 0x01;
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <CanopenObjectDictInit+0x138>)
 800140a:	2201      	movs	r2, #1
 800140c:	711a      	strb	r2, [r3, #4]
	mppt_3.subindex_2 = 0x02;
 800140e:	4b18      	ldr	r3, [pc, #96]	; (8001470 <CanopenObjectDictInit+0x138>)
 8001410:	2202      	movs	r2, #2
 8001412:	715a      	strb	r2, [r3, #5]
	mppt_3.subindex_3 = 0x03; 			// 0x01 - 0x03
 8001414:	4b16      	ldr	r3, [pc, #88]	; (8001470 <CanopenObjectDictInit+0x138>)
 8001416:	2203      	movs	r2, #3
 8001418:	719a      	strb	r2, [r3, #6]

	ecm.node_id = 0x01;
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <CanopenObjectDictInit+0x13c>)
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
	ecm.sdo_upload_id = 0x581;
 8001420:	4b14      	ldr	r3, [pc, #80]	; (8001474 <CanopenObjectDictInit+0x13c>)
 8001422:	f240 5281 	movw	r2, #1409	; 0x581
 8001426:	609a      	str	r2, [r3, #8]
	ecm.emcy_id = 0x81;
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <CanopenObjectDictInit+0x13c>)
 800142a:	2281      	movs	r2, #129	; 0x81
 800142c:	761a      	strb	r2, [r3, #24]

	bms.node_id = 0x05;
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <CanopenObjectDictInit+0x140>)
 8001430:	2205      	movs	r2, #5
 8001432:	701a      	strb	r2, [r3, #0]
	bms.pdo_producer_id = 0x185;			// 0x185 - 0x196
 8001434:	4b10      	ldr	r3, [pc, #64]	; (8001478 <CanopenObjectDictInit+0x140>)
 8001436:	f240 1285 	movw	r2, #389	; 0x185
 800143a:	615a      	str	r2, [r3, #20]
	bms.emcy_id = 0x85;
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <CanopenObjectDictInit+0x140>)
 800143e:	2285      	movs	r2, #133	; 0x85
 8001440:	761a      	strb	r2, [r3, #24]

	lights_controller.node_id = 0x50;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <CanopenObjectDictInit+0x144>)
 8001444:	2250      	movs	r2, #80	; 0x50
 8001446:	701a      	strb	r2, [r3, #0]
	lights_controller.pdo_consumer_id = 0x581;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <CanopenObjectDictInit+0x144>)
 800144a:	f240 5281 	movw	r2, #1409	; 0x581
 800144e:	611a      	str	r2, [r3, #16]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	2000033c 	.word	0x2000033c
 8001460:	20000358 	.word	0x20000358
 8001464:	20000424 	.word	0x20000424
 8001468:	2000025c 	.word	0x2000025c
 800146c:	20000408 	.word	0x20000408
 8001470:	20000320 	.word	0x20000320
 8001474:	20000224 	.word	0x20000224
 8001478:	200002d8 	.word	0x200002d8
 800147c:	200002bc 	.word	0x200002bc

08001480 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	f107 031c 	add.w	r3, r7, #28
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
 800148e:	605a      	str	r2, [r3, #4]
 8001490:	609a      	str	r2, [r3, #8]
 8001492:	60da      	str	r2, [r3, #12]
 8001494:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	4b79      	ldr	r3, [pc, #484]	; (8001680 <MX_GPIO_Init+0x200>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a78      	ldr	r2, [pc, #480]	; (8001680 <MX_GPIO_Init+0x200>)
 80014a0:	f043 0310 	orr.w	r3, r3, #16
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b76      	ldr	r3, [pc, #472]	; (8001680 <MX_GPIO_Init+0x200>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
 80014b6:	4b72      	ldr	r3, [pc, #456]	; (8001680 <MX_GPIO_Init+0x200>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a71      	ldr	r2, [pc, #452]	; (8001680 <MX_GPIO_Init+0x200>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b6f      	ldr	r3, [pc, #444]	; (8001680 <MX_GPIO_Init+0x200>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b6b      	ldr	r3, [pc, #428]	; (8001680 <MX_GPIO_Init+0x200>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a6a      	ldr	r2, [pc, #424]	; (8001680 <MX_GPIO_Init+0x200>)
 80014d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b68      	ldr	r3, [pc, #416]	; (8001680 <MX_GPIO_Init+0x200>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b64      	ldr	r3, [pc, #400]	; (8001680 <MX_GPIO_Init+0x200>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a63      	ldr	r2, [pc, #396]	; (8001680 <MX_GPIO_Init+0x200>)
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b61      	ldr	r3, [pc, #388]	; (8001680 <MX_GPIO_Init+0x200>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b5d      	ldr	r3, [pc, #372]	; (8001680 <MX_GPIO_Init+0x200>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a5c      	ldr	r2, [pc, #368]	; (8001680 <MX_GPIO_Init+0x200>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b5a      	ldr	r3, [pc, #360]	; (8001680 <MX_GPIO_Init+0x200>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b56      	ldr	r3, [pc, #344]	; (8001680 <MX_GPIO_Init+0x200>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a55      	ldr	r2, [pc, #340]	; (8001680 <MX_GPIO_Init+0x200>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b53      	ldr	r3, [pc, #332]	; (8001680 <MX_GPIO_Init+0x200>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_D4_Pin|LED_D5_Pin|LED_D6_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001544:	484f      	ldr	r0, [pc, #316]	; (8001684 <MX_GPIO_Init+0x204>)
 8001546:	f002 f8ab 	bl	80036a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PWM1_BLACK_UPS_RELAY_Pin|PWM2_WHITE_MAIN_RELAY_Pin|PWM3_BROWN_CHARGER_RELAY_Pin|PWM4_BLUE_ENABLE_RELAYS_Pin, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001550:	484d      	ldr	r0, [pc, #308]	; (8001688 <MX_GPIO_Init+0x208>)
 8001552:	f002 f8a5 	bl	80036a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN1_RS_GPIO_Port, CAN1_RS_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800155c:	484b      	ldr	r0, [pc, #300]	; (800168c <MX_GPIO_Init+0x20c>)
 800155e:	f002 f89f 	bl	80036a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN2_RS_GPIO_Port, CAN2_RS_Pin, GPIO_PIN_RESET);
 8001562:	2200      	movs	r2, #0
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	484a      	ldr	r0, [pc, #296]	; (8001690 <MX_GPIO_Init+0x210>)
 8001568:	f002 f89a 	bl	80036a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = OPTO_INPUT2_Pin|OPTO_INPUT3_Pin|OPTO_INPUT4_Pin|OPTO_INPUT5_Pin
 800156c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8001570:	61fb      	str	r3, [r7, #28]
                          |OPTO_INPUT6_Pin|OPTO_INPUT7_Pin|OPTO_INPUT8_Pin|OPTO_INPUT9_Pin
                          |OPTO_INPUT10_Pin|OPTO_INPUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001572:	4b48      	ldr	r3, [pc, #288]	; (8001694 <MX_GPIO_Init+0x214>)
 8001574:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4619      	mov	r1, r3
 8001580:	4845      	ldr	r0, [pc, #276]	; (8001698 <MX_GPIO_Init+0x218>)
 8001582:	f001 fed9 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_D4_Pin|LED_D5_Pin|LED_D6_Pin;
 8001586:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800158a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800158c:	2301      	movs	r3, #1
 800158e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001598:	f107 031c 	add.w	r3, r7, #28
 800159c:	4619      	mov	r1, r3
 800159e:	4839      	ldr	r0, [pc, #228]	; (8001684 <MX_GPIO_Init+0x204>)
 80015a0:	f001 feca 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = OPTO_INPUT11_Pin|OPTO_INPUT12_Pin|OPTO_INPUT13_Pin|OPTO_INPUT14_Pin
 80015a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015a8:	61fb      	str	r3, [r7, #28]
                          |OPTO_INPUT15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015aa:	4b3c      	ldr	r3, [pc, #240]	; (800169c <MX_GPIO_Init+0x21c>)
 80015ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b2:	f107 031c 	add.w	r3, r7, #28
 80015b6:	4619      	mov	r1, r3
 80015b8:	4837      	ldr	r0, [pc, #220]	; (8001698 <MX_GPIO_Init+0x218>)
 80015ba:	f001 febd 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PWM1_BLACK_UPS_RELAY_Pin|PWM2_WHITE_MAIN_RELAY_Pin|PWM3_BROWN_CHARGER_RELAY_Pin|PWM4_BLUE_ENABLE_RELAYS_Pin;
 80015be:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80015c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4619      	mov	r1, r3
 80015d6:	482c      	ldr	r0, [pc, #176]	; (8001688 <MX_GPIO_Init+0x208>)
 80015d8:	f001 feae 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN1_RS_Pin;
 80015dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e2:	2301      	movs	r3, #1
 80015e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015e6:	2302      	movs	r3, #2
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAN1_RS_GPIO_Port, &GPIO_InitStruct);
 80015ee:	f107 031c 	add.w	r3, r7, #28
 80015f2:	4619      	mov	r1, r3
 80015f4:	4825      	ldr	r0, [pc, #148]	; (800168c <MX_GPIO_Init+0x20c>)
 80015f6:	f001 fe9f 	bl	8003338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN2_RS_Pin;
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fe:	2301      	movs	r3, #1
 8001600:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001602:	2302      	movs	r3, #2
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAN2_RS_GPIO_Port, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	481f      	ldr	r0, [pc, #124]	; (8001690 <MX_GPIO_Init+0x210>)
 8001612:	f001 fe91 	bl	8003338 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2102      	movs	r1, #2
 800161a:	2007      	movs	r0, #7
 800161c:	f001 fe55 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001620:	2007      	movs	r0, #7
 8001622:	f001 fe6e 	bl	8003302 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2102      	movs	r1, #2
 800162a:	2008      	movs	r0, #8
 800162c:	f001 fe4d 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001630:	2008      	movs	r0, #8
 8001632:	f001 fe66 	bl	8003302 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2102      	movs	r1, #2
 800163a:	2009      	movs	r0, #9
 800163c:	f001 fe45 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001640:	2009      	movs	r0, #9
 8001642:	f001 fe5e 	bl	8003302 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2102      	movs	r1, #2
 800164a:	200a      	movs	r0, #10
 800164c:	f001 fe3d 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001650:	200a      	movs	r0, #10
 8001652:	f001 fe56 	bl	8003302 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2102      	movs	r1, #2
 800165a:	2017      	movs	r0, #23
 800165c:	f001 fe35 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001660:	2017      	movs	r0, #23
 8001662:	f001 fe4e 	bl	8003302 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2102      	movs	r1, #2
 800166a:	2028      	movs	r0, #40	; 0x28
 800166c:	f001 fe2d 	bl	80032ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001670:	2028      	movs	r0, #40	; 0x28
 8001672:	f001 fe46 	bl	8003302 <HAL_NVIC_EnableIRQ>

}
 8001676:	bf00      	nop
 8001678:	3730      	adds	r7, #48	; 0x30
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40023800 	.word	0x40023800
 8001684:	40020800 	.word	0x40020800
 8001688:	40020c00 	.word	0x40020c00
 800168c:	40020000 	.word	0x40020000
 8001690:	40020400 	.word	0x40020400
 8001694:	10310000 	.word	0x10310000
 8001698:	40021000 	.word	0x40021000
 800169c:	10110000 	.word	0x10110000

080016a0 <HAL_GPIO_EXTI_Callback>:

}

/*Lights management*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a2:	b095      	sub	sp, #84	; 0x54
 80016a4:	af12      	add	r7, sp, #72	; 0x48
 80016a6:	4603      	mov	r3, r0
 80016a8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == OPTO_INPUT5_Pin)
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	2b20      	cmp	r3, #32
 80016ae:	d176      	bne.n	800179e <HAL_GPIO_EXTI_Callback+0xfe>
	{
		/* opto input 5 - Night Lights */
		if (HAL_GPIO_ReadPin(OPTO_INPUT5_GPIO_Port, OPTO_INPUT5_Pin)
 80016b0:	2120      	movs	r1, #32
 80016b2:	4898      	ldr	r0, [pc, #608]	; (8001914 <HAL_GPIO_EXTI_Callback+0x274>)
 80016b4:	f001 ffdc 	bl	8003670 <HAL_GPIO_ReadPin>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d136      	bne.n	800172c <HAL_GPIO_EXTI_Callback+0x8c>
				== GPIO_PIN_SET)
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 80016be:	4b96      	ldr	r3, [pc, #600]	; (8001918 <HAL_GPIO_EXTI_Callback+0x278>)
 80016c0:	691b      	ldr	r3, [r3, #16]
 80016c2:	4e96      	ldr	r6, [pc, #600]	; (800191c <HAL_GPIO_EXTI_Callback+0x27c>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	9210      	str	r2, [sp, #64]	; 0x40
 80016c8:	2200      	movs	r2, #0
 80016ca:	920f      	str	r2, [sp, #60]	; 0x3c
 80016cc:	2200      	movs	r2, #0
 80016ce:	920e      	str	r2, [sp, #56]	; 0x38
 80016d0:	2200      	movs	r2, #0
 80016d2:	920d      	str	r2, [sp, #52]	; 0x34
 80016d4:	2200      	movs	r2, #0
 80016d6:	920c      	str	r2, [sp, #48]	; 0x30
 80016d8:	2201      	movs	r2, #1
 80016da:	920b      	str	r2, [sp, #44]	; 0x2c
 80016dc:	2201      	movs	r2, #1
 80016de:	920a      	str	r2, [sp, #40]	; 0x28
 80016e0:	2240      	movs	r2, #64	; 0x40
 80016e2:	9209      	str	r2, [sp, #36]	; 0x24
 80016e4:	2203      	movs	r2, #3
 80016e6:	9208      	str	r2, [sp, #32]
 80016e8:	4a8d      	ldr	r2, [pc, #564]	; (8001920 <HAL_GPIO_EXTI_Callback+0x280>)
 80016ea:	9207      	str	r2, [sp, #28]
 80016ec:	9306      	str	r3, [sp, #24]
 80016ee:	466d      	mov	r5, sp
 80016f0:	f106 0410 	add.w	r4, r6, #16
 80016f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001700:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001704:	f7ff f982 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x01, 1, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x01, 1, 0, 0, 0, 0, 0, 0);
 8001708:	4b83      	ldr	r3, [pc, #524]	; (8001918 <HAL_GPIO_EXTI_Callback+0x278>)
 800170a:	6918      	ldr	r0, [r3, #16]
 800170c:	2300      	movs	r3, #0
 800170e:	9304      	str	r3, [sp, #16]
 8001710:	2300      	movs	r3, #0
 8001712:	9303      	str	r3, [sp, #12]
 8001714:	2300      	movs	r3, #0
 8001716:	9302      	str	r3, [sp, #8]
 8001718:	2300      	movs	r3, #0
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	2300      	movs	r3, #0
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	2300      	movs	r3, #0
 8001722:	2201      	movs	r2, #1
 8001724:	2101      	movs	r1, #1
 8001726:	f007 f8b3 	bl	8008890 <UsbTransferDataByte>
 800172a:	e035      	b.n	8001798 <HAL_GPIO_EXTI_Callback+0xf8>
		}
		else
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 800172c:	4b7a      	ldr	r3, [pc, #488]	; (8001918 <HAL_GPIO_EXTI_Callback+0x278>)
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	4e7a      	ldr	r6, [pc, #488]	; (800191c <HAL_GPIO_EXTI_Callback+0x27c>)
 8001732:	2200      	movs	r2, #0
 8001734:	9210      	str	r2, [sp, #64]	; 0x40
 8001736:	2200      	movs	r2, #0
 8001738:	920f      	str	r2, [sp, #60]	; 0x3c
 800173a:	2200      	movs	r2, #0
 800173c:	920e      	str	r2, [sp, #56]	; 0x38
 800173e:	2200      	movs	r2, #0
 8001740:	920d      	str	r2, [sp, #52]	; 0x34
 8001742:	2200      	movs	r2, #0
 8001744:	920c      	str	r2, [sp, #48]	; 0x30
 8001746:	2200      	movs	r2, #0
 8001748:	920b      	str	r2, [sp, #44]	; 0x2c
 800174a:	2201      	movs	r2, #1
 800174c:	920a      	str	r2, [sp, #40]	; 0x28
 800174e:	2240      	movs	r2, #64	; 0x40
 8001750:	9209      	str	r2, [sp, #36]	; 0x24
 8001752:	2203      	movs	r2, #3
 8001754:	9208      	str	r2, [sp, #32]
 8001756:	4a72      	ldr	r2, [pc, #456]	; (8001920 <HAL_GPIO_EXTI_Callback+0x280>)
 8001758:	9207      	str	r2, [sp, #28]
 800175a:	9306      	str	r3, [sp, #24]
 800175c:	466d      	mov	r5, sp
 800175e:	f106 0410 	add.w	r4, r6, #16
 8001762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001764:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001766:	e894 0003 	ldmia.w	r4, {r0, r1}
 800176a:	e885 0003 	stmia.w	r5, {r0, r1}
 800176e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001772:	f7ff f94b 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x01, 0, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x01, 0, 0, 0, 0, 0, 0, 0);
 8001776:	4b68      	ldr	r3, [pc, #416]	; (8001918 <HAL_GPIO_EXTI_Callback+0x278>)
 8001778:	6918      	ldr	r0, [r3, #16]
 800177a:	2300      	movs	r3, #0
 800177c:	9304      	str	r3, [sp, #16]
 800177e:	2300      	movs	r3, #0
 8001780:	9303      	str	r3, [sp, #12]
 8001782:	2300      	movs	r3, #0
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	2300      	movs	r3, #0
 8001788:	9301      	str	r3, [sp, #4]
 800178a:	2300      	movs	r3, #0
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	2300      	movs	r3, #0
 8001790:	2200      	movs	r2, #0
 8001792:	2101      	movs	r1, #1
 8001794:	f007 f87c 	bl	8008890 <UsbTransferDataByte>
		}
		HAL_Delay(10);
 8001798:	200a      	movs	r0, #10
 800179a:	f000 fdf5 	bl	8002388 <HAL_Delay>
	}

	if (GPIO_Pin == OPTO_INPUT6_Pin)
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	2b40      	cmp	r3, #64	; 0x40
 80017a2:	d176      	bne.n	8001892 <HAL_GPIO_EXTI_Callback+0x1f2>
	{
		/* opto input 6 - RIGHT */
		if (HAL_GPIO_ReadPin(OPTO_INPUT6_GPIO_Port, OPTO_INPUT6_Pin)
 80017a4:	2140      	movs	r1, #64	; 0x40
 80017a6:	485b      	ldr	r0, [pc, #364]	; (8001914 <HAL_GPIO_EXTI_Callback+0x274>)
 80017a8:	f001 ff62 	bl	8003670 <HAL_GPIO_ReadPin>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d136      	bne.n	8001820 <HAL_GPIO_EXTI_Callback+0x180>
				== GPIO_PIN_SET)
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 80017b2:	4b59      	ldr	r3, [pc, #356]	; (8001918 <HAL_GPIO_EXTI_Callback+0x278>)
 80017b4:	691b      	ldr	r3, [r3, #16]
 80017b6:	4e59      	ldr	r6, [pc, #356]	; (800191c <HAL_GPIO_EXTI_Callback+0x27c>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	9210      	str	r2, [sp, #64]	; 0x40
 80017bc:	2200      	movs	r2, #0
 80017be:	920f      	str	r2, [sp, #60]	; 0x3c
 80017c0:	2200      	movs	r2, #0
 80017c2:	920e      	str	r2, [sp, #56]	; 0x38
 80017c4:	2200      	movs	r2, #0
 80017c6:	920d      	str	r2, [sp, #52]	; 0x34
 80017c8:	2200      	movs	r2, #0
 80017ca:	920c      	str	r2, [sp, #48]	; 0x30
 80017cc:	2201      	movs	r2, #1
 80017ce:	920b      	str	r2, [sp, #44]	; 0x2c
 80017d0:	2202      	movs	r2, #2
 80017d2:	920a      	str	r2, [sp, #40]	; 0x28
 80017d4:	2240      	movs	r2, #64	; 0x40
 80017d6:	9209      	str	r2, [sp, #36]	; 0x24
 80017d8:	2203      	movs	r2, #3
 80017da:	9208      	str	r2, [sp, #32]
 80017dc:	4a50      	ldr	r2, [pc, #320]	; (8001920 <HAL_GPIO_EXTI_Callback+0x280>)
 80017de:	9207      	str	r2, [sp, #28]
 80017e0:	9306      	str	r3, [sp, #24]
 80017e2:	466d      	mov	r5, sp
 80017e4:	f106 0410 	add.w	r4, r6, #16
 80017e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80017f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80017f4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017f8:	f7ff f908 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x02, 1, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x02, 1, 0, 0, 0, 0, 0, 0);
 80017fc:	4b46      	ldr	r3, [pc, #280]	; (8001918 <HAL_GPIO_EXTI_Callback+0x278>)
 80017fe:	6918      	ldr	r0, [r3, #16]
 8001800:	2300      	movs	r3, #0
 8001802:	9304      	str	r3, [sp, #16]
 8001804:	2300      	movs	r3, #0
 8001806:	9303      	str	r3, [sp, #12]
 8001808:	2300      	movs	r3, #0
 800180a:	9302      	str	r3, [sp, #8]
 800180c:	2300      	movs	r3, #0
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	2300      	movs	r3, #0
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2300      	movs	r3, #0
 8001816:	2201      	movs	r2, #1
 8001818:	2102      	movs	r1, #2
 800181a:	f007 f839 	bl	8008890 <UsbTransferDataByte>
 800181e:	e035      	b.n	800188c <HAL_GPIO_EXTI_Callback+0x1ec>
		}
		else
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 8001820:	4b3d      	ldr	r3, [pc, #244]	; (8001918 <HAL_GPIO_EXTI_Callback+0x278>)
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	4e3d      	ldr	r6, [pc, #244]	; (800191c <HAL_GPIO_EXTI_Callback+0x27c>)
 8001826:	2200      	movs	r2, #0
 8001828:	9210      	str	r2, [sp, #64]	; 0x40
 800182a:	2200      	movs	r2, #0
 800182c:	920f      	str	r2, [sp, #60]	; 0x3c
 800182e:	2200      	movs	r2, #0
 8001830:	920e      	str	r2, [sp, #56]	; 0x38
 8001832:	2200      	movs	r2, #0
 8001834:	920d      	str	r2, [sp, #52]	; 0x34
 8001836:	2200      	movs	r2, #0
 8001838:	920c      	str	r2, [sp, #48]	; 0x30
 800183a:	2200      	movs	r2, #0
 800183c:	920b      	str	r2, [sp, #44]	; 0x2c
 800183e:	2202      	movs	r2, #2
 8001840:	920a      	str	r2, [sp, #40]	; 0x28
 8001842:	2240      	movs	r2, #64	; 0x40
 8001844:	9209      	str	r2, [sp, #36]	; 0x24
 8001846:	2203      	movs	r2, #3
 8001848:	9208      	str	r2, [sp, #32]
 800184a:	4a35      	ldr	r2, [pc, #212]	; (8001920 <HAL_GPIO_EXTI_Callback+0x280>)
 800184c:	9207      	str	r2, [sp, #28]
 800184e:	9306      	str	r3, [sp, #24]
 8001850:	466d      	mov	r5, sp
 8001852:	f106 0410 	add.w	r4, r6, #16
 8001856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001858:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800185a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800185e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001862:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001866:	f7ff f8d1 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x02, 0, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x02, 0, 0, 0, 0, 0, 0, 0);
 800186a:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <HAL_GPIO_EXTI_Callback+0x278>)
 800186c:	6918      	ldr	r0, [r3, #16]
 800186e:	2300      	movs	r3, #0
 8001870:	9304      	str	r3, [sp, #16]
 8001872:	2300      	movs	r3, #0
 8001874:	9303      	str	r3, [sp, #12]
 8001876:	2300      	movs	r3, #0
 8001878:	9302      	str	r3, [sp, #8]
 800187a:	2300      	movs	r3, #0
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	2300      	movs	r3, #0
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	2300      	movs	r3, #0
 8001884:	2200      	movs	r2, #0
 8001886:	2102      	movs	r1, #2
 8001888:	f007 f802 	bl	8008890 <UsbTransferDataByte>
		}

		HAL_Delay(10);
 800188c:	200a      	movs	r0, #10
 800188e:	f000 fd7b 	bl	8002388 <HAL_Delay>
	}

	if (GPIO_Pin == OPTO_INPUT7_Pin)
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	2b80      	cmp	r3, #128	; 0x80
 8001896:	d17e      	bne.n	8001996 <HAL_GPIO_EXTI_Callback+0x2f6>
	{
		/* opto input 7 LEFT */
		if (HAL_GPIO_ReadPin(OPTO_INPUT7_GPIO_Port, OPTO_INPUT7_Pin)
 8001898:	2180      	movs	r1, #128	; 0x80
 800189a:	481e      	ldr	r0, [pc, #120]	; (8001914 <HAL_GPIO_EXTI_Callback+0x274>)
 800189c:	f001 fee8 	bl	8003670 <HAL_GPIO_ReadPin>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d13e      	bne.n	8001924 <HAL_GPIO_EXTI_Callback+0x284>
				== GPIO_PIN_SET)
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <HAL_GPIO_EXTI_Callback+0x278>)
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	4e1c      	ldr	r6, [pc, #112]	; (800191c <HAL_GPIO_EXTI_Callback+0x27c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	9210      	str	r2, [sp, #64]	; 0x40
 80018b0:	2200      	movs	r2, #0
 80018b2:	920f      	str	r2, [sp, #60]	; 0x3c
 80018b4:	2200      	movs	r2, #0
 80018b6:	920e      	str	r2, [sp, #56]	; 0x38
 80018b8:	2200      	movs	r2, #0
 80018ba:	920d      	str	r2, [sp, #52]	; 0x34
 80018bc:	2200      	movs	r2, #0
 80018be:	920c      	str	r2, [sp, #48]	; 0x30
 80018c0:	2201      	movs	r2, #1
 80018c2:	920b      	str	r2, [sp, #44]	; 0x2c
 80018c4:	2203      	movs	r2, #3
 80018c6:	920a      	str	r2, [sp, #40]	; 0x28
 80018c8:	2240      	movs	r2, #64	; 0x40
 80018ca:	9209      	str	r2, [sp, #36]	; 0x24
 80018cc:	2203      	movs	r2, #3
 80018ce:	9208      	str	r2, [sp, #32]
 80018d0:	4a13      	ldr	r2, [pc, #76]	; (8001920 <HAL_GPIO_EXTI_Callback+0x280>)
 80018d2:	9207      	str	r2, [sp, #28]
 80018d4:	9306      	str	r3, [sp, #24]
 80018d6:	466d      	mov	r5, sp
 80018d8:	f106 0410 	add.w	r4, r6, #16
 80018dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80018e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80018e8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80018ec:	f7ff f88e 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x03, 1, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x03, 1, 0, 0, 0, 0, 0, 0);
 80018f0:	4b09      	ldr	r3, [pc, #36]	; (8001918 <HAL_GPIO_EXTI_Callback+0x278>)
 80018f2:	6918      	ldr	r0, [r3, #16]
 80018f4:	2300      	movs	r3, #0
 80018f6:	9304      	str	r3, [sp, #16]
 80018f8:	2300      	movs	r3, #0
 80018fa:	9303      	str	r3, [sp, #12]
 80018fc:	2300      	movs	r3, #0
 80018fe:	9302      	str	r3, [sp, #8]
 8001900:	2300      	movs	r3, #0
 8001902:	9301      	str	r3, [sp, #4]
 8001904:	2300      	movs	r3, #0
 8001906:	9300      	str	r3, [sp, #0]
 8001908:	2300      	movs	r3, #0
 800190a:	2201      	movs	r2, #1
 800190c:	2103      	movs	r1, #3
 800190e:	f006 ffbf 	bl	8008890 <UsbTransferDataByte>
 8001912:	e03d      	b.n	8001990 <HAL_GPIO_EXTI_Callback+0x2f0>
 8001914:	40021000 	.word	0x40021000
 8001918:	200002bc 	.word	0x200002bc
 800191c:	200002f8 	.word	0x200002f8
 8001920:	20000278 	.word	0x20000278

		}
		else
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 8001924:	4b9d      	ldr	r3, [pc, #628]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x4fc>)
 8001926:	691b      	ldr	r3, [r3, #16]
 8001928:	4e9d      	ldr	r6, [pc, #628]	; (8001ba0 <HAL_GPIO_EXTI_Callback+0x500>)
 800192a:	2200      	movs	r2, #0
 800192c:	9210      	str	r2, [sp, #64]	; 0x40
 800192e:	2200      	movs	r2, #0
 8001930:	920f      	str	r2, [sp, #60]	; 0x3c
 8001932:	2200      	movs	r2, #0
 8001934:	920e      	str	r2, [sp, #56]	; 0x38
 8001936:	2200      	movs	r2, #0
 8001938:	920d      	str	r2, [sp, #52]	; 0x34
 800193a:	2200      	movs	r2, #0
 800193c:	920c      	str	r2, [sp, #48]	; 0x30
 800193e:	2200      	movs	r2, #0
 8001940:	920b      	str	r2, [sp, #44]	; 0x2c
 8001942:	2203      	movs	r2, #3
 8001944:	920a      	str	r2, [sp, #40]	; 0x28
 8001946:	2240      	movs	r2, #64	; 0x40
 8001948:	9209      	str	r2, [sp, #36]	; 0x24
 800194a:	2203      	movs	r2, #3
 800194c:	9208      	str	r2, [sp, #32]
 800194e:	4a95      	ldr	r2, [pc, #596]	; (8001ba4 <HAL_GPIO_EXTI_Callback+0x504>)
 8001950:	9207      	str	r2, [sp, #28]
 8001952:	9306      	str	r3, [sp, #24]
 8001954:	466d      	mov	r5, sp
 8001956:	f106 0410 	add.w	r4, r6, #16
 800195a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800195c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800195e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001962:	e885 0003 	stmia.w	r5, {r0, r1}
 8001966:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800196a:	f7ff f84f 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x03, 0, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x03, 0, 0, 0, 0, 0, 0, 0);
 800196e:	4b8b      	ldr	r3, [pc, #556]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x4fc>)
 8001970:	6918      	ldr	r0, [r3, #16]
 8001972:	2300      	movs	r3, #0
 8001974:	9304      	str	r3, [sp, #16]
 8001976:	2300      	movs	r3, #0
 8001978:	9303      	str	r3, [sp, #12]
 800197a:	2300      	movs	r3, #0
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	2300      	movs	r3, #0
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	2300      	movs	r3, #0
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2300      	movs	r3, #0
 8001988:	2200      	movs	r2, #0
 800198a:	2103      	movs	r1, #3
 800198c:	f006 ff80 	bl	8008890 <UsbTransferDataByte>
		}

		HAL_Delay(10);
 8001990:	200a      	movs	r0, #10
 8001992:	f000 fcf9 	bl	8002388 <HAL_Delay>
	}

	if (GPIO_Pin == OPTO_INPUT8_Pin)
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800199c:	d177      	bne.n	8001a8e <HAL_GPIO_EXTI_Callback+0x3ee>
	{
		/* opto input 8 Emergency */
		if (HAL_GPIO_ReadPin(OPTO_INPUT8_GPIO_Port, OPTO_INPUT8_Pin)
 800199e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a2:	4881      	ldr	r0, [pc, #516]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x508>)
 80019a4:	f001 fe64 	bl	8003670 <HAL_GPIO_ReadPin>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d136      	bne.n	8001a1c <HAL_GPIO_EXTI_Callback+0x37c>
				== GPIO_PIN_SET)
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 80019ae:	4b7b      	ldr	r3, [pc, #492]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x4fc>)
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	4e7b      	ldr	r6, [pc, #492]	; (8001ba0 <HAL_GPIO_EXTI_Callback+0x500>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	9210      	str	r2, [sp, #64]	; 0x40
 80019b8:	2200      	movs	r2, #0
 80019ba:	920f      	str	r2, [sp, #60]	; 0x3c
 80019bc:	2200      	movs	r2, #0
 80019be:	920e      	str	r2, [sp, #56]	; 0x38
 80019c0:	2200      	movs	r2, #0
 80019c2:	920d      	str	r2, [sp, #52]	; 0x34
 80019c4:	2200      	movs	r2, #0
 80019c6:	920c      	str	r2, [sp, #48]	; 0x30
 80019c8:	2201      	movs	r2, #1
 80019ca:	920b      	str	r2, [sp, #44]	; 0x2c
 80019cc:	2206      	movs	r2, #6
 80019ce:	920a      	str	r2, [sp, #40]	; 0x28
 80019d0:	2240      	movs	r2, #64	; 0x40
 80019d2:	9209      	str	r2, [sp, #36]	; 0x24
 80019d4:	2203      	movs	r2, #3
 80019d6:	9208      	str	r2, [sp, #32]
 80019d8:	4a72      	ldr	r2, [pc, #456]	; (8001ba4 <HAL_GPIO_EXTI_Callback+0x504>)
 80019da:	9207      	str	r2, [sp, #28]
 80019dc:	9306      	str	r3, [sp, #24]
 80019de:	466d      	mov	r5, sp
 80019e0:	f106 0410 	add.w	r4, r6, #16
 80019e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80019f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80019f4:	f7ff f80a 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x06, 1, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x06, 1, 0, 0, 0, 0, 0, 0);
 80019f8:	4b68      	ldr	r3, [pc, #416]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x4fc>)
 80019fa:	6918      	ldr	r0, [r3, #16]
 80019fc:	2300      	movs	r3, #0
 80019fe:	9304      	str	r3, [sp, #16]
 8001a00:	2300      	movs	r3, #0
 8001a02:	9303      	str	r3, [sp, #12]
 8001a04:	2300      	movs	r3, #0
 8001a06:	9302      	str	r3, [sp, #8]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2300      	movs	r3, #0
 8001a12:	2201      	movs	r2, #1
 8001a14:	2106      	movs	r1, #6
 8001a16:	f006 ff3b 	bl	8008890 <UsbTransferDataByte>
 8001a1a:	e035      	b.n	8001a88 <HAL_GPIO_EXTI_Callback+0x3e8>

		}
		else
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 8001a1c:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x4fc>)
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	4e5f      	ldr	r6, [pc, #380]	; (8001ba0 <HAL_GPIO_EXTI_Callback+0x500>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	9210      	str	r2, [sp, #64]	; 0x40
 8001a26:	2200      	movs	r2, #0
 8001a28:	920f      	str	r2, [sp, #60]	; 0x3c
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	920e      	str	r2, [sp, #56]	; 0x38
 8001a2e:	2200      	movs	r2, #0
 8001a30:	920d      	str	r2, [sp, #52]	; 0x34
 8001a32:	2200      	movs	r2, #0
 8001a34:	920c      	str	r2, [sp, #48]	; 0x30
 8001a36:	2200      	movs	r2, #0
 8001a38:	920b      	str	r2, [sp, #44]	; 0x2c
 8001a3a:	2206      	movs	r2, #6
 8001a3c:	920a      	str	r2, [sp, #40]	; 0x28
 8001a3e:	2240      	movs	r2, #64	; 0x40
 8001a40:	9209      	str	r2, [sp, #36]	; 0x24
 8001a42:	2203      	movs	r2, #3
 8001a44:	9208      	str	r2, [sp, #32]
 8001a46:	4a57      	ldr	r2, [pc, #348]	; (8001ba4 <HAL_GPIO_EXTI_Callback+0x504>)
 8001a48:	9207      	str	r2, [sp, #28]
 8001a4a:	9306      	str	r3, [sp, #24]
 8001a4c:	466d      	mov	r5, sp
 8001a4e:	f106 0410 	add.w	r4, r6, #16
 8001a52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a5e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a62:	f7fe ffd3 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x06, 0, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x06, 0, 0, 0, 0, 0, 0, 0);
 8001a66:	4b4d      	ldr	r3, [pc, #308]	; (8001b9c <HAL_GPIO_EXTI_Callback+0x4fc>)
 8001a68:	6918      	ldr	r0, [r3, #16]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	9304      	str	r3, [sp, #16]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	9303      	str	r3, [sp, #12]
 8001a72:	2300      	movs	r3, #0
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	2300      	movs	r3, #0
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	2200      	movs	r2, #0
 8001a82:	2106      	movs	r1, #6
 8001a84:	f006 ff04 	bl	8008890 <UsbTransferDataByte>
		}
		HAL_Delay(10);
 8001a88:	200a      	movs	r0, #10
 8001a8a:	f000 fc7d 	bl	8002388 <HAL_Delay>
	}

	/*Charging state register*/
	if (GPIO_Pin == OPTO_INPUT10_Pin)
 8001a8e:	88fb      	ldrh	r3, [r7, #6]
 8001a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a94:	d134      	bne.n	8001b00 <HAL_GPIO_EXTI_Callback+0x460>
	{
		if (HAL_GPIO_ReadPin(OPTO_INPUT10_GPIO_Port, OPTO_INPUT10_Pin)
 8001a96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a9a:	4843      	ldr	r0, [pc, #268]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x508>)
 8001a9c:	f001 fde8 	bl	8003670 <HAL_GPIO_ReadPin>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d116      	bne.n	8001ad4 <HAL_GPIO_EXTI_Callback+0x434>
				== GPIO_PIN_SET)
		{
			setCharging(true);
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f7ff fc16 	bl	80012d8 <setCharging>
			UsbTransferDataByte(0x0C, 0x01, 0, 0, 0, 0, 0, 0, 0);
 8001aac:	2300      	movs	r3, #0
 8001aae:	9304      	str	r3, [sp, #16]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	9303      	str	r3, [sp, #12]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9302      	str	r3, [sp, #8]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	2300      	movs	r3, #0
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	200c      	movs	r0, #12
 8001ac8:	f006 fee2 	bl	8008890 <UsbTransferDataByte>
			HAL_Delay(10);
 8001acc:	200a      	movs	r0, #10
 8001ace:	f000 fc5b 	bl	8002388 <HAL_Delay>
 8001ad2:	e015      	b.n	8001b00 <HAL_GPIO_EXTI_Callback+0x460>
		}
		else
		{
			setCharging(false);
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7ff fbff 	bl	80012d8 <setCharging>
			UsbTransferDataByte(0x0C, 0x0, 0, 0, 0, 0, 0, 0, 0);
 8001ada:	2300      	movs	r3, #0
 8001adc:	9304      	str	r3, [sp, #16]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	9303      	str	r3, [sp, #12]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	9302      	str	r3, [sp, #8]
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	9301      	str	r3, [sp, #4]
 8001aea:	2300      	movs	r3, #0
 8001aec:	9300      	str	r3, [sp, #0]
 8001aee:	2300      	movs	r3, #0
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	200c      	movs	r0, #12
 8001af6:	f006 fecb 	bl	8008890 <UsbTransferDataByte>
			HAL_Delay(10);
 8001afa:	200a      	movs	r0, #10
 8001afc:	f000 fc44 	bl	8002388 <HAL_Delay>
		}
	}

	if (GPIO_Pin == OPTO_INPUT11_Pin)
 8001b00:	88fb      	ldrh	r3, [r7, #6]
 8001b02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b06:	d145      	bne.n	8001b94 <HAL_GPIO_EXTI_Callback+0x4f4>
		{
		if (HAL_GPIO_ReadPin(OPTO_INPUT10_GPIO_Port, OPTO_INPUT11_Pin)
 8001b08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b0c:	4826      	ldr	r0, [pc, #152]	; (8001ba8 <HAL_GPIO_EXTI_Callback+0x508>)
 8001b0e:	f001 fdaf 	bl	8003670 <HAL_GPIO_ReadPin>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d122      	bne.n	8001b5e <HAL_GPIO_EXTI_Callback+0x4be>
				== GPIO_PIN_SET && !highVoltageActive) {
 8001b18:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_GPIO_EXTI_Callback+0x50c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	f083 0301 	eor.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d01b      	beq.n	8001b5e <HAL_GPIO_EXTI_Callback+0x4be>
			CanSendNmt(hcan1, OPERATIONAL_STATE, bms.node_id,
 8001b26:	4b22      	ldr	r3, [pc, #136]	; (8001bb0 <HAL_GPIO_EXTI_Callback+0x510>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	4e22      	ldr	r6, [pc, #136]	; (8001bb4 <HAL_GPIO_EXTI_Callback+0x514>)
 8001b2c:	4a1d      	ldr	r2, [pc, #116]	; (8001ba4 <HAL_GPIO_EXTI_Callback+0x504>)
 8001b2e:	9208      	str	r2, [sp, #32]
 8001b30:	9307      	str	r3, [sp, #28]
 8001b32:	2301      	movs	r3, #1
 8001b34:	9306      	str	r3, [sp, #24]
 8001b36:	466d      	mov	r5, sp
 8001b38:	f106 0410 	add.w	r4, r6, #16
 8001b3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b40:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b44:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b48:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b4c:	f7fe feca 	bl	80008e4 <CanSendNmt>
					&can_frame_template);
			setHighVoltage(true);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f7ff fbe1 	bl	8001318 <setHighVoltage>
			HAL_Delay(2);
 8001b56:	2002      	movs	r0, #2
 8001b58:	f000 fc16 	bl	8002388 <HAL_Delay>
					&can_frame_template);
			setHighVoltage(false);
			HAL_Delay(2);
		}
	}
}
 8001b5c:	e01a      	b.n	8001b94 <HAL_GPIO_EXTI_Callback+0x4f4>
			CanSendNmt(hcan1, STOPPED_STATE, bms.node_id,
 8001b5e:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_GPIO_EXTI_Callback+0x510>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4e14      	ldr	r6, [pc, #80]	; (8001bb4 <HAL_GPIO_EXTI_Callback+0x514>)
 8001b64:	4a0f      	ldr	r2, [pc, #60]	; (8001ba4 <HAL_GPIO_EXTI_Callback+0x504>)
 8001b66:	9208      	str	r2, [sp, #32]
 8001b68:	9307      	str	r3, [sp, #28]
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	9306      	str	r3, [sp, #24]
 8001b6e:	466d      	mov	r5, sp
 8001b70:	f106 0410 	add.w	r4, r6, #16
 8001b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b78:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b7c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b80:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001b84:	f7fe feae 	bl	80008e4 <CanSendNmt>
			setHighVoltage(false);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff fbc5 	bl	8001318 <setHighVoltage>
			HAL_Delay(2);
 8001b8e:	2002      	movs	r0, #2
 8001b90:	f000 fbfa 	bl	8002388 <HAL_Delay>
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b9c:	200002bc 	.word	0x200002bc
 8001ba0:	200002f8 	.word	0x200002f8
 8001ba4:	20000278 	.word	0x20000278
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	20000478 	.word	0x20000478
 8001bb0:	200002d8 	.word	0x200002d8
 8001bb4:	20000440 	.word	0x20000440

08001bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bbe:	f000 fb71 	bl	80022a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bc2:	f000 f867 	bl	8001c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bc6:	f7ff fc5b 	bl	8001480 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001bca:	f7fe fccd 	bl	8000568 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001bce:	f7fe fd01 	bl	80005d4 <MX_CAN2_Init>
  MX_TIM10_Init();
 8001bd2:	f000 faf1 	bl	80021b8 <MX_TIM10_Init>
  MX_USB_DEVICE_Init();
 8001bd6:	f006 fcf1 	bl	80085bc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	/************************************************************************************************
	 CAN PERIPHERIAL AND ITS COMPONENTS
	 ************************************************************************************************/
	CanopenObjectDictInit();
 8001bda:	f7ff fbad 	bl	8001338 <CanopenObjectDictInit>

	CanConfigFilter(CAN_HIGH_SPEED, 1);
 8001bde:	4e28      	ldr	r6, [pc, #160]	; (8001c80 <main+0xc8>)
 8001be0:	2301      	movs	r3, #1
 8001be2:	9306      	str	r3, [sp, #24]
 8001be4:	466d      	mov	r5, sp
 8001be6:	f106 0410 	add.w	r4, r6, #16
 8001bea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bf2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bf6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001bfa:	f7fe fe3b 	bl	8000874 <CanConfigFilter>
	CanInit(CAN_HIGH_SPEED);
 8001bfe:	4e20      	ldr	r6, [pc, #128]	; (8001c80 <main+0xc8>)
 8001c00:	466d      	mov	r5, sp
 8001c02:	f106 0410 	add.w	r4, r6, #16
 8001c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c12:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001c16:	f7fe fde5 	bl	80007e4 <CanInit>

	CanConfigFilter(CAN_LOW_SPEED, 0);
 8001c1a:	4e1a      	ldr	r6, [pc, #104]	; (8001c84 <main+0xcc>)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9306      	str	r3, [sp, #24]
 8001c20:	466d      	mov	r5, sp
 8001c22:	f106 0410 	add.w	r4, r6, #16
 8001c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c32:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001c36:	f7fe fe1d 	bl	8000874 <CanConfigFilter>
	CanInit(CAN_LOW_SPEED);
 8001c3a:	4e12      	ldr	r6, [pc, #72]	; (8001c84 <main+0xcc>)
 8001c3c:	466d      	mov	r5, sp
 8001c3e:	f106 0410 	add.w	r4, r6, #16
 8001c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c4e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001c52:	f7fe fdc7 	bl	80007e4 <CanInit>
	InitCharger(charging_voltage, charging_current);
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <main+0xd0>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <main+0xd4>)
 8001c5c:	8812      	ldrh	r2, [r2, #0]
 8001c5e:	4611      	mov	r1, r2
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7ff f90f 	bl	8000e84 <InitCharger>

	HAL_TIM_Base_Start_IT(&htim10);
 8001c66:	480a      	ldr	r0, [pc, #40]	; (8001c90 <main+0xd8>)
 8001c68:	f003 fb57 	bl	800531a <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	setError(false);
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f7ff fb43 	bl	80012f8 <setError>
	setCharging(true);
 8001c72:	2001      	movs	r0, #1
 8001c74:	f7ff fb30 	bl	80012d8 <setCharging>
	setHighVoltage(false);
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f7ff fb4d 	bl	8001318 <setHighVoltage>
	while (1) {
 8001c7e:	e7fe      	b.n	8001c7e <main+0xc6>
 8001c80:	20000440 	.word	0x20000440
 8001c84:	200002f8 	.word	0x200002f8
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000002 	.word	0x20000002
 8001c90:	20000484 	.word	0x20000484

08001c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b094      	sub	sp, #80	; 0x50
 8001c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9a:	f107 0320 	add.w	r3, r7, #32
 8001c9e:	2230      	movs	r2, #48	; 0x30
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f007 fa8a 	bl	80091bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <SystemClock_Config+0xc8>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <SystemClock_Config+0xc8>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc8:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <SystemClock_Config+0xc8>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	4b21      	ldr	r3, [pc, #132]	; (8001d60 <SystemClock_Config+0xcc>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a20      	ldr	r2, [pc, #128]	; (8001d60 <SystemClock_Config+0xcc>)
 8001cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <SystemClock_Config+0xcc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d04:	2308      	movs	r3, #8
 8001d06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001d08:	2378      	movs	r3, #120	; 0x78
 8001d0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001d0c:	2306      	movs	r3, #6
 8001d0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001d10:	2305      	movs	r3, #5
 8001d12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d14:	f107 0320 	add.w	r3, r7, #32
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f002 fe91 	bl	8004a40 <HAL_RCC_OscConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d24:	f000 f836 	bl	8001d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d28:	230f      	movs	r3, #15
 8001d2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d34:	2300      	movs	r3, #0
 8001d36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	2101      	movs	r1, #1
 8001d44:	4618      	mov	r0, r3
 8001d46:	f003 f8eb 	bl	8004f20 <HAL_RCC_ClockConfig>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d50:	f000 f820 	bl	8001d94 <Error_Handler>
  }
}
 8001d54:	bf00      	nop
 8001d56:	3750      	adds	r7, #80	; 0x50
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40007000 	.word	0x40007000

08001d64 <HAL_TIM_PeriodElapsedCallback>:
		HAL_Delay(100);

		UsbTransferDataByte(0x55, 0x0F, 0x0F, 0x0F, 0x0, 0x0, 0x00, 0x00, 0x00);
		HAL_Delay(100);}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){ // 1Hz/1s timer
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a06      	ldr	r2, [pc, #24]	; (8001d8c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d106      	bne.n	8001d84 <HAL_TIM_PeriodElapsedCallback+0x20>
		HAL_GPIO_TogglePin(LED_D4_GPIO_Port, LED_D4_Pin);
 8001d76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001d7c:	f001 fca9 	bl	80036d2 <HAL_GPIO_TogglePin>
		ChargingStateModule();
 8001d80:	f7ff f8b4 	bl	8000eec <ChargingStateModule>
	}
}
 8001d84:	bf00      	nop
 8001d86:	3708      	adds	r7, #8
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	40014400 	.word	0x40014400
 8001d90:	40020800 	.word	0x40020800

08001d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d98:	bf00      	nop
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
	...

08001da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <HAL_MspInit+0x4c>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	4a0f      	ldr	r2, [pc, #60]	; (8001df0 <HAL_MspInit+0x4c>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dba:	4b0d      	ldr	r3, [pc, #52]	; (8001df0 <HAL_MspInit+0x4c>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc2:	607b      	str	r3, [r7, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	603b      	str	r3, [r7, #0]
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_MspInit+0x4c>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	4a08      	ldr	r2, [pc, #32]	; (8001df0 <HAL_MspInit+0x4c>)
 8001dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_MspInit+0x4c>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dde:	603b      	str	r3, [r7, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de2:	bf00      	nop
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800

08001df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e06:	e7fe      	b.n	8001e06 <HardFault_Handler+0x4>

08001e08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <MemManage_Handler+0x4>

08001e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <BusFault_Handler+0x4>

08001e14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <UsageFault_Handler+0x4>

08001e1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e48:	f000 fa7e 	bl	8002348 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e54:	2002      	movs	r0, #2
 8001e56:	f001 fc57 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
	 ************************************************************************************************/
	/* opto input 1 - long lights */
//	OptoInputsRisingFalling(OPTO_INPUT1_GPIO_Port, OPTO_INPUT1_Pin, 0x01);

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001e62:	2004      	movs	r0, #4
 8001e64:	f001 fc50 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
	 ************************************************************************************************/
	/* opto input 2 - long lights */
//	OptoInputsRisingFalling(OPTO_INPUT2_GPIO_Port, OPTO_INPUT2_Pin, 0x01);

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001e70:	2008      	movs	r0, #8
 8001e72:	f001 fc49 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
	 ************************************************************************************************/
	/* opto input 3 - right indicator */
//	OptoInputsRisingFalling(OPTO_INPUT3_GPIO_Port, OPTO_INPUT3_Pin, 0x02);

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001e7e:	2010      	movs	r0, #16
 8001e80:	f001 fc42 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
	 ************************************************************************************************/
	/* opto input - left indicator4 */
//	OptoInputsRisingFalling(OPTO_INPUT4_GPIO_Port, OPTO_INPUT4_Pin, 0x03);

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <CAN1_TX_IRQHandler+0x1c>)
 8001e8e:	f000 ff07 	bl	8002ca0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */
  UsbTransfer(&can_frame_template);
 8001e92:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <CAN1_TX_IRQHandler+0x20>)
 8001e94:	f006 fcb8 	bl	8008808 <UsbTransfer>

	/************************************************************************************************
	 CAN_HIGH_SPEED TX INTERRUPT HANDLING
	 ************************************************************************************************/

  CanClearTxDataFrame(&can_frame_template);
 8001e98:	4803      	ldr	r0, [pc, #12]	; (8001ea8 <CAN1_TX_IRQHandler+0x20>)
 8001e9a:	f7fe fee9 	bl	8000c70 <CanClearTxDataFrame>
  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000440 	.word	0x20000440
 8001ea8:	20000278 	.word	0x20000278

08001eac <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001eae:	b09b      	sub	sp, #108	; 0x6c
 8001eb0:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001eb2:	481b      	ldr	r0, [pc, #108]	; (8001f20 <CAN1_RX0_IRQHandler+0x74>)
 8001eb4:	f000 fef4 	bl	8002ca0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

	/************************************************************************************************
	 CAN_HIGH_SPEED RX INTERRUPT HANDLING
	 ************************************************************************************************/
	CanSaveReceivedData(CAN_HIGH_SPEED, &can_rx_frame_template);
 8001eb8:	46bc      	mov	ip, r7
 8001eba:	4e19      	ldr	r6, [pc, #100]	; (8001f20 <CAN1_RX0_IRQHandler+0x74>)
 8001ebc:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <CAN1_RX0_IRQHandler+0x78>)
 8001ebe:	9307      	str	r3, [sp, #28]
 8001ec0:	466d      	mov	r5, sp
 8001ec2:	f106 040c 	add.w	r4, r6, #12
 8001ec6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ec8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001ece:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001ed2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001ed6:	4660      	mov	r0, ip
 8001ed8:	f7fe fca4 	bl	8000824 <CanSaveReceivedData>
	UsbTransfer(&can_rx_frame_template);
 8001edc:	4811      	ldr	r0, [pc, #68]	; (8001f24 <CAN1_RX0_IRQHandler+0x78>)
 8001ede:	f006 fc93 	bl	8008808 <UsbTransfer>
	if (can_rx_frame_template.rx_header.ExtId == 0x18FF50E5)
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <CAN1_RX0_IRQHandler+0x78>)
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <CAN1_RX0_IRQHandler+0x7c>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d108      	bne.n	8001efe <CAN1_RX0_IRQHandler+0x52>
	{
		ActUponCurrentAndVoltage(&can_rx_frame_template, 3000, 200);
 8001eec:	22c8      	movs	r2, #200	; 0xc8
 8001eee:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001ef2:	480c      	ldr	r0, [pc, #48]	; (8001f24 <CAN1_RX0_IRQHandler+0x78>)
 8001ef4:	f7ff f946 	bl	8001184 <ActUponCurrentAndVoltage>
		CatchChargingErrorOccuring(&can_rx_frame_template);
 8001ef8:	480a      	ldr	r0, [pc, #40]	; (8001f24 <CAN1_RX0_IRQHandler+0x78>)
 8001efa:	f7ff f979 	bl	80011f0 <CatchChargingErrorOccuring>
	}

//	CanTransferFrame(hcan1, &can_rx_frame_template);

	CatchErrorOccuring(&can_rx_frame_template);
 8001efe:	4809      	ldr	r0, [pc, #36]	; (8001f24 <CAN1_RX0_IRQHandler+0x78>)
 8001f00:	f7ff f98c 	bl	800121c <CatchErrorOccuring>

	WarningHandler(&can_rx_frame_template);
 8001f04:	4807      	ldr	r0, [pc, #28]	; (8001f24 <CAN1_RX0_IRQHandler+0x78>)
 8001f06:	f7ff f99d 	bl	8001244 <WarningHandler>

	BMSWarningHandler(&can_rx_frame_template);
 8001f0a:	4806      	ldr	r0, [pc, #24]	; (8001f24 <CAN1_RX0_IRQHandler+0x78>)
 8001f0c:	f7ff f8e4 	bl	80010d8 <BMSWarningHandler>

	ReverseManagement(&can_rx_frame_template);
 8001f10:	4804      	ldr	r0, [pc, #16]	; (8001f24 <CAN1_RX0_IRQHandler+0x78>)
 8001f12:	f7ff f86f 	bl	8000ff4 <ReverseManagement>


  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001f16:	bf00      	nop
 8001f18:	374c      	adds	r7, #76	; 0x4c
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000440 	.word	0x20000440
 8001f24:	200003c0 	.word	0x200003c0
 8001f28:	18ff50e5 	.word	0x18ff50e5

08001f2c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <CAN1_RX1_IRQHandler+0x10>)
 8001f32:	f000 feb5 	bl	8002ca0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000440 	.word	0x20000440

08001f40 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001f44:	2020      	movs	r0, #32
 8001f46:	f001 fbdf 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001f4a:	2040      	movs	r0, #64	; 0x40
 8001f4c:	f001 fbdc 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001f50:	2080      	movs	r0, #128	; 0x80
 8001f52:	f001 fbd9 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001f56:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f5a:	f001 fbd5 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001f5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f62:	f001 fbd1 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
	/* opto input 12 - day lights */

	/* opto input 13 - sport */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001f70:	4802      	ldr	r0, [pc, #8]	; (8001f7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f72:	f003 f9f6 	bl	8005362 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000484 	.word	0x20000484

08001f80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001f84:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f88:	f001 fbbe 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001f8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001f90:	f001 fbba 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001f94:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001f98:	f001 fbb6 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001f9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001fa0:	f001 fbb2 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001fa4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001fa8:	f001 fbae 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001fac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001fb0:	f001 fbaa 	bl	8003708 <HAL_GPIO_EXTI_IRQHandler>
	 OPTO-INPUTS INTERRUPT HANDLING
	 ************************************************************************************************/


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001fbc:	4803      	ldr	r0, [pc, #12]	; (8001fcc <CAN2_TX_IRQHandler+0x14>)
 8001fbe:	f000 fe6f 	bl	8002ca0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

	/************************************************************************************************
	 CAN_LOW_SPEED TX INTERRUPT HANDLING
	 ************************************************************************************************/
	UsbTransfer(&can_frame_template);
 8001fc2:	4803      	ldr	r0, [pc, #12]	; (8001fd0 <CAN2_TX_IRQHandler+0x18>)
 8001fc4:	f006 fc20 	bl	8008808 <UsbTransfer>

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	200002f8 	.word	0x200002f8
 8001fd0:	20000278 	.word	0x20000278

08001fd4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001fd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fd6:	b09b      	sub	sp, #108	; 0x6c
 8001fd8:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001fda:	480e      	ldr	r0, [pc, #56]	; (8002014 <CAN2_RX0_IRQHandler+0x40>)
 8001fdc:	f000 fe60 	bl	8002ca0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
  CanSaveReceivedData(CAN_LOW_SPEED, &can_rx_frame_template);
 8001fe0:	46bc      	mov	ip, r7
 8001fe2:	4e0c      	ldr	r6, [pc, #48]	; (8002014 <CAN2_RX0_IRQHandler+0x40>)
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	; (8002018 <CAN2_RX0_IRQHandler+0x44>)
 8001fe6:	9307      	str	r3, [sp, #28]
 8001fe8:	466d      	mov	r5, sp
 8001fea:	f106 040c 	add.w	r4, r6, #12
 8001fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ff2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001ff6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001ffa:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001ffe:	4660      	mov	r0, ip
 8002000:	f7fe fc10 	bl	8000824 <CanSaveReceivedData>
  CatchErrorOccuring(&can_rx_frame_template);
 8002004:	4804      	ldr	r0, [pc, #16]	; (8002018 <CAN2_RX0_IRQHandler+0x44>)
 8002006:	f7ff f909 	bl	800121c <CatchErrorOccuring>

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	374c      	adds	r7, #76	; 0x4c
 800200e:	46bd      	mov	sp, r7
 8002010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002012:	bf00      	nop
 8002014:	200002f8 	.word	0x200002f8
 8002018:	200003c0 	.word	0x200003c0

0800201c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <CAN2_RX1_IRQHandler+0x10>)
 8002022:	f000 fe3d 	bl	8002ca0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200002f8 	.word	0x200002f8

08002030 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <OTG_HS_IRQHandler+0x10>)
 8002036:	f001 fccf 	bl	80039d8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */
//HAL_GPIO_TogglePin(LED_D6_GPIO_Port, LED_D6_Pin);
  /* USER CODE END OTG_HS_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000a48 	.word	0x20000a48

08002044 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	e00a      	b.n	800206c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002056:	f3af 8000 	nop.w
 800205a:	4601      	mov	r1, r0
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	60ba      	str	r2, [r7, #8]
 8002062:	b2ca      	uxtb	r2, r1
 8002064:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	3301      	adds	r3, #1
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	697a      	ldr	r2, [r7, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	429a      	cmp	r2, r3
 8002072:	dbf0      	blt.n	8002056 <_read+0x12>
	}

return len;
 8002074:	687b      	ldr	r3, [r7, #4]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	60f8      	str	r0, [r7, #12]
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
 800208e:	e009      	b.n	80020a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	60ba      	str	r2, [r7, #8]
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	3301      	adds	r3, #1
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697a      	ldr	r2, [r7, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	dbf1      	blt.n	8002090 <_write+0x12>
	}
	return len;
 80020ac:	687b      	ldr	r3, [r7, #4]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <_close>:

int _close(int file)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b083      	sub	sp, #12
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
	return -1;
 80020be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020de:	605a      	str	r2, [r3, #4]
	return 0;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <_isatty>:

int _isatty(int file)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
	return 1;
 80020f6:	2301      	movs	r3, #1
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
	return 0;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
	...

08002120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002128:	4a14      	ldr	r2, [pc, #80]	; (800217c <_sbrk+0x5c>)
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <_sbrk+0x60>)
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <_sbrk+0x64>)
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <_sbrk+0x68>)
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d207      	bcs.n	8002160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002150:	f006 ffec 	bl	800912c <__errno>
 8002154:	4603      	mov	r3, r0
 8002156:	220c      	movs	r2, #12
 8002158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	e009      	b.n	8002174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <_sbrk+0x64>)
 8002170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20020000 	.word	0x20020000
 8002180:	00004000 	.word	0x00004000
 8002184:	20000210 	.word	0x20000210
 8002188:	20000e60 	.word	0x20000e60

0800218c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <SystemInit+0x28>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	4a07      	ldr	r2, [pc, #28]	; (80021b4 <SystemInit+0x28>)
 8002198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800219c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021a0:	4b04      	ldr	r3, [pc, #16]	; (80021b4 <SystemInit+0x28>)
 80021a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021a6:	609a      	str	r2, [r3, #8]
#endif
}
 80021a8:	bf00      	nop
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	e000ed00 	.word	0xe000ed00

080021b8 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 80021bc:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <MX_TIM10_Init+0x40>)
 80021be:	4a0f      	ldr	r2, [pc, #60]	; (80021fc <MX_TIM10_Init+0x44>)
 80021c0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4999;
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <MX_TIM10_Init+0x40>)
 80021c4:	f241 3287 	movw	r2, #4999	; 0x1387
 80021c8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <MX_TIM10_Init+0x40>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 7999;
 80021d0:	4b09      	ldr	r3, [pc, #36]	; (80021f8 <MX_TIM10_Init+0x40>)
 80021d2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80021d6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d8:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <MX_TIM10_Init+0x40>)
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <MX_TIM10_Init+0x40>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80021e4:	4804      	ldr	r0, [pc, #16]	; (80021f8 <MX_TIM10_Init+0x40>)
 80021e6:	f003 f86d 	bl	80052c4 <HAL_TIM_Base_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80021f0:	f7ff fdd0 	bl	8001d94 <Error_Handler>
  }

}
 80021f4:	bf00      	nop
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20000484 	.word	0x20000484
 80021fc:	40014400 	.word	0x40014400

08002200 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0e      	ldr	r2, [pc, #56]	; (8002248 <HAL_TIM_Base_MspInit+0x48>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d115      	bne.n	800223e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	4b0d      	ldr	r3, [pc, #52]	; (800224c <HAL_TIM_Base_MspInit+0x4c>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	4a0c      	ldr	r2, [pc, #48]	; (800224c <HAL_TIM_Base_MspInit+0x4c>)
 800221c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002220:	6453      	str	r3, [r2, #68]	; 0x44
 8002222:	4b0a      	ldr	r3, [pc, #40]	; (800224c <HAL_TIM_Base_MspInit+0x4c>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2101      	movs	r1, #1
 8002232:	2019      	movs	r0, #25
 8002234:	f001 f849 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002238:	2019      	movs	r0, #25
 800223a:	f001 f862 	bl	8003302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40014400 	.word	0x40014400
 800224c:	40023800 	.word	0x40023800

08002250 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002250:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002288 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002254:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002256:	e003      	b.n	8002260 <LoopCopyDataInit>

08002258 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002258:	4b0c      	ldr	r3, [pc, #48]	; (800228c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800225a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800225c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800225e:	3104      	adds	r1, #4

08002260 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002260:	480b      	ldr	r0, [pc, #44]	; (8002290 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002262:	4b0c      	ldr	r3, [pc, #48]	; (8002294 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002264:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002266:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002268:	d3f6      	bcc.n	8002258 <CopyDataInit>
  ldr  r2, =_sbss
 800226a:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800226c:	e002      	b.n	8002274 <LoopFillZerobss>

0800226e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800226e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002270:	f842 3b04 	str.w	r3, [r2], #4

08002274 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002274:	4b09      	ldr	r3, [pc, #36]	; (800229c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002276:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002278:	d3f9      	bcc.n	800226e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800227a:	f7ff ff87 	bl	800218c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800227e:	f006 ff5b 	bl	8009138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002282:	f7ff fc99 	bl	8001bb8 <main>
  bx  lr    
 8002286:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002288:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800228c:	0800a694 	.word	0x0800a694
  ldr  r0, =_sdata
 8002290:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002294:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8002298:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 800229c:	20000e60 	.word	0x20000e60

080022a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a0:	e7fe      	b.n	80022a0 <ADC_IRQHandler>
	...

080022a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_Init+0x40>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0d      	ldr	r2, [pc, #52]	; (80022e4 <HAL_Init+0x40>)
 80022ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_Init+0x40>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0a      	ldr	r2, [pc, #40]	; (80022e4 <HAL_Init+0x40>)
 80022ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022c0:	4b08      	ldr	r3, [pc, #32]	; (80022e4 <HAL_Init+0x40>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a07      	ldr	r2, [pc, #28]	; (80022e4 <HAL_Init+0x40>)
 80022c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022cc:	2003      	movs	r0, #3
 80022ce:	f000 fff1 	bl	80032b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022d2:	2000      	movs	r0, #0
 80022d4:	f000 f808 	bl	80022e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d8:	f7ff fd64 	bl	8001da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40023c00 	.word	0x40023c00

080022e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_InitTick+0x54>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_InitTick+0x58>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4619      	mov	r1, r3
 80022fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002302:	fbb2 f3f3 	udiv	r3, r2, r3
 8002306:	4618      	mov	r0, r3
 8002308:	f001 f809 	bl	800331e <HAL_SYSTICK_Config>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e00e      	b.n	8002334 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2b0f      	cmp	r3, #15
 800231a:	d80a      	bhi.n	8002332 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800231c:	2200      	movs	r2, #0
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	f04f 30ff 	mov.w	r0, #4294967295
 8002324:	f000 ffd1 	bl	80032ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002328:	4a06      	ldr	r2, [pc, #24]	; (8002344 <HAL_InitTick+0x5c>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	e000      	b.n	8002334 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000004 	.word	0x20000004
 8002340:	2000000c 	.word	0x2000000c
 8002344:	20000008 	.word	0x20000008

08002348 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800234c:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_IncTick+0x20>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_IncTick+0x24>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4413      	add	r3, r2
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <HAL_IncTick+0x24>)
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	2000000c 	.word	0x2000000c
 800236c:	200004c4 	.word	0x200004c4

08002370 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return uwTick;
 8002374:	4b03      	ldr	r3, [pc, #12]	; (8002384 <HAL_GetTick+0x14>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	200004c4 	.word	0x200004c4

08002388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002390:	f7ff ffee 	bl	8002370 <HAL_GetTick>
 8002394:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a0:	d005      	beq.n	80023ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_Delay+0x44>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4413      	add	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ae:	bf00      	nop
 80023b0:	f7ff ffde 	bl	8002370 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d8f7      	bhi.n	80023b0 <HAL_Delay+0x28>
  {
  }
}
 80023c0:	bf00      	nop
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	2000000c 	.word	0x2000000c

080023d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e0ed      	b.n	80025be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d102      	bne.n	80023f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7fe f926 	bl	8000640 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0202 	bic.w	r2, r2, #2
 8002402:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002404:	f7ff ffb4 	bl	8002370 <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800240a:	e012      	b.n	8002432 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800240c:	f7ff ffb0 	bl	8002370 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b0a      	cmp	r3, #10
 8002418:	d90b      	bls.n	8002432 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2205      	movs	r2, #5
 800242a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e0c5      	b.n	80025be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1e5      	bne.n	800240c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002450:	f7ff ff8e 	bl	8002370 <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002456:	e012      	b.n	800247e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002458:	f7ff ff8a 	bl	8002370 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b0a      	cmp	r3, #10
 8002464:	d90b      	bls.n	800247e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2205      	movs	r2, #5
 8002476:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e09f      	b.n	80025be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0e5      	beq.n	8002458 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7e1b      	ldrb	r3, [r3, #24]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d108      	bne.n	80024a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e007      	b.n	80024b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	7e5b      	ldrb	r3, [r3, #25]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d108      	bne.n	80024d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	e007      	b.n	80024e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	7e9b      	ldrb	r3, [r3, #26]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d108      	bne.n	80024fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f042 0220 	orr.w	r2, r2, #32
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	e007      	b.n	800250a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0220 	bic.w	r2, r2, #32
 8002508:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	7edb      	ldrb	r3, [r3, #27]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d108      	bne.n	8002524 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0210 	bic.w	r2, r2, #16
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	e007      	b.n	8002534 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0210 	orr.w	r2, r2, #16
 8002532:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	7f1b      	ldrb	r3, [r3, #28]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d108      	bne.n	800254e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 0208 	orr.w	r2, r2, #8
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e007      	b.n	800255e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0208 	bic.w	r2, r2, #8
 800255c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7f5b      	ldrb	r3, [r3, #29]
 8002562:	2b01      	cmp	r3, #1
 8002564:	d108      	bne.n	8002578 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 0204 	orr.w	r2, r2, #4
 8002574:	601a      	str	r2, [r3, #0]
 8002576:	e007      	b.n	8002588 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0204 	bic.w	r2, r2, #4
 8002586:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	431a      	orrs	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	ea42 0103 	orr.w	r1, r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	1e5a      	subs	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025de:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d003      	beq.n	80025ee <HAL_CAN_ConfigFilter+0x26>
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	f040 80be 	bne.w	800276a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80025ee:	4b65      	ldr	r3, [pc, #404]	; (8002784 <HAL_CAN_ConfigFilter+0x1bc>)
 80025f0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025f8:	f043 0201 	orr.w	r2, r3, #1
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002608:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	431a      	orrs	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	f003 031f 	and.w	r3, r3, #31
 800262e:	2201      	movs	r2, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	43db      	mvns	r3, r3
 8002640:	401a      	ands	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d123      	bne.n	8002698 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	43db      	mvns	r3, r3
 800265a:	401a      	ands	r2, r3
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002672:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3248      	adds	r2, #72	; 0x48
 8002678:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800268c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800268e:	6979      	ldr	r1, [r7, #20]
 8002690:	3348      	adds	r3, #72	; 0x48
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	440b      	add	r3, r1
 8002696:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	69db      	ldr	r3, [r3, #28]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d122      	bne.n	80026e6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	431a      	orrs	r2, r3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80026c0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3248      	adds	r2, #72	; 0x48
 80026c6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80026da:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80026dc:	6979      	ldr	r1, [r7, #20]
 80026de:	3348      	adds	r3, #72	; 0x48
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	440b      	add	r3, r1
 80026e4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	401a      	ands	r2, r3
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002700:	e007      	b.n	8002712 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	431a      	orrs	r2, r3
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	43db      	mvns	r3, r3
 8002724:	401a      	ands	r2, r3
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800272c:	e007      	b.n	800273e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	431a      	orrs	r2, r3
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d107      	bne.n	8002756 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	431a      	orrs	r2, r3
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800275c:	f023 0201 	bic.w	r2, r3, #1
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002766:	2300      	movs	r3, #0
 8002768:	e006      	b.n	8002778 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
  }
}
 8002778:	4618      	mov	r0, r3
 800277a:	371c      	adds	r7, #28
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40006400 	.word	0x40006400

08002788 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d12e      	bne.n	80027fa <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2202      	movs	r2, #2
 80027a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80027b4:	f7ff fddc 	bl	8002370 <HAL_GetTick>
 80027b8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027ba:	e012      	b.n	80027e2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80027bc:	f7ff fdd8 	bl	8002370 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b0a      	cmp	r3, #10
 80027c8:	d90b      	bls.n	80027e2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2205      	movs	r2, #5
 80027da:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e012      	b.n	8002808 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e5      	bne.n	80027bc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e006      	b.n	8002808 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
  }
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002824:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800282e:	7ffb      	ldrb	r3, [r7, #31]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d003      	beq.n	800283c <HAL_CAN_AddTxMessage+0x2c>
 8002834:	7ffb      	ldrb	r3, [r7, #31]
 8002836:	2b02      	cmp	r3, #2
 8002838:	f040 80b8 	bne.w	80029ac <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10a      	bne.n	800285c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002856:	2b00      	cmp	r3, #0
 8002858:	f000 80a0 	beq.w	800299c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	0e1b      	lsrs	r3, r3, #24
 8002860:	f003 0303 	and.w	r3, r3, #3
 8002864:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	2b02      	cmp	r3, #2
 800286a:	d907      	bls.n	800287c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002870:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e09e      	b.n	80029ba <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800287c:	2201      	movs	r2, #1
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	409a      	lsls	r2, r3
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d10d      	bne.n	80028aa <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002898:	68f9      	ldr	r1, [r7, #12]
 800289a:	6809      	ldr	r1, [r1, #0]
 800289c:	431a      	orrs	r2, r3
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	3318      	adds	r3, #24
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	440b      	add	r3, r1
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e00f      	b.n	80028ca <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028b4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028ba:	68f9      	ldr	r1, [r7, #12]
 80028bc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80028be:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	3318      	adds	r3, #24
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	440b      	add	r3, r1
 80028c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6819      	ldr	r1, [r3, #0]
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	691a      	ldr	r2, [r3, #16]
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	3318      	adds	r3, #24
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	440b      	add	r3, r1
 80028da:	3304      	adds	r3, #4
 80028dc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	7d1b      	ldrb	r3, [r3, #20]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d111      	bne.n	800290a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	3318      	adds	r3, #24
 80028ee:	011b      	lsls	r3, r3, #4
 80028f0:	4413      	add	r3, r2
 80028f2:	3304      	adds	r3, #4
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	6811      	ldr	r1, [r2, #0]
 80028fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	3318      	adds	r3, #24
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	440b      	add	r3, r1
 8002906:	3304      	adds	r3, #4
 8002908:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3307      	adds	r3, #7
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	061a      	lsls	r2, r3, #24
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3306      	adds	r3, #6
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3305      	adds	r3, #5
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	4313      	orrs	r3, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	3204      	adds	r2, #4
 800292a:	7812      	ldrb	r2, [r2, #0]
 800292c:	4610      	mov	r0, r2
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	6811      	ldr	r1, [r2, #0]
 8002932:	ea43 0200 	orr.w	r2, r3, r0
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	440b      	add	r3, r1
 800293c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002940:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3303      	adds	r3, #3
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	061a      	lsls	r2, r3, #24
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	3302      	adds	r3, #2
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3301      	adds	r3, #1
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	021b      	lsls	r3, r3, #8
 800295c:	4313      	orrs	r3, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	7812      	ldrb	r2, [r2, #0]
 8002962:	4610      	mov	r0, r2
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	6811      	ldr	r1, [r2, #0]
 8002968:	ea43 0200 	orr.w	r2, r3, r0
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	440b      	add	r3, r1
 8002972:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002976:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	3318      	adds	r3, #24
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	4413      	add	r3, r2
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	6811      	ldr	r1, [r2, #0]
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	3318      	adds	r3, #24
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	440b      	add	r3, r1
 8002996:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002998:	2300      	movs	r3, #0
 800299a:	e00e      	b.n	80029ba <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e006      	b.n	80029ba <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
  }
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3724      	adds	r7, #36	; 0x24
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b085      	sub	sp, #20
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029d8:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80029da:	7afb      	ldrb	r3, [r7, #11]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d002      	beq.n	80029e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80029e0:	7afb      	ldrb	r3, [r7, #11]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d11d      	bne.n	8002a22 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3301      	adds	r3, #1
 80029f8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d002      	beq.n	8002a0e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d002      	beq.n	8002a22 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002a22:	68fb      	ldr	r3, [r7, #12]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a44:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a46:	7dfb      	ldrb	r3, [r7, #23]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d003      	beq.n	8002a54 <HAL_CAN_GetRxMessage+0x24>
 8002a4c:	7dfb      	ldrb	r3, [r7, #23]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	f040 80f3 	bne.w	8002c3a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10e      	bne.n	8002a78 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d116      	bne.n	8002a96 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e0e7      	b.n	8002c48 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d107      	bne.n	8002a96 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0d8      	b.n	8002c48 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	331b      	adds	r3, #27
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	4413      	add	r3, r2
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0204 	and.w	r2, r3, #4
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10c      	bne.n	8002ace <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	331b      	adds	r3, #27
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	4413      	add	r3, r2
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	0d5b      	lsrs	r3, r3, #21
 8002ac4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	601a      	str	r2, [r3, #0]
 8002acc:	e00b      	b.n	8002ae6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	331b      	adds	r3, #27
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	4413      	add	r3, r2
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	08db      	lsrs	r3, r3, #3
 8002ade:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	331b      	adds	r3, #27
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	4413      	add	r3, r2
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0202 	and.w	r2, r3, #2
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	331b      	adds	r3, #27
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	4413      	add	r3, r2
 8002b08:	3304      	adds	r3, #4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 020f 	and.w	r2, r3, #15
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	331b      	adds	r3, #27
 8002b1c:	011b      	lsls	r3, r3, #4
 8002b1e:	4413      	add	r3, r2
 8002b20:	3304      	adds	r3, #4
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	331b      	adds	r3, #27
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	4413      	add	r3, r2
 8002b38:	3304      	adds	r3, #4
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	0c1b      	lsrs	r3, r3, #16
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	0a1a      	lsrs	r2, r3, #8
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	3301      	adds	r3, #1
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	4413      	add	r3, r2
 8002b7e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	0c1a      	lsrs	r2, r3, #16
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	3302      	adds	r3, #2
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	0e1a      	lsrs	r2, r3, #24
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	3303      	adds	r3, #3
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	3304      	adds	r3, #4
 8002bbc:	b2d2      	uxtb	r2, r2
 8002bbe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	0a1a      	lsrs	r2, r3, #8
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	3305      	adds	r3, #5
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	0c1a      	lsrs	r2, r3, #16
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	3306      	adds	r3, #6
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	0e1a      	lsrs	r2, r3, #24
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	3307      	adds	r3, #7
 8002c0a:	b2d2      	uxtb	r2, r2
 8002c0c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d108      	bne.n	8002c26 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0220 	orr.w	r2, r2, #32
 8002c22:	60da      	str	r2, [r3, #12]
 8002c24:	e007      	b.n	8002c36 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0220 	orr.w	r2, r2, #32
 8002c34:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e006      	b.n	8002c48 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
  }
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c64:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c66:	7bfb      	ldrb	r3, [r7, #15]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d002      	beq.n	8002c72 <HAL_CAN_ActivateNotification+0x1e>
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d109      	bne.n	8002c86 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6959      	ldr	r1, [r3, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e006      	b.n	8002c94 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
  }
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3714      	adds	r7, #20
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d07c      	beq.n	8002de0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d023      	beq.n	8002d38 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 f983 	bl	800300e <HAL_CAN_TxMailbox0CompleteCallback>
 8002d08:	e016      	b.n	8002d38 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	f003 0304 	and.w	r3, r3, #4
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d004      	beq.n	8002d1e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1c:	e00c      	b.n	8002d38 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	f003 0308 	and.w	r3, r3, #8
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d004      	beq.n	8002d32 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d30:	e002      	b.n	8002d38 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f989 	bl	800304a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d024      	beq.n	8002d8c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 f963 	bl	8003022 <HAL_CAN_TxMailbox1CompleteCallback>
 8002d5c:	e016      	b.n	8002d8c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d004      	beq.n	8002d72 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002d70:	e00c      	b.n	8002d8c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d004      	beq.n	8002d86 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
 8002d84:	e002      	b.n	8002d8c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f969 	bl	800305e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d024      	beq.n	8002de0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d9e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d003      	beq.n	8002db2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f943 	bl	8003036 <HAL_CAN_TxMailbox2CompleteCallback>
 8002db0:	e016      	b.n	8002de0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d004      	beq.n	8002dc6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc4:	e00c      	b.n	8002de0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d004      	beq.n	8002dda <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002dd8:	e002      	b.n	8002de0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f949 	bl	8003072 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	f003 0308 	and.w	r3, r3, #8
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00c      	beq.n	8002e04 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d007      	beq.n	8002e04 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2210      	movs	r2, #16
 8002e02:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d006      	beq.n	8002e26 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2208      	movs	r2, #8
 8002e1e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f000 f93a 	bl	800309a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e26:	6a3b      	ldr	r3, [r7, #32]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d009      	beq.n	8002e44 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f003 0303 	and.w	r3, r3, #3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f921 	bl	8003086 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e44:	6a3b      	ldr	r3, [r7, #32]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00c      	beq.n	8002e68 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f003 0310 	and.w	r3, r3, #16
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d007      	beq.n	8002e68 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2210      	movs	r2, #16
 8002e66:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00b      	beq.n	8002e8a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d006      	beq.n	8002e8a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2208      	movs	r2, #8
 8002e82:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f91c 	bl	80030c2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d009      	beq.n	8002ea8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f903 	bl	80030ae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d006      	beq.n	8002eca <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f906 	bl	80030d6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00b      	beq.n	8002eec <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d006      	beq.n	8002eec <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2208      	movs	r2, #8
 8002ee4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f8ff 	bl	80030ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d07b      	beq.n	8002fee <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d072      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	f043 0301 	orr.w	r3, r3, #1
 8002f1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f32:	f043 0302 	orr.w	r3, r3, #2
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f38:	6a3b      	ldr	r3, [r7, #32]
 8002f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d008      	beq.n	8002f54 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	f043 0304 	orr.w	r3, r3, #4
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f54:	6a3b      	ldr	r3, [r7, #32]
 8002f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d043      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d03e      	beq.n	8002fe6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f6e:	2b60      	cmp	r3, #96	; 0x60
 8002f70:	d02b      	beq.n	8002fca <HAL_CAN_IRQHandler+0x32a>
 8002f72:	2b60      	cmp	r3, #96	; 0x60
 8002f74:	d82e      	bhi.n	8002fd4 <HAL_CAN_IRQHandler+0x334>
 8002f76:	2b50      	cmp	r3, #80	; 0x50
 8002f78:	d022      	beq.n	8002fc0 <HAL_CAN_IRQHandler+0x320>
 8002f7a:	2b50      	cmp	r3, #80	; 0x50
 8002f7c:	d82a      	bhi.n	8002fd4 <HAL_CAN_IRQHandler+0x334>
 8002f7e:	2b40      	cmp	r3, #64	; 0x40
 8002f80:	d019      	beq.n	8002fb6 <HAL_CAN_IRQHandler+0x316>
 8002f82:	2b40      	cmp	r3, #64	; 0x40
 8002f84:	d826      	bhi.n	8002fd4 <HAL_CAN_IRQHandler+0x334>
 8002f86:	2b30      	cmp	r3, #48	; 0x30
 8002f88:	d010      	beq.n	8002fac <HAL_CAN_IRQHandler+0x30c>
 8002f8a:	2b30      	cmp	r3, #48	; 0x30
 8002f8c:	d822      	bhi.n	8002fd4 <HAL_CAN_IRQHandler+0x334>
 8002f8e:	2b10      	cmp	r3, #16
 8002f90:	d002      	beq.n	8002f98 <HAL_CAN_IRQHandler+0x2f8>
 8002f92:	2b20      	cmp	r3, #32
 8002f94:	d005      	beq.n	8002fa2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002f96:	e01d      	b.n	8002fd4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	f043 0308 	orr.w	r3, r3, #8
 8002f9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fa0:	e019      	b.n	8002fd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	f043 0310 	orr.w	r3, r3, #16
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002faa:	e014      	b.n	8002fd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	f043 0320 	orr.w	r3, r3, #32
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fb4:	e00f      	b.n	8002fd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fbe:	e00a      	b.n	8002fd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fc8:	e005      	b.n	8002fd6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fd2:	e000      	b.n	8002fd6 <HAL_CAN_IRQHandler+0x336>
            break;
 8002fd4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699a      	ldr	r2, [r3, #24]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002fe4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2204      	movs	r2, #4
 8002fec:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d008      	beq.n	8003006 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f87c 	bl	80030fe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003006:	bf00      	nop
 8003008:	3728      	adds	r7, #40	; 0x28
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr

08003022 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800304a:	b480      	push	{r7}
 800304c:	b083      	sub	sp, #12
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr

08003072 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr

08003086 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003086:	b480      	push	{r7}
 8003088:	b083      	sub	sp, #12
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr

080030ae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80030ca:	bf00      	nop
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80030de:	bf00      	nop
 80030e0:	370c      	adds	r7, #12
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b083      	sub	sp, #12
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80030f2:	bf00      	nop
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003130:	4013      	ands	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800313c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003140:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003146:	4a04      	ldr	r2, [pc, #16]	; (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	60d3      	str	r3, [r2, #12]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <__NVIC_GetPriorityGrouping+0x18>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 0307 	and.w	r3, r3, #7
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	2b00      	cmp	r3, #0
 8003188:	db0b      	blt.n	80031a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	f003 021f 	and.w	r2, r3, #31
 8003190:	4907      	ldr	r1, [pc, #28]	; (80031b0 <__NVIC_EnableIRQ+0x38>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2001      	movs	r0, #1
 800319a:	fa00 f202 	lsl.w	r2, r0, r2
 800319e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000e100 	.word	0xe000e100

080031b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	db0a      	blt.n	80031de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	490c      	ldr	r1, [pc, #48]	; (8003200 <__NVIC_SetPriority+0x4c>)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	440b      	add	r3, r1
 80031d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031dc:	e00a      	b.n	80031f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4908      	ldr	r1, [pc, #32]	; (8003204 <__NVIC_SetPriority+0x50>)
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	3b04      	subs	r3, #4
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	440b      	add	r3, r1
 80031f2:	761a      	strb	r2, [r3, #24]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000e100 	.word	0xe000e100
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	; 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f1c3 0307 	rsb	r3, r3, #7
 8003222:	2b04      	cmp	r3, #4
 8003224:	bf28      	it	cs
 8003226:	2304      	movcs	r3, #4
 8003228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3304      	adds	r3, #4
 800322e:	2b06      	cmp	r3, #6
 8003230:	d902      	bls.n	8003238 <NVIC_EncodePriority+0x30>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3b03      	subs	r3, #3
 8003236:	e000      	b.n	800323a <NVIC_EncodePriority+0x32>
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	f04f 32ff 	mov.w	r2, #4294967295
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	401a      	ands	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003250:	f04f 31ff 	mov.w	r1, #4294967295
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	43d9      	mvns	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	4313      	orrs	r3, r2
         );
}
 8003262:	4618      	mov	r0, r3
 8003264:	3724      	adds	r7, #36	; 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3b01      	subs	r3, #1
 800327c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003280:	d301      	bcc.n	8003286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003282:	2301      	movs	r3, #1
 8003284:	e00f      	b.n	80032a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003286:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <SysTick_Config+0x40>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3b01      	subs	r3, #1
 800328c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800328e:	210f      	movs	r1, #15
 8003290:	f04f 30ff 	mov.w	r0, #4294967295
 8003294:	f7ff ff8e 	bl	80031b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003298:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <SysTick_Config+0x40>)
 800329a:	2200      	movs	r2, #0
 800329c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800329e:	4b04      	ldr	r3, [pc, #16]	; (80032b0 <SysTick_Config+0x40>)
 80032a0:	2207      	movs	r2, #7
 80032a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	e000e010 	.word	0xe000e010

080032b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff ff29 	bl	8003114 <__NVIC_SetPriorityGrouping>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b086      	sub	sp, #24
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	4603      	mov	r3, r0
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032d8:	2300      	movs	r3, #0
 80032da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032dc:	f7ff ff3e 	bl	800315c <__NVIC_GetPriorityGrouping>
 80032e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	6978      	ldr	r0, [r7, #20]
 80032e8:	f7ff ff8e 	bl	8003208 <NVIC_EncodePriority>
 80032ec:	4602      	mov	r2, r0
 80032ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ff5d 	bl	80031b4 <__NVIC_SetPriority>
}
 80032fa:	bf00      	nop
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	4603      	mov	r3, r0
 800330a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800330c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff ff31 	bl	8003178 <__NVIC_EnableIRQ>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331e:	b580      	push	{r7, lr}
 8003320:	b082      	sub	sp, #8
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7ff ffa2 	bl	8003270 <SysTick_Config>
 800332c:	4603      	mov	r3, r0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3708      	adds	r7, #8
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
	...

08003338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003338:	b480      	push	{r7}
 800333a:	b089      	sub	sp, #36	; 0x24
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003346:	2300      	movs	r3, #0
 8003348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800334e:	2300      	movs	r3, #0
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	e16b      	b.n	800362c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003354:	2201      	movs	r2, #1
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	fa02 f303 	lsl.w	r3, r2, r3
 800335c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4013      	ands	r3, r2
 8003366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	429a      	cmp	r2, r3
 800336e:	f040 815a 	bne.w	8003626 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d00b      	beq.n	8003392 <HAL_GPIO_Init+0x5a>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d007      	beq.n	8003392 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003386:	2b11      	cmp	r3, #17
 8003388:	d003      	beq.n	8003392 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b12      	cmp	r3, #18
 8003390:	d130      	bne.n	80033f4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	2203      	movs	r2, #3
 800339e:	fa02 f303 	lsl.w	r3, r2, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4013      	ands	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68da      	ldr	r2, [r3, #12]
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	69ba      	ldr	r2, [r7, #24]
 80033c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033c8:	2201      	movs	r2, #1
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 0201 	and.w	r2, r3, #1
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	2203      	movs	r2, #3
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	4013      	ands	r3, r2
 800340a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	4313      	orrs	r3, r2
 800341c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0xfc>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b12      	cmp	r3, #18
 8003432:	d123      	bne.n	800347c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	08da      	lsrs	r2, r3, #3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3208      	adds	r2, #8
 800343c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	220f      	movs	r2, #15
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	43db      	mvns	r3, r3
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	4013      	ands	r3, r2
 8003456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	fa02 f303 	lsl.w	r3, r2, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4313      	orrs	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	08da      	lsrs	r2, r3, #3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	3208      	adds	r2, #8
 8003476:	69b9      	ldr	r1, [r7, #24]
 8003478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	2203      	movs	r2, #3
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 0203 	and.w	r2, r3, #3
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80b4 	beq.w	8003626 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034be:	2300      	movs	r3, #0
 80034c0:	60fb      	str	r3, [r7, #12]
 80034c2:	4b60      	ldr	r3, [pc, #384]	; (8003644 <HAL_GPIO_Init+0x30c>)
 80034c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c6:	4a5f      	ldr	r2, [pc, #380]	; (8003644 <HAL_GPIO_Init+0x30c>)
 80034c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034cc:	6453      	str	r3, [r2, #68]	; 0x44
 80034ce:	4b5d      	ldr	r3, [pc, #372]	; (8003644 <HAL_GPIO_Init+0x30c>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034da:	4a5b      	ldr	r2, [pc, #364]	; (8003648 <HAL_GPIO_Init+0x310>)
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	089b      	lsrs	r3, r3, #2
 80034e0:	3302      	adds	r3, #2
 80034e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	220f      	movs	r2, #15
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a52      	ldr	r2, [pc, #328]	; (800364c <HAL_GPIO_Init+0x314>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d02b      	beq.n	800355e <HAL_GPIO_Init+0x226>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a51      	ldr	r2, [pc, #324]	; (8003650 <HAL_GPIO_Init+0x318>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d025      	beq.n	800355a <HAL_GPIO_Init+0x222>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a50      	ldr	r2, [pc, #320]	; (8003654 <HAL_GPIO_Init+0x31c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01f      	beq.n	8003556 <HAL_GPIO_Init+0x21e>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a4f      	ldr	r2, [pc, #316]	; (8003658 <HAL_GPIO_Init+0x320>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d019      	beq.n	8003552 <HAL_GPIO_Init+0x21a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a4e      	ldr	r2, [pc, #312]	; (800365c <HAL_GPIO_Init+0x324>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_GPIO_Init+0x216>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a4d      	ldr	r2, [pc, #308]	; (8003660 <HAL_GPIO_Init+0x328>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d00d      	beq.n	800354a <HAL_GPIO_Init+0x212>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a4c      	ldr	r2, [pc, #304]	; (8003664 <HAL_GPIO_Init+0x32c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d007      	beq.n	8003546 <HAL_GPIO_Init+0x20e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a4b      	ldr	r2, [pc, #300]	; (8003668 <HAL_GPIO_Init+0x330>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d101      	bne.n	8003542 <HAL_GPIO_Init+0x20a>
 800353e:	2307      	movs	r3, #7
 8003540:	e00e      	b.n	8003560 <HAL_GPIO_Init+0x228>
 8003542:	2308      	movs	r3, #8
 8003544:	e00c      	b.n	8003560 <HAL_GPIO_Init+0x228>
 8003546:	2306      	movs	r3, #6
 8003548:	e00a      	b.n	8003560 <HAL_GPIO_Init+0x228>
 800354a:	2305      	movs	r3, #5
 800354c:	e008      	b.n	8003560 <HAL_GPIO_Init+0x228>
 800354e:	2304      	movs	r3, #4
 8003550:	e006      	b.n	8003560 <HAL_GPIO_Init+0x228>
 8003552:	2303      	movs	r3, #3
 8003554:	e004      	b.n	8003560 <HAL_GPIO_Init+0x228>
 8003556:	2302      	movs	r3, #2
 8003558:	e002      	b.n	8003560 <HAL_GPIO_Init+0x228>
 800355a:	2301      	movs	r3, #1
 800355c:	e000      	b.n	8003560 <HAL_GPIO_Init+0x228>
 800355e:	2300      	movs	r3, #0
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	f002 0203 	and.w	r2, r2, #3
 8003566:	0092      	lsls	r2, r2, #2
 8003568:	4093      	lsls	r3, r2
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	4313      	orrs	r3, r2
 800356e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003570:	4935      	ldr	r1, [pc, #212]	; (8003648 <HAL_GPIO_Init+0x310>)
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	089b      	lsrs	r3, r3, #2
 8003576:	3302      	adds	r3, #2
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800357e:	4b3b      	ldr	r3, [pc, #236]	; (800366c <HAL_GPIO_Init+0x334>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	43db      	mvns	r3, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4013      	ands	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035a2:	4a32      	ldr	r2, [pc, #200]	; (800366c <HAL_GPIO_Init+0x334>)
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035a8:	4b30      	ldr	r3, [pc, #192]	; (800366c <HAL_GPIO_Init+0x334>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4013      	ands	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035cc:	4a27      	ldr	r2, [pc, #156]	; (800366c <HAL_GPIO_Init+0x334>)
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80035d2:	4b26      	ldr	r3, [pc, #152]	; (800366c <HAL_GPIO_Init+0x334>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035ee:	69ba      	ldr	r2, [r7, #24]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035f6:	4a1d      	ldr	r2, [pc, #116]	; (800366c <HAL_GPIO_Init+0x334>)
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035fc:	4b1b      	ldr	r3, [pc, #108]	; (800366c <HAL_GPIO_Init+0x334>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d003      	beq.n	8003620 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	4313      	orrs	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003620:	4a12      	ldr	r2, [pc, #72]	; (800366c <HAL_GPIO_Init+0x334>)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3301      	adds	r3, #1
 800362a:	61fb      	str	r3, [r7, #28]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b0f      	cmp	r3, #15
 8003630:	f67f ae90 	bls.w	8003354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	3724      	adds	r7, #36	; 0x24
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800
 8003648:	40013800 	.word	0x40013800
 800364c:	40020000 	.word	0x40020000
 8003650:	40020400 	.word	0x40020400
 8003654:	40020800 	.word	0x40020800
 8003658:	40020c00 	.word	0x40020c00
 800365c:	40021000 	.word	0x40021000
 8003660:	40021400 	.word	0x40021400
 8003664:	40021800 	.word	0x40021800
 8003668:	40021c00 	.word	0x40021c00
 800366c:	40013c00 	.word	0x40013c00

08003670 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691a      	ldr	r2, [r3, #16]
 8003680:	887b      	ldrh	r3, [r7, #2]
 8003682:	4013      	ands	r3, r2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003688:	2301      	movs	r3, #1
 800368a:	73fb      	strb	r3, [r7, #15]
 800368c:	e001      	b.n	8003692 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800368e:	2300      	movs	r3, #0
 8003690:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003692:	7bfb      	ldrb	r3, [r7, #15]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	460b      	mov	r3, r1
 80036aa:	807b      	strh	r3, [r7, #2]
 80036ac:	4613      	mov	r3, r2
 80036ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036b0:	787b      	ldrb	r3, [r7, #1]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036b6:	887a      	ldrh	r2, [r7, #2]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036bc:	e003      	b.n	80036c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036be:	887b      	ldrh	r3, [r7, #2]
 80036c0:	041a      	lsls	r2, r3, #16
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	619a      	str	r2, [r3, #24]
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036d2:	b480      	push	{r7}
 80036d4:	b083      	sub	sp, #12
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	460b      	mov	r3, r1
 80036dc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	887b      	ldrh	r3, [r7, #2]
 80036e4:	401a      	ands	r2, r3
 80036e6:	887b      	ldrh	r3, [r7, #2]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d104      	bne.n	80036f6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80036ec:	887b      	ldrh	r3, [r7, #2]
 80036ee:	041a      	lsls	r2, r3, #16
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80036f4:	e002      	b.n	80036fc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80036f6:	887a      	ldrh	r2, [r7, #2]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	619a      	str	r2, [r3, #24]
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003712:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	88fb      	ldrh	r3, [r7, #6]
 8003718:	4013      	ands	r3, r2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d006      	beq.n	800372c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800371e:	4a05      	ldr	r2, [pc, #20]	; (8003734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003720:	88fb      	ldrh	r3, [r7, #6]
 8003722:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	4618      	mov	r0, r3
 8003728:	f7fd ffba 	bl	80016a0 <HAL_GPIO_EXTI_Callback>
  }
}
 800372c:	bf00      	nop
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	40013c00 	.word	0x40013c00

08003738 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800373a:	b08f      	sub	sp, #60	; 0x3c
 800373c:	af0a      	add	r7, sp, #40	; 0x28
 800373e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e10f      	b.n	800396a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d106      	bne.n	800376a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f005 f9e3 	bl	8008b30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2203      	movs	r2, #3
 800376e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377a:	2b00      	cmp	r3, #0
 800377c:	d102      	bne.n	8003784 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f002 f8e4 	bl	8005956 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	687e      	ldr	r6, [r7, #4]
 8003796:	466d      	mov	r5, sp
 8003798:	f106 0410 	add.w	r4, r6, #16
 800379c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800379e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80037ac:	1d33      	adds	r3, r6, #4
 80037ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b0:	6838      	ldr	r0, [r7, #0]
 80037b2:	f001 ffbb 	bl	800572c <USB_CoreInit>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2202      	movs	r2, #2
 80037c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0d0      	b.n	800396a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f002 f8d2 	bl	8005978 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d4:	2300      	movs	r3, #0
 80037d6:	73fb      	strb	r3, [r7, #15]
 80037d8:	e04a      	b.n	8003870 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80037da:	7bfa      	ldrb	r2, [r7, #15]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	333d      	adds	r3, #61	; 0x3d
 80037ea:	2201      	movs	r2, #1
 80037ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80037ee:	7bfa      	ldrb	r2, [r7, #15]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	333c      	adds	r3, #60	; 0x3c
 80037fe:	7bfa      	ldrb	r2, [r7, #15]
 8003800:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003802:	7bfa      	ldrb	r2, [r7, #15]
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	b298      	uxth	r0, r3
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	00db      	lsls	r3, r3, #3
 800380e:	1a9b      	subs	r3, r3, r2
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	440b      	add	r3, r1
 8003814:	3342      	adds	r3, #66	; 0x42
 8003816:	4602      	mov	r2, r0
 8003818:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800381a:	7bfa      	ldrb	r2, [r7, #15]
 800381c:	6879      	ldr	r1, [r7, #4]
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	1a9b      	subs	r3, r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	440b      	add	r3, r1
 8003828:	333f      	adds	r3, #63	; 0x3f
 800382a:	2200      	movs	r2, #0
 800382c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800382e:	7bfa      	ldrb	r2, [r7, #15]
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	1a9b      	subs	r3, r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	440b      	add	r3, r1
 800383c:	3344      	adds	r3, #68	; 0x44
 800383e:	2200      	movs	r2, #0
 8003840:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003842:	7bfa      	ldrb	r2, [r7, #15]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	3348      	adds	r3, #72	; 0x48
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003856:	7bfa      	ldrb	r2, [r7, #15]
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	00db      	lsls	r3, r3, #3
 800385e:	1a9b      	subs	r3, r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	440b      	add	r3, r1
 8003864:	3350      	adds	r3, #80	; 0x50
 8003866:	2200      	movs	r2, #0
 8003868:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	3301      	adds	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
 8003870:	7bfa      	ldrb	r2, [r7, #15]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	429a      	cmp	r2, r3
 8003878:	d3af      	bcc.n	80037da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
 800387e:	e044      	b.n	800390a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003880:	7bfa      	ldrb	r2, [r7, #15]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003892:	2200      	movs	r2, #0
 8003894:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80038c2:	7bfa      	ldrb	r2, [r7, #15]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80038d8:	7bfa      	ldrb	r2, [r7, #15]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80038ee:	7bfa      	ldrb	r2, [r7, #15]
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003904:	7bfb      	ldrb	r3, [r7, #15]
 8003906:	3301      	adds	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
 800390a:	7bfa      	ldrb	r2, [r7, #15]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	429a      	cmp	r2, r3
 8003912:	d3b5      	bcc.n	8003880 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	687e      	ldr	r6, [r7, #4]
 800391c:	466d      	mov	r5, sp
 800391e:	f106 0410 	add.w	r4, r6, #16
 8003922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800392a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800392e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003932:	1d33      	adds	r3, r6, #4
 8003934:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003936:	6838      	ldr	r0, [r7, #0]
 8003938:	f002 f848 	bl	80059cc <USB_DevInit>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d005      	beq.n	800394e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2202      	movs	r2, #2
 8003946:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e00d      	b.n	800396a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f003 f887 	bl	8006a76 <USB_DevDisconnect>

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003972 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003986:	2b01      	cmp	r3, #1
 8003988:	d101      	bne.n	800398e <HAL_PCD_Start+0x1c>
 800398a:	2302      	movs	r3, #2
 800398c:	e020      	b.n	80039d0 <HAL_PCD_Start+0x5e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399a:	2b01      	cmp	r3, #1
 800399c:	d109      	bne.n	80039b2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d005      	beq.n	80039b2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f003 f845 	bl	8006a46 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f001 ffb7 	bl	8005934 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80039d8:	b590      	push	{r4, r7, lr}
 80039da:	b08d      	sub	sp, #52	; 0x34
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f003 f8ec 	bl	8006bcc <USB_GetMode>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f040 839d 	bne.w	8004136 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f003 f850 	bl	8006aa6 <USB_ReadInterrupts>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 8393 	beq.w	8004134 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f003 f847 	bl	8006aa6 <USB_ReadInterrupts>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d107      	bne.n	8003a32 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	695a      	ldr	r2, [r3, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f002 0202 	and.w	r2, r2, #2
 8003a30:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f003 f835 	bl	8006aa6 <USB_ReadInterrupts>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	f003 0310 	and.w	r3, r3, #16
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	d161      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	699a      	ldr	r2, [r3, #24]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f022 0210 	bic.w	r2, r2, #16
 8003a54:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003a56:	6a3b      	ldr	r3, [r7, #32]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f003 020f 	and.w	r2, r3, #15
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	3304      	adds	r3, #4
 8003a74:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	0c5b      	lsrs	r3, r3, #17
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d124      	bne.n	8003acc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a88:	4013      	ands	r3, r2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d035      	beq.n	8003afa <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	6a38      	ldr	r0, [r7, #32]
 8003aa2:	f002 fead 	bl	8006800 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	091b      	lsrs	r3, r3, #4
 8003aae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ab2:	441a      	add	r2, r3
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	699a      	ldr	r2, [r3, #24]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	091b      	lsrs	r3, r3, #4
 8003ac0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ac4:	441a      	add	r2, r3
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	619a      	str	r2, [r3, #24]
 8003aca:	e016      	b.n	8003afa <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	0c5b      	lsrs	r3, r3, #17
 8003ad0:	f003 030f 	and.w	r3, r3, #15
 8003ad4:	2b06      	cmp	r3, #6
 8003ad6:	d110      	bne.n	8003afa <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ade:	2208      	movs	r2, #8
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	6a38      	ldr	r0, [r7, #32]
 8003ae4:	f002 fe8c 	bl	8006800 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	699a      	ldr	r2, [r3, #24]
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	091b      	lsrs	r3, r3, #4
 8003af0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003af4:	441a      	add	r2, r3
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0210 	orr.w	r2, r2, #16
 8003b08:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f002 ffc9 	bl	8006aa6 <USB_ReadInterrupts>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003b1e:	d16e      	bne.n	8003bfe <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f002 ffcf 	bl	8006acc <USB_ReadDevAllOutEpInterrupt>
 8003b2e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003b30:	e062      	b.n	8003bf8 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d057      	beq.n	8003bec <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b42:	b2d2      	uxtb	r2, r2
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f002 fff4 	bl	8006b34 <USB_ReadDevOutEPInterrupt>
 8003b4c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f003 0301 	and.w	r3, r3, #1
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00c      	beq.n	8003b72 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b64:	461a      	mov	r2, r3
 8003b66:	2301      	movs	r3, #1
 8003b68:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003b6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 fdb1 	bl	80046d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00c      	beq.n	8003b96 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b88:	461a      	mov	r2, r3
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003b8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 feab 	bl	80048ec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d008      	beq.n	8003bb2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bac:	461a      	mov	r2, r3
 8003bae:	2310      	movs	r3, #16
 8003bb0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	f003 0320 	and.w	r3, r3, #32
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2320      	movs	r3, #32
 8003bcc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d009      	beq.n	8003bec <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be4:	461a      	mov	r2, r3
 8003be6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003bea:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	3301      	adds	r3, #1
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d199      	bne.n	8003b32 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4618      	mov	r0, r3
 8003c04:	f002 ff4f 	bl	8006aa6 <USB_ReadInterrupts>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c0e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c12:	f040 80c0 	bne.w	8003d96 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f002 ff70 	bl	8006b00 <USB_ReadDevAllInEpInterrupt>
 8003c20:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003c26:	e0b2      	b.n	8003d8e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 80a7 	beq.w	8003d82 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f002 ff96 	bl	8006b70 <USB_ReadDevInEPInterrupt>
 8003c44:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d057      	beq.n	8003d00 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	2201      	movs	r2, #1
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69f9      	ldr	r1, [r7, #28]
 8003c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c70:	4013      	ands	r3, r2
 8003c72:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c80:	461a      	mov	r2, r3
 8003c82:	2301      	movs	r3, #1
 8003c84:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d132      	bne.n	8003cf4 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003c8e:	6879      	ldr	r1, [r7, #4]
 8003c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c92:	4613      	mov	r3, r2
 8003c94:	00db      	lsls	r3, r3, #3
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	3348      	adds	r3, #72	; 0x48
 8003c9e:	6819      	ldr	r1, [r3, #0]
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	1a9b      	subs	r3, r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4403      	add	r3, r0
 8003cae:	3344      	adds	r3, #68	; 0x44
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4419      	add	r1, r3
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	1a9b      	subs	r3, r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4403      	add	r3, r0
 8003cc2:	3348      	adds	r3, #72	; 0x48
 8003cc4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d113      	bne.n	8003cf4 <HAL_PCD_IRQHandler+0x31c>
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	3350      	adds	r3, #80	; 0x50
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d108      	bne.n	8003cf4 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cec:	461a      	mov	r2, r3
 8003cee:	2101      	movs	r1, #1
 8003cf0:	f002 ff9e 	bl	8006c30 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f004 ff95 	bl	8008c2a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d008      	beq.n	8003d1c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d16:	461a      	mov	r2, r3
 8003d18:	2308      	movs	r3, #8
 8003d1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d008      	beq.n	8003d38 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d32:	461a      	mov	r2, r3
 8003d34:	2310      	movs	r3, #16
 8003d36:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d008      	beq.n	8003d54 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4e:	461a      	mov	r2, r3
 8003d50:	2340      	movs	r3, #64	; 0x40
 8003d52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d008      	beq.n	8003d70 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003d7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 fc1b 	bl	80045b8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	3301      	adds	r3, #1
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8a:	085b      	lsrs	r3, r3, #1
 8003d8c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f47f af49 	bne.w	8003c28 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f002 fe83 	bl	8006aa6 <USB_ReadInterrupts>
 8003da0:	4603      	mov	r3, r0
 8003da2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003daa:	d122      	bne.n	8003df2 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	69fa      	ldr	r2, [r7, #28]
 8003db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d108      	bne.n	8003ddc <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fe27 	bl	8004a28 <HAL_PCDEx_LPM_Callback>
 8003dda:	e002      	b.n	8003de2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f004 ff9b 	bl	8008d18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695a      	ldr	r2, [r3, #20]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003df0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f002 fe55 	bl	8006aa6 <USB_ReadInterrupts>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e06:	d112      	bne.n	8003e2e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d102      	bne.n	8003e1e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f004 ff57 	bl	8008ccc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695a      	ldr	r2, [r3, #20]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003e2c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f002 fe37 	bl	8006aa6 <USB_ReadInterrupts>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e42:	f040 80c7 	bne.w	8003fd4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	69fa      	ldr	r2, [r7, #28]
 8003e50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2110      	movs	r1, #16
 8003e60:	4618      	mov	r0, r3
 8003e62:	f001 ff17 	bl	8005c94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e66:	2300      	movs	r3, #0
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e6a:	e056      	b.n	8003f1a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e7e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e90:	0151      	lsls	r1, r2, #5
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	440a      	add	r2, r1
 8003e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e9e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ebe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ed2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ee4:	0151      	lsls	r1, r2, #5
 8003ee6:	69fa      	ldr	r2, [r7, #28]
 8003ee8:	440a      	add	r2, r1
 8003eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ef2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f04:	0151      	lsls	r1, r2, #5
 8003f06:	69fa      	ldr	r2, [r7, #28]
 8003f08:	440a      	add	r2, r1
 8003f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f12:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	3301      	adds	r3, #1
 8003f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d3a3      	bcc.n	8003e6c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f2a:	69db      	ldr	r3, [r3, #28]
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f32:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003f36:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d016      	beq.n	8003f6e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f50:	f043 030b 	orr.w	r3, r3, #11
 8003f54:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f66:	f043 030b 	orr.w	r3, r3, #11
 8003f6a:	6453      	str	r3, [r2, #68]	; 0x44
 8003f6c:	e015      	b.n	8003f9a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	69fa      	ldr	r2, [r7, #28]
 8003f78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f80:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003f84:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f94:	f043 030b 	orr.w	r3, r3, #11
 8003f98:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	69fa      	ldr	r2, [r7, #28]
 8003fa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fa8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003fac:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f002 fe36 	bl	8006c30 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695a      	ldr	r2, [r3, #20]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003fd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f002 fd64 	bl	8006aa6 <USB_ReadInterrupts>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe8:	d124      	bne.n	8004034 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f002 fdfa 	bl	8006be8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f001 feac 	bl	8005d56 <USB_GetDevSpeed>
 8003ffe:	4603      	mov	r3, r0
 8004000:	461a      	mov	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681c      	ldr	r4, [r3, #0]
 800400a:	f001 f94f 	bl	80052ac <HAL_RCC_GetHCLKFreq>
 800400e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004014:	b2db      	uxtb	r3, r3
 8004016:	461a      	mov	r2, r3
 8004018:	4620      	mov	r0, r4
 800401a:	f001 fbe9 	bl	80057f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f004 fe2b 	bl	8008c7a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	695a      	ldr	r2, [r3, #20]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004032:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4618      	mov	r0, r3
 800403a:	f002 fd34 	bl	8006aa6 <USB_ReadInterrupts>
 800403e:	4603      	mov	r3, r0
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	2b08      	cmp	r3, #8
 8004046:	d10a      	bne.n	800405e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f004 fe08 	bl	8008c5e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f002 0208 	and.w	r2, r2, #8
 800405c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f002 fd1f 	bl	8006aa6 <USB_ReadInterrupts>
 8004068:	4603      	mov	r3, r0
 800406a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800406e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004072:	d10f      	bne.n	8004094 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004074:	2300      	movs	r3, #0
 8004076:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407a:	b2db      	uxtb	r3, r3
 800407c:	4619      	mov	r1, r3
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f004 fe6a 	bl	8008d58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004092:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f002 fd04 	bl	8006aa6 <USB_ReadInterrupts>
 800409e:	4603      	mov	r3, r0
 80040a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040a8:	d10f      	bne.n	80040ca <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	4619      	mov	r1, r3
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f004 fe3d 	bl	8008d34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80040c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f002 fce9 	bl	8006aa6 <USB_ReadInterrupts>
 80040d4:	4603      	mov	r3, r0
 80040d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80040da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040de:	d10a      	bne.n	80040f6 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f004 fe4b 	bl	8008d7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695a      	ldr	r2, [r3, #20]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80040f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f002 fcd3 	bl	8006aa6 <USB_ReadInterrupts>
 8004100:	4603      	mov	r3, r0
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b04      	cmp	r3, #4
 8004108:	d115      	bne.n	8004136 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f004 fe3b 	bl	8008d98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	6859      	ldr	r1, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	430a      	orrs	r2, r1
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	e000      	b.n	8004136 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004134:	bf00      	nop
    }
  }
}
 8004136:	3734      	adds	r7, #52	; 0x34
 8004138:	46bd      	mov	sp, r7
 800413a:	bd90      	pop	{r4, r7, pc}

0800413c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800414e:	2b01      	cmp	r3, #1
 8004150:	d101      	bne.n	8004156 <HAL_PCD_SetAddress+0x1a>
 8004152:	2302      	movs	r3, #2
 8004154:	e013      	b.n	800417e <HAL_PCD_SetAddress+0x42>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	78fa      	ldrb	r2, [r7, #3]
 8004162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f002 fc43 	bl	80069fa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}

08004186 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
 800418e:	4608      	mov	r0, r1
 8004190:	4611      	mov	r1, r2
 8004192:	461a      	mov	r2, r3
 8004194:	4603      	mov	r3, r0
 8004196:	70fb      	strb	r3, [r7, #3]
 8004198:	460b      	mov	r3, r1
 800419a:	803b      	strh	r3, [r7, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80041a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	da0f      	bge.n	80041cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	f003 020f 	and.w	r2, r3, #15
 80041b2:	4613      	mov	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	3338      	adds	r3, #56	; 0x38
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	4413      	add	r3, r2
 80041c0:	3304      	adds	r3, #4
 80041c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	705a      	strb	r2, [r3, #1]
 80041ca:	e00f      	b.n	80041ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	f003 020f 	and.w	r2, r3, #15
 80041d2:	4613      	mov	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	4413      	add	r3, r2
 80041e2:	3304      	adds	r3, #4
 80041e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80041ec:	78fb      	ldrb	r3, [r7, #3]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80041f8:	883a      	ldrh	r2, [r7, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	78ba      	ldrb	r2, [r7, #2]
 8004202:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	785b      	ldrb	r3, [r3, #1]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d004      	beq.n	8004216 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004216:	78bb      	ldrb	r3, [r7, #2]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d102      	bne.n	8004222 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004228:	2b01      	cmp	r3, #1
 800422a:	d101      	bne.n	8004230 <HAL_PCD_EP_Open+0xaa>
 800422c:	2302      	movs	r3, #2
 800422e:	e00e      	b.n	800424e <HAL_PCD_EP_Open+0xc8>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68f9      	ldr	r1, [r7, #12]
 800423e:	4618      	mov	r0, r3
 8004240:	f001 fdae 	bl	8005da0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800424c:	7afb      	ldrb	r3, [r7, #11]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b084      	sub	sp, #16
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	460b      	mov	r3, r1
 8004260:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004262:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004266:	2b00      	cmp	r3, #0
 8004268:	da0f      	bge.n	800428a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	f003 020f 	and.w	r2, r3, #15
 8004270:	4613      	mov	r3, r2
 8004272:	00db      	lsls	r3, r3, #3
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	3338      	adds	r3, #56	; 0x38
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4413      	add	r3, r2
 800427e:	3304      	adds	r3, #4
 8004280:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2201      	movs	r2, #1
 8004286:	705a      	strb	r2, [r3, #1]
 8004288:	e00f      	b.n	80042aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800428a:	78fb      	ldrb	r3, [r7, #3]
 800428c:	f003 020f 	and.w	r2, r3, #15
 8004290:	4613      	mov	r3, r2
 8004292:	00db      	lsls	r3, r3, #3
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	4413      	add	r3, r2
 80042a0:	3304      	adds	r3, #4
 80042a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80042aa:	78fb      	ldrb	r3, [r7, #3]
 80042ac:	f003 030f 	and.w	r3, r3, #15
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_PCD_EP_Close+0x6e>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e00e      	b.n	80042e2 <HAL_PCD_EP_Close+0x8c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68f9      	ldr	r1, [r7, #12]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 fdec 	bl	8005eb0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3710      	adds	r7, #16
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b086      	sub	sp, #24
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	607a      	str	r2, [r7, #4]
 80042f4:	603b      	str	r3, [r7, #0]
 80042f6:	460b      	mov	r3, r1
 80042f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042fa:	7afb      	ldrb	r3, [r7, #11]
 80042fc:	f003 020f 	and.w	r2, r3, #15
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	3304      	adds	r3, #4
 8004312:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2200      	movs	r2, #0
 8004324:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2200      	movs	r2, #0
 800432a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800432c:	7afb      	ldrb	r3, [r7, #11]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	b2da      	uxtb	r2, r3
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	691b      	ldr	r3, [r3, #16]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d102      	bne.n	8004346 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004346:	7afb      	ldrb	r3, [r7, #11]
 8004348:	f003 030f 	and.w	r3, r3, #15
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6818      	ldr	r0, [r3, #0]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	b2db      	uxtb	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	6979      	ldr	r1, [r7, #20]
 800435e:	f002 f8c7 	bl	80064f0 <USB_EP0StartXfer>
 8004362:	e008      	b.n	8004376 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	b2db      	uxtb	r3, r3
 800436e:	461a      	mov	r2, r3
 8004370:	6979      	ldr	r1, [r7, #20]
 8004372:	f001 fe79 	bl	8006068 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	460b      	mov	r3, r1
 800438a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	f003 020f 	and.w	r2, r3, #15
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80043a2:	681b      	ldr	r3, [r3, #0]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b086      	sub	sp, #24
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	607a      	str	r2, [r7, #4]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	460b      	mov	r3, r1
 80043be:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c0:	7afb      	ldrb	r3, [r7, #11]
 80043c2:	f003 020f 	and.w	r2, r3, #15
 80043c6:	4613      	mov	r3, r2
 80043c8:	00db      	lsls	r3, r3, #3
 80043ca:	1a9b      	subs	r3, r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	3338      	adds	r3, #56	; 0x38
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	3304      	adds	r3, #4
 80043d6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	2200      	movs	r2, #0
 80043e8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2201      	movs	r2, #1
 80043ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043f0:	7afb      	ldrb	r3, [r7, #11]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d102      	bne.n	800440a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800440a:	7afb      	ldrb	r3, [r7, #11]
 800440c:	f003 030f 	and.w	r3, r3, #15
 8004410:	2b00      	cmp	r3, #0
 8004412:	d109      	bne.n	8004428 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	6979      	ldr	r1, [r7, #20]
 8004422:	f002 f865 	bl	80064f0 <USB_EP0StartXfer>
 8004426:	e008      	b.n	800443a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6818      	ldr	r0, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	461a      	mov	r2, r3
 8004434:	6979      	ldr	r1, [r7, #20]
 8004436:	f001 fe17 	bl	8006068 <USB_EPStartXfer>
  }

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3718      	adds	r7, #24
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	460b      	mov	r3, r1
 800444e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004450:	78fb      	ldrb	r3, [r7, #3]
 8004452:	f003 020f 	and.w	r2, r3, #15
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	429a      	cmp	r2, r3
 800445c:	d901      	bls.n	8004462 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e050      	b.n	8004504 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004466:	2b00      	cmp	r3, #0
 8004468:	da0f      	bge.n	800448a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	f003 020f 	and.w	r2, r3, #15
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	3338      	adds	r3, #56	; 0x38
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	4413      	add	r3, r2
 800447e:	3304      	adds	r3, #4
 8004480:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	705a      	strb	r2, [r3, #1]
 8004488:	e00d      	b.n	80044a6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	4413      	add	r3, r2
 800449c:	3304      	adds	r3, #4
 800449e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2201      	movs	r2, #1
 80044aa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	f003 030f 	and.w	r3, r3, #15
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_PCD_EP_SetStall+0x82>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e01e      	b.n	8004504 <HAL_PCD_EP_SetStall+0xc0>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68f9      	ldr	r1, [r7, #12]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f002 f9bc 	bl	8006852 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6818      	ldr	r0, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	b2d9      	uxtb	r1, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044f4:	461a      	mov	r2, r3
 80044f6:	f002 fb9b 	bl	8006c30 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	f003 020f 	and.w	r2, r3, #15
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	429a      	cmp	r2, r3
 8004524:	d901      	bls.n	800452a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e042      	b.n	80045b0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800452a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800452e:	2b00      	cmp	r3, #0
 8004530:	da0f      	bge.n	8004552 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	f003 020f 	and.w	r2, r3, #15
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	1a9b      	subs	r3, r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	3338      	adds	r3, #56	; 0x38
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4413      	add	r3, r2
 8004546:	3304      	adds	r3, #4
 8004548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2201      	movs	r2, #1
 800454e:	705a      	strb	r2, [r3, #1]
 8004550:	e00f      	b.n	8004572 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004552:	78fb      	ldrb	r3, [r7, #3]
 8004554:	f003 020f 	and.w	r2, r3, #15
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	4413      	add	r3, r2
 8004568:	3304      	adds	r3, #4
 800456a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2200      	movs	r2, #0
 8004570:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004578:	78fb      	ldrb	r3, [r7, #3]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	b2da      	uxtb	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800458a:	2b01      	cmp	r3, #1
 800458c:	d101      	bne.n	8004592 <HAL_PCD_EP_ClrStall+0x86>
 800458e:	2302      	movs	r3, #2
 8004590:	e00e      	b.n	80045b0 <HAL_PCD_EP_ClrStall+0xa4>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68f9      	ldr	r1, [r7, #12]
 80045a0:	4618      	mov	r0, r3
 80045a2:	f002 f9c4 	bl	800692e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08a      	sub	sp, #40	; 0x28
 80045bc:	af02      	add	r7, sp, #8
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	4613      	mov	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	1a9b      	subs	r3, r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	3338      	adds	r3, #56	; 0x38
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	4413      	add	r3, r2
 80045dc:	3304      	adds	r3, #4
 80045de:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d901      	bls.n	80045f0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e06c      	b.n	80046ca <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	695a      	ldr	r2, [r3, #20]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	69fa      	ldr	r2, [r7, #28]
 8004602:	429a      	cmp	r2, r3
 8004604:	d902      	bls.n	800460c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	3303      	adds	r3, #3
 8004610:	089b      	lsrs	r3, r3, #2
 8004612:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004614:	e02b      	b.n	800466e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	695a      	ldr	r2, [r3, #20]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	429a      	cmp	r2, r3
 800462a:	d902      	bls.n	8004632 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3303      	adds	r3, #3
 8004636:	089b      	lsrs	r3, r3, #2
 8004638:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	68d9      	ldr	r1, [r3, #12]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	b2da      	uxtb	r2, r3
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800464a:	b2db      	uxtb	r3, r3
 800464c:	9300      	str	r3, [sp, #0]
 800464e:	4603      	mov	r3, r0
 8004650:	6978      	ldr	r0, [r7, #20]
 8004652:	f002 f8a0 	bl	8006796 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	441a      	add	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	699a      	ldr	r2, [r3, #24]
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	441a      	add	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	015a      	lsls	r2, r3, #5
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	4413      	add	r3, r2
 8004676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	b29b      	uxth	r3, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	429a      	cmp	r2, r3
 8004682:	d809      	bhi.n	8004698 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	699a      	ldr	r2, [r3, #24]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800468c:	429a      	cmp	r2, r3
 800468e:	d203      	bcs.n	8004698 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1be      	bne.n	8004616 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	695a      	ldr	r2, [r3, #20]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d811      	bhi.n	80046c8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	2201      	movs	r2, #1
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	43db      	mvns	r3, r3
 80046be:	6939      	ldr	r1, [r7, #16]
 80046c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046c4:	4013      	ands	r3, r2
 80046c6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3720      	adds	r7, #32
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
	...

080046d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	333c      	adds	r3, #60	; 0x3c
 80046ec:	3304      	adds	r3, #4
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b01      	cmp	r3, #1
 8004708:	f040 80a0 	bne.w	800484c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d015      	beq.n	8004742 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a72      	ldr	r2, [pc, #456]	; (80048e4 <PCD_EP_OutXfrComplete_int+0x210>)
 800471a:	4293      	cmp	r3, r2
 800471c:	f240 80dd 	bls.w	80048da <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80d7 	beq.w	80048da <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004738:	461a      	mov	r2, r3
 800473a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473e:	6093      	str	r3, [r2, #8]
 8004740:	e0cb      	b.n	80048da <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	f003 0320 	and.w	r3, r3, #32
 8004748:	2b00      	cmp	r3, #0
 800474a:	d009      	beq.n	8004760 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004758:	461a      	mov	r2, r3
 800475a:	2320      	movs	r3, #32
 800475c:	6093      	str	r3, [r2, #8]
 800475e:	e0bc      	b.n	80048da <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 80b7 	bne.w	80048da <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4a5d      	ldr	r2, [pc, #372]	; (80048e4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d90f      	bls.n	8004794 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00a      	beq.n	8004794 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478a:	461a      	mov	r2, r3
 800478c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004790:	6093      	str	r3, [r2, #8]
 8004792:	e0a2      	b.n	80048da <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	4613      	mov	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047a6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	0159      	lsls	r1, r3, #5
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	440b      	add	r3, r1
 80047b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80047ba:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	683a      	ldr	r2, [r7, #0]
 80047c0:	4613      	mov	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	1a9b      	subs	r3, r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4403      	add	r3, r0
 80047ca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80047ce:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4403      	add	r3, r0
 80047f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4419      	add	r1, r3
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	683a      	ldr	r2, [r7, #0]
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4403      	add	r3, r0
 8004808:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800480c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d114      	bne.n	800483e <PCD_EP_OutXfrComplete_int+0x16a>
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	4613      	mov	r3, r2
 800481a:	00db      	lsls	r3, r3, #3
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d108      	bne.n	800483e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6818      	ldr	r0, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004836:	461a      	mov	r2, r3
 8004838:	2101      	movs	r1, #1
 800483a:	f002 f9f9 	bl	8006c30 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	4619      	mov	r1, r3
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f004 f9d5 	bl	8008bf4 <HAL_PCD_DataOutStageCallback>
 800484a:	e046      	b.n	80048da <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	4a26      	ldr	r2, [pc, #152]	; (80048e8 <PCD_EP_OutXfrComplete_int+0x214>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d124      	bne.n	800489e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00a      	beq.n	8004874 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	015a      	lsls	r2, r3, #5
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	4413      	add	r3, r2
 8004866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486a:	461a      	mov	r2, r3
 800486c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004870:	6093      	str	r3, [r2, #8]
 8004872:	e032      	b.n	80048da <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b00      	cmp	r3, #0
 800487c:	d008      	beq.n	8004890 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488a:	461a      	mov	r2, r3
 800488c:	2320      	movs	r3, #32
 800488e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	4619      	mov	r1, r3
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f004 f9ac 	bl	8008bf4 <HAL_PCD_DataOutStageCallback>
 800489c:	e01d      	b.n	80048da <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d114      	bne.n	80048ce <PCD_EP_OutXfrComplete_int+0x1fa>
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	440b      	add	r3, r1
 80048b2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d108      	bne.n	80048ce <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048c6:	461a      	mov	r2, r3
 80048c8:	2100      	movs	r1, #0
 80048ca:	f002 f9b1 	bl	8006c30 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f004 f98d 	bl	8008bf4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3718      	adds	r7, #24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	4f54300a 	.word	0x4f54300a
 80048e8:	4f54310a 	.word	0x4f54310a

080048ec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	333c      	adds	r3, #60	; 0x3c
 8004904:	3304      	adds	r3, #4
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	4a15      	ldr	r2, [pc, #84]	; (8004974 <PCD_EP_OutSetupPacket_int+0x88>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d90e      	bls.n	8004940 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004928:	2b00      	cmp	r3, #0
 800492a:	d009      	beq.n	8004940 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004938:	461a      	mov	r2, r3
 800493a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800493e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f004 f945 	bl	8008bd0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	4a0a      	ldr	r2, [pc, #40]	; (8004974 <PCD_EP_OutSetupPacket_int+0x88>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d90c      	bls.n	8004968 <PCD_EP_OutSetupPacket_int+0x7c>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d108      	bne.n	8004968 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004960:	461a      	mov	r2, r3
 8004962:	2101      	movs	r1, #1
 8004964:	f002 f964 	bl	8006c30 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3718      	adds	r7, #24
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	4f54300a 	.word	0x4f54300a

08004978 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	70fb      	strb	r3, [r7, #3]
 8004984:	4613      	mov	r3, r2
 8004986:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004990:	78fb      	ldrb	r3, [r7, #3]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d107      	bne.n	80049a6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004996:	883b      	ldrh	r3, [r7, #0]
 8004998:	0419      	lsls	r1, r3, #16
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	629a      	str	r2, [r3, #40]	; 0x28
 80049a4:	e028      	b.n	80049f8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	0c1b      	lsrs	r3, r3, #16
 80049ae:	68ba      	ldr	r2, [r7, #8]
 80049b0:	4413      	add	r3, r2
 80049b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049b4:	2300      	movs	r3, #0
 80049b6:	73fb      	strb	r3, [r7, #15]
 80049b8:	e00d      	b.n	80049d6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	3340      	adds	r3, #64	; 0x40
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	0c1b      	lsrs	r3, r3, #16
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	4413      	add	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	3301      	adds	r3, #1
 80049d4:	73fb      	strb	r3, [r7, #15]
 80049d6:	7bfa      	ldrb	r2, [r7, #15]
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	3b01      	subs	r3, #1
 80049dc:	429a      	cmp	r2, r3
 80049de:	d3ec      	bcc.n	80049ba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80049e0:	883b      	ldrh	r3, [r7, #0]
 80049e2:	0418      	lsls	r0, r3, #16
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6819      	ldr	r1, [r3, #0]
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	4302      	orrs	r2, r0
 80049f0:	3340      	adds	r3, #64	; 0x40
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	887a      	ldrh	r2, [r7, #2]
 8004a18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004a34:	bf00      	nop
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d101      	bne.n	8004a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e25b      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d075      	beq.n	8004b4a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a5e:	4ba3      	ldr	r3, [pc, #652]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d00c      	beq.n	8004a84 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a6a:	4ba0      	ldr	r3, [pc, #640]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a72:	2b08      	cmp	r3, #8
 8004a74:	d112      	bne.n	8004a9c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a76:	4b9d      	ldr	r3, [pc, #628]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a82:	d10b      	bne.n	8004a9c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a84:	4b99      	ldr	r3, [pc, #612]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d05b      	beq.n	8004b48 <HAL_RCC_OscConfig+0x108>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d157      	bne.n	8004b48 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e236      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa4:	d106      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x74>
 8004aa6:	4b91      	ldr	r3, [pc, #580]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a90      	ldr	r2, [pc, #576]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004aac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab0:	6013      	str	r3, [r2, #0]
 8004ab2:	e01d      	b.n	8004af0 <HAL_RCC_OscConfig+0xb0>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004abc:	d10c      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x98>
 8004abe:	4b8b      	ldr	r3, [pc, #556]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a8a      	ldr	r2, [pc, #552]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ac8:	6013      	str	r3, [r2, #0]
 8004aca:	4b88      	ldr	r3, [pc, #544]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a87      	ldr	r2, [pc, #540]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	e00b      	b.n	8004af0 <HAL_RCC_OscConfig+0xb0>
 8004ad8:	4b84      	ldr	r3, [pc, #528]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a83      	ldr	r2, [pc, #524]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ade:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ae2:	6013      	str	r3, [r2, #0]
 8004ae4:	4b81      	ldr	r3, [pc, #516]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a80      	ldr	r2, [pc, #512]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004aea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d013      	beq.n	8004b20 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af8:	f7fd fc3a 	bl	8002370 <HAL_GetTick>
 8004afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afe:	e008      	b.n	8004b12 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b00:	f7fd fc36 	bl	8002370 <HAL_GetTick>
 8004b04:	4602      	mov	r2, r0
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	2b64      	cmp	r3, #100	; 0x64
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e1fb      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b12:	4b76      	ldr	r3, [pc, #472]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d0f0      	beq.n	8004b00 <HAL_RCC_OscConfig+0xc0>
 8004b1e:	e014      	b.n	8004b4a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7fd fc26 	bl	8002370 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fd fc22 	bl	8002370 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	; 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e1e7      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b3a:	4b6c      	ldr	r3, [pc, #432]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0xe8>
 8004b46:	e000      	b.n	8004b4a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d063      	beq.n	8004c1e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b56:	4b65      	ldr	r3, [pc, #404]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 030c 	and.w	r3, r3, #12
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00b      	beq.n	8004b7a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b62:	4b62      	ldr	r3, [pc, #392]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b6a:	2b08      	cmp	r3, #8
 8004b6c:	d11c      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b6e:	4b5f      	ldr	r3, [pc, #380]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d116      	bne.n	8004ba8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7a:	4b5c      	ldr	r3, [pc, #368]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d005      	beq.n	8004b92 <HAL_RCC_OscConfig+0x152>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d001      	beq.n	8004b92 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e1bb      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b92:	4b56      	ldr	r3, [pc, #344]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	4952      	ldr	r1, [pc, #328]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba6:	e03a      	b.n	8004c1e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d020      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bb0:	4b4f      	ldr	r3, [pc, #316]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb6:	f7fd fbdb 	bl	8002370 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bbe:	f7fd fbd7 	bl	8002370 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e19c      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd0:	4b46      	ldr	r3, [pc, #280]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0f0      	beq.n	8004bbe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bdc:	4b43      	ldr	r3, [pc, #268]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	4940      	ldr	r1, [pc, #256]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	600b      	str	r3, [r1, #0]
 8004bf0:	e015      	b.n	8004c1e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bf2:	4b3f      	ldr	r3, [pc, #252]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf8:	f7fd fbba 	bl	8002370 <HAL_GetTick>
 8004bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bfe:	e008      	b.n	8004c12 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c00:	f7fd fbb6 	bl	8002370 <HAL_GetTick>
 8004c04:	4602      	mov	r2, r0
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	1ad3      	subs	r3, r2, r3
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e17b      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c12:	4b36      	ldr	r3, [pc, #216]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1f0      	bne.n	8004c00 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d030      	beq.n	8004c8c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d016      	beq.n	8004c60 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c32:	4b30      	ldr	r3, [pc, #192]	; (8004cf4 <HAL_RCC_OscConfig+0x2b4>)
 8004c34:	2201      	movs	r2, #1
 8004c36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c38:	f7fd fb9a 	bl	8002370 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c40:	f7fd fb96 	bl	8002370 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e15b      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c52:	4b26      	ldr	r3, [pc, #152]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d0f0      	beq.n	8004c40 <HAL_RCC_OscConfig+0x200>
 8004c5e:	e015      	b.n	8004c8c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c60:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <HAL_RCC_OscConfig+0x2b4>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c66:	f7fd fb83 	bl	8002370 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c6e:	f7fd fb7f 	bl	8002370 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e144      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c80:	4b1a      	ldr	r3, [pc, #104]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004c82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1f0      	bne.n	8004c6e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 80a0 	beq.w	8004dda <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c9e:	4b13      	ldr	r3, [pc, #76]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10f      	bne.n	8004cca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	4b0f      	ldr	r3, [pc, #60]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	4a0e      	ldr	r2, [pc, #56]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004cba:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <HAL_RCC_OscConfig+0x2ac>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc2:	60bb      	str	r3, [r7, #8]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cca:	4b0b      	ldr	r3, [pc, #44]	; (8004cf8 <HAL_RCC_OscConfig+0x2b8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d121      	bne.n	8004d1a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cd6:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <HAL_RCC_OscConfig+0x2b8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a07      	ldr	r2, [pc, #28]	; (8004cf8 <HAL_RCC_OscConfig+0x2b8>)
 8004cdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ce2:	f7fd fb45 	bl	8002370 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ce8:	e011      	b.n	8004d0e <HAL_RCC_OscConfig+0x2ce>
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800
 8004cf0:	42470000 	.word	0x42470000
 8004cf4:	42470e80 	.word	0x42470e80
 8004cf8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfc:	f7fd fb38 	bl	8002370 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e0fd      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0e:	4b81      	ldr	r3, [pc, #516]	; (8004f14 <HAL_RCC_OscConfig+0x4d4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d106      	bne.n	8004d30 <HAL_RCC_OscConfig+0x2f0>
 8004d22:	4b7d      	ldr	r3, [pc, #500]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d26:	4a7c      	ldr	r2, [pc, #496]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d2e:	e01c      	b.n	8004d6a <HAL_RCC_OscConfig+0x32a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	d10c      	bne.n	8004d52 <HAL_RCC_OscConfig+0x312>
 8004d38:	4b77      	ldr	r3, [pc, #476]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d3c:	4a76      	ldr	r2, [pc, #472]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004d3e:	f043 0304 	orr.w	r3, r3, #4
 8004d42:	6713      	str	r3, [r2, #112]	; 0x70
 8004d44:	4b74      	ldr	r3, [pc, #464]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d48:	4a73      	ldr	r2, [pc, #460]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004d50:	e00b      	b.n	8004d6a <HAL_RCC_OscConfig+0x32a>
 8004d52:	4b71      	ldr	r3, [pc, #452]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d56:	4a70      	ldr	r2, [pc, #448]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004d58:	f023 0301 	bic.w	r3, r3, #1
 8004d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d5e:	4b6e      	ldr	r3, [pc, #440]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	4a6d      	ldr	r2, [pc, #436]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004d64:	f023 0304 	bic.w	r3, r3, #4
 8004d68:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d015      	beq.n	8004d9e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fd fafd 	bl	8002370 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fd faf9 	bl	8002370 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e0bc      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d90:	4b61      	ldr	r3, [pc, #388]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ee      	beq.n	8004d7a <HAL_RCC_OscConfig+0x33a>
 8004d9c:	e014      	b.n	8004dc8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d9e:	f7fd fae7 	bl	8002370 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da4:	e00a      	b.n	8004dbc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da6:	f7fd fae3 	bl	8002370 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e0a6      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dbc:	4b56      	ldr	r3, [pc, #344]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1ee      	bne.n	8004da6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dc8:	7dfb      	ldrb	r3, [r7, #23]
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d105      	bne.n	8004dda <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dce:	4b52      	ldr	r3, [pc, #328]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	4a51      	ldr	r2, [pc, #324]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004dd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 8092 	beq.w	8004f08 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004de4:	4b4c      	ldr	r3, [pc, #304]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f003 030c 	and.w	r3, r3, #12
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d05c      	beq.n	8004eaa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d141      	bne.n	8004e7c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004df8:	4b48      	ldr	r3, [pc, #288]	; (8004f1c <HAL_RCC_OscConfig+0x4dc>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dfe:	f7fd fab7 	bl	8002370 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e06:	f7fd fab3 	bl	8002370 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e078      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e18:	4b3f      	ldr	r3, [pc, #252]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1f0      	bne.n	8004e06 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	69da      	ldr	r2, [r3, #28]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	019b      	lsls	r3, r3, #6
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e3a:	085b      	lsrs	r3, r3, #1
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	041b      	lsls	r3, r3, #16
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e46:	061b      	lsls	r3, r3, #24
 8004e48:	4933      	ldr	r1, [pc, #204]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e4e:	4b33      	ldr	r3, [pc, #204]	; (8004f1c <HAL_RCC_OscConfig+0x4dc>)
 8004e50:	2201      	movs	r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e54:	f7fd fa8c 	bl	8002370 <HAL_GetTick>
 8004e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5a:	e008      	b.n	8004e6e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e5c:	f7fd fa88 	bl	8002370 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e04d      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6e:	4b2a      	ldr	r3, [pc, #168]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d0f0      	beq.n	8004e5c <HAL_RCC_OscConfig+0x41c>
 8004e7a:	e045      	b.n	8004f08 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e7c:	4b27      	ldr	r3, [pc, #156]	; (8004f1c <HAL_RCC_OscConfig+0x4dc>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e82:	f7fd fa75 	bl	8002370 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e8a:	f7fd fa71 	bl	8002370 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e036      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e9c:	4b1e      	ldr	r3, [pc, #120]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1f0      	bne.n	8004e8a <HAL_RCC_OscConfig+0x44a>
 8004ea8:	e02e      	b.n	8004f08 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d101      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e029      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004eb6:	4b18      	ldr	r3, [pc, #96]	; (8004f18 <HAL_RCC_OscConfig+0x4d8>)
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d11c      	bne.n	8004f04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d115      	bne.n	8004f04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ede:	4013      	ands	r3, r2
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d10d      	bne.n	8004f04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d001      	beq.n	8004f08 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e000      	b.n	8004f0a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40007000 	.word	0x40007000
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	42470060 	.word	0x42470060

08004f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e0cc      	b.n	80050ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f34:	4b68      	ldr	r3, [pc, #416]	; (80050d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	683a      	ldr	r2, [r7, #0]
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d90c      	bls.n	8004f5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f42:	4b65      	ldr	r3, [pc, #404]	; (80050d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f4a:	4b63      	ldr	r3, [pc, #396]	; (80050d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	683a      	ldr	r2, [r7, #0]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d001      	beq.n	8004f5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e0b8      	b.n	80050ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d020      	beq.n	8004faa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f74:	4b59      	ldr	r3, [pc, #356]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	4a58      	ldr	r2, [pc, #352]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0308 	and.w	r3, r3, #8
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d005      	beq.n	8004f98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f8c:	4b53      	ldr	r3, [pc, #332]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	4a52      	ldr	r2, [pc, #328]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004f92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f98:	4b50      	ldr	r3, [pc, #320]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	494d      	ldr	r1, [pc, #308]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d044      	beq.n	8005040 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d107      	bne.n	8004fce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fbe:	4b47      	ldr	r3, [pc, #284]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d119      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e07f      	b.n	80050ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d003      	beq.n	8004fde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d107      	bne.n	8004fee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fde:	4b3f      	ldr	r3, [pc, #252]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d109      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e06f      	b.n	80050ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fee:	4b3b      	ldr	r3, [pc, #236]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e067      	b.n	80050ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ffe:	4b37      	ldr	r3, [pc, #220]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f023 0203 	bic.w	r2, r3, #3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	4934      	ldr	r1, [pc, #208]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 800500c:	4313      	orrs	r3, r2
 800500e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005010:	f7fd f9ae 	bl	8002370 <HAL_GetTick>
 8005014:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005016:	e00a      	b.n	800502e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005018:	f7fd f9aa 	bl	8002370 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	f241 3288 	movw	r2, #5000	; 0x1388
 8005026:	4293      	cmp	r3, r2
 8005028:	d901      	bls.n	800502e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800502a:	2303      	movs	r3, #3
 800502c:	e04f      	b.n	80050ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800502e:	4b2b      	ldr	r3, [pc, #172]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 020c 	and.w	r2, r3, #12
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	429a      	cmp	r2, r3
 800503e:	d1eb      	bne.n	8005018 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005040:	4b25      	ldr	r3, [pc, #148]	; (80050d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d20c      	bcs.n	8005068 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b22      	ldr	r3, [pc, #136]	; (80050d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	b2d2      	uxtb	r2, r2
 8005054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005056:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <HAL_RCC_ClockConfig+0x1b8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	429a      	cmp	r2, r3
 8005062:	d001      	beq.n	8005068 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e032      	b.n	80050ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	2b00      	cmp	r3, #0
 8005072:	d008      	beq.n	8005086 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005074:	4b19      	ldr	r3, [pc, #100]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	4916      	ldr	r1, [pc, #88]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	4313      	orrs	r3, r2
 8005084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d009      	beq.n	80050a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005092:	4b12      	ldr	r3, [pc, #72]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	00db      	lsls	r3, r3, #3
 80050a0:	490e      	ldr	r1, [pc, #56]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050a6:	f000 f821 	bl	80050ec <HAL_RCC_GetSysClockFreq>
 80050aa:	4602      	mov	r2, r0
 80050ac:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	091b      	lsrs	r3, r3, #4
 80050b2:	f003 030f 	and.w	r3, r3, #15
 80050b6:	490a      	ldr	r1, [pc, #40]	; (80050e0 <HAL_RCC_ClockConfig+0x1c0>)
 80050b8:	5ccb      	ldrb	r3, [r1, r3]
 80050ba:	fa22 f303 	lsr.w	r3, r2, r3
 80050be:	4a09      	ldr	r2, [pc, #36]	; (80050e4 <HAL_RCC_ClockConfig+0x1c4>)
 80050c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050c2:	4b09      	ldr	r3, [pc, #36]	; (80050e8 <HAL_RCC_ClockConfig+0x1c8>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fd f90e 	bl	80022e8 <HAL_InitTick>

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3710      	adds	r7, #16
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	40023c00 	.word	0x40023c00
 80050dc:	40023800 	.word	0x40023800
 80050e0:	0800a5dc 	.word	0x0800a5dc
 80050e4:	20000004 	.word	0x20000004
 80050e8:	20000008 	.word	0x20000008

080050ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80050f0:	b084      	sub	sp, #16
 80050f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	607b      	str	r3, [r7, #4]
 80050f8:	2300      	movs	r3, #0
 80050fa:	60fb      	str	r3, [r7, #12]
 80050fc:	2300      	movs	r3, #0
 80050fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005100:	2300      	movs	r3, #0
 8005102:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005104:	4b67      	ldr	r3, [pc, #412]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	f003 030c 	and.w	r3, r3, #12
 800510c:	2b08      	cmp	r3, #8
 800510e:	d00d      	beq.n	800512c <HAL_RCC_GetSysClockFreq+0x40>
 8005110:	2b08      	cmp	r3, #8
 8005112:	f200 80bd 	bhi.w	8005290 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <HAL_RCC_GetSysClockFreq+0x34>
 800511a:	2b04      	cmp	r3, #4
 800511c:	d003      	beq.n	8005126 <HAL_RCC_GetSysClockFreq+0x3a>
 800511e:	e0b7      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005120:	4b61      	ldr	r3, [pc, #388]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005122:	60bb      	str	r3, [r7, #8]
       break;
 8005124:	e0b7      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005126:	4b60      	ldr	r3, [pc, #384]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005128:	60bb      	str	r3, [r7, #8]
      break;
 800512a:	e0b4      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800512c:	4b5d      	ldr	r3, [pc, #372]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005134:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005136:	4b5b      	ldr	r3, [pc, #364]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d04d      	beq.n	80051de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005142:	4b58      	ldr	r3, [pc, #352]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	099b      	lsrs	r3, r3, #6
 8005148:	461a      	mov	r2, r3
 800514a:	f04f 0300 	mov.w	r3, #0
 800514e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005152:	f04f 0100 	mov.w	r1, #0
 8005156:	ea02 0800 	and.w	r8, r2, r0
 800515a:	ea03 0901 	and.w	r9, r3, r1
 800515e:	4640      	mov	r0, r8
 8005160:	4649      	mov	r1, r9
 8005162:	f04f 0200 	mov.w	r2, #0
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	014b      	lsls	r3, r1, #5
 800516c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005170:	0142      	lsls	r2, r0, #5
 8005172:	4610      	mov	r0, r2
 8005174:	4619      	mov	r1, r3
 8005176:	ebb0 0008 	subs.w	r0, r0, r8
 800517a:	eb61 0109 	sbc.w	r1, r1, r9
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	018b      	lsls	r3, r1, #6
 8005188:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800518c:	0182      	lsls	r2, r0, #6
 800518e:	1a12      	subs	r2, r2, r0
 8005190:	eb63 0301 	sbc.w	r3, r3, r1
 8005194:	f04f 0000 	mov.w	r0, #0
 8005198:	f04f 0100 	mov.w	r1, #0
 800519c:	00d9      	lsls	r1, r3, #3
 800519e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051a2:	00d0      	lsls	r0, r2, #3
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	eb12 0208 	adds.w	r2, r2, r8
 80051ac:	eb43 0309 	adc.w	r3, r3, r9
 80051b0:	f04f 0000 	mov.w	r0, #0
 80051b4:	f04f 0100 	mov.w	r1, #0
 80051b8:	0299      	lsls	r1, r3, #10
 80051ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80051be:	0290      	lsls	r0, r2, #10
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4610      	mov	r0, r2
 80051c6:	4619      	mov	r1, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	461a      	mov	r2, r3
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	f7fb f84e 	bl	8000270 <__aeabi_uldivmod>
 80051d4:	4602      	mov	r2, r0
 80051d6:	460b      	mov	r3, r1
 80051d8:	4613      	mov	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	e04a      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051de:	4b31      	ldr	r3, [pc, #196]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	099b      	lsrs	r3, r3, #6
 80051e4:	461a      	mov	r2, r3
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051ee:	f04f 0100 	mov.w	r1, #0
 80051f2:	ea02 0400 	and.w	r4, r2, r0
 80051f6:	ea03 0501 	and.w	r5, r3, r1
 80051fa:	4620      	mov	r0, r4
 80051fc:	4629      	mov	r1, r5
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	014b      	lsls	r3, r1, #5
 8005208:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800520c:	0142      	lsls	r2, r0, #5
 800520e:	4610      	mov	r0, r2
 8005210:	4619      	mov	r1, r3
 8005212:	1b00      	subs	r0, r0, r4
 8005214:	eb61 0105 	sbc.w	r1, r1, r5
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	018b      	lsls	r3, r1, #6
 8005222:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005226:	0182      	lsls	r2, r0, #6
 8005228:	1a12      	subs	r2, r2, r0
 800522a:	eb63 0301 	sbc.w	r3, r3, r1
 800522e:	f04f 0000 	mov.w	r0, #0
 8005232:	f04f 0100 	mov.w	r1, #0
 8005236:	00d9      	lsls	r1, r3, #3
 8005238:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800523c:	00d0      	lsls	r0, r2, #3
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	1912      	adds	r2, r2, r4
 8005244:	eb45 0303 	adc.w	r3, r5, r3
 8005248:	f04f 0000 	mov.w	r0, #0
 800524c:	f04f 0100 	mov.w	r1, #0
 8005250:	0299      	lsls	r1, r3, #10
 8005252:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005256:	0290      	lsls	r0, r2, #10
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4610      	mov	r0, r2
 800525e:	4619      	mov	r1, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	461a      	mov	r2, r3
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	f7fb f802 	bl	8000270 <__aeabi_uldivmod>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4613      	mov	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	3301      	adds	r3, #1
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	fbb2 f3f3 	udiv	r3, r2, r3
 800528c:	60bb      	str	r3, [r7, #8]
      break;
 800528e:	e002      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005290:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005292:	60bb      	str	r3, [r7, #8]
      break;
 8005294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005296:	68bb      	ldr	r3, [r7, #8]
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80052a2:	bf00      	nop
 80052a4:	40023800 	.word	0x40023800
 80052a8:	00f42400 	.word	0x00f42400

080052ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052ac:	b480      	push	{r7}
 80052ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b0:	4b03      	ldr	r3, [pc, #12]	; (80052c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052b2:	681b      	ldr	r3, [r3, #0]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	20000004 	.word	0x20000004

080052c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e01d      	b.n	8005312 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d106      	bne.n	80052f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f7fc ff88 	bl	8002200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3304      	adds	r3, #4
 8005300:	4619      	mov	r1, r3
 8005302:	4610      	mov	r0, r2
 8005304:	f000 f95e 	bl	80055c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800531a:	b480      	push	{r7}
 800531c:	b085      	sub	sp, #20
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f042 0201 	orr.w	r2, r2, #1
 8005330:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b06      	cmp	r3, #6
 8005342:	d007      	beq.n	8005354 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b02      	cmp	r3, #2
 8005376:	d122      	bne.n	80053be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b02      	cmp	r3, #2
 8005384:	d11b      	bne.n	80053be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f06f 0202 	mvn.w	r2, #2
 800538e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 f8ee 	bl	8005586 <HAL_TIM_IC_CaptureCallback>
 80053aa:	e005      	b.n	80053b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f8e0 	bl	8005572 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f8f1 	bl	800559a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b04      	cmp	r3, #4
 80053ca:	d122      	bne.n	8005412 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d11b      	bne.n	8005412 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f06f 0204 	mvn.w	r2, #4
 80053e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d003      	beq.n	8005400 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f8c4 	bl	8005586 <HAL_TIM_IC_CaptureCallback>
 80053fe:	e005      	b.n	800540c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 f8b6 	bl	8005572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f8c7 	bl	800559a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f003 0308 	and.w	r3, r3, #8
 800541c:	2b08      	cmp	r3, #8
 800541e:	d122      	bne.n	8005466 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f003 0308 	and.w	r3, r3, #8
 800542a:	2b08      	cmp	r3, #8
 800542c:	d11b      	bne.n	8005466 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f06f 0208 	mvn.w	r2, #8
 8005436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2204      	movs	r2, #4
 800543c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69db      	ldr	r3, [r3, #28]
 8005444:	f003 0303 	and.w	r3, r3, #3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f000 f89a 	bl	8005586 <HAL_TIM_IC_CaptureCallback>
 8005452:	e005      	b.n	8005460 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 f88c 	bl	8005572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f89d 	bl	800559a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	f003 0310 	and.w	r3, r3, #16
 8005470:	2b10      	cmp	r3, #16
 8005472:	d122      	bne.n	80054ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 0310 	and.w	r3, r3, #16
 800547e:	2b10      	cmp	r3, #16
 8005480:	d11b      	bne.n	80054ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f06f 0210 	mvn.w	r2, #16
 800548a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2208      	movs	r2, #8
 8005490:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 f870 	bl	8005586 <HAL_TIM_IC_CaptureCallback>
 80054a6:	e005      	b.n	80054b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 f862 	bl	8005572 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f873 	bl	800559a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f003 0301 	and.w	r3, r3, #1
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d10e      	bne.n	80054e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b01      	cmp	r3, #1
 80054d4:	d107      	bne.n	80054e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f06f 0201 	mvn.w	r2, #1
 80054de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7fc fc3f 	bl	8001d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f0:	2b80      	cmp	r3, #128	; 0x80
 80054f2:	d10e      	bne.n	8005512 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fe:	2b80      	cmp	r3, #128	; 0x80
 8005500:	d107      	bne.n	8005512 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800550a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f903 	bl	8005718 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d10e      	bne.n	800553e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552a:	2b40      	cmp	r3, #64	; 0x40
 800552c:	d107      	bne.n	800553e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005536:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f838 	bl	80055ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f003 0320 	and.w	r3, r3, #32
 8005548:	2b20      	cmp	r3, #32
 800554a:	d10e      	bne.n	800556a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b20      	cmp	r3, #32
 8005558:	d107      	bne.n	800556a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f06f 0220 	mvn.w	r2, #32
 8005562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 f8cd 	bl	8005704 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800556a:	bf00      	nop
 800556c:	3708      	adds	r7, #8
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800557a:	bf00      	nop
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
	...

080055c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a40      	ldr	r2, [pc, #256]	; (80056d8 <TIM_Base_SetConfig+0x114>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d013      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e2:	d00f      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a3d      	ldr	r2, [pc, #244]	; (80056dc <TIM_Base_SetConfig+0x118>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00b      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a3c      	ldr	r2, [pc, #240]	; (80056e0 <TIM_Base_SetConfig+0x11c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a3b      	ldr	r2, [pc, #236]	; (80056e4 <TIM_Base_SetConfig+0x120>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_Base_SetConfig+0x40>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a3a      	ldr	r2, [pc, #232]	; (80056e8 <TIM_Base_SetConfig+0x124>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d108      	bne.n	8005616 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a2f      	ldr	r2, [pc, #188]	; (80056d8 <TIM_Base_SetConfig+0x114>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d02b      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005624:	d027      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a2c      	ldr	r2, [pc, #176]	; (80056dc <TIM_Base_SetConfig+0x118>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d023      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a2b      	ldr	r2, [pc, #172]	; (80056e0 <TIM_Base_SetConfig+0x11c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01f      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a2a      	ldr	r2, [pc, #168]	; (80056e4 <TIM_Base_SetConfig+0x120>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d01b      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a29      	ldr	r2, [pc, #164]	; (80056e8 <TIM_Base_SetConfig+0x124>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d017      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a28      	ldr	r2, [pc, #160]	; (80056ec <TIM_Base_SetConfig+0x128>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d013      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a27      	ldr	r2, [pc, #156]	; (80056f0 <TIM_Base_SetConfig+0x12c>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00f      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a26      	ldr	r2, [pc, #152]	; (80056f4 <TIM_Base_SetConfig+0x130>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00b      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a25      	ldr	r2, [pc, #148]	; (80056f8 <TIM_Base_SetConfig+0x134>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d007      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a24      	ldr	r2, [pc, #144]	; (80056fc <TIM_Base_SetConfig+0x138>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d003      	beq.n	8005676 <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a23      	ldr	r2, [pc, #140]	; (8005700 <TIM_Base_SetConfig+0x13c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d108      	bne.n	8005688 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	689a      	ldr	r2, [r3, #8]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a0a      	ldr	r2, [pc, #40]	; (80056d8 <TIM_Base_SetConfig+0x114>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d003      	beq.n	80056bc <TIM_Base_SetConfig+0xf8>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a0c      	ldr	r2, [pc, #48]	; (80056e8 <TIM_Base_SetConfig+0x124>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d103      	bne.n	80056c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	691a      	ldr	r2, [r3, #16]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	615a      	str	r2, [r3, #20]
}
 80056ca:	bf00      	nop
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	40010000 	.word	0x40010000
 80056dc:	40000400 	.word	0x40000400
 80056e0:	40000800 	.word	0x40000800
 80056e4:	40000c00 	.word	0x40000c00
 80056e8:	40010400 	.word	0x40010400
 80056ec:	40014000 	.word	0x40014000
 80056f0:	40014400 	.word	0x40014400
 80056f4:	40014800 	.word	0x40014800
 80056f8:	40001800 	.word	0x40001800
 80056fc:	40001c00 	.word	0x40001c00
 8005700:	40002000 	.word	0x40002000

08005704 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800572c:	b084      	sub	sp, #16
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	f107 001c 	add.w	r0, r7, #28
 800573a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800573e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005740:	2b01      	cmp	r3, #1
 8005742:	d122      	bne.n	800578a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800576c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800576e:	2b01      	cmp	r3, #1
 8005770:	d105      	bne.n	800577e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f001 fab4 	bl	8006cec <USB_CoreReset>
 8005784:	4603      	mov	r3, r0
 8005786:	73fb      	strb	r3, [r7, #15]
 8005788:	e01a      	b.n	80057c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f001 faa8 	bl	8006cec <USB_CoreReset>
 800579c:	4603      	mov	r3, r0
 800579e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	639a      	str	r2, [r3, #56]	; 0x38
 80057b2:	e005      	b.n	80057c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d10b      	bne.n	80057de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f043 0206 	orr.w	r2, r3, #6
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f043 0220 	orr.w	r2, r3, #32
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80057de:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057ea:	b004      	add	sp, #16
 80057ec:	4770      	bx	lr
	...

080057f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	4613      	mov	r3, r2
 80057fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	2b02      	cmp	r3, #2
 8005802:	d165      	bne.n	80058d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4a41      	ldr	r2, [pc, #260]	; (800590c <USB_SetTurnaroundTime+0x11c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d906      	bls.n	800581a <USB_SetTurnaroundTime+0x2a>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	4a40      	ldr	r2, [pc, #256]	; (8005910 <USB_SetTurnaroundTime+0x120>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d202      	bcs.n	800581a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005814:	230f      	movs	r3, #15
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	e062      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4a3c      	ldr	r2, [pc, #240]	; (8005910 <USB_SetTurnaroundTime+0x120>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d306      	bcc.n	8005830 <USB_SetTurnaroundTime+0x40>
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	4a3b      	ldr	r2, [pc, #236]	; (8005914 <USB_SetTurnaroundTime+0x124>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d202      	bcs.n	8005830 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800582a:	230e      	movs	r3, #14
 800582c:	617b      	str	r3, [r7, #20]
 800582e:	e057      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	4a38      	ldr	r2, [pc, #224]	; (8005914 <USB_SetTurnaroundTime+0x124>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d306      	bcc.n	8005846 <USB_SetTurnaroundTime+0x56>
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4a37      	ldr	r2, [pc, #220]	; (8005918 <USB_SetTurnaroundTime+0x128>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d202      	bcs.n	8005846 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005840:	230d      	movs	r3, #13
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e04c      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	4a33      	ldr	r2, [pc, #204]	; (8005918 <USB_SetTurnaroundTime+0x128>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d306      	bcc.n	800585c <USB_SetTurnaroundTime+0x6c>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	4a32      	ldr	r2, [pc, #200]	; (800591c <USB_SetTurnaroundTime+0x12c>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d802      	bhi.n	800585c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005856:	230c      	movs	r3, #12
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	e041      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	4a2f      	ldr	r2, [pc, #188]	; (800591c <USB_SetTurnaroundTime+0x12c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d906      	bls.n	8005872 <USB_SetTurnaroundTime+0x82>
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4a2e      	ldr	r2, [pc, #184]	; (8005920 <USB_SetTurnaroundTime+0x130>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d802      	bhi.n	8005872 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800586c:	230b      	movs	r3, #11
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e036      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4a2a      	ldr	r2, [pc, #168]	; (8005920 <USB_SetTurnaroundTime+0x130>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d906      	bls.n	8005888 <USB_SetTurnaroundTime+0x98>
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	4a29      	ldr	r2, [pc, #164]	; (8005924 <USB_SetTurnaroundTime+0x134>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d802      	bhi.n	8005888 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005882:	230a      	movs	r3, #10
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	e02b      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4a26      	ldr	r2, [pc, #152]	; (8005924 <USB_SetTurnaroundTime+0x134>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d906      	bls.n	800589e <USB_SetTurnaroundTime+0xae>
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4a25      	ldr	r2, [pc, #148]	; (8005928 <USB_SetTurnaroundTime+0x138>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d202      	bcs.n	800589e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005898:	2309      	movs	r3, #9
 800589a:	617b      	str	r3, [r7, #20]
 800589c:	e020      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	4a21      	ldr	r2, [pc, #132]	; (8005928 <USB_SetTurnaroundTime+0x138>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d306      	bcc.n	80058b4 <USB_SetTurnaroundTime+0xc4>
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	4a20      	ldr	r2, [pc, #128]	; (800592c <USB_SetTurnaroundTime+0x13c>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d802      	bhi.n	80058b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80058ae:	2308      	movs	r3, #8
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	e015      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	4a1d      	ldr	r2, [pc, #116]	; (800592c <USB_SetTurnaroundTime+0x13c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d906      	bls.n	80058ca <USB_SetTurnaroundTime+0xda>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4a1c      	ldr	r2, [pc, #112]	; (8005930 <USB_SetTurnaroundTime+0x140>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d202      	bcs.n	80058ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80058c4:	2307      	movs	r3, #7
 80058c6:	617b      	str	r3, [r7, #20]
 80058c8:	e00a      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80058ca:	2306      	movs	r3, #6
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	e007      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d102      	bne.n	80058dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80058d6:	2309      	movs	r3, #9
 80058d8:	617b      	str	r3, [r7, #20]
 80058da:	e001      	b.n	80058e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80058dc:	2309      	movs	r3, #9
 80058de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	029b      	lsls	r3, r3, #10
 80058f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80058f8:	431a      	orrs	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	00d8acbf 	.word	0x00d8acbf
 8005910:	00e4e1c0 	.word	0x00e4e1c0
 8005914:	00f42400 	.word	0x00f42400
 8005918:	01067380 	.word	0x01067380
 800591c:	011a499f 	.word	0x011a499f
 8005920:	01312cff 	.word	0x01312cff
 8005924:	014ca43f 	.word	0x014ca43f
 8005928:	016e3600 	.word	0x016e3600
 800592c:	01a6ab1f 	.word	0x01a6ab1f
 8005930:	01e84800 	.word	0x01e84800

08005934 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f043 0201 	orr.w	r2, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f023 0201 	bic.w	r2, r3, #1
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005990:	78fb      	ldrb	r3, [r7, #3]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d106      	bne.n	80059a4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	60da      	str	r2, [r3, #12]
 80059a2:	e00b      	b.n	80059bc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	60da      	str	r2, [r3, #12]
 80059b6:	e001      	b.n	80059bc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e003      	b.n	80059c4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80059bc:	2032      	movs	r0, #50	; 0x32
 80059be:	f7fc fce3 	bl	8002388 <HAL_Delay>

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059cc:	b084      	sub	sp, #16
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b086      	sub	sp, #24
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
 80059d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80059da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80059e6:	2300      	movs	r3, #0
 80059e8:	613b      	str	r3, [r7, #16]
 80059ea:	e009      	b.n	8005a00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	3340      	adds	r3, #64	; 0x40
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	2200      	movs	r2, #0
 80059f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	3301      	adds	r3, #1
 80059fe:	613b      	str	r3, [r7, #16]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b0e      	cmp	r3, #14
 8005a04:	d9f2      	bls.n	80059ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d11c      	bne.n	8005a46 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a1a:	f043 0302 	orr.w	r3, r3, #2
 8005a1e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	639a      	str	r2, [r3, #56]	; 0x38
 8005a44:	e00b      	b.n	8005a5e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a64:	461a      	mov	r2, r3
 8005a66:	2300      	movs	r3, #0
 8005a68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a70:	4619      	mov	r1, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a78:	461a      	mov	r2, r3
 8005a7a:	680b      	ldr	r3, [r1, #0]
 8005a7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d10c      	bne.n	8005a9e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 f949 	bl	8005d24 <USB_SetDevSpeed>
 8005a92:	e008      	b.n	8005aa6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a94:	2101      	movs	r1, #1
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f944 	bl	8005d24 <USB_SetDevSpeed>
 8005a9c:	e003      	b.n	8005aa6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a9e:	2103      	movs	r1, #3
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f93f 	bl	8005d24 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005aa6:	2110      	movs	r1, #16
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f8f3 	bl	8005c94 <USB_FlushTxFifo>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d001      	beq.n	8005ab8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f911 	bl	8005ce0 <USB_FlushRxFifo>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ace:	461a      	mov	r2, r3
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ada:	461a      	mov	r2, r3
 8005adc:	2300      	movs	r3, #0
 8005ade:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aec:	2300      	movs	r3, #0
 8005aee:	613b      	str	r3, [r7, #16]
 8005af0:	e043      	b.n	8005b7a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	015a      	lsls	r2, r3, #5
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	4413      	add	r3, r2
 8005afa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b08:	d118      	bne.n	8005b3c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	015a      	lsls	r2, r3, #5
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4413      	add	r3, r2
 8005b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	e013      	b.n	8005b4e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b32:	461a      	mov	r2, r3
 8005b34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b38:	6013      	str	r3, [r2, #0]
 8005b3a:	e008      	b.n	8005b4e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	461a      	mov	r2, r3
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	3301      	adds	r3, #1
 8005b78:	613b      	str	r3, [r7, #16]
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d3b7      	bcc.n	8005af2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b82:	2300      	movs	r3, #0
 8005b84:	613b      	str	r3, [r7, #16]
 8005b86:	e043      	b.n	8005c10 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	015a      	lsls	r2, r3, #5
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b9e:	d118      	bne.n	8005bd2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10a      	bne.n	8005bbc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	e013      	b.n	8005be4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc8:	461a      	mov	r2, r3
 8005bca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bce:	6013      	str	r3, [r2, #0]
 8005bd0:	e008      	b.n	8005be4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bde:	461a      	mov	r2, r3
 8005be0:	2300      	movs	r3, #0
 8005be2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c02:	461a      	mov	r2, r3
 8005c04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d3b7      	bcc.n	8005b88 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005c38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d105      	bne.n	8005c4c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	699b      	ldr	r3, [r3, #24]
 8005c44:	f043 0210 	orr.w	r2, r3, #16
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	699a      	ldr	r2, [r3, #24]
 8005c50:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <USB_DevInit+0x2c4>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	f043 0208 	orr.w	r2, r3, #8
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d107      	bne.n	8005c80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	699b      	ldr	r3, [r3, #24]
 8005c74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c78:	f043 0304 	orr.w	r3, r3, #4
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c8c:	b004      	add	sp, #16
 8005c8e:	4770      	bx	lr
 8005c90:	803c3800 	.word	0x803c3800

08005c94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	019b      	lsls	r3, r3, #6
 8005ca6:	f043 0220 	orr.w	r2, r3, #32
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4a09      	ldr	r2, [pc, #36]	; (8005cdc <USB_FlushTxFifo+0x48>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d901      	bls.n	8005cc0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e006      	b.n	8005cce <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	f003 0320 	and.w	r3, r3, #32
 8005cc8:	2b20      	cmp	r3, #32
 8005cca:	d0f0      	beq.n	8005cae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr
 8005cda:	bf00      	nop
 8005cdc:	00030d40 	.word	0x00030d40

08005ce0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2210      	movs	r2, #16
 8005cf0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4a09      	ldr	r2, [pc, #36]	; (8005d20 <USB_FlushRxFifo+0x40>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d901      	bls.n	8005d04 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005d00:	2303      	movs	r3, #3
 8005d02:	e006      	b.n	8005d12 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	f003 0310 	and.w	r3, r3, #16
 8005d0c:	2b10      	cmp	r3, #16
 8005d0e:	d0f0      	beq.n	8005cf2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	00030d40 	.word	0x00030d40

08005d24 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	68f9      	ldr	r1, [r7, #12]
 8005d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d44:	4313      	orrs	r3, r2
 8005d46:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b087      	sub	sp, #28
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f003 0306 	and.w	r3, r3, #6
 8005d6e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d102      	bne.n	8005d7c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d76:	2300      	movs	r3, #0
 8005d78:	75fb      	strb	r3, [r7, #23]
 8005d7a:	e00a      	b.n	8005d92 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d002      	beq.n	8005d88 <USB_GetDevSpeed+0x32>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2b06      	cmp	r3, #6
 8005d86:	d102      	bne.n	8005d8e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d88:	2302      	movs	r3, #2
 8005d8a:	75fb      	strb	r3, [r7, #23]
 8005d8c:	e001      	b.n	8005d92 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d8e:	230f      	movs	r3, #15
 8005d90:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	371c      	adds	r7, #28
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	785b      	ldrb	r3, [r3, #1]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d13a      	bne.n	8005e32 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	f003 030f 	and.w	r3, r3, #15
 8005dcc:	2101      	movs	r1, #1
 8005dce:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	68f9      	ldr	r1, [r7, #12]
 8005dd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d155      	bne.n	8005ea0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	015a      	lsls	r2, r3, #5
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	78db      	ldrb	r3, [r3, #3]
 8005e0e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e10:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	059b      	lsls	r3, r3, #22
 8005e16:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	68ba      	ldr	r2, [r7, #8]
 8005e1c:	0151      	lsls	r1, r2, #5
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	440a      	add	r2, r1
 8005e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e2e:	6013      	str	r3, [r2, #0]
 8005e30:	e036      	b.n	8005ea0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e38:	69da      	ldr	r2, [r3, #28]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	2101      	movs	r1, #1
 8005e44:	fa01 f303 	lsl.w	r3, r1, r3
 8005e48:	041b      	lsls	r3, r3, #16
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	015a      	lsls	r2, r3, #5
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d11a      	bne.n	8005ea0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	78db      	ldrb	r3, [r3, #3]
 8005e84:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e86:	430b      	orrs	r3, r1
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	68ba      	ldr	r2, [r7, #8]
 8005e8c:	0151      	lsls	r1, r2, #5
 8005e8e:	68fa      	ldr	r2, [r7, #12]
 8005e90:	440a      	add	r2, r1
 8005e92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e9e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr
	...

08005eb0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	785b      	ldrb	r3, [r3, #1]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d161      	bne.n	8005f90 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	015a      	lsls	r2, r3, #5
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4413      	add	r3, r2
 8005ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ee2:	d11f      	bne.n	8005f24 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005efe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f02:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	0151      	lsls	r1, r2, #5
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	440a      	add	r2, r1
 8005f1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	2101      	movs	r1, #1
 8005f36:	fa01 f303 	lsl.w	r3, r1, r3
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	68f9      	ldr	r1, [r7, #12]
 8005f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f44:	4013      	ands	r3, r2
 8005f46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4e:	69da      	ldr	r2, [r3, #28]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	f003 030f 	and.w	r3, r3, #15
 8005f58:	2101      	movs	r1, #1
 8005f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	43db      	mvns	r3, r3
 8005f62:	68f9      	ldr	r1, [r7, #12]
 8005f64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f68:	4013      	ands	r3, r2
 8005f6a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	0159      	lsls	r1, r3, #5
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	440b      	add	r3, r1
 8005f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f86:	4619      	mov	r1, r3
 8005f88:	4b35      	ldr	r3, [pc, #212]	; (8006060 <USB_DeactivateEndpoint+0x1b0>)
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	600b      	str	r3, [r1, #0]
 8005f8e:	e060      	b.n	8006052 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fa6:	d11f      	bne.n	8005fe8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	015a      	lsls	r2, r3, #5
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	4413      	add	r3, r2
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68ba      	ldr	r2, [r7, #8]
 8005fb8:	0151      	lsls	r1, r2, #5
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	440a      	add	r2, r1
 8005fbe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fc2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fc6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	0151      	lsls	r1, r2, #5
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	440a      	add	r2, r1
 8005fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fe2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fe6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	f003 030f 	and.w	r3, r3, #15
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffe:	041b      	lsls	r3, r3, #16
 8006000:	43db      	mvns	r3, r3
 8006002:	68f9      	ldr	r1, [r7, #12]
 8006004:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006008:	4013      	ands	r3, r2
 800600a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006012:	69da      	ldr	r2, [r3, #28]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	f003 030f 	and.w	r3, r3, #15
 800601c:	2101      	movs	r1, #1
 800601e:	fa01 f303 	lsl.w	r3, r1, r3
 8006022:	041b      	lsls	r3, r3, #16
 8006024:	43db      	mvns	r3, r3
 8006026:	68f9      	ldr	r1, [r7, #12]
 8006028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800602c:	4013      	ands	r3, r2
 800602e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	0159      	lsls	r1, r3, #5
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	440b      	add	r3, r1
 8006046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604a:	4619      	mov	r1, r3
 800604c:	4b05      	ldr	r3, [pc, #20]	; (8006064 <USB_DeactivateEndpoint+0x1b4>)
 800604e:	4013      	ands	r3, r2
 8006050:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	ec337800 	.word	0xec337800
 8006064:	eff37800 	.word	0xeff37800

08006068 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	; 0x28
 800606c:	af02      	add	r7, sp, #8
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	4613      	mov	r3, r2
 8006074:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	785b      	ldrb	r3, [r3, #1]
 8006084:	2b01      	cmp	r3, #1
 8006086:	f040 815c 	bne.w	8006342 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d132      	bne.n	80060f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800609e:	691b      	ldr	r3, [r3, #16]
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80060d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f0:	0cdb      	lsrs	r3, r3, #19
 80060f2:	04db      	lsls	r3, r3, #19
 80060f4:	6113      	str	r3, [r2, #16]
 80060f6:	e074      	b.n	80061e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	0151      	lsls	r1, r2, #5
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	440a      	add	r2, r1
 800610e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006112:	0cdb      	lsrs	r3, r3, #19
 8006114:	04db      	lsls	r3, r3, #19
 8006116:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	015a      	lsls	r2, r3, #5
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	4413      	add	r3, r2
 8006120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	0151      	lsls	r1, r2, #5
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	440a      	add	r2, r1
 800612e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006132:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006136:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800613a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800613c:	69bb      	ldr	r3, [r7, #24]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	6959      	ldr	r1, [r3, #20]
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	440b      	add	r3, r1
 8006154:	1e59      	subs	r1, r3, #1
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	fbb1 f3f3 	udiv	r3, r1, r3
 800615e:	04d9      	lsls	r1, r3, #19
 8006160:	4b9d      	ldr	r3, [pc, #628]	; (80063d8 <USB_EPStartXfer+0x370>)
 8006162:	400b      	ands	r3, r1
 8006164:	69b9      	ldr	r1, [r7, #24]
 8006166:	0148      	lsls	r0, r1, #5
 8006168:	69f9      	ldr	r1, [r7, #28]
 800616a:	4401      	add	r1, r0
 800616c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006170:	4313      	orrs	r3, r2
 8006172:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	695b      	ldr	r3, [r3, #20]
 8006186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800618a:	69b9      	ldr	r1, [r7, #24]
 800618c:	0148      	lsls	r0, r1, #5
 800618e:	69f9      	ldr	r1, [r7, #28]
 8006190:	4401      	add	r1, r0
 8006192:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006196:	4313      	orrs	r3, r2
 8006198:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	78db      	ldrb	r3, [r3, #3]
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d11f      	bne.n	80061e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	69ba      	ldr	r2, [r7, #24]
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	69fa      	ldr	r2, [r7, #28]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80061c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	0151      	lsls	r1, r2, #5
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	440a      	add	r2, r1
 80061d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80061e2:	79fb      	ldrb	r3, [r7, #7]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d14b      	bne.n	8006280 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d009      	beq.n	8006204 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fc:	461a      	mov	r2, r3
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	691b      	ldr	r3, [r3, #16]
 8006202:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	78db      	ldrb	r3, [r3, #3]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d128      	bne.n	800625e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006218:	2b00      	cmp	r3, #0
 800621a:	d110      	bne.n	800623e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	0151      	lsls	r1, r2, #5
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	440a      	add	r2, r1
 8006232:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006236:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	e00f      	b.n	800625e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	69ba      	ldr	r2, [r7, #24]
 800624e:	0151      	lsls	r1, r2, #5
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	440a      	add	r2, r1
 8006254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800625c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	015a      	lsls	r2, r3, #5
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	4413      	add	r3, r2
 8006266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	69ba      	ldr	r2, [r7, #24]
 800626e:	0151      	lsls	r1, r2, #5
 8006270:	69fa      	ldr	r2, [r7, #28]
 8006272:	440a      	add	r2, r1
 8006274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006278:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800627c:	6013      	str	r3, [r2, #0]
 800627e:	e12f      	b.n	80064e0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	0151      	lsls	r1, r2, #5
 8006292:	69fa      	ldr	r2, [r7, #28]
 8006294:	440a      	add	r2, r1
 8006296:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800629a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800629e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	78db      	ldrb	r3, [r3, #3]
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	d015      	beq.n	80062d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8117 	beq.w	80064e0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	f003 030f 	and.w	r3, r3, #15
 80062c2:	2101      	movs	r1, #1
 80062c4:	fa01 f303 	lsl.w	r3, r1, r3
 80062c8:	69f9      	ldr	r1, [r7, #28]
 80062ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062ce:	4313      	orrs	r3, r2
 80062d0:	634b      	str	r3, [r1, #52]	; 0x34
 80062d2:	e105      	b.n	80064e0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d110      	bne.n	8006306 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	0151      	lsls	r1, r2, #5
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	440a      	add	r2, r1
 80062fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	e00f      	b.n	8006326 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	0151      	lsls	r1, r2, #5
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	440a      	add	r2, r1
 800631c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006324:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	68d9      	ldr	r1, [r3, #12]
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	781a      	ldrb	r2, [r3, #0]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	b298      	uxth	r0, r3
 8006334:	79fb      	ldrb	r3, [r7, #7]
 8006336:	9300      	str	r3, [sp, #0]
 8006338:	4603      	mov	r3, r0
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f000 fa2b 	bl	8006796 <USB_WritePacket>
 8006340:	e0ce      	b.n	80064e0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	0151      	lsls	r1, r2, #5
 8006354:	69fa      	ldr	r2, [r7, #28]
 8006356:	440a      	add	r2, r1
 8006358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800635c:	0cdb      	lsrs	r3, r3, #19
 800635e:	04db      	lsls	r3, r3, #19
 8006360:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	69fb      	ldr	r3, [r7, #28]
 8006368:	4413      	add	r3, r2
 800636a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	0151      	lsls	r1, r2, #5
 8006374:	69fa      	ldr	r2, [r7, #28]
 8006376:	440a      	add	r2, r1
 8006378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800637c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006380:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006384:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d126      	bne.n	80063dc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800639a:	691a      	ldr	r2, [r3, #16]
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063a4:	69b9      	ldr	r1, [r7, #24]
 80063a6:	0148      	lsls	r0, r1, #5
 80063a8:	69f9      	ldr	r1, [r7, #28]
 80063aa:	4401      	add	r1, r0
 80063ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063b0:	4313      	orrs	r3, r2
 80063b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	69ba      	ldr	r2, [r7, #24]
 80063c4:	0151      	lsls	r1, r2, #5
 80063c6:	69fa      	ldr	r2, [r7, #28]
 80063c8:	440a      	add	r2, r1
 80063ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063d2:	6113      	str	r3, [r2, #16]
 80063d4:	e036      	b.n	8006444 <USB_EPStartXfer+0x3dc>
 80063d6:	bf00      	nop
 80063d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	695a      	ldr	r2, [r3, #20]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	4413      	add	r3, r2
 80063e6:	1e5a      	subs	r2, r3, #1
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fe:	691a      	ldr	r2, [r3, #16]
 8006400:	8afb      	ldrh	r3, [r7, #22]
 8006402:	04d9      	lsls	r1, r3, #19
 8006404:	4b39      	ldr	r3, [pc, #228]	; (80064ec <USB_EPStartXfer+0x484>)
 8006406:	400b      	ands	r3, r1
 8006408:	69b9      	ldr	r1, [r7, #24]
 800640a:	0148      	lsls	r0, r1, #5
 800640c:	69f9      	ldr	r1, [r7, #28]
 800640e:	4401      	add	r1, r0
 8006410:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006414:	4313      	orrs	r3, r2
 8006416:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006418:	69bb      	ldr	r3, [r7, #24]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	69fb      	ldr	r3, [r7, #28]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006424:	691a      	ldr	r2, [r3, #16]
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	8af9      	ldrh	r1, [r7, #22]
 800642c:	fb01 f303 	mul.w	r3, r1, r3
 8006430:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006434:	69b9      	ldr	r1, [r7, #24]
 8006436:	0148      	lsls	r0, r1, #5
 8006438:	69f9      	ldr	r1, [r7, #28]
 800643a:	4401      	add	r1, r0
 800643c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006440:	4313      	orrs	r3, r2
 8006442:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006444:	79fb      	ldrb	r3, [r7, #7]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d10d      	bne.n	8006466 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d009      	beq.n	8006466 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	68d9      	ldr	r1, [r3, #12]
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	4413      	add	r3, r2
 800645e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006462:	460a      	mov	r2, r1
 8006464:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	78db      	ldrb	r3, [r3, #3]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d128      	bne.n	80064c0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800647a:	2b00      	cmp	r3, #0
 800647c:	d110      	bne.n	80064a0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	69ba      	ldr	r2, [r7, #24]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	69fa      	ldr	r2, [r7, #28]
 8006492:	440a      	add	r2, r1
 8006494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006498:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800649c:	6013      	str	r3, [r2, #0]
 800649e:	e00f      	b.n	80064c0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69ba      	ldr	r2, [r7, #24]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	69fa      	ldr	r2, [r7, #28]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3720      	adds	r7, #32
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	1ff80000 	.word	0x1ff80000

080064f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b087      	sub	sp, #28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	4613      	mov	r3, r2
 80064fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	785b      	ldrb	r3, [r3, #1]
 800650c:	2b01      	cmp	r3, #1
 800650e:	f040 80cd 	bne.w	80066ac <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d132      	bne.n	8006580 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	693a      	ldr	r2, [r7, #16]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	440a      	add	r2, r1
 8006530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006534:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006538:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800653c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	0151      	lsls	r1, r2, #5
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	440a      	add	r2, r1
 8006554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006558:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800655c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	0151      	lsls	r1, r2, #5
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	440a      	add	r2, r1
 8006574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006578:	0cdb      	lsrs	r3, r3, #19
 800657a:	04db      	lsls	r3, r3, #19
 800657c:	6113      	str	r3, [r2, #16]
 800657e:	e04e      	b.n	800661e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	015a      	lsls	r2, r3, #5
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	4413      	add	r3, r2
 8006588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	693a      	ldr	r2, [r7, #16]
 8006590:	0151      	lsls	r1, r2, #5
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	440a      	add	r2, r1
 8006596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800659a:	0cdb      	lsrs	r3, r3, #19
 800659c:	04db      	lsls	r3, r3, #19
 800659e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	0151      	lsls	r1, r2, #5
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	440a      	add	r2, r1
 80065b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	695a      	ldr	r2, [r3, #20]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d903      	bls.n	80065d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	0151      	lsls	r1, r2, #5
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	440a      	add	r2, r1
 80065ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800660e:	6939      	ldr	r1, [r7, #16]
 8006610:	0148      	lsls	r0, r1, #5
 8006612:	6979      	ldr	r1, [r7, #20]
 8006614:	4401      	add	r1, r0
 8006616:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800661a:	4313      	orrs	r3, r2
 800661c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d11e      	bne.n	8006662 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d009      	beq.n	8006640 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006638:	461a      	mov	r2, r3
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	4413      	add	r3, r2
 8006648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	440a      	add	r2, r1
 8006656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800665a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800665e:	6013      	str	r3, [r2, #0]
 8006660:	e092      	b.n	8006788 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	440a      	add	r2, r1
 8006678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006680:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d07e      	beq.n	8006788 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	f003 030f 	and.w	r3, r3, #15
 800669a:	2101      	movs	r1, #1
 800669c:	fa01 f303 	lsl.w	r3, r1, r3
 80066a0:	6979      	ldr	r1, [r7, #20]
 80066a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066a6:	4313      	orrs	r3, r2
 80066a8:	634b      	str	r3, [r1, #52]	; 0x34
 80066aa:	e06d      	b.n	8006788 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	693a      	ldr	r2, [r7, #16]
 80066bc:	0151      	lsls	r1, r2, #5
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	440a      	add	r2, r1
 80066c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066c6:	0cdb      	lsrs	r3, r3, #19
 80066c8:	04db      	lsls	r3, r3, #19
 80066ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	0151      	lsls	r1, r2, #5
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	440a      	add	r2, r1
 80066e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066ee:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	015a      	lsls	r2, r3, #5
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	4413      	add	r3, r2
 8006708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	0151      	lsls	r1, r2, #5
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	440a      	add	r2, r1
 8006716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800671a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800671e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672c:	691a      	ldr	r2, [r3, #16]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006736:	6939      	ldr	r1, [r7, #16]
 8006738:	0148      	lsls	r0, r1, #5
 800673a:	6979      	ldr	r1, [r7, #20]
 800673c:	4401      	add	r1, r0
 800673e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006742:	4313      	orrs	r3, r2
 8006744:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006746:	79fb      	ldrb	r3, [r7, #7]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d10d      	bne.n	8006768 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d009      	beq.n	8006768 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	68d9      	ldr	r1, [r3, #12]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006764:	460a      	mov	r2, r1
 8006766:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	0151      	lsls	r1, r2, #5
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	440a      	add	r2, r1
 800677e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006782:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006786:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006796:	b480      	push	{r7}
 8006798:	b089      	sub	sp, #36	; 0x24
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	4611      	mov	r1, r2
 80067a2:	461a      	mov	r2, r3
 80067a4:	460b      	mov	r3, r1
 80067a6:	71fb      	strb	r3, [r7, #7]
 80067a8:	4613      	mov	r3, r2
 80067aa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80067b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d11a      	bne.n	80067f2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80067bc:	88bb      	ldrh	r3, [r7, #4]
 80067be:	3303      	adds	r3, #3
 80067c0:	089b      	lsrs	r3, r3, #2
 80067c2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80067c4:	2300      	movs	r3, #0
 80067c6:	61bb      	str	r3, [r7, #24]
 80067c8:	e00f      	b.n	80067ea <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	031a      	lsls	r2, r3, #12
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	4413      	add	r3, r2
 80067d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067d6:	461a      	mov	r2, r3
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	3304      	adds	r3, #4
 80067e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	3301      	adds	r3, #1
 80067e8:	61bb      	str	r3, [r7, #24]
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d3eb      	bcc.n	80067ca <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80067f2:	2300      	movs	r3, #0
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3724      	adds	r7, #36	; 0x24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006800:	b480      	push	{r7}
 8006802:	b089      	sub	sp, #36	; 0x24
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	4613      	mov	r3, r2
 800680c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006816:	88fb      	ldrh	r3, [r7, #6]
 8006818:	3303      	adds	r3, #3
 800681a:	089b      	lsrs	r3, r3, #2
 800681c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800681e:	2300      	movs	r3, #0
 8006820:	61bb      	str	r3, [r7, #24]
 8006822:	e00b      	b.n	800683c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	3304      	adds	r3, #4
 8006834:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	3301      	adds	r3, #1
 800683a:	61bb      	str	r3, [r7, #24]
 800683c:	69ba      	ldr	r2, [r7, #24]
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	429a      	cmp	r2, r3
 8006842:	d3ef      	bcc.n	8006824 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006844:	69fb      	ldr	r3, [r7, #28]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3724      	adds	r7, #36	; 0x24
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006852:	b480      	push	{r7}
 8006854:	b085      	sub	sp, #20
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	785b      	ldrb	r3, [r3, #1]
 800686a:	2b01      	cmp	r3, #1
 800686c:	d12c      	bne.n	80068c8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	db12      	blt.n	80068a6 <USB_EPSetStall+0x54>
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00f      	beq.n	80068a6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	0151      	lsls	r1, r2, #5
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	440a      	add	r2, r1
 800689c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068a4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	015a      	lsls	r2, r3, #5
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68ba      	ldr	r2, [r7, #8]
 80068b6:	0151      	lsls	r1, r2, #5
 80068b8:	68fa      	ldr	r2, [r7, #12]
 80068ba:	440a      	add	r2, r1
 80068bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	e02b      	b.n	8006920 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	db12      	blt.n	8006900 <USB_EPSetStall+0xae>
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d00f      	beq.n	8006900 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80068fe:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	0151      	lsls	r1, r2, #5
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	440a      	add	r2, r1
 8006916:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800691a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800691e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800692e:	b480      	push	{r7}
 8006930:	b085      	sub	sp, #20
 8006932:	af00      	add	r7, sp, #0
 8006934:	6078      	str	r0, [r7, #4]
 8006936:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	785b      	ldrb	r3, [r3, #1]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d128      	bne.n	800699c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	0151      	lsls	r1, r2, #5
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	440a      	add	r2, r1
 8006960:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006964:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006968:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	78db      	ldrb	r3, [r3, #3]
 800696e:	2b03      	cmp	r3, #3
 8006970:	d003      	beq.n	800697a <USB_EPClearStall+0x4c>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	78db      	ldrb	r3, [r3, #3]
 8006976:	2b02      	cmp	r3, #2
 8006978:	d138      	bne.n	80069ec <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	015a      	lsls	r2, r3, #5
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	4413      	add	r3, r2
 8006982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	0151      	lsls	r1, r2, #5
 800698c:	68fa      	ldr	r2, [r7, #12]
 800698e:	440a      	add	r2, r1
 8006990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	e027      	b.n	80069ec <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	78db      	ldrb	r3, [r3, #3]
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d003      	beq.n	80069cc <USB_EPClearStall+0x9e>
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	78db      	ldrb	r3, [r3, #3]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d10f      	bne.n	80069ec <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	0151      	lsls	r1, r2, #5
 80069de:	68fa      	ldr	r2, [r7, #12]
 80069e0:	440a      	add	r2, r1
 80069e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ea:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b085      	sub	sp, #20
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
 8006a02:	460b      	mov	r3, r1
 8006a04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a18:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a1c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006a2e:	68f9      	ldr	r1, [r7, #12]
 8006a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a34:	4313      	orrs	r3, r2
 8006a36:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b084      	sub	sp, #16
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a60:	f023 0302 	bic.w	r3, r3, #2
 8006a64:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006a66:	2003      	movs	r0, #3
 8006a68:	f7fb fc8e 	bl	8002388 <HAL_Delay>

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a90:	f043 0302 	orr.w	r3, r3, #2
 8006a94:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006a96:	2003      	movs	r0, #3
 8006a98:	f7fb fc76 	bl	8002388 <HAL_Delay>

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b085      	sub	sp, #20
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4013      	ands	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006abe:	68fb      	ldr	r3, [r7, #12]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3714      	adds	r7, #20
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ade:	699b      	ldr	r3, [r3, #24]
 8006ae0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	68ba      	ldr	r2, [r7, #8]
 8006aec:	4013      	ands	r3, r2
 8006aee:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	0c1b      	lsrs	r3, r3, #16
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	4013      	ands	r3, r2
 8006b22:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	b29b      	uxth	r3, r3
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006b44:	78fb      	ldrb	r3, [r7, #3]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b62:	68bb      	ldr	r3, [r7, #8]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b087      	sub	sp, #28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b92:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8006ba0:	01db      	lsls	r3, r3, #7
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4013      	ands	r3, r2
 8006bbc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	371c      	adds	r7, #28
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	695b      	ldr	r3, [r3, #20]
 8006bd8:	f003 0301 	and.w	r3, r3, #1
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006c06:	f023 0307 	bic.w	r3, r3, #7
 8006c0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
	...

08006c30 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b087      	sub	sp, #28
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	460b      	mov	r3, r1
 8006c3a:	607a      	str	r2, [r7, #4]
 8006c3c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	333c      	adds	r3, #60	; 0x3c
 8006c46:	3304      	adds	r3, #4
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	4a26      	ldr	r2, [pc, #152]	; (8006ce8 <USB_EP0_OutStart+0xb8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d90a      	bls.n	8006c6a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c64:	d101      	bne.n	8006c6a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006c66:	2300      	movs	r3, #0
 8006c68:	e037      	b.n	8006cda <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c70:	461a      	mov	r2, r3
 8006c72:	2300      	movs	r3, #0
 8006c74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c98:	f043 0318 	orr.w	r3, r3, #24
 8006c9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca4:	691b      	ldr	r3, [r3, #16]
 8006ca6:	697a      	ldr	r2, [r7, #20]
 8006ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cac:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006cb0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006cb2:	7afb      	ldrb	r3, [r7, #11]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d10f      	bne.n	8006cd8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cd2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006cd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cd8:	2300      	movs	r3, #0
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop
 8006ce8:	4f54300a 	.word	0x4f54300a

08006cec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	4a13      	ldr	r2, [pc, #76]	; (8006d50 <USB_CoreReset+0x64>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d901      	bls.n	8006d0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e01b      	b.n	8006d42 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	daf2      	bge.n	8006cf8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	f043 0201 	orr.w	r2, r3, #1
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	3301      	adds	r3, #1
 8006d26:	60fb      	str	r3, [r7, #12]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4a09      	ldr	r2, [pc, #36]	; (8006d50 <USB_CoreReset+0x64>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d901      	bls.n	8006d34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006d30:	2303      	movs	r3, #3
 8006d32:	e006      	b.n	8006d42 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	f003 0301 	and.w	r3, r3, #1
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d0f0      	beq.n	8006d22 <USB_CoreReset+0x36>

  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr
 8006d4e:	bf00      	nop
 8006d50:	00030d40 	.word	0x00030d40

08006d54 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006d60:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006d64:	f002 fa0c 	bl	8009180 <malloc>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d105      	bne.n	8006d7e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e066      	b.n	8006e4c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	7c1b      	ldrb	r3, [r3, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d119      	bne.n	8006dc2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d92:	2202      	movs	r2, #2
 8006d94:	2181      	movs	r1, #129	; 0x81
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f002 f879 	bl	8008e8e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006da6:	2202      	movs	r2, #2
 8006da8:	2101      	movs	r1, #1
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f002 f86f 	bl	8008e8e <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2210      	movs	r2, #16
 8006dbc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006dc0:	e016      	b.n	8006df0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006dc2:	2340      	movs	r3, #64	; 0x40
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	2181      	movs	r1, #129	; 0x81
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f002 f860 	bl	8008e8e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006dd4:	2340      	movs	r3, #64	; 0x40
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	2101      	movs	r1, #1
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f002 f857 	bl	8008e8e <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2210      	movs	r2, #16
 8006dec:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006df0:	2308      	movs	r3, #8
 8006df2:	2203      	movs	r2, #3
 8006df4:	2182      	movs	r1, #130	; 0x82
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f002 f849 	bl	8008e8e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	7c1b      	ldrb	r3, [r3, #16]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d109      	bne.n	8006e3a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e30:	2101      	movs	r1, #1
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f002 f91a 	bl	800906c <USBD_LL_PrepareReceive>
 8006e38:	e007      	b.n	8006e4a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e40:	2340      	movs	r3, #64	; 0x40
 8006e42:	2101      	movs	r1, #1
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f002 f911 	bl	800906c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006e4a:	2300      	movs	r3, #0
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006e64:	2181      	movs	r1, #129	; 0x81
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f002 f837 	bl	8008eda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006e72:	2101      	movs	r1, #1
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f002 f830 	bl	8008eda <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006e82:	2182      	movs	r1, #130	; 0x82
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f002 f828 	bl	8008eda <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d00e      	beq.n	8006ec2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f002 f96b 	bl	8009190 <free>
    pdev->pClassData = NULL;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006edc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d03a      	beq.n	8006f6c <USBD_CDC_Setup+0xa0>
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	f040 8097 	bne.w	800702a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	88db      	ldrh	r3, [r3, #6]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d029      	beq.n	8006f58 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	b25b      	sxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	da11      	bge.n	8006f32 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	683a      	ldr	r2, [r7, #0]
 8006f18:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006f1a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	88d2      	ldrh	r2, [r2, #6]
 8006f20:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006f22:	6939      	ldr	r1, [r7, #16]
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	88db      	ldrh	r3, [r3, #6]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f001 fac6 	bl	80084bc <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006f30:	e082      	b.n	8007038 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	785a      	ldrb	r2, [r3, #1]
 8006f36:	693b      	ldr	r3, [r7, #16]
 8006f38:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	88db      	ldrh	r3, [r3, #6]
 8006f40:	b2da      	uxtb	r2, r3
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006f48:	6939      	ldr	r1, [r7, #16]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	88db      	ldrh	r3, [r3, #6]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f001 fadf 	bl	8008514 <USBD_CtlPrepareRx>
    break;
 8006f56:	e06f      	b.n	8007038 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	7850      	ldrb	r0, [r2, #1]
 8006f64:	2200      	movs	r2, #0
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	4798      	blx	r3
    break;
 8006f6a:	e065      	b.n	8007038 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	785b      	ldrb	r3, [r3, #1]
 8006f70:	2b0b      	cmp	r3, #11
 8006f72:	d84f      	bhi.n	8007014 <USBD_CDC_Setup+0x148>
 8006f74:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <USBD_CDC_Setup+0xb0>)
 8006f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7a:	bf00      	nop
 8006f7c:	08006fad 	.word	0x08006fad
 8006f80:	08007023 	.word	0x08007023
 8006f84:	08007015 	.word	0x08007015
 8006f88:	08007015 	.word	0x08007015
 8006f8c:	08007015 	.word	0x08007015
 8006f90:	08007015 	.word	0x08007015
 8006f94:	08007015 	.word	0x08007015
 8006f98:	08007015 	.word	0x08007015
 8006f9c:	08007015 	.word	0x08007015
 8006fa0:	08007015 	.word	0x08007015
 8006fa4:	08006fd5 	.word	0x08006fd5
 8006fa8:	08006ffd 	.word	0x08006ffd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fb2:	2b03      	cmp	r3, #3
 8006fb4:	d107      	bne.n	8006fc6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006fb6:	f107 030c 	add.w	r3, r7, #12
 8006fba:	2202      	movs	r2, #2
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f001 fa7c 	bl	80084bc <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006fc4:	e030      	b.n	8007028 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006fc6:	6839      	ldr	r1, [r7, #0]
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f001 fa06 	bl	80083da <USBD_CtlError>
        ret = USBD_FAIL;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd2:	e029      	b.n	8007028 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d107      	bne.n	8006fee <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006fde:	f107 030f 	add.w	r3, r7, #15
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f001 fa68 	bl	80084bc <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006fec:	e01c      	b.n	8007028 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 f9f2 	bl	80083da <USBD_CtlError>
        ret = USBD_FAIL;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	75fb      	strb	r3, [r7, #23]
      break;
 8006ffa:	e015      	b.n	8007028 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007002:	2b03      	cmp	r3, #3
 8007004:	d00f      	beq.n	8007026 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f001 f9e6 	bl	80083da <USBD_CtlError>
        ret = USBD_FAIL;
 800700e:	2303      	movs	r3, #3
 8007010:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007012:	e008      	b.n	8007026 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 f9df 	bl	80083da <USBD_CtlError>
      ret = USBD_FAIL;
 800701c:	2303      	movs	r3, #3
 800701e:	75fb      	strb	r3, [r7, #23]
      break;
 8007020:	e002      	b.n	8007028 <USBD_CDC_Setup+0x15c>
      break;
 8007022:	bf00      	nop
 8007024:	e008      	b.n	8007038 <USBD_CDC_Setup+0x16c>
      break;
 8007026:	bf00      	nop
    }
    break;
 8007028:	e006      	b.n	8007038 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800702a:	6839      	ldr	r1, [r7, #0]
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f001 f9d4 	bl	80083da <USBD_CtlError>
    ret = USBD_FAIL;
 8007032:	2303      	movs	r3, #3
 8007034:	75fb      	strb	r3, [r7, #23]
    break;
 8007036:	bf00      	nop
  }

  return (uint8_t)ret;
 8007038:	7dfb      	ldrb	r3, [r7, #23]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop

08007044 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007056:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007062:	2303      	movs	r3, #3
 8007064:	e049      	b.n	80070fa <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800706c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800706e:	78fa      	ldrb	r2, [r7, #3]
 8007070:	6879      	ldr	r1, [r7, #4]
 8007072:	4613      	mov	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	440b      	add	r3, r1
 800707c:	3318      	adds	r3, #24
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d029      	beq.n	80070d8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007084:	78fa      	ldrb	r2, [r7, #3]
 8007086:	6879      	ldr	r1, [r7, #4]
 8007088:	4613      	mov	r3, r2
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	440b      	add	r3, r1
 8007092:	3318      	adds	r3, #24
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	78f9      	ldrb	r1, [r7, #3]
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	460b      	mov	r3, r1
 800709c:	00db      	lsls	r3, r3, #3
 800709e:	1a5b      	subs	r3, r3, r1
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4403      	add	r3, r0
 80070a4:	3344      	adds	r3, #68	; 0x44
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80070ac:	fb03 f301 	mul.w	r3, r3, r1
 80070b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d110      	bne.n	80070d8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80070b6:	78fa      	ldrb	r2, [r7, #3]
 80070b8:	6879      	ldr	r1, [r7, #4]
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	440b      	add	r3, r1
 80070c4:	3318      	adds	r3, #24
 80070c6:	2200      	movs	r2, #0
 80070c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80070ca:	78f9      	ldrb	r1, [r7, #3]
 80070cc:	2300      	movs	r3, #0
 80070ce:	2200      	movs	r2, #0
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f001 ffaa 	bl	800902a <USBD_LL_Transmit>
 80070d6:	e00f      	b.n	80070f8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	2200      	movs	r2, #0
 80070dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80070f4:	78fa      	ldrb	r2, [r7, #3]
 80070f6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}

08007102 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	460b      	mov	r3, r1
 800710c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007114:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800711c:	2b00      	cmp	r3, #0
 800711e:	d101      	bne.n	8007124 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007120:	2303      	movs	r3, #3
 8007122:	e015      	b.n	8007150 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007124:	78fb      	ldrb	r3, [r7, #3]
 8007126:	4619      	mov	r1, r3
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 ffc0 	bl	80090ae <USBD_LL_GetRxDataSize>
 800712e:	4602      	mov	r2, r0
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800714a:	4611      	mov	r1, r2
 800714c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800714e:	2300      	movs	r3, #0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3710      	adds	r7, #16
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007166:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d015      	beq.n	800719e <USBD_CDC_EP0_RxReady+0x46>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007178:	2bff      	cmp	r3, #255	; 0xff
 800717a:	d010      	beq.n	800719e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800718a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007192:	b292      	uxth	r2, r2
 8007194:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	22ff      	movs	r2, #255	; 0xff
 800719a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800719e:	2300      	movs	r3, #0
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2243      	movs	r2, #67	; 0x43
 80071b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80071b6:	4b03      	ldr	r3, [pc, #12]	; (80071c4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	20000098 	.word	0x20000098

080071c8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2243      	movs	r2, #67	; 0x43
 80071d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80071d6:	4b03      	ldr	r3, [pc, #12]	; (80071e4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80071d8:	4618      	mov	r0, r3
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr
 80071e4:	20000054 	.word	0x20000054

080071e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2243      	movs	r2, #67	; 0x43
 80071f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80071f6:	4b03      	ldr	r3, [pc, #12]	; (8007204 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	200000dc 	.word	0x200000dc

08007208 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	220a      	movs	r2, #10
 8007214:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007216:	4b03      	ldr	r3, [pc, #12]	; (8007224 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007218:	4618      	mov	r0, r3
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	20000010 	.word	0x20000010

08007228 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007238:	2303      	movs	r3, #3
 800723a:	e004      	b.n	8007246 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	683a      	ldr	r2, [r7, #0]
 8007240:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007252:	b480      	push	{r7}
 8007254:	b087      	sub	sp, #28
 8007256:	af00      	add	r7, sp, #0
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007264:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007294:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	683a      	ldr	r2, [r7, #0]
 800729a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3714      	adds	r7, #20
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072ba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80072bc:	2301      	movs	r3, #1
 80072be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d101      	bne.n	80072ce <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e01a      	b.n	8007304 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d114      	bne.n	8007302 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2201      	movs	r2, #1
 80072dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80072f6:	2181      	movs	r1, #129	; 0x81
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f001 fe96 	bl	800902a <USBD_LL_Transmit>

    ret = USBD_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007302:	7bfb      	ldrb	r3, [r7, #15]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800731a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007322:	2b00      	cmp	r3, #0
 8007324:	d101      	bne.n	800732a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007326:	2303      	movs	r3, #3
 8007328:	e016      	b.n	8007358 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	7c1b      	ldrb	r3, [r3, #16]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d109      	bne.n	8007346 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800733c:	2101      	movs	r1, #1
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 fe94 	bl	800906c <USBD_LL_PrepareReceive>
 8007344:	e007      	b.n	8007356 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800734c:	2340      	movs	r3, #64	; 0x40
 800734e:	2101      	movs	r1, #1
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 fe8b 	bl	800906c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3710      	adds	r7, #16
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	4613      	mov	r3, r2
 800736c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d10a      	bne.n	800738a <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8007374:	481a      	ldr	r0, [pc, #104]	; (80073e0 <USBD_Init+0x80>)
 8007376:	f001 ffd3 	bl	8009320 <iprintf>
 800737a:	481a      	ldr	r0, [pc, #104]	; (80073e4 <USBD_Init+0x84>)
 800737c:	f001 ffd0 	bl	8009320 <iprintf>
 8007380:	200a      	movs	r0, #10
 8007382:	f001 ffe5 	bl	8009350 <putchar>
#endif
    return USBD_FAIL;
 8007386:	2303      	movs	r3, #3
 8007388:	e025      	b.n	80073d6 <USBD_Init+0x76>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007390:	2b00      	cmp	r3, #0
 8007392:	d003      	beq.n	800739c <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <USBD_Init+0x4e>
  {
    pdev->pConfDesc = NULL;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <USBD_Init+0x5c>
  {
    pdev->pDesc = pdesc;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	79fa      	ldrb	r2, [r7, #7]
 80073c8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f001 fcf2 	bl	8008db4 <USBD_LL_Init>
 80073d0:	4603      	mov	r3, r0
 80073d2:	75fb      	strb	r3, [r7, #23]

  return ret;
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	0800a500 	.word	0x0800a500
 80073e4:	0800a508 	.word	0x0800a508

080073e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d10a      	bne.n	8007412 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80073fc:	480f      	ldr	r0, [pc, #60]	; (800743c <USBD_RegisterClass+0x54>)
 80073fe:	f001 ff8f 	bl	8009320 <iprintf>
 8007402:	480f      	ldr	r0, [pc, #60]	; (8007440 <USBD_RegisterClass+0x58>)
 8007404:	f001 ff8c 	bl	8009320 <iprintf>
 8007408:	200a      	movs	r0, #10
 800740a:	f001 ffa1 	bl	8009350 <putchar>
#endif
    return USBD_FAIL;
 800740e:	2303      	movs	r3, #3
 8007410:	e010      	b.n	8007434 <USBD_RegisterClass+0x4c>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	683a      	ldr	r2, [r7, #0]
 8007416:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007422:	f107 020e 	add.w	r2, r7, #14
 8007426:	4610      	mov	r0, r2
 8007428:	4798      	blx	r3
 800742a:	4602      	mov	r2, r0
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3710      	adds	r7, #16
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	0800a500 	.word	0x0800a500
 8007440:	0800a520 	.word	0x0800a520

08007444 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f001 fd03 	bl	8008e58 <USBD_LL_Start>
 8007452:	4603      	mov	r3, r0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	460b      	mov	r3, r1
 800747c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800747e:	2303      	movs	r3, #3
 8007480:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007488:	2b00      	cmp	r3, #0
 800748a:	d009      	beq.n	80074a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	78fa      	ldrb	r2, [r7, #3]
 8007496:	4611      	mov	r1, r2
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	4798      	blx	r3
 800749c:	4603      	mov	r3, r0
 800749e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	460b      	mov	r3, r1
 80074b4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d007      	beq.n	80074d0 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	78fa      	ldrb	r2, [r7, #3]
 80074ca:	4611      	mov	r1, r2
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	4798      	blx	r3
  }

  return USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
 80074e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80074ea:	6839      	ldr	r1, [r7, #0]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 ff3a 	bl	8008366 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007500:	461a      	mov	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800750e:	f003 031f 	and.w	r3, r3, #31
 8007512:	2b02      	cmp	r3, #2
 8007514:	d01a      	beq.n	800754c <USBD_LL_SetupStage+0x72>
 8007516:	2b02      	cmp	r3, #2
 8007518:	d822      	bhi.n	8007560 <USBD_LL_SetupStage+0x86>
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <USBD_LL_SetupStage+0x4a>
 800751e:	2b01      	cmp	r3, #1
 8007520:	d00a      	beq.n	8007538 <USBD_LL_SetupStage+0x5e>
 8007522:	e01d      	b.n	8007560 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fa17 	bl	8007960 <USBD_StdDevReq>
 8007532:	4603      	mov	r3, r0
 8007534:	73fb      	strb	r3, [r7, #15]
      break;
 8007536:	e020      	b.n	800757a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fa7b 	bl	8007a3c <USBD_StdItfReq>
 8007546:	4603      	mov	r3, r0
 8007548:	73fb      	strb	r3, [r7, #15]
      break;
 800754a:	e016      	b.n	800757a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007552:	4619      	mov	r1, r3
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 fab9 	bl	8007acc <USBD_StdEPReq>
 800755a:	4603      	mov	r3, r0
 800755c:	73fb      	strb	r3, [r7, #15]
      break;
 800755e:	e00c      	b.n	800757a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007566:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800756a:	b2db      	uxtb	r3, r3
 800756c:	4619      	mov	r1, r3
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 fcd2 	bl	8008f18 <USBD_LL_StallEP>
 8007574:	4603      	mov	r3, r0
 8007576:	73fb      	strb	r3, [r7, #15]
      break;
 8007578:	bf00      	nop
  }

  return ret;
 800757a:	7bfb      	ldrb	r3, [r7, #15]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3710      	adds	r7, #16
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b086      	sub	sp, #24
 8007588:	af00      	add	r7, sp, #0
 800758a:	60f8      	str	r0, [r7, #12]
 800758c:	460b      	mov	r3, r1
 800758e:	607a      	str	r2, [r7, #4]
 8007590:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007592:	7afb      	ldrb	r3, [r7, #11]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d137      	bne.n	8007608 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800759e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80075a6:	2b03      	cmp	r3, #3
 80075a8:	d14a      	bne.n	8007640 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	689a      	ldr	r2, [r3, #8]
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d913      	bls.n	80075de <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	689a      	ldr	r2, [r3, #8]
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	1ad2      	subs	r2, r2, r3
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	68da      	ldr	r2, [r3, #12]
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	4293      	cmp	r3, r2
 80075ce:	bf28      	it	cs
 80075d0:	4613      	movcs	r3, r2
 80075d2:	461a      	mov	r2, r3
 80075d4:	6879      	ldr	r1, [r7, #4]
 80075d6:	68f8      	ldr	r0, [r7, #12]
 80075d8:	f000 ffb9 	bl	800854e <USBD_CtlContinueRx>
 80075dc:	e030      	b.n	8007640 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d105      	bne.n	8007600 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075fa:	691b      	ldr	r3, [r3, #16]
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 ffb5 	bl	8008570 <USBD_CtlSendStatus>
 8007606:	e01b      	b.n	8007640 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760e:	699b      	ldr	r3, [r3, #24]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d013      	beq.n	800763c <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800761a:	2b03      	cmp	r3, #3
 800761c:	d10e      	bne.n	800763c <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	7afa      	ldrb	r2, [r7, #11]
 8007628:	4611      	mov	r1, r2
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	4798      	blx	r3
 800762e:	4603      	mov	r3, r0
 8007630:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d003      	beq.n	8007640 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007638:	7dfb      	ldrb	r3, [r7, #23]
 800763a:	e002      	b.n	8007642 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800763c:	2303      	movs	r3, #3
 800763e:	e000      	b.n	8007642 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b086      	sub	sp, #24
 800764e:	af00      	add	r7, sp, #0
 8007650:	60f8      	str	r0, [r7, #12]
 8007652:	460b      	mov	r3, r1
 8007654:	607a      	str	r2, [r7, #4]
 8007656:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007658:	7afb      	ldrb	r3, [r7, #11]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d16a      	bne.n	8007734 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	3314      	adds	r3, #20
 8007662:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800766a:	2b02      	cmp	r3, #2
 800766c:	d155      	bne.n	800771a <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	429a      	cmp	r2, r3
 8007678:	d914      	bls.n	80076a4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	689a      	ldr	r2, [r3, #8]
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	1ad2      	subs	r2, r2, r3
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	461a      	mov	r2, r3
 800768e:	6879      	ldr	r1, [r7, #4]
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 ff2e 	bl	80084f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007696:	2300      	movs	r3, #0
 8007698:	2200      	movs	r2, #0
 800769a:	2100      	movs	r1, #0
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f001 fce5 	bl	800906c <USBD_LL_PrepareReceive>
 80076a2:	e03a      	b.n	800771a <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	68da      	ldr	r2, [r3, #12]
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d11c      	bne.n	80076ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	685a      	ldr	r2, [r3, #4]
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d316      	bcc.n	80076ea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d20f      	bcs.n	80076ea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80076ca:	2200      	movs	r2, #0
 80076cc:	2100      	movs	r1, #0
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f000 ff0f 	bl	80084f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076dc:	2300      	movs	r3, #0
 80076de:	2200      	movs	r2, #0
 80076e0:	2100      	movs	r1, #0
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f001 fcc2 	bl	800906c <USBD_LL_PrepareReceive>
 80076e8:	e017      	b.n	800771a <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d105      	bne.n	800770c <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	68f8      	ldr	r0, [r7, #12]
 800770a:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800770c:	2180      	movs	r1, #128	; 0x80
 800770e:	68f8      	ldr	r0, [r7, #12]
 8007710:	f001 fc02 	bl	8008f18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 ff3e 	bl	8008596 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007720:	2b01      	cmp	r3, #1
 8007722:	d123      	bne.n	800776c <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f7ff fe99 	bl	800745c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007732:	e01b      	b.n	800776c <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d013      	beq.n	8007768 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007746:	2b03      	cmp	r3, #3
 8007748:	d10e      	bne.n	8007768 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	7afa      	ldrb	r2, [r7, #11]
 8007754:	4611      	mov	r1, r2
 8007756:	68f8      	ldr	r0, [r7, #12]
 8007758:	4798      	blx	r3
 800775a:	4603      	mov	r3, r0
 800775c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800775e:	7dfb      	ldrb	r3, [r7, #23]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d003      	beq.n	800776c <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007764:	7dfb      	ldrb	r3, [r7, #23]
 8007766:	e002      	b.n	800776e <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007768:	2303      	movs	r3, #3
 800776a:	e000      	b.n	800776e <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3718      	adds	r7, #24
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b082      	sub	sp, #8
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d009      	beq.n	80077ba <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	687a      	ldr	r2, [r7, #4]
 80077b0:	6852      	ldr	r2, [r2, #4]
 80077b2:	b2d2      	uxtb	r2, r2
 80077b4:	4611      	mov	r1, r2
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077ba:	2340      	movs	r3, #64	; 0x40
 80077bc:	2200      	movs	r2, #0
 80077be:	2100      	movs	r1, #0
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f001 fb64 	bl	8008e8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2240      	movs	r2, #64	; 0x40
 80077d2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80077d6:	2340      	movs	r3, #64	; 0x40
 80077d8:	2200      	movs	r2, #0
 80077da:	2180      	movs	r1, #128	; 0x80
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f001 fb56 	bl	8008e8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2240      	movs	r2, #64	; 0x40
 80077ec:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
 8007800:	460b      	mov	r3, r1
 8007802:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	78fa      	ldrb	r2, [r7, #3]
 8007808:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2204      	movs	r2, #4
 8007830:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007834:	2300      	movs	r3, #0
}
 8007836:	4618      	mov	r0, r3
 8007838:	370c      	adds	r7, #12
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007850:	2b04      	cmp	r3, #4
 8007852:	d105      	bne.n	8007860 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007860:	2300      	movs	r3, #0
}
 8007862:	4618      	mov	r0, r3
 8007864:	370c      	adds	r7, #12
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr

0800786e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800787c:	2b03      	cmp	r3, #3
 800787e:	d10b      	bne.n	8007898 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007886:	69db      	ldr	r3, [r3, #28]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d005      	beq.n	8007898 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007892:	69db      	ldr	r3, [r3, #28]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3708      	adds	r7, #8
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b083      	sub	sp, #12
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	460b      	mov	r3, r1
 80078ac:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007902:	2b00      	cmp	r3, #0
 8007904:	d009      	beq.n	800791a <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	6852      	ldr	r2, [r2, #4]
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	4611      	mov	r1, r2
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
  }

  return USBD_OK;
 800791a:	2300      	movs	r3, #0
}
 800791c:	4618      	mov	r0, r3
 800791e:	3708      	adds	r7, #8
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	781b      	ldrb	r3, [r3, #0]
 8007934:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	3301      	adds	r3, #1
 800793a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007942:	8a3b      	ldrh	r3, [r7, #16]
 8007944:	021b      	lsls	r3, r3, #8
 8007946:	b21a      	sxth	r2, r3
 8007948:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800794c:	4313      	orrs	r3, r2
 800794e:	b21b      	sxth	r3, r3
 8007950:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007952:	89fb      	ldrh	r3, [r7, #14]
}
 8007954:	4618      	mov	r0, r3
 8007956:	371c      	adds	r7, #28
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007976:	2b40      	cmp	r3, #64	; 0x40
 8007978:	d005      	beq.n	8007986 <USBD_StdDevReq+0x26>
 800797a:	2b40      	cmp	r3, #64	; 0x40
 800797c:	d853      	bhi.n	8007a26 <USBD_StdDevReq+0xc6>
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00b      	beq.n	800799a <USBD_StdDevReq+0x3a>
 8007982:	2b20      	cmp	r3, #32
 8007984:	d14f      	bne.n	8007a26 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	6839      	ldr	r1, [r7, #0]
 8007990:	6878      	ldr	r0, [r7, #4]
 8007992:	4798      	blx	r3
 8007994:	4603      	mov	r3, r0
 8007996:	73fb      	strb	r3, [r7, #15]
    break;
 8007998:	e04a      	b.n	8007a30 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	785b      	ldrb	r3, [r3, #1]
 800799e:	2b09      	cmp	r3, #9
 80079a0:	d83b      	bhi.n	8007a1a <USBD_StdDevReq+0xba>
 80079a2:	a201      	add	r2, pc, #4	; (adr r2, 80079a8 <USBD_StdDevReq+0x48>)
 80079a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a8:	080079fd 	.word	0x080079fd
 80079ac:	08007a11 	.word	0x08007a11
 80079b0:	08007a1b 	.word	0x08007a1b
 80079b4:	08007a07 	.word	0x08007a07
 80079b8:	08007a1b 	.word	0x08007a1b
 80079bc:	080079db 	.word	0x080079db
 80079c0:	080079d1 	.word	0x080079d1
 80079c4:	08007a1b 	.word	0x08007a1b
 80079c8:	080079f3 	.word	0x080079f3
 80079cc:	080079e5 	.word	0x080079e5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80079d0:	6839      	ldr	r1, [r7, #0]
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f9d8 	bl	8007d88 <USBD_GetDescriptor>
      break;
 80079d8:	e024      	b.n	8007a24 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80079da:	6839      	ldr	r1, [r7, #0]
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fb3d 	bl	800805c <USBD_SetAddress>
      break;
 80079e2:	e01f      	b.n	8007a24 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80079e4:	6839      	ldr	r1, [r7, #0]
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fb7c 	bl	80080e4 <USBD_SetConfig>
 80079ec:	4603      	mov	r3, r0
 80079ee:	73fb      	strb	r3, [r7, #15]
      break;
 80079f0:	e018      	b.n	8007a24 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80079f2:	6839      	ldr	r1, [r7, #0]
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 fc19 	bl	800822c <USBD_GetConfig>
      break;
 80079fa:	e013      	b.n	8007a24 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f000 fc49 	bl	8008296 <USBD_GetStatus>
      break;
 8007a04:	e00e      	b.n	8007a24 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fc77 	bl	80082fc <USBD_SetFeature>
      break;
 8007a0e:	e009      	b.n	8007a24 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 fc86 	bl	8008324 <USBD_ClrFeature>
      break;
 8007a18:	e004      	b.n	8007a24 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 fcdc 	bl	80083da <USBD_CtlError>
      break;
 8007a22:	bf00      	nop
    }
    break;
 8007a24:	e004      	b.n	8007a30 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fcd6 	bl	80083da <USBD_CtlError>
    break;
 8007a2e:	bf00      	nop
  }

  return ret;
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop

08007a3c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a46:	2300      	movs	r3, #0
 8007a48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a52:	2b40      	cmp	r3, #64	; 0x40
 8007a54:	d005      	beq.n	8007a62 <USBD_StdItfReq+0x26>
 8007a56:	2b40      	cmp	r3, #64	; 0x40
 8007a58:	d82e      	bhi.n	8007ab8 <USBD_StdItfReq+0x7c>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <USBD_StdItfReq+0x26>
 8007a5e:	2b20      	cmp	r3, #32
 8007a60:	d12a      	bne.n	8007ab8 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a68:	3b01      	subs	r3, #1
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d81d      	bhi.n	8007aaa <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	889b      	ldrh	r3, [r3, #4]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d813      	bhi.n	8007aa0 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	4798      	blx	r3
 8007a86:	4603      	mov	r3, r0
 8007a88:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	88db      	ldrh	r3, [r3, #6]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d110      	bne.n	8007ab4 <USBD_StdItfReq+0x78>
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10d      	bne.n	8007ab4 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fd69 	bl	8008570 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007a9e:	e009      	b.n	8007ab4 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fc99 	bl	80083da <USBD_CtlError>
      break;
 8007aa8:	e004      	b.n	8007ab4 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fc94 	bl	80083da <USBD_CtlError>
      break;
 8007ab2:	e000      	b.n	8007ab6 <USBD_StdItfReq+0x7a>
      break;
 8007ab4:	bf00      	nop
    }
    break;
 8007ab6:	e004      	b.n	8007ac2 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007ab8:	6839      	ldr	r1, [r7, #0]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 fc8d 	bl	80083da <USBD_CtlError>
    break;
 8007ac0:	bf00      	nop
  }

  return ret;
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	889b      	ldrh	r3, [r3, #4]
 8007ade:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ae8:	2b40      	cmp	r3, #64	; 0x40
 8007aea:	d007      	beq.n	8007afc <USBD_StdEPReq+0x30>
 8007aec:	2b40      	cmp	r3, #64	; 0x40
 8007aee:	f200 8140 	bhi.w	8007d72 <USBD_StdEPReq+0x2a6>
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00c      	beq.n	8007b10 <USBD_StdEPReq+0x44>
 8007af6:	2b20      	cmp	r3, #32
 8007af8:	f040 813b 	bne.w	8007d72 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	4798      	blx	r3
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b0e:	e135      	b.n	8007d7c <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	785b      	ldrb	r3, [r3, #1]
 8007b14:	2b03      	cmp	r3, #3
 8007b16:	d007      	beq.n	8007b28 <USBD_StdEPReq+0x5c>
 8007b18:	2b03      	cmp	r3, #3
 8007b1a:	f300 8124 	bgt.w	8007d66 <USBD_StdEPReq+0x29a>
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d07b      	beq.n	8007c1a <USBD_StdEPReq+0x14e>
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d03b      	beq.n	8007b9e <USBD_StdEPReq+0xd2>
 8007b26:	e11e      	b.n	8007d66 <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d002      	beq.n	8007b38 <USBD_StdEPReq+0x6c>
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d016      	beq.n	8007b64 <USBD_StdEPReq+0x98>
 8007b36:	e02c      	b.n	8007b92 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b38:	7bbb      	ldrb	r3, [r7, #14]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00d      	beq.n	8007b5a <USBD_StdEPReq+0x8e>
 8007b3e:	7bbb      	ldrb	r3, [r7, #14]
 8007b40:	2b80      	cmp	r3, #128	; 0x80
 8007b42:	d00a      	beq.n	8007b5a <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f001 f9e5 	bl	8008f18 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b4e:	2180      	movs	r1, #128	; 0x80
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 f9e1 	bl	8008f18 <USBD_LL_StallEP>
 8007b56:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007b58:	e020      	b.n	8007b9c <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fc3c 	bl	80083da <USBD_CtlError>
        break;
 8007b62:	e01b      	b.n	8007b9c <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	885b      	ldrh	r3, [r3, #2]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10e      	bne.n	8007b8a <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00b      	beq.n	8007b8a <USBD_StdEPReq+0xbe>
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	2b80      	cmp	r3, #128	; 0x80
 8007b76:	d008      	beq.n	8007b8a <USBD_StdEPReq+0xbe>
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	88db      	ldrh	r3, [r3, #6]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d104      	bne.n	8007b8a <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b80:	7bbb      	ldrb	r3, [r7, #14]
 8007b82:	4619      	mov	r1, r3
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f001 f9c7 	bl	8008f18 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fcf0 	bl	8008570 <USBD_CtlSendStatus>

        break;
 8007b90:	e004      	b.n	8007b9c <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fc20 	bl	80083da <USBD_CtlError>
        break;
 8007b9a:	bf00      	nop
      }
      break;
 8007b9c:	e0e8      	b.n	8007d70 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d002      	beq.n	8007bae <USBD_StdEPReq+0xe2>
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d016      	beq.n	8007bda <USBD_StdEPReq+0x10e>
 8007bac:	e02e      	b.n	8007c0c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00d      	beq.n	8007bd0 <USBD_StdEPReq+0x104>
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	2b80      	cmp	r3, #128	; 0x80
 8007bb8:	d00a      	beq.n	8007bd0 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007bba:	7bbb      	ldrb	r3, [r7, #14]
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f001 f9aa 	bl	8008f18 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bc4:	2180      	movs	r1, #128	; 0x80
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 f9a6 	bl	8008f18 <USBD_LL_StallEP>
 8007bcc:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007bce:	e023      	b.n	8007c18 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fc01 	bl	80083da <USBD_CtlError>
        break;
 8007bd8:	e01e      	b.n	8007c18 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	885b      	ldrh	r3, [r3, #2]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d119      	bne.n	8007c16 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d004      	beq.n	8007bf6 <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f001 f9b0 	bl	8008f56 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fcba 	bl	8008570 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	4798      	blx	r3
        }
        break;
 8007c0a:	e004      	b.n	8007c16 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 fbe3 	bl	80083da <USBD_CtlError>
        break;
 8007c14:	e000      	b.n	8007c18 <USBD_StdEPReq+0x14c>
        break;
 8007c16:	bf00      	nop
      }
      break;
 8007c18:	e0aa      	b.n	8007d70 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d002      	beq.n	8007c2a <USBD_StdEPReq+0x15e>
 8007c24:	2b03      	cmp	r3, #3
 8007c26:	d032      	beq.n	8007c8e <USBD_StdEPReq+0x1c2>
 8007c28:	e097      	b.n	8007d5a <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c2a:	7bbb      	ldrb	r3, [r7, #14]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d007      	beq.n	8007c40 <USBD_StdEPReq+0x174>
 8007c30:	7bbb      	ldrb	r3, [r7, #14]
 8007c32:	2b80      	cmp	r3, #128	; 0x80
 8007c34:	d004      	beq.n	8007c40 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8007c36:	6839      	ldr	r1, [r7, #0]
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fbce 	bl	80083da <USBD_CtlError>
          break;
 8007c3e:	e091      	b.n	8007d64 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	da0b      	bge.n	8007c60 <USBD_StdEPReq+0x194>
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c4e:	4613      	mov	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	3310      	adds	r3, #16
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	3304      	adds	r3, #4
 8007c5e:	e00b      	b.n	8007c78 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c66:	4613      	mov	r3, r2
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	4413      	add	r3, r2
 8007c76:	3304      	adds	r3, #4
 8007c78:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	2202      	movs	r2, #2
 8007c84:	4619      	mov	r1, r3
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fc18 	bl	80084bc <USBD_CtlSendData>
        break;
 8007c8c:	e06a      	b.n	8007d64 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007c8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	da11      	bge.n	8007cba <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c96:	7bbb      	ldrb	r3, [r7, #14]
 8007c98:	f003 020f 	and.w	r2, r3, #15
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	009b      	lsls	r3, r3, #2
 8007ca2:	4413      	add	r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	440b      	add	r3, r1
 8007ca8:	3324      	adds	r3, #36	; 0x24
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d117      	bne.n	8007ce0 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8007cb0:	6839      	ldr	r1, [r7, #0]
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fb91 	bl	80083da <USBD_CtlError>
            break;
 8007cb8:	e054      	b.n	8007d64 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007cba:	7bbb      	ldrb	r3, [r7, #14]
 8007cbc:	f003 020f 	and.w	r2, r3, #15
 8007cc0:	6879      	ldr	r1, [r7, #4]
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	440b      	add	r3, r1
 8007ccc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d104      	bne.n	8007ce0 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8007cd6:	6839      	ldr	r1, [r7, #0]
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fb7e 	bl	80083da <USBD_CtlError>
            break;
 8007cde:	e041      	b.n	8007d64 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ce0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	da0b      	bge.n	8007d00 <USBD_StdEPReq+0x234>
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cee:	4613      	mov	r3, r2
 8007cf0:	009b      	lsls	r3, r3, #2
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	3310      	adds	r3, #16
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	e00b      	b.n	8007d18 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
 8007d02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007d06:	4613      	mov	r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	4413      	add	r3, r2
 8007d16:	3304      	adds	r3, #4
 8007d18:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <USBD_StdEPReq+0x25a>
 8007d20:	7bbb      	ldrb	r3, [r7, #14]
 8007d22:	2b80      	cmp	r3, #128	; 0x80
 8007d24:	d103      	bne.n	8007d2e <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	e00e      	b.n	8007d4c <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d2e:	7bbb      	ldrb	r3, [r7, #14]
 8007d30:	4619      	mov	r1, r3
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f001 f92e 	bl	8008f94 <USBD_LL_IsStallEP>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2201      	movs	r2, #1
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	e002      	b.n	8007d4c <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2202      	movs	r2, #2
 8007d50:	4619      	mov	r1, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 fbb2 	bl	80084bc <USBD_CtlSendData>
          break;
 8007d58:	e004      	b.n	8007d64 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fb3c 	bl	80083da <USBD_CtlError>
        break;
 8007d62:	bf00      	nop
      }
      break;
 8007d64:	e004      	b.n	8007d70 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fb36 	bl	80083da <USBD_CtlError>
      break;
 8007d6e:	bf00      	nop
    }
    break;
 8007d70:	e004      	b.n	8007d7c <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8007d72:	6839      	ldr	r1, [r7, #0]
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 fb30 	bl	80083da <USBD_CtlError>
    break;
 8007d7a:	bf00      	nop
  }

  return ret;
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	3710      	adds	r7, #16
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
	...

08007d88 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d92:	2300      	movs	r3, #0
 8007d94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	885b      	ldrh	r3, [r3, #2]
 8007da2:	0a1b      	lsrs	r3, r3, #8
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	3b01      	subs	r3, #1
 8007da8:	2b06      	cmp	r3, #6
 8007daa:	f200 8128 	bhi.w	8007ffe <USBD_GetDescriptor+0x276>
 8007dae:	a201      	add	r2, pc, #4	; (adr r2, 8007db4 <USBD_GetDescriptor+0x2c>)
 8007db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db4:	08007dd1 	.word	0x08007dd1
 8007db8:	08007de9 	.word	0x08007de9
 8007dbc:	08007e29 	.word	0x08007e29
 8007dc0:	08007fff 	.word	0x08007fff
 8007dc4:	08007fff 	.word	0x08007fff
 8007dc8:	08007f9f 	.word	0x08007f9f
 8007dcc:	08007fcb 	.word	0x08007fcb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	687a      	ldr	r2, [r7, #4]
 8007dda:	7c12      	ldrb	r2, [r2, #16]
 8007ddc:	f107 0108 	add.w	r1, r7, #8
 8007de0:	4610      	mov	r0, r2
 8007de2:	4798      	blx	r3
 8007de4:	60f8      	str	r0, [r7, #12]
    break;
 8007de6:	e112      	b.n	800800e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	7c1b      	ldrb	r3, [r3, #16]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10d      	bne.n	8007e0c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df8:	f107 0208 	add.w	r2, r7, #8
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	4798      	blx	r3
 8007e00:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	3301      	adds	r3, #1
 8007e06:	2202      	movs	r2, #2
 8007e08:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007e0a:	e100      	b.n	800800e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e14:	f107 0208 	add.w	r2, r7, #8
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4798      	blx	r3
 8007e1c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	3301      	adds	r3, #1
 8007e22:	2202      	movs	r2, #2
 8007e24:	701a      	strb	r2, [r3, #0]
    break;
 8007e26:	e0f2      	b.n	800800e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	885b      	ldrh	r3, [r3, #2]
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	2b05      	cmp	r3, #5
 8007e30:	f200 80ac 	bhi.w	8007f8c <USBD_GetDescriptor+0x204>
 8007e34:	a201      	add	r2, pc, #4	; (adr r2, 8007e3c <USBD_GetDescriptor+0xb4>)
 8007e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3a:	bf00      	nop
 8007e3c:	08007e55 	.word	0x08007e55
 8007e40:	08007e89 	.word	0x08007e89
 8007e44:	08007ebd 	.word	0x08007ebd
 8007e48:	08007ef1 	.word	0x08007ef1
 8007e4c:	08007f25 	.word	0x08007f25
 8007e50:	08007f59 	.word	0x08007f59
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d00b      	beq.n	8007e78 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	7c12      	ldrb	r2, [r2, #16]
 8007e6c:	f107 0108 	add.w	r1, r7, #8
 8007e70:	4610      	mov	r0, r2
 8007e72:	4798      	blx	r3
 8007e74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e76:	e091      	b.n	8007f9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f000 faad 	bl	80083da <USBD_CtlError>
        err++;
 8007e80:	7afb      	ldrb	r3, [r7, #11]
 8007e82:	3301      	adds	r3, #1
 8007e84:	72fb      	strb	r3, [r7, #11]
      break;
 8007e86:	e089      	b.n	8007f9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00b      	beq.n	8007eac <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	7c12      	ldrb	r2, [r2, #16]
 8007ea0:	f107 0108 	add.w	r1, r7, #8
 8007ea4:	4610      	mov	r0, r2
 8007ea6:	4798      	blx	r3
 8007ea8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007eaa:	e077      	b.n	8007f9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f000 fa93 	bl	80083da <USBD_CtlError>
        err++;
 8007eb4:	7afb      	ldrb	r3, [r7, #11]
 8007eb6:	3301      	adds	r3, #1
 8007eb8:	72fb      	strb	r3, [r7, #11]
      break;
 8007eba:	e06f      	b.n	8007f9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d00b      	beq.n	8007ee0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	7c12      	ldrb	r2, [r2, #16]
 8007ed4:	f107 0108 	add.w	r1, r7, #8
 8007ed8:	4610      	mov	r0, r2
 8007eda:	4798      	blx	r3
 8007edc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ede:	e05d      	b.n	8007f9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007ee0:	6839      	ldr	r1, [r7, #0]
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fa79 	bl	80083da <USBD_CtlError>
        err++;
 8007ee8:	7afb      	ldrb	r3, [r7, #11]
 8007eea:	3301      	adds	r3, #1
 8007eec:	72fb      	strb	r3, [r7, #11]
      break;
 8007eee:	e055      	b.n	8007f9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00b      	beq.n	8007f14 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	7c12      	ldrb	r2, [r2, #16]
 8007f08:	f107 0108 	add.w	r1, r7, #8
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	4798      	blx	r3
 8007f10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f12:	e043      	b.n	8007f9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fa5f 	bl	80083da <USBD_CtlError>
        err++;
 8007f1c:	7afb      	ldrb	r3, [r7, #11]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	72fb      	strb	r3, [r7, #11]
      break;
 8007f22:	e03b      	b.n	8007f9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f2a:	695b      	ldr	r3, [r3, #20]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d00b      	beq.n	8007f48 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f36:	695b      	ldr	r3, [r3, #20]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	7c12      	ldrb	r2, [r2, #16]
 8007f3c:	f107 0108 	add.w	r1, r7, #8
 8007f40:	4610      	mov	r0, r2
 8007f42:	4798      	blx	r3
 8007f44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f46:	e029      	b.n	8007f9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fa45 	bl	80083da <USBD_CtlError>
        err++;
 8007f50:	7afb      	ldrb	r3, [r7, #11]
 8007f52:	3301      	adds	r3, #1
 8007f54:	72fb      	strb	r3, [r7, #11]
      break;
 8007f56:	e021      	b.n	8007f9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f5e:	699b      	ldr	r3, [r3, #24]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00b      	beq.n	8007f7c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f6a:	699b      	ldr	r3, [r3, #24]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	7c12      	ldrb	r2, [r2, #16]
 8007f70:	f107 0108 	add.w	r1, r7, #8
 8007f74:	4610      	mov	r0, r2
 8007f76:	4798      	blx	r3
 8007f78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f7a:	e00f      	b.n	8007f9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fa2b 	bl	80083da <USBD_CtlError>
        err++;
 8007f84:	7afb      	ldrb	r3, [r7, #11]
 8007f86:	3301      	adds	r3, #1
 8007f88:	72fb      	strb	r3, [r7, #11]
      break;
 8007f8a:	e007      	b.n	8007f9c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fa23 	bl	80083da <USBD_CtlError>
      err++;
 8007f94:	7afb      	ldrb	r3, [r7, #11]
 8007f96:	3301      	adds	r3, #1
 8007f98:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007f9a:	bf00      	nop
    }
    break;
 8007f9c:	e037      	b.n	800800e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	7c1b      	ldrb	r3, [r3, #16]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d109      	bne.n	8007fba <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fae:	f107 0208 	add.w	r2, r7, #8
 8007fb2:	4610      	mov	r0, r2
 8007fb4:	4798      	blx	r3
 8007fb6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007fb8:	e029      	b.n	800800e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007fba:	6839      	ldr	r1, [r7, #0]
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f000 fa0c 	bl	80083da <USBD_CtlError>
      err++;
 8007fc2:	7afb      	ldrb	r3, [r7, #11]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	72fb      	strb	r3, [r7, #11]
    break;
 8007fc8:	e021      	b.n	800800e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	7c1b      	ldrb	r3, [r3, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10d      	bne.n	8007fee <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fda:	f107 0208 	add.w	r2, r7, #8
 8007fde:	4610      	mov	r0, r2
 8007fe0:	4798      	blx	r3
 8007fe2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	2207      	movs	r2, #7
 8007fea:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007fec:	e00f      	b.n	800800e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f9f2 	bl	80083da <USBD_CtlError>
      err++;
 8007ff6:	7afb      	ldrb	r3, [r7, #11]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	72fb      	strb	r3, [r7, #11]
    break;
 8007ffc:	e007      	b.n	800800e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f9ea 	bl	80083da <USBD_CtlError>
    err++;
 8008006:	7afb      	ldrb	r3, [r7, #11]
 8008008:	3301      	adds	r3, #1
 800800a:	72fb      	strb	r3, [r7, #11]
    break;
 800800c:	bf00      	nop
  }

  if (err != 0U)
 800800e:	7afb      	ldrb	r3, [r7, #11]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d11e      	bne.n	8008052 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	88db      	ldrh	r3, [r3, #6]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d016      	beq.n	800804a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800801c:	893b      	ldrh	r3, [r7, #8]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00e      	beq.n	8008040 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	88da      	ldrh	r2, [r3, #6]
 8008026:	893b      	ldrh	r3, [r7, #8]
 8008028:	4293      	cmp	r3, r2
 800802a:	bf28      	it	cs
 800802c:	4613      	movcs	r3, r2
 800802e:	b29b      	uxth	r3, r3
 8008030:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008032:	893b      	ldrh	r3, [r7, #8]
 8008034:	461a      	mov	r2, r3
 8008036:	68f9      	ldr	r1, [r7, #12]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fa3f 	bl	80084bc <USBD_CtlSendData>
 800803e:	e009      	b.n	8008054 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008040:	6839      	ldr	r1, [r7, #0]
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f9c9 	bl	80083da <USBD_CtlError>
 8008048:	e004      	b.n	8008054 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fa90 	bl	8008570 <USBD_CtlSendStatus>
 8008050:	e000      	b.n	8008054 <USBD_GetDescriptor+0x2cc>
    return;
 8008052:	bf00      	nop
    }
  }
}
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop

0800805c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	889b      	ldrh	r3, [r3, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d130      	bne.n	80080d0 <USBD_SetAddress+0x74>
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	88db      	ldrh	r3, [r3, #6]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d12c      	bne.n	80080d0 <USBD_SetAddress+0x74>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	885b      	ldrh	r3, [r3, #2]
 800807a:	2b7f      	cmp	r3, #127	; 0x7f
 800807c:	d828      	bhi.n	80080d0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	885b      	ldrh	r3, [r3, #2]
 8008082:	b2db      	uxtb	r3, r3
 8008084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008088:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008090:	2b03      	cmp	r3, #3
 8008092:	d104      	bne.n	800809e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008094:	6839      	ldr	r1, [r7, #0]
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f99f 	bl	80083da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800809c:	e01d      	b.n	80080da <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	7bfa      	ldrb	r2, [r7, #15]
 80080a2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080a6:	7bfb      	ldrb	r3, [r7, #15]
 80080a8:	4619      	mov	r1, r3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f000 ff9e 	bl	8008fec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fa5d 	bl	8008570 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080b6:	7bfb      	ldrb	r3, [r7, #15]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d004      	beq.n	80080c6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2202      	movs	r2, #2
 80080c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c4:	e009      	b.n	80080da <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ce:	e004      	b.n	80080da <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	f000 f981 	bl	80083da <USBD_CtlError>
  }
}
 80080d8:	bf00      	nop
 80080da:	bf00      	nop
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
	...

080080e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	885b      	ldrh	r3, [r3, #2]
 80080f6:	b2da      	uxtb	r2, r3
 80080f8:	4b4b      	ldr	r3, [pc, #300]	; (8008228 <USBD_SetConfig+0x144>)
 80080fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80080fc:	4b4a      	ldr	r3, [pc, #296]	; (8008228 <USBD_SetConfig+0x144>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d905      	bls.n	8008110 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f967 	bl	80083da <USBD_CtlError>
    return USBD_FAIL;
 800810c:	2303      	movs	r3, #3
 800810e:	e087      	b.n	8008220 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008116:	2b02      	cmp	r3, #2
 8008118:	d002      	beq.n	8008120 <USBD_SetConfig+0x3c>
 800811a:	2b03      	cmp	r3, #3
 800811c:	d025      	beq.n	800816a <USBD_SetConfig+0x86>
 800811e:	e071      	b.n	8008204 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8008120:	4b41      	ldr	r3, [pc, #260]	; (8008228 <USBD_SetConfig+0x144>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d01c      	beq.n	8008162 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8008128:	4b3f      	ldr	r3, [pc, #252]	; (8008228 <USBD_SetConfig+0x144>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	461a      	mov	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008132:	4b3d      	ldr	r3, [pc, #244]	; (8008228 <USBD_SetConfig+0x144>)
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff f99a 	bl	8007472 <USBD_SetClassConfig>
 800813e:	4603      	mov	r3, r0
 8008140:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d004      	beq.n	8008152 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f945 	bl	80083da <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008150:	e065      	b.n	800821e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 fa0c 	bl	8008570 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2203      	movs	r2, #3
 800815c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008160:	e05d      	b.n	800821e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f000 fa04 	bl	8008570 <USBD_CtlSendStatus>
    break;
 8008168:	e059      	b.n	800821e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800816a:	4b2f      	ldr	r3, [pc, #188]	; (8008228 <USBD_SetConfig+0x144>)
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d112      	bne.n	8008198 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2202      	movs	r2, #2
 8008176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800817a:	4b2b      	ldr	r3, [pc, #172]	; (8008228 <USBD_SetConfig+0x144>)
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008184:	4b28      	ldr	r3, [pc, #160]	; (8008228 <USBD_SetConfig+0x144>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	4619      	mov	r1, r3
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff f98d 	bl	80074aa <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 f9ed 	bl	8008570 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008196:	e042      	b.n	800821e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008198:	4b23      	ldr	r3, [pc, #140]	; (8008228 <USBD_SetConfig+0x144>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	461a      	mov	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d02a      	beq.n	80081fc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff f97b 	bl	80074aa <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80081b4:	4b1c      	ldr	r3, [pc, #112]	; (8008228 <USBD_SetConfig+0x144>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	461a      	mov	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80081be:	4b1a      	ldr	r3, [pc, #104]	; (8008228 <USBD_SetConfig+0x144>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7ff f954 	bl	8007472 <USBD_SetClassConfig>
 80081ca:	4603      	mov	r3, r0
 80081cc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d00f      	beq.n	80081f4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 f8ff 	bl	80083da <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f7ff f960 	bl	80074aa <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2202      	movs	r2, #2
 80081ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80081f2:	e014      	b.n	800821e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f9bb 	bl	8008570 <USBD_CtlSendStatus>
    break;
 80081fa:	e010      	b.n	800821e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f9b7 	bl	8008570 <USBD_CtlSendStatus>
    break;
 8008202:	e00c      	b.n	800821e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008204:	6839      	ldr	r1, [r7, #0]
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f8e7 	bl	80083da <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800820c:	4b06      	ldr	r3, [pc, #24]	; (8008228 <USBD_SetConfig+0x144>)
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7ff f949 	bl	80074aa <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008218:	2303      	movs	r3, #3
 800821a:	73fb      	strb	r3, [r7, #15]
    break;
 800821c:	bf00      	nop
  }

  return ret;
 800821e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}
 8008228:	20000214 	.word	0x20000214

0800822c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b082      	sub	sp, #8
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	88db      	ldrh	r3, [r3, #6]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d004      	beq.n	8008248 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800823e:	6839      	ldr	r1, [r7, #0]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 f8ca 	bl	80083da <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8008246:	e022      	b.n	800828e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800824e:	2b02      	cmp	r3, #2
 8008250:	dc02      	bgt.n	8008258 <USBD_GetConfig+0x2c>
 8008252:	2b00      	cmp	r3, #0
 8008254:	dc03      	bgt.n	800825e <USBD_GetConfig+0x32>
 8008256:	e015      	b.n	8008284 <USBD_GetConfig+0x58>
 8008258:	2b03      	cmp	r3, #3
 800825a:	d00b      	beq.n	8008274 <USBD_GetConfig+0x48>
 800825c:	e012      	b.n	8008284 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	3308      	adds	r3, #8
 8008268:	2201      	movs	r2, #1
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 f925 	bl	80084bc <USBD_CtlSendData>
      break;
 8008272:	e00c      	b.n	800828e <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	3304      	adds	r3, #4
 8008278:	2201      	movs	r2, #1
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 f91d 	bl	80084bc <USBD_CtlSendData>
      break;
 8008282:	e004      	b.n	800828e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 f8a7 	bl	80083da <USBD_CtlError>
      break;
 800828c:	bf00      	nop
}
 800828e:	bf00      	nop
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b082      	sub	sp, #8
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082a6:	3b01      	subs	r3, #1
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d81e      	bhi.n	80082ea <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	88db      	ldrh	r3, [r3, #6]
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d004      	beq.n	80082be <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80082b4:	6839      	ldr	r1, [r7, #0]
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f88f 	bl	80083da <USBD_CtlError>
      break;
 80082bc:	e01a      	b.n	80082f4 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2201      	movs	r2, #1
 80082c2:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	f043 0202 	orr.w	r2, r3, #2
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	330c      	adds	r3, #12
 80082de:	2202      	movs	r2, #2
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f8ea 	bl	80084bc <USBD_CtlSendData>
    break;
 80082e8:	e004      	b.n	80082f4 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80082ea:	6839      	ldr	r1, [r7, #0]
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 f874 	bl	80083da <USBD_CtlError>
    break;
 80082f2:	bf00      	nop
  }
}
 80082f4:	bf00      	nop
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	885b      	ldrh	r3, [r3, #2]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d106      	bne.n	800831c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f92a 	bl	8008570 <USBD_CtlSendStatus>
  }
}
 800831c:	bf00      	nop
 800831e:	3708      	adds	r7, #8
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008334:	3b01      	subs	r3, #1
 8008336:	2b02      	cmp	r3, #2
 8008338:	d80b      	bhi.n	8008352 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	885b      	ldrh	r3, [r3, #2]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d10c      	bne.n	800835c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2200      	movs	r2, #0
 8008346:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f910 	bl	8008570 <USBD_CtlSendStatus>
      }
      break;
 8008350:	e004      	b.n	800835c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008352:	6839      	ldr	r1, [r7, #0]
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 f840 	bl	80083da <USBD_CtlError>
      break;
 800835a:	e000      	b.n	800835e <USBD_ClrFeature+0x3a>
      break;
 800835c:	bf00      	nop
  }
}
 800835e:	bf00      	nop
 8008360:	3708      	adds	r7, #8
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	781a      	ldrb	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	3301      	adds	r3, #1
 8008380:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	781a      	ldrb	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	3301      	adds	r3, #1
 800838e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008390:	68f8      	ldr	r0, [r7, #12]
 8008392:	f7ff fac7 	bl	8007924 <SWAPBYTE>
 8008396:	4603      	mov	r3, r0
 8008398:	461a      	mov	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3301      	adds	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	3301      	adds	r3, #1
 80083a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f7ff faba 	bl	8007924 <SWAPBYTE>
 80083b0:	4603      	mov	r3, r0
 80083b2:	461a      	mov	r2, r3
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	3301      	adds	r3, #1
 80083bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	3301      	adds	r3, #1
 80083c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f7ff faad 	bl	8007924 <SWAPBYTE>
 80083ca:	4603      	mov	r3, r0
 80083cc:	461a      	mov	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	80da      	strh	r2, [r3, #6]
}
 80083d2:	bf00      	nop
 80083d4:	3710      	adds	r7, #16
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b082      	sub	sp, #8
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
 80083e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80083e4:	2180      	movs	r1, #128	; 0x80
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f000 fd96 	bl	8008f18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80083ec:	2100      	movs	r1, #0
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 fd92 	bl	8008f18 <USBD_LL_StallEP>
}
 80083f4:	bf00      	nop
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008408:	2300      	movs	r3, #0
 800840a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d036      	beq.n	8008480 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008416:	6938      	ldr	r0, [r7, #16]
 8008418:	f000 f836 	bl	8008488 <USBD_GetLen>
 800841c:	4603      	mov	r3, r0
 800841e:	3301      	adds	r3, #1
 8008420:	b29b      	uxth	r3, r3
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	b29a      	uxth	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800842a:	7dfb      	ldrb	r3, [r7, #23]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	4413      	add	r3, r2
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	7812      	ldrb	r2, [r2, #0]
 8008434:	701a      	strb	r2, [r3, #0]
  idx++;
 8008436:	7dfb      	ldrb	r3, [r7, #23]
 8008438:	3301      	adds	r3, #1
 800843a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800843c:	7dfb      	ldrb	r3, [r7, #23]
 800843e:	68ba      	ldr	r2, [r7, #8]
 8008440:	4413      	add	r3, r2
 8008442:	2203      	movs	r2, #3
 8008444:	701a      	strb	r2, [r3, #0]
  idx++;
 8008446:	7dfb      	ldrb	r3, [r7, #23]
 8008448:	3301      	adds	r3, #1
 800844a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800844c:	e013      	b.n	8008476 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800844e:	7dfb      	ldrb	r3, [r7, #23]
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	4413      	add	r3, r2
 8008454:	693a      	ldr	r2, [r7, #16]
 8008456:	7812      	ldrb	r2, [r2, #0]
 8008458:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	3301      	adds	r3, #1
 800845e:	613b      	str	r3, [r7, #16]
    idx++;
 8008460:	7dfb      	ldrb	r3, [r7, #23]
 8008462:	3301      	adds	r3, #1
 8008464:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	68ba      	ldr	r2, [r7, #8]
 800846a:	4413      	add	r3, r2
 800846c:	2200      	movs	r2, #0
 800846e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008470:	7dfb      	ldrb	r3, [r7, #23]
 8008472:	3301      	adds	r3, #1
 8008474:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008476:	693b      	ldr	r3, [r7, #16]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1e7      	bne.n	800844e <USBD_GetString+0x52>
 800847e:	e000      	b.n	8008482 <USBD_GetString+0x86>
    return;
 8008480:	bf00      	nop
  }
}
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008490:	2300      	movs	r3, #0
 8008492:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008498:	e005      	b.n	80084a6 <USBD_GetLen+0x1e>
  {
    len++;
 800849a:	7bfb      	ldrb	r3, [r7, #15]
 800849c:	3301      	adds	r3, #1
 800849e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	3301      	adds	r3, #1
 80084a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1f5      	bne.n	800849a <USBD_GetLen+0x12>
  }

  return len;
 80084ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3714      	adds	r7, #20
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	2202      	movs	r2, #2
 80084cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	2100      	movs	r1, #0
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 fda1 	bl	800902a <USBD_LL_Transmit>

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	2100      	movs	r1, #0
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 fd90 	bl	800902a <USBD_LL_Transmit>

  return USBD_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	60b9      	str	r1, [r7, #8]
 800851e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2203      	movs	r2, #3
 8008524:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	2100      	movs	r1, #0
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 fd94 	bl	800906c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}

0800854e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	60b9      	str	r1, [r7, #8]
 8008558:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	68ba      	ldr	r2, [r7, #8]
 800855e:	2100      	movs	r1, #0
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 fd83 	bl	800906c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3710      	adds	r7, #16
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2204      	movs	r2, #4
 800857c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008580:	2300      	movs	r3, #0
 8008582:	2200      	movs	r2, #0
 8008584:	2100      	movs	r1, #0
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 fd4f 	bl	800902a <USBD_LL_Transmit>

  return USBD_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2205      	movs	r2, #5
 80085a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085a6:	2300      	movs	r3, #0
 80085a8:	2200      	movs	r2, #0
 80085aa:	2100      	movs	r1, #0
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fd5d 	bl	800906c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3708      	adds	r7, #8
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80085c0:	2201      	movs	r2, #1
 80085c2:	4912      	ldr	r1, [pc, #72]	; (800860c <MX_USB_DEVICE_Init+0x50>)
 80085c4:	4812      	ldr	r0, [pc, #72]	; (8008610 <MX_USB_DEVICE_Init+0x54>)
 80085c6:	f7fe fecb 	bl	8007360 <USBD_Init>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80085d0:	f7f9 fbe0 	bl	8001d94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80085d4:	490f      	ldr	r1, [pc, #60]	; (8008614 <MX_USB_DEVICE_Init+0x58>)
 80085d6:	480e      	ldr	r0, [pc, #56]	; (8008610 <MX_USB_DEVICE_Init+0x54>)
 80085d8:	f7fe ff06 	bl	80073e8 <USBD_RegisterClass>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d001      	beq.n	80085e6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80085e2:	f7f9 fbd7 	bl	8001d94 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80085e6:	490c      	ldr	r1, [pc, #48]	; (8008618 <MX_USB_DEVICE_Init+0x5c>)
 80085e8:	4809      	ldr	r0, [pc, #36]	; (8008610 <MX_USB_DEVICE_Init+0x54>)
 80085ea:	f7fe fe1d 	bl	8007228 <USBD_CDC_RegisterInterface>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80085f4:	f7f9 fbce 	bl	8001d94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80085f8:	4805      	ldr	r0, [pc, #20]	; (8008610 <MX_USB_DEVICE_Init+0x54>)
 80085fa:	f7fe ff23 	bl	8007444 <USBD_Start>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d001      	beq.n	8008608 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008604:	f7f9 fbc6 	bl	8001d94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008608:	bf00      	nop
 800860a:	bd80      	pop	{r7, pc}
 800860c:	2000013c 	.word	0x2000013c
 8008610:	200004c8 	.word	0x200004c8
 8008614:	2000001c 	.word	0x2000001c
 8008618:	20000128 	.word	0x20000128

0800861c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8008620:	2200      	movs	r2, #0
 8008622:	4905      	ldr	r1, [pc, #20]	; (8008638 <CDC_Init_HS+0x1c>)
 8008624:	4805      	ldr	r0, [pc, #20]	; (800863c <CDC_Init_HS+0x20>)
 8008626:	f7fe fe14 	bl	8007252 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800862a:	4905      	ldr	r1, [pc, #20]	; (8008640 <CDC_Init_HS+0x24>)
 800862c:	4803      	ldr	r0, [pc, #12]	; (800863c <CDC_Init_HS+0x20>)
 800862e:	f7fe fe29 	bl	8007284 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8008632:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8008634:	4618      	mov	r0, r3
 8008636:	bd80      	pop	{r7, pc}
 8008638:	200007fc 	.word	0x200007fc
 800863c:	200004c8 	.word	0x200004c8
 8008640:	20000798 	.word	0x20000798

08008644 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8008644:	b480      	push	{r7}
 8008646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
	return (USBD_OK);
 8008648:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800864a:	4618      	mov	r0, r3
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	4603      	mov	r3, r0
 800865c:	6039      	str	r1, [r7, #0]
 800865e:	71fb      	strb	r3, [r7, #7]
 8008660:	4613      	mov	r3, r2
 8008662:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
	switch (cmd) {
 8008664:	79fb      	ldrb	r3, [r7, #7]
 8008666:	2b23      	cmp	r3, #35	; 0x23
 8008668:	d85c      	bhi.n	8008724 <CDC_Control_HS+0xd0>
 800866a:	a201      	add	r2, pc, #4	; (adr r2, 8008670 <CDC_Control_HS+0x1c>)
 800866c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008670:	08008725 	.word	0x08008725
 8008674:	08008725 	.word	0x08008725
 8008678:	08008725 	.word	0x08008725
 800867c:	08008725 	.word	0x08008725
 8008680:	08008725 	.word	0x08008725
 8008684:	08008725 	.word	0x08008725
 8008688:	08008725 	.word	0x08008725
 800868c:	08008725 	.word	0x08008725
 8008690:	08008725 	.word	0x08008725
 8008694:	08008725 	.word	0x08008725
 8008698:	08008725 	.word	0x08008725
 800869c:	08008725 	.word	0x08008725
 80086a0:	08008725 	.word	0x08008725
 80086a4:	08008725 	.word	0x08008725
 80086a8:	08008725 	.word	0x08008725
 80086ac:	08008725 	.word	0x08008725
 80086b0:	08008725 	.word	0x08008725
 80086b4:	08008725 	.word	0x08008725
 80086b8:	08008725 	.word	0x08008725
 80086bc:	08008725 	.word	0x08008725
 80086c0:	08008725 	.word	0x08008725
 80086c4:	08008725 	.word	0x08008725
 80086c8:	08008725 	.word	0x08008725
 80086cc:	08008725 	.word	0x08008725
 80086d0:	08008725 	.word	0x08008725
 80086d4:	08008725 	.word	0x08008725
 80086d8:	08008725 	.word	0x08008725
 80086dc:	08008725 	.word	0x08008725
 80086e0:	08008725 	.word	0x08008725
 80086e4:	08008725 	.word	0x08008725
 80086e8:	08008725 	.word	0x08008725
 80086ec:	08008725 	.word	0x08008725
 80086f0:	08008701 	.word	0x08008701
 80086f4:	08008713 	.word	0x08008713
 80086f8:	08008725 	.word	0x08008725
 80086fc:	08008725 	.word	0x08008725
		/*                                        4 - Space                            */
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/

	case CDC_SET_LINE_CODING:
		memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8008700:	4b0c      	ldr	r3, [pc, #48]	; (8008734 <CDC_Control_HS+0xe0>)
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	6810      	ldr	r0, [r2, #0]
 8008706:	6018      	str	r0, [r3, #0]
 8008708:	8891      	ldrh	r1, [r2, #4]
 800870a:	7992      	ldrb	r2, [r2, #6]
 800870c:	8099      	strh	r1, [r3, #4]
 800870e:	719a      	strb	r2, [r3, #6]
		break;
 8008710:	e009      	b.n	8008726 <CDC_Control_HS+0xd2>

	case CDC_GET_LINE_CODING:
		memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	4a07      	ldr	r2, [pc, #28]	; (8008734 <CDC_Control_HS+0xe0>)
 8008716:	6810      	ldr	r0, [r2, #0]
 8008718:	6018      	str	r0, [r3, #0]
 800871a:	8891      	ldrh	r1, [r2, #4]
 800871c:	7992      	ldrb	r2, [r2, #6]
 800871e:	8099      	strh	r1, [r3, #4]
 8008720:	719a      	strb	r2, [r3, #6]
		break;
 8008722:	e000      	b.n	8008726 <CDC_Control_HS+0xd2>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8008724:	bf00      	nop
	}

	return (USBD_OK);
 8008726:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8008728:	4618      	mov	r0, r3
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr
 8008734:	20000120 	.word	0x20000120

08008738 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8008742:	6879      	ldr	r1, [r7, #4]
 8008744:	4811      	ldr	r0, [pc, #68]	; (800878c <CDC_Receive_HS+0x54>)
 8008746:	f7fe fd9d 	bl	8007284 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800874a:	4810      	ldr	r0, [pc, #64]	; (800878c <CDC_Receive_HS+0x54>)
 800874c:	f7fe fdde 	bl	800730c <USBD_CDC_ReceivePacket>
	strlcpy(usb_received_data, Buf, &Len + 1);
 8008750:	463b      	mov	r3, r7
 8008752:	3304      	adds	r3, #4
 8008754:	461a      	mov	r2, r3
 8008756:	6879      	ldr	r1, [r7, #4]
 8008758:	480d      	ldr	r0, [pc, #52]	; (8008790 <CDC_Receive_HS+0x58>)
 800875a:	f000 fe3f 	bl	80093dc <strlcpy>

	if (usb_received_data[0] == '1') {
 800875e:	4b0c      	ldr	r3, [pc, #48]	; (8008790 <CDC_Receive_HS+0x58>)
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	2b31      	cmp	r3, #49	; 0x31
 8008764:	d106      	bne.n	8008774 <CDC_Receive_HS+0x3c>
		HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_SET);
 8008766:	2201      	movs	r2, #1
 8008768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800876c:	4809      	ldr	r0, [pc, #36]	; (8008794 <CDC_Receive_HS+0x5c>)
 800876e:	f7fa ff97 	bl	80036a0 <HAL_GPIO_WritePin>
 8008772:	e005      	b.n	8008780 <CDC_Receive_HS+0x48>
	} else {
		HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_RESET);
 8008774:	2200      	movs	r2, #0
 8008776:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800877a:	4806      	ldr	r0, [pc, #24]	; (8008794 <CDC_Receive_HS+0x5c>)
 800877c:	f7fa ff90 	bl	80036a0 <HAL_GPIO_WritePin>
	}
//	CDC_ReceiveCallback(&Buf, Len[0]);
	return (USBD_OK);
 8008780:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8008782:	4618      	mov	r0, r3
 8008784:	3708      	adds	r7, #8
 8008786:	46bd      	mov	sp, r7
 8008788:	bd80      	pop	{r7, pc}
 800878a:	bf00      	nop
 800878c:	200004c8 	.word	0x200004c8
 8008790:	20000824 	.word	0x20000824
 8008794:	40020800 	.word	0x40020800

08008798 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	460b      	mov	r3, r1
 80087a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
	USBD_CDC_HandleTypeDef *hcdc =
 80087a8:	4b0d      	ldr	r3, [pc, #52]	; (80087e0 <CDC_Transmit_HS+0x48>)
 80087aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087ae:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceHS.pClassData;
	if (hcdc->TxState != 0) {
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <CDC_Transmit_HS+0x26>
		return USBD_BUSY;
 80087ba:	2301      	movs	r3, #1
 80087bc:	e00b      	b.n	80087d6 <CDC_Transmit_HS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80087be:	887b      	ldrh	r3, [r7, #2]
 80087c0:	461a      	mov	r2, r3
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	4806      	ldr	r0, [pc, #24]	; (80087e0 <CDC_Transmit_HS+0x48>)
 80087c6:	f7fe fd44 	bl	8007252 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80087ca:	4805      	ldr	r0, [pc, #20]	; (80087e0 <CDC_Transmit_HS+0x48>)
 80087cc:	f7fe fd6e 	bl	80072ac <USBD_CDC_TransmitPacket>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	200004c8 	.word	0x200004c8

080087e4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b087      	sub	sp, #28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	60b9      	str	r1, [r7, #8]
 80087ee:	4613      	mov	r3, r2
 80087f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80087f2:	2300      	movs	r3, #0
 80087f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80087f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	371c      	adds	r7, #28
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
	...

08008808 <UsbTransfer>:
/**
 * @brief: transfer sent or received can data frame over virtual com port
 * @param ptr_can_frame_template
 *
 **/
void UsbTransfer(CanDataFrameInit *ptr_can_frame_template) {
 8008808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800880a:	b08d      	sub	sp, #52	; 0x34
 800880c:	af08      	add	r7, sp, #32
 800880e:	60f8      	str	r0, [r7, #12]
//	uint8_t buffer_size = ptr_can_frame_template->rx_header.DLC * 2 + 7;
//	uint8_t usb_tx_data_buffer[buffer_size];

	message_length = sprintf(&usb_tx_data_buffer,
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	689a      	ldr	r2, [r3, #8]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6999      	ldr	r1, [r3, #24]
			"%3X[%01X]%02X%02X%02X%02X%02X%02X%02X%02X\r\n", // 050[8]DEADBEEFFEEDDEAD
			ptr_can_frame_template->tx_header.StdId,
			ptr_can_frame_template->tx_header.DLC,
			ptr_can_frame_template->tx_data[0],
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	781b      	ldrb	r3, [r3, #0]
	message_length = sprintf(&usb_tx_data_buffer,
 800881c:	4618      	mov	r0, r3
			ptr_can_frame_template->tx_data[1],
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	785b      	ldrb	r3, [r3, #1]
	message_length = sprintf(&usb_tx_data_buffer,
 8008822:	461c      	mov	r4, r3
			ptr_can_frame_template->tx_data[2],
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	789b      	ldrb	r3, [r3, #2]
	message_length = sprintf(&usb_tx_data_buffer,
 8008828:	461d      	mov	r5, r3
			ptr_can_frame_template->tx_data[3],
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	78db      	ldrb	r3, [r3, #3]
	message_length = sprintf(&usb_tx_data_buffer,
 800882e:	461e      	mov	r6, r3
			ptr_can_frame_template->tx_data[4],
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	791b      	ldrb	r3, [r3, #4]
	message_length = sprintf(&usb_tx_data_buffer,
 8008834:	60bb      	str	r3, [r7, #8]
			ptr_can_frame_template->tx_data[5],
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	795b      	ldrb	r3, [r3, #5]
	message_length = sprintf(&usb_tx_data_buffer,
 800883a:	607b      	str	r3, [r7, #4]
			ptr_can_frame_template->tx_data[6],
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	799b      	ldrb	r3, [r3, #6]
	message_length = sprintf(&usb_tx_data_buffer,
 8008840:	603b      	str	r3, [r7, #0]
			ptr_can_frame_template->tx_data[7]);
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	79db      	ldrb	r3, [r3, #7]
	message_length = sprintf(&usb_tx_data_buffer,
 8008846:	9307      	str	r3, [sp, #28]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	9306      	str	r3, [sp, #24]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	9305      	str	r3, [sp, #20]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	9603      	str	r6, [sp, #12]
 8008856:	9502      	str	r5, [sp, #8]
 8008858:	9401      	str	r4, [sp, #4]
 800885a:	9000      	str	r0, [sp, #0]
 800885c:	460b      	mov	r3, r1
 800885e:	4909      	ldr	r1, [pc, #36]	; (8008884 <UsbTransfer+0x7c>)
 8008860:	4809      	ldr	r0, [pc, #36]	; (8008888 <UsbTransfer+0x80>)
 8008862:	f000 fd9b 	bl	800939c <siprintf>
 8008866:	4603      	mov	r3, r0
 8008868:	b2da      	uxtb	r2, r3
 800886a:	4b08      	ldr	r3, [pc, #32]	; (800888c <UsbTransfer+0x84>)
 800886c:	701a      	strb	r2, [r3, #0]
	CDC_Transmit_HS(usb_tx_data_buffer, message_length);
 800886e:	4b07      	ldr	r3, [pc, #28]	; (800888c <UsbTransfer+0x84>)
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	b29b      	uxth	r3, r3
 8008874:	4619      	mov	r1, r3
 8008876:	4804      	ldr	r0, [pc, #16]	; (8008888 <UsbTransfer+0x80>)
 8008878:	f7ff ff8e 	bl	8008798 <CDC_Transmit_HS>

}
 800887c:	bf00      	nop
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008884:	0800a538 	.word	0x0800a538
 8008888:	200007e4 	.word	0x200007e4
 800888c:	20000215 	.word	0x20000215

08008890 <UsbTransferDataByte>:

void UsbTransferDataByte(uint32_t nodeId, uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4,  uint8_t byte5, uint8_t byte6, uint8_t byte7){
 8008890:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008892:	b08d      	sub	sp, #52	; 0x34
 8008894:	af08      	add	r7, sp, #32
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	4608      	mov	r0, r1
 800889a:	4611      	mov	r1, r2
 800889c:	461a      	mov	r2, r3
 800889e:	4603      	mov	r3, r0
 80088a0:	72fb      	strb	r3, [r7, #11]
 80088a2:	460b      	mov	r3, r1
 80088a4:	72bb      	strb	r3, [r7, #10]
 80088a6:	4613      	mov	r3, r2
 80088a8:	727b      	strb	r3, [r7, #9]
//	uint8_t buffer_size = ptr_can_frame_template->rx_header.DLC * 2 + 7;
//	uint8_t usb_tx_data_buffer[buffer_size];

	message_length = sprintf(&usb_tx_data_buffer,
 80088aa:	7afb      	ldrb	r3, [r7, #11]
 80088ac:	607b      	str	r3, [r7, #4]
 80088ae:	7aba      	ldrb	r2, [r7, #10]
 80088b0:	7a79      	ldrb	r1, [r7, #9]
 80088b2:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 80088b6:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
 80088ba:	f897 5030 	ldrb.w	r5, [r7, #48]	; 0x30
 80088be:	f897 6034 	ldrb.w	r6, [r7, #52]	; 0x34
 80088c2:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80088c6:	9307      	str	r3, [sp, #28]
 80088c8:	9606      	str	r6, [sp, #24]
 80088ca:	9505      	str	r5, [sp, #20]
 80088cc:	9404      	str	r4, [sp, #16]
 80088ce:	9003      	str	r0, [sp, #12]
 80088d0:	9102      	str	r1, [sp, #8]
 80088d2:	9201      	str	r2, [sp, #4]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	9300      	str	r3, [sp, #0]
 80088d8:	2308      	movs	r3, #8
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	4909      	ldr	r1, [pc, #36]	; (8008904 <UsbTransferDataByte+0x74>)
 80088de:	480a      	ldr	r0, [pc, #40]	; (8008908 <UsbTransferDataByte+0x78>)
 80088e0:	f000 fd5c 	bl	800939c <siprintf>
 80088e4:	4603      	mov	r3, r0
 80088e6:	b2da      	uxtb	r2, r3
 80088e8:	4b08      	ldr	r3, [pc, #32]	; (800890c <UsbTransferDataByte+0x7c>)
 80088ea:	701a      	strb	r2, [r3, #0]
			byte3,
			byte4,
			byte5,
			byte6,
			byte7);
	CDC_Transmit_HS(usb_tx_data_buffer, message_length);
 80088ec:	4b07      	ldr	r3, [pc, #28]	; (800890c <UsbTransferDataByte+0x7c>)
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	4619      	mov	r1, r3
 80088f4:	4804      	ldr	r0, [pc, #16]	; (8008908 <UsbTransferDataByte+0x78>)
 80088f6:	f7ff ff4f 	bl	8008798 <CDC_Transmit_HS>

}
 80088fa:	bf00      	nop
 80088fc:	3714      	adds	r7, #20
 80088fe:	46bd      	mov	sp, r7
 8008900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008902:	bf00      	nop
 8008904:	0800a538 	.word	0x0800a538
 8008908:	200007e4 	.word	0x200007e4
 800890c:	20000215 	.word	0x20000215

08008910 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	6039      	str	r1, [r7, #0]
 800891a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2212      	movs	r2, #18
 8008920:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8008922:	4b03      	ldr	r3, [pc, #12]	; (8008930 <USBD_HS_DeviceDescriptor+0x20>)
}
 8008924:	4618      	mov	r0, r3
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	20000158 	.word	0x20000158

08008934 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	4603      	mov	r3, r0
 800893c:	6039      	str	r1, [r7, #0]
 800893e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	2204      	movs	r2, #4
 8008944:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008946:	4b03      	ldr	r3, [pc, #12]	; (8008954 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8008948:	4618      	mov	r0, r3
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr
 8008954:	2000016c 	.word	0x2000016c

08008958 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	6039      	str	r1, [r7, #0]
 8008962:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008964:	79fb      	ldrb	r3, [r7, #7]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d105      	bne.n	8008976 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	4907      	ldr	r1, [pc, #28]	; (800898c <USBD_HS_ProductStrDescriptor+0x34>)
 800896e:	4808      	ldr	r0, [pc, #32]	; (8008990 <USBD_HS_ProductStrDescriptor+0x38>)
 8008970:	f7ff fd44 	bl	80083fc <USBD_GetString>
 8008974:	e004      	b.n	8008980 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008976:	683a      	ldr	r2, [r7, #0]
 8008978:	4904      	ldr	r1, [pc, #16]	; (800898c <USBD_HS_ProductStrDescriptor+0x34>)
 800897a:	4805      	ldr	r0, [pc, #20]	; (8008990 <USBD_HS_ProductStrDescriptor+0x38>)
 800897c:	f7ff fd3e 	bl	80083fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008980:	4b02      	ldr	r3, [pc, #8]	; (800898c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	20000848 	.word	0x20000848
 8008990:	0800a59c 	.word	0x0800a59c

08008994 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	4603      	mov	r3, r0
 800899c:	6039      	str	r1, [r7, #0]
 800899e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80089a0:	683a      	ldr	r2, [r7, #0]
 80089a2:	4904      	ldr	r1, [pc, #16]	; (80089b4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80089a4:	4804      	ldr	r0, [pc, #16]	; (80089b8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80089a6:	f7ff fd29 	bl	80083fc <USBD_GetString>
  return USBD_StrDesc;
 80089aa:	4b02      	ldr	r3, [pc, #8]	; (80089b4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	20000848 	.word	0x20000848
 80089b8:	0800a5ac 	.word	0x0800a5ac

080089bc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	4603      	mov	r3, r0
 80089c4:	6039      	str	r1, [r7, #0]
 80089c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	221a      	movs	r2, #26
 80089cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80089ce:	f000 f843 	bl	8008a58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80089d2:	4b02      	ldr	r3, [pc, #8]	; (80089dc <USBD_HS_SerialStrDescriptor+0x20>)
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3708      	adds	r7, #8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	20000170 	.word	0x20000170

080089e0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	4603      	mov	r3, r0
 80089e8:	6039      	str	r1, [r7, #0]
 80089ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80089ec:	79fb      	ldrb	r3, [r7, #7]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d105      	bne.n	80089fe <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80089f2:	683a      	ldr	r2, [r7, #0]
 80089f4:	4907      	ldr	r1, [pc, #28]	; (8008a14 <USBD_HS_ConfigStrDescriptor+0x34>)
 80089f6:	4808      	ldr	r0, [pc, #32]	; (8008a18 <USBD_HS_ConfigStrDescriptor+0x38>)
 80089f8:	f7ff fd00 	bl	80083fc <USBD_GetString>
 80089fc:	e004      	b.n	8008a08 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	4904      	ldr	r1, [pc, #16]	; (8008a14 <USBD_HS_ConfigStrDescriptor+0x34>)
 8008a02:	4805      	ldr	r0, [pc, #20]	; (8008a18 <USBD_HS_ConfigStrDescriptor+0x38>)
 8008a04:	f7ff fcfa 	bl	80083fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a08:	4b02      	ldr	r3, [pc, #8]	; (8008a14 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	20000848 	.word	0x20000848
 8008a18:	0800a5c0 	.word	0x0800a5c0

08008a1c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	4603      	mov	r3, r0
 8008a24:	6039      	str	r1, [r7, #0]
 8008a26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a28:	79fb      	ldrb	r3, [r7, #7]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d105      	bne.n	8008a3a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	4907      	ldr	r1, [pc, #28]	; (8008a50 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8008a32:	4808      	ldr	r0, [pc, #32]	; (8008a54 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008a34:	f7ff fce2 	bl	80083fc <USBD_GetString>
 8008a38:	e004      	b.n	8008a44 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	4904      	ldr	r1, [pc, #16]	; (8008a50 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8008a3e:	4805      	ldr	r0, [pc, #20]	; (8008a54 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8008a40:	f7ff fcdc 	bl	80083fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a44:	4b02      	ldr	r3, [pc, #8]	; (8008a50 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	20000848 	.word	0x20000848
 8008a54:	0800a5cc 	.word	0x0800a5cc

08008a58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a5e:	4b0f      	ldr	r3, [pc, #60]	; (8008a9c <Get_SerialNum+0x44>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a64:	4b0e      	ldr	r3, [pc, #56]	; (8008aa0 <Get_SerialNum+0x48>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a6a:	4b0e      	ldr	r3, [pc, #56]	; (8008aa4 <Get_SerialNum+0x4c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4413      	add	r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d009      	beq.n	8008a92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a7e:	2208      	movs	r2, #8
 8008a80:	4909      	ldr	r1, [pc, #36]	; (8008aa8 <Get_SerialNum+0x50>)
 8008a82:	68f8      	ldr	r0, [r7, #12]
 8008a84:	f000 f814 	bl	8008ab0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a88:	2204      	movs	r2, #4
 8008a8a:	4908      	ldr	r1, [pc, #32]	; (8008aac <Get_SerialNum+0x54>)
 8008a8c:	68b8      	ldr	r0, [r7, #8]
 8008a8e:	f000 f80f 	bl	8008ab0 <IntToUnicode>
  }
}
 8008a92:	bf00      	nop
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	1fff7a10 	.word	0x1fff7a10
 8008aa0:	1fff7a14 	.word	0x1fff7a14
 8008aa4:	1fff7a18 	.word	0x1fff7a18
 8008aa8:	20000172 	.word	0x20000172
 8008aac:	20000182 	.word	0x20000182

08008ab0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	4613      	mov	r3, r2
 8008abc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	75fb      	strb	r3, [r7, #23]
 8008ac6:	e027      	b.n	8008b18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	0f1b      	lsrs	r3, r3, #28
 8008acc:	2b09      	cmp	r3, #9
 8008ace:	d80b      	bhi.n	8008ae8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	0f1b      	lsrs	r3, r3, #28
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	7dfb      	ldrb	r3, [r7, #23]
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	4619      	mov	r1, r3
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	440b      	add	r3, r1
 8008ae0:	3230      	adds	r2, #48	; 0x30
 8008ae2:	b2d2      	uxtb	r2, r2
 8008ae4:	701a      	strb	r2, [r3, #0]
 8008ae6:	e00a      	b.n	8008afe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	0f1b      	lsrs	r3, r3, #28
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	005b      	lsls	r3, r3, #1
 8008af2:	4619      	mov	r1, r3
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	440b      	add	r3, r1
 8008af8:	3237      	adds	r2, #55	; 0x37
 8008afa:	b2d2      	uxtb	r2, r2
 8008afc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	011b      	lsls	r3, r3, #4
 8008b02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	3301      	adds	r3, #1
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	2200      	movs	r2, #0
 8008b10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	3301      	adds	r3, #1
 8008b16:	75fb      	strb	r3, [r7, #23]
 8008b18:	7dfa      	ldrb	r2, [r7, #23]
 8008b1a:	79fb      	ldrb	r3, [r7, #7]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d3d3      	bcc.n	8008ac8 <IntToUnicode+0x18>
  }
}
 8008b20:	bf00      	nop
 8008b22:	bf00      	nop
 8008b24:	371c      	adds	r7, #28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
	...

08008b30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b08a      	sub	sp, #40	; 0x28
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b38:	f107 0314 	add.w	r3, r7, #20
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	601a      	str	r2, [r3, #0]
 8008b40:	605a      	str	r2, [r3, #4]
 8008b42:	609a      	str	r2, [r3, #8]
 8008b44:	60da      	str	r2, [r3, #12]
 8008b46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a1d      	ldr	r2, [pc, #116]	; (8008bc4 <HAL_PCD_MspInit+0x94>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d134      	bne.n	8008bbc <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b52:	2300      	movs	r3, #0
 8008b54:	613b      	str	r3, [r7, #16]
 8008b56:	4b1c      	ldr	r3, [pc, #112]	; (8008bc8 <HAL_PCD_MspInit+0x98>)
 8008b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b5a:	4a1b      	ldr	r2, [pc, #108]	; (8008bc8 <HAL_PCD_MspInit+0x98>)
 8008b5c:	f043 0302 	orr.w	r3, r3, #2
 8008b60:	6313      	str	r3, [r2, #48]	; 0x30
 8008b62:	4b19      	ldr	r3, [pc, #100]	; (8008bc8 <HAL_PCD_MspInit+0x98>)
 8008b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b66:	f003 0302 	and.w	r3, r3, #2
 8008b6a:	613b      	str	r3, [r7, #16]
 8008b6c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8008b6e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8008b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b74:	2302      	movs	r3, #2
 8008b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b7c:	2303      	movs	r3, #3
 8008b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8008b80:	230c      	movs	r3, #12
 8008b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b84:	f107 0314 	add.w	r3, r7, #20
 8008b88:	4619      	mov	r1, r3
 8008b8a:	4810      	ldr	r0, [pc, #64]	; (8008bcc <HAL_PCD_MspInit+0x9c>)
 8008b8c:	f7fa fbd4 	bl	8003338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008b90:	2300      	movs	r3, #0
 8008b92:	60fb      	str	r3, [r7, #12]
 8008b94:	4b0c      	ldr	r3, [pc, #48]	; (8008bc8 <HAL_PCD_MspInit+0x98>)
 8008b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b98:	4a0b      	ldr	r2, [pc, #44]	; (8008bc8 <HAL_PCD_MspInit+0x98>)
 8008b9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b9e:	6313      	str	r3, [r2, #48]	; 0x30
 8008ba0:	4b09      	ldr	r3, [pc, #36]	; (8008bc8 <HAL_PCD_MspInit+0x98>)
 8008ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ba8:	60fb      	str	r3, [r7, #12]
 8008baa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008bac:	2200      	movs	r2, #0
 8008bae:	2100      	movs	r1, #0
 8008bb0:	204d      	movs	r0, #77	; 0x4d
 8008bb2:	f7fa fb8a 	bl	80032ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008bb6:	204d      	movs	r0, #77	; 0x4d
 8008bb8:	f7fa fba3 	bl	8003302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8008bbc:	bf00      	nop
 8008bbe:	3728      	adds	r7, #40	; 0x28
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	40040000 	.word	0x40040000
 8008bc8:	40023800 	.word	0x40023800
 8008bcc:	40020400 	.word	0x40020400

08008bd0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008be4:	4619      	mov	r1, r3
 8008be6:	4610      	mov	r0, r2
 8008be8:	f7fe fc77 	bl	80074da <USBD_LL_SetupStage>
}
 8008bec:	bf00      	nop
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008c06:	78fa      	ldrb	r2, [r7, #3]
 8008c08:	6879      	ldr	r1, [r7, #4]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	00db      	lsls	r3, r3, #3
 8008c0e:	1a9b      	subs	r3, r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	440b      	add	r3, r1
 8008c14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	78fb      	ldrb	r3, [r7, #3]
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	f7fe fcb1 	bl	8007584 <USBD_LL_DataOutStage>
}
 8008c22:	bf00      	nop
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b082      	sub	sp, #8
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
 8008c32:	460b      	mov	r3, r1
 8008c34:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008c3c:	78fa      	ldrb	r2, [r7, #3]
 8008c3e:	6879      	ldr	r1, [r7, #4]
 8008c40:	4613      	mov	r3, r2
 8008c42:	00db      	lsls	r3, r3, #3
 8008c44:	1a9b      	subs	r3, r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	440b      	add	r3, r1
 8008c4a:	3348      	adds	r3, #72	; 0x48
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	78fb      	ldrb	r3, [r7, #3]
 8008c50:	4619      	mov	r1, r3
 8008c52:	f7fe fcfa 	bl	800764a <USBD_LL_DataInStage>
}
 8008c56:	bf00      	nop
 8008c58:	3708      	adds	r7, #8
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7fe fdfe 	bl	800786e <USBD_LL_SOF>
}
 8008c72:	bf00      	nop
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b084      	sub	sp, #16
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c82:	2301      	movs	r3, #1
 8008c84:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d102      	bne.n	8008c94 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	73fb      	strb	r3, [r7, #15]
 8008c92:	e008      	b.n	8008ca6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d102      	bne.n	8008ca2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	73fb      	strb	r3, [r7, #15]
 8008ca0:	e001      	b.n	8008ca6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008ca2:	f7f9 f877 	bl	8001d94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cac:	7bfa      	ldrb	r2, [r7, #15]
 8008cae:	4611      	mov	r1, r2
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fe fda1 	bl	80077f8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7fe fd5a 	bl	8007776 <USBD_LL_Reset>
}
 8008cc2:	bf00      	nop
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}
	...

08008ccc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fe fd9c 	bl	8007818 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	687a      	ldr	r2, [r7, #4]
 8008cec:	6812      	ldr	r2, [r2, #0]
 8008cee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cf2:	f043 0301 	orr.w	r3, r3, #1
 8008cf6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6a1b      	ldr	r3, [r3, #32]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d005      	beq.n	8008d0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008d00:	4b04      	ldr	r3, [pc, #16]	; (8008d14 <HAL_PCD_SuspendCallback+0x48>)
 8008d02:	691b      	ldr	r3, [r3, #16]
 8008d04:	4a03      	ldr	r2, [pc, #12]	; (8008d14 <HAL_PCD_SuspendCallback+0x48>)
 8008d06:	f043 0306 	orr.w	r3, r3, #6
 8008d0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008d0c:	bf00      	nop
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	e000ed00 	.word	0xe000ed00

08008d18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7fe fd8b 	bl	8007842 <USBD_LL_Resume>
}
 8008d2c:	bf00      	nop
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
 8008d3c:	460b      	mov	r3, r1
 8008d3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d46:	78fa      	ldrb	r2, [r7, #3]
 8008d48:	4611      	mov	r1, r2
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7fe fdb6 	bl	80078bc <USBD_LL_IsoOUTIncomplete>
}
 8008d50:	bf00      	nop
 8008d52:	3708      	adds	r7, #8
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b082      	sub	sp, #8
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
 8008d60:	460b      	mov	r3, r1
 8008d62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d6a:	78fa      	ldrb	r2, [r7, #3]
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fd97 	bl	80078a2 <USBD_LL_IsoINIncomplete>
}
 8008d74:	bf00      	nop
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f7fe fda3 	bl	80078d6 <USBD_LL_DevConnected>
}
 8008d90:	bf00      	nop
 8008d92:	3708      	adds	r7, #8
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe fda0 	bl	80078ec <USBD_LL_DevDisconnected>
}
 8008dac:	bf00      	nop
 8008dae:	3708      	adds	r7, #8
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d140      	bne.n	8008e46 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8008dc4:	4a22      	ldr	r2, [pc, #136]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4a20      	ldr	r2, [pc, #128]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008dd0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008dd4:	4b1e      	ldr	r3, [pc, #120]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008dd6:	4a1f      	ldr	r2, [pc, #124]	; (8008e54 <USBD_LL_Init+0xa0>)
 8008dd8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8008dda:	4b1d      	ldr	r3, [pc, #116]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008ddc:	2206      	movs	r2, #6
 8008dde:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8008de0:	4b1b      	ldr	r3, [pc, #108]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008de2:	2202      	movs	r2, #2
 8008de4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8008de6:	4b1a      	ldr	r3, [pc, #104]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008dec:	4b18      	ldr	r3, [pc, #96]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008dee:	2202      	movs	r2, #2
 8008df0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8008df2:	4b17      	ldr	r3, [pc, #92]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008df8:	4b15      	ldr	r3, [pc, #84]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8008dfe:	4b14      	ldr	r3, [pc, #80]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8008e04:	4b12      	ldr	r3, [pc, #72]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8008e0a:	4b11      	ldr	r3, [pc, #68]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008e10:	4b0f      	ldr	r3, [pc, #60]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8008e16:	480e      	ldr	r0, [pc, #56]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008e18:	f7fa fc8e 	bl	8003738 <HAL_PCD_Init>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8008e22:	f7f8 ffb7 	bl	8001d94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8008e26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008e2a:	4809      	ldr	r0, [pc, #36]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008e2c:	f7fb fdeb 	bl	8004a06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8008e30:	2280      	movs	r2, #128	; 0x80
 8008e32:	2100      	movs	r1, #0
 8008e34:	4806      	ldr	r0, [pc, #24]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008e36:	f7fb fd9f 	bl	8004978 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8008e3a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8008e3e:	2101      	movs	r1, #1
 8008e40:	4803      	ldr	r0, [pc, #12]	; (8008e50 <USBD_LL_Init+0x9c>)
 8008e42:	f7fb fd99 	bl	8004978 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000a48 	.word	0x20000a48
 8008e54:	40040000 	.word	0x40040000

08008e58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e60:	2300      	movs	r3, #0
 8008e62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7fa fd7f 	bl	8003972 <HAL_PCD_Start>
 8008e74:	4603      	mov	r3, r0
 8008e76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e78:	7bfb      	ldrb	r3, [r7, #15]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f000 f92a 	bl	80090d4 <USBD_Get_USB_Status>
 8008e80:	4603      	mov	r3, r0
 8008e82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e84:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b084      	sub	sp, #16
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
 8008e96:	4608      	mov	r0, r1
 8008e98:	4611      	mov	r1, r2
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	70fb      	strb	r3, [r7, #3]
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	70bb      	strb	r3, [r7, #2]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008eb6:	78bb      	ldrb	r3, [r7, #2]
 8008eb8:	883a      	ldrh	r2, [r7, #0]
 8008eba:	78f9      	ldrb	r1, [r7, #3]
 8008ebc:	f7fb f963 	bl	8004186 <HAL_PCD_EP_Open>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 f904 	bl	80090d4 <USBD_Get_USB_Status>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ed0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}

08008eda <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008eda:	b580      	push	{r7, lr}
 8008edc:	b084      	sub	sp, #16
 8008ede:	af00      	add	r7, sp, #0
 8008ee0:	6078      	str	r0, [r7, #4]
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ef4:	78fa      	ldrb	r2, [r7, #3]
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f7fb f9ac 	bl	8004256 <HAL_PCD_EP_Close>
 8008efe:	4603      	mov	r3, r0
 8008f00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f02:	7bfb      	ldrb	r3, [r7, #15]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f000 f8e5 	bl	80090d4 <USBD_Get_USB_Status>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b084      	sub	sp, #16
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	460b      	mov	r3, r1
 8008f22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f32:	78fa      	ldrb	r2, [r7, #3]
 8008f34:	4611      	mov	r1, r2
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7fb fa84 	bl	8004444 <HAL_PCD_EP_SetStall>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f40:	7bfb      	ldrb	r3, [r7, #15]
 8008f42:	4618      	mov	r0, r3
 8008f44:	f000 f8c6 	bl	80090d4 <USBD_Get_USB_Status>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f70:	78fa      	ldrb	r2, [r7, #3]
 8008f72:	4611      	mov	r1, r2
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7fb fac9 	bl	800450c <HAL_PCD_EP_ClrStall>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f7e:	7bfb      	ldrb	r3, [r7, #15]
 8008f80:	4618      	mov	r0, r3
 8008f82:	f000 f8a7 	bl	80090d4 <USBD_Get_USB_Status>
 8008f86:	4603      	mov	r3, r0
 8008f88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3710      	adds	r7, #16
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b085      	sub	sp, #20
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008fa6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	da0b      	bge.n	8008fc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008fb0:	78fb      	ldrb	r3, [r7, #3]
 8008fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fb6:	68f9      	ldr	r1, [r7, #12]
 8008fb8:	4613      	mov	r3, r2
 8008fba:	00db      	lsls	r3, r3, #3
 8008fbc:	1a9b      	subs	r3, r3, r2
 8008fbe:	009b      	lsls	r3, r3, #2
 8008fc0:	440b      	add	r3, r1
 8008fc2:	333e      	adds	r3, #62	; 0x3e
 8008fc4:	781b      	ldrb	r3, [r3, #0]
 8008fc6:	e00b      	b.n	8008fe0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008fc8:	78fb      	ldrb	r3, [r7, #3]
 8008fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fce:	68f9      	ldr	r1, [r7, #12]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	1a9b      	subs	r3, r3, r2
 8008fd6:	009b      	lsls	r3, r3, #2
 8008fd8:	440b      	add	r3, r1
 8008fda:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008fde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3714      	adds	r7, #20
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fea:	4770      	bx	lr

08008fec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009006:	78fa      	ldrb	r2, [r7, #3]
 8009008:	4611      	mov	r1, r2
 800900a:	4618      	mov	r0, r3
 800900c:	f7fb f896 	bl	800413c <HAL_PCD_SetAddress>
 8009010:	4603      	mov	r3, r0
 8009012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009014:	7bfb      	ldrb	r3, [r7, #15]
 8009016:	4618      	mov	r0, r3
 8009018:	f000 f85c 	bl	80090d4 <USBD_Get_USB_Status>
 800901c:	4603      	mov	r3, r0
 800901e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009020:	7bbb      	ldrb	r3, [r7, #14]
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b086      	sub	sp, #24
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	607a      	str	r2, [r7, #4]
 8009034:	603b      	str	r3, [r7, #0]
 8009036:	460b      	mov	r3, r1
 8009038:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009048:	7af9      	ldrb	r1, [r7, #11]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	f7fb f9af 	bl	80043b0 <HAL_PCD_EP_Transmit>
 8009052:	4603      	mov	r3, r0
 8009054:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009056:	7dfb      	ldrb	r3, [r7, #23]
 8009058:	4618      	mov	r0, r3
 800905a:	f000 f83b 	bl	80090d4 <USBD_Get_USB_Status>
 800905e:	4603      	mov	r3, r0
 8009060:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009062:	7dbb      	ldrb	r3, [r7, #22]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3718      	adds	r7, #24
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	607a      	str	r2, [r7, #4]
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	460b      	mov	r3, r1
 800907a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800908a:	7af9      	ldrb	r1, [r7, #11]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	f7fb f92b 	bl	80042ea <HAL_PCD_EP_Receive>
 8009094:	4603      	mov	r3, r0
 8009096:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009098:	7dfb      	ldrb	r3, [r7, #23]
 800909a:	4618      	mov	r0, r3
 800909c:	f000 f81a 	bl	80090d4 <USBD_Get_USB_Status>
 80090a0:	4603      	mov	r3, r0
 80090a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80090a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3718      	adds	r7, #24
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bd80      	pop	{r7, pc}

080090ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090ae:	b580      	push	{r7, lr}
 80090b0:	b082      	sub	sp, #8
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	460b      	mov	r3, r1
 80090b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80090c0:	78fa      	ldrb	r2, [r7, #3]
 80090c2:	4611      	mov	r1, r2
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fb f95b 	bl	8004380 <HAL_PCD_EP_GetRxCount>
 80090ca:	4603      	mov	r3, r0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3708      	adds	r7, #8
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	4603      	mov	r3, r0
 80090dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	2b03      	cmp	r3, #3
 80090e6:	d817      	bhi.n	8009118 <USBD_Get_USB_Status+0x44>
 80090e8:	a201      	add	r2, pc, #4	; (adr r2, 80090f0 <USBD_Get_USB_Status+0x1c>)
 80090ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ee:	bf00      	nop
 80090f0:	08009101 	.word	0x08009101
 80090f4:	08009107 	.word	0x08009107
 80090f8:	0800910d 	.word	0x0800910d
 80090fc:	08009113 	.word	0x08009113
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	73fb      	strb	r3, [r7, #15]
    break;
 8009104:	e00b      	b.n	800911e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009106:	2303      	movs	r3, #3
 8009108:	73fb      	strb	r3, [r7, #15]
    break;
 800910a:	e008      	b.n	800911e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800910c:	2301      	movs	r3, #1
 800910e:	73fb      	strb	r3, [r7, #15]
    break;
 8009110:	e005      	b.n	800911e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009112:	2303      	movs	r3, #3
 8009114:	73fb      	strb	r3, [r7, #15]
    break;
 8009116:	e002      	b.n	800911e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009118:	2303      	movs	r3, #3
 800911a:	73fb      	strb	r3, [r7, #15]
    break;
 800911c:	bf00      	nop
  }
  return usb_status;
 800911e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009120:	4618      	mov	r0, r3
 8009122:	3714      	adds	r7, #20
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <__errno>:
 800912c:	4b01      	ldr	r3, [pc, #4]	; (8009134 <__errno+0x8>)
 800912e:	6818      	ldr	r0, [r3, #0]
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	2000018c 	.word	0x2000018c

08009138 <__libc_init_array>:
 8009138:	b570      	push	{r4, r5, r6, lr}
 800913a:	4d0d      	ldr	r5, [pc, #52]	; (8009170 <__libc_init_array+0x38>)
 800913c:	4c0d      	ldr	r4, [pc, #52]	; (8009174 <__libc_init_array+0x3c>)
 800913e:	1b64      	subs	r4, r4, r5
 8009140:	10a4      	asrs	r4, r4, #2
 8009142:	2600      	movs	r6, #0
 8009144:	42a6      	cmp	r6, r4
 8009146:	d109      	bne.n	800915c <__libc_init_array+0x24>
 8009148:	4d0b      	ldr	r5, [pc, #44]	; (8009178 <__libc_init_array+0x40>)
 800914a:	4c0c      	ldr	r4, [pc, #48]	; (800917c <__libc_init_array+0x44>)
 800914c:	f001 f9cc 	bl	800a4e8 <_init>
 8009150:	1b64      	subs	r4, r4, r5
 8009152:	10a4      	asrs	r4, r4, #2
 8009154:	2600      	movs	r6, #0
 8009156:	42a6      	cmp	r6, r4
 8009158:	d105      	bne.n	8009166 <__libc_init_array+0x2e>
 800915a:	bd70      	pop	{r4, r5, r6, pc}
 800915c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009160:	4798      	blx	r3
 8009162:	3601      	adds	r6, #1
 8009164:	e7ee      	b.n	8009144 <__libc_init_array+0xc>
 8009166:	f855 3b04 	ldr.w	r3, [r5], #4
 800916a:	4798      	blx	r3
 800916c:	3601      	adds	r6, #1
 800916e:	e7f2      	b.n	8009156 <__libc_init_array+0x1e>
 8009170:	0800a68c 	.word	0x0800a68c
 8009174:	0800a68c 	.word	0x0800a68c
 8009178:	0800a68c 	.word	0x0800a68c
 800917c:	0800a690 	.word	0x0800a690

08009180 <malloc>:
 8009180:	4b02      	ldr	r3, [pc, #8]	; (800918c <malloc+0xc>)
 8009182:	4601      	mov	r1, r0
 8009184:	6818      	ldr	r0, [r3, #0]
 8009186:	f000 b871 	b.w	800926c <_malloc_r>
 800918a:	bf00      	nop
 800918c:	2000018c 	.word	0x2000018c

08009190 <free>:
 8009190:	4b02      	ldr	r3, [pc, #8]	; (800919c <free+0xc>)
 8009192:	4601      	mov	r1, r0
 8009194:	6818      	ldr	r0, [r3, #0]
 8009196:	f000 b819 	b.w	80091cc <_free_r>
 800919a:	bf00      	nop
 800919c:	2000018c 	.word	0x2000018c

080091a0 <memcpy>:
 80091a0:	440a      	add	r2, r1
 80091a2:	4291      	cmp	r1, r2
 80091a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80091a8:	d100      	bne.n	80091ac <memcpy+0xc>
 80091aa:	4770      	bx	lr
 80091ac:	b510      	push	{r4, lr}
 80091ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091b6:	4291      	cmp	r1, r2
 80091b8:	d1f9      	bne.n	80091ae <memcpy+0xe>
 80091ba:	bd10      	pop	{r4, pc}

080091bc <memset>:
 80091bc:	4402      	add	r2, r0
 80091be:	4603      	mov	r3, r0
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d100      	bne.n	80091c6 <memset+0xa>
 80091c4:	4770      	bx	lr
 80091c6:	f803 1b01 	strb.w	r1, [r3], #1
 80091ca:	e7f9      	b.n	80091c0 <memset+0x4>

080091cc <_free_r>:
 80091cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091ce:	2900      	cmp	r1, #0
 80091d0:	d048      	beq.n	8009264 <_free_r+0x98>
 80091d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091d6:	9001      	str	r0, [sp, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f1a1 0404 	sub.w	r4, r1, #4
 80091de:	bfb8      	it	lt
 80091e0:	18e4      	addlt	r4, r4, r3
 80091e2:	f000 fa09 	bl	80095f8 <__malloc_lock>
 80091e6:	4a20      	ldr	r2, [pc, #128]	; (8009268 <_free_r+0x9c>)
 80091e8:	9801      	ldr	r0, [sp, #4]
 80091ea:	6813      	ldr	r3, [r2, #0]
 80091ec:	4615      	mov	r5, r2
 80091ee:	b933      	cbnz	r3, 80091fe <_free_r+0x32>
 80091f0:	6063      	str	r3, [r4, #4]
 80091f2:	6014      	str	r4, [r2, #0]
 80091f4:	b003      	add	sp, #12
 80091f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091fa:	f000 ba03 	b.w	8009604 <__malloc_unlock>
 80091fe:	42a3      	cmp	r3, r4
 8009200:	d90b      	bls.n	800921a <_free_r+0x4e>
 8009202:	6821      	ldr	r1, [r4, #0]
 8009204:	1862      	adds	r2, r4, r1
 8009206:	4293      	cmp	r3, r2
 8009208:	bf04      	itt	eq
 800920a:	681a      	ldreq	r2, [r3, #0]
 800920c:	685b      	ldreq	r3, [r3, #4]
 800920e:	6063      	str	r3, [r4, #4]
 8009210:	bf04      	itt	eq
 8009212:	1852      	addeq	r2, r2, r1
 8009214:	6022      	streq	r2, [r4, #0]
 8009216:	602c      	str	r4, [r5, #0]
 8009218:	e7ec      	b.n	80091f4 <_free_r+0x28>
 800921a:	461a      	mov	r2, r3
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	b10b      	cbz	r3, 8009224 <_free_r+0x58>
 8009220:	42a3      	cmp	r3, r4
 8009222:	d9fa      	bls.n	800921a <_free_r+0x4e>
 8009224:	6811      	ldr	r1, [r2, #0]
 8009226:	1855      	adds	r5, r2, r1
 8009228:	42a5      	cmp	r5, r4
 800922a:	d10b      	bne.n	8009244 <_free_r+0x78>
 800922c:	6824      	ldr	r4, [r4, #0]
 800922e:	4421      	add	r1, r4
 8009230:	1854      	adds	r4, r2, r1
 8009232:	42a3      	cmp	r3, r4
 8009234:	6011      	str	r1, [r2, #0]
 8009236:	d1dd      	bne.n	80091f4 <_free_r+0x28>
 8009238:	681c      	ldr	r4, [r3, #0]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	6053      	str	r3, [r2, #4]
 800923e:	4421      	add	r1, r4
 8009240:	6011      	str	r1, [r2, #0]
 8009242:	e7d7      	b.n	80091f4 <_free_r+0x28>
 8009244:	d902      	bls.n	800924c <_free_r+0x80>
 8009246:	230c      	movs	r3, #12
 8009248:	6003      	str	r3, [r0, #0]
 800924a:	e7d3      	b.n	80091f4 <_free_r+0x28>
 800924c:	6825      	ldr	r5, [r4, #0]
 800924e:	1961      	adds	r1, r4, r5
 8009250:	428b      	cmp	r3, r1
 8009252:	bf04      	itt	eq
 8009254:	6819      	ldreq	r1, [r3, #0]
 8009256:	685b      	ldreq	r3, [r3, #4]
 8009258:	6063      	str	r3, [r4, #4]
 800925a:	bf04      	itt	eq
 800925c:	1949      	addeq	r1, r1, r5
 800925e:	6021      	streq	r1, [r4, #0]
 8009260:	6054      	str	r4, [r2, #4]
 8009262:	e7c7      	b.n	80091f4 <_free_r+0x28>
 8009264:	b003      	add	sp, #12
 8009266:	bd30      	pop	{r4, r5, pc}
 8009268:	20000218 	.word	0x20000218

0800926c <_malloc_r>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	1ccd      	adds	r5, r1, #3
 8009270:	f025 0503 	bic.w	r5, r5, #3
 8009274:	3508      	adds	r5, #8
 8009276:	2d0c      	cmp	r5, #12
 8009278:	bf38      	it	cc
 800927a:	250c      	movcc	r5, #12
 800927c:	2d00      	cmp	r5, #0
 800927e:	4606      	mov	r6, r0
 8009280:	db01      	blt.n	8009286 <_malloc_r+0x1a>
 8009282:	42a9      	cmp	r1, r5
 8009284:	d903      	bls.n	800928e <_malloc_r+0x22>
 8009286:	230c      	movs	r3, #12
 8009288:	6033      	str	r3, [r6, #0]
 800928a:	2000      	movs	r0, #0
 800928c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800928e:	f000 f9b3 	bl	80095f8 <__malloc_lock>
 8009292:	4921      	ldr	r1, [pc, #132]	; (8009318 <_malloc_r+0xac>)
 8009294:	680a      	ldr	r2, [r1, #0]
 8009296:	4614      	mov	r4, r2
 8009298:	b99c      	cbnz	r4, 80092c2 <_malloc_r+0x56>
 800929a:	4f20      	ldr	r7, [pc, #128]	; (800931c <_malloc_r+0xb0>)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	b923      	cbnz	r3, 80092aa <_malloc_r+0x3e>
 80092a0:	4621      	mov	r1, r4
 80092a2:	4630      	mov	r0, r6
 80092a4:	f000 f86a 	bl	800937c <_sbrk_r>
 80092a8:	6038      	str	r0, [r7, #0]
 80092aa:	4629      	mov	r1, r5
 80092ac:	4630      	mov	r0, r6
 80092ae:	f000 f865 	bl	800937c <_sbrk_r>
 80092b2:	1c43      	adds	r3, r0, #1
 80092b4:	d123      	bne.n	80092fe <_malloc_r+0x92>
 80092b6:	230c      	movs	r3, #12
 80092b8:	6033      	str	r3, [r6, #0]
 80092ba:	4630      	mov	r0, r6
 80092bc:	f000 f9a2 	bl	8009604 <__malloc_unlock>
 80092c0:	e7e3      	b.n	800928a <_malloc_r+0x1e>
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	1b5b      	subs	r3, r3, r5
 80092c6:	d417      	bmi.n	80092f8 <_malloc_r+0x8c>
 80092c8:	2b0b      	cmp	r3, #11
 80092ca:	d903      	bls.n	80092d4 <_malloc_r+0x68>
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	441c      	add	r4, r3
 80092d0:	6025      	str	r5, [r4, #0]
 80092d2:	e004      	b.n	80092de <_malloc_r+0x72>
 80092d4:	6863      	ldr	r3, [r4, #4]
 80092d6:	42a2      	cmp	r2, r4
 80092d8:	bf0c      	ite	eq
 80092da:	600b      	streq	r3, [r1, #0]
 80092dc:	6053      	strne	r3, [r2, #4]
 80092de:	4630      	mov	r0, r6
 80092e0:	f000 f990 	bl	8009604 <__malloc_unlock>
 80092e4:	f104 000b 	add.w	r0, r4, #11
 80092e8:	1d23      	adds	r3, r4, #4
 80092ea:	f020 0007 	bic.w	r0, r0, #7
 80092ee:	1ac2      	subs	r2, r0, r3
 80092f0:	d0cc      	beq.n	800928c <_malloc_r+0x20>
 80092f2:	1a1b      	subs	r3, r3, r0
 80092f4:	50a3      	str	r3, [r4, r2]
 80092f6:	e7c9      	b.n	800928c <_malloc_r+0x20>
 80092f8:	4622      	mov	r2, r4
 80092fa:	6864      	ldr	r4, [r4, #4]
 80092fc:	e7cc      	b.n	8009298 <_malloc_r+0x2c>
 80092fe:	1cc4      	adds	r4, r0, #3
 8009300:	f024 0403 	bic.w	r4, r4, #3
 8009304:	42a0      	cmp	r0, r4
 8009306:	d0e3      	beq.n	80092d0 <_malloc_r+0x64>
 8009308:	1a21      	subs	r1, r4, r0
 800930a:	4630      	mov	r0, r6
 800930c:	f000 f836 	bl	800937c <_sbrk_r>
 8009310:	3001      	adds	r0, #1
 8009312:	d1dd      	bne.n	80092d0 <_malloc_r+0x64>
 8009314:	e7cf      	b.n	80092b6 <_malloc_r+0x4a>
 8009316:	bf00      	nop
 8009318:	20000218 	.word	0x20000218
 800931c:	2000021c 	.word	0x2000021c

08009320 <iprintf>:
 8009320:	b40f      	push	{r0, r1, r2, r3}
 8009322:	4b0a      	ldr	r3, [pc, #40]	; (800934c <iprintf+0x2c>)
 8009324:	b513      	push	{r0, r1, r4, lr}
 8009326:	681c      	ldr	r4, [r3, #0]
 8009328:	b124      	cbz	r4, 8009334 <iprintf+0x14>
 800932a:	69a3      	ldr	r3, [r4, #24]
 800932c:	b913      	cbnz	r3, 8009334 <iprintf+0x14>
 800932e:	4620      	mov	r0, r4
 8009330:	f000 f8c2 	bl	80094b8 <__sinit>
 8009334:	ab05      	add	r3, sp, #20
 8009336:	9a04      	ldr	r2, [sp, #16]
 8009338:	68a1      	ldr	r1, [r4, #8]
 800933a:	9301      	str	r3, [sp, #4]
 800933c:	4620      	mov	r0, r4
 800933e:	f000 faed 	bl	800991c <_vfiprintf_r>
 8009342:	b002      	add	sp, #8
 8009344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009348:	b004      	add	sp, #16
 800934a:	4770      	bx	lr
 800934c:	2000018c 	.word	0x2000018c

08009350 <putchar>:
 8009350:	4b09      	ldr	r3, [pc, #36]	; (8009378 <putchar+0x28>)
 8009352:	b513      	push	{r0, r1, r4, lr}
 8009354:	681c      	ldr	r4, [r3, #0]
 8009356:	4601      	mov	r1, r0
 8009358:	b134      	cbz	r4, 8009368 <putchar+0x18>
 800935a:	69a3      	ldr	r3, [r4, #24]
 800935c:	b923      	cbnz	r3, 8009368 <putchar+0x18>
 800935e:	9001      	str	r0, [sp, #4]
 8009360:	4620      	mov	r0, r4
 8009362:	f000 f8a9 	bl	80094b8 <__sinit>
 8009366:	9901      	ldr	r1, [sp, #4]
 8009368:	68a2      	ldr	r2, [r4, #8]
 800936a:	4620      	mov	r0, r4
 800936c:	b002      	add	sp, #8
 800936e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009372:	f000 bd97 	b.w	8009ea4 <_putc_r>
 8009376:	bf00      	nop
 8009378:	2000018c 	.word	0x2000018c

0800937c <_sbrk_r>:
 800937c:	b538      	push	{r3, r4, r5, lr}
 800937e:	4d06      	ldr	r5, [pc, #24]	; (8009398 <_sbrk_r+0x1c>)
 8009380:	2300      	movs	r3, #0
 8009382:	4604      	mov	r4, r0
 8009384:	4608      	mov	r0, r1
 8009386:	602b      	str	r3, [r5, #0]
 8009388:	f7f8 feca 	bl	8002120 <_sbrk>
 800938c:	1c43      	adds	r3, r0, #1
 800938e:	d102      	bne.n	8009396 <_sbrk_r+0x1a>
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	b103      	cbz	r3, 8009396 <_sbrk_r+0x1a>
 8009394:	6023      	str	r3, [r4, #0]
 8009396:	bd38      	pop	{r3, r4, r5, pc}
 8009398:	20000e5c 	.word	0x20000e5c

0800939c <siprintf>:
 800939c:	b40e      	push	{r1, r2, r3}
 800939e:	b500      	push	{lr}
 80093a0:	b09c      	sub	sp, #112	; 0x70
 80093a2:	ab1d      	add	r3, sp, #116	; 0x74
 80093a4:	9002      	str	r0, [sp, #8]
 80093a6:	9006      	str	r0, [sp, #24]
 80093a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093ac:	4809      	ldr	r0, [pc, #36]	; (80093d4 <siprintf+0x38>)
 80093ae:	9107      	str	r1, [sp, #28]
 80093b0:	9104      	str	r1, [sp, #16]
 80093b2:	4909      	ldr	r1, [pc, #36]	; (80093d8 <siprintf+0x3c>)
 80093b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80093b8:	9105      	str	r1, [sp, #20]
 80093ba:	6800      	ldr	r0, [r0, #0]
 80093bc:	9301      	str	r3, [sp, #4]
 80093be:	a902      	add	r1, sp, #8
 80093c0:	f000 f982 	bl	80096c8 <_svfiprintf_r>
 80093c4:	9b02      	ldr	r3, [sp, #8]
 80093c6:	2200      	movs	r2, #0
 80093c8:	701a      	strb	r2, [r3, #0]
 80093ca:	b01c      	add	sp, #112	; 0x70
 80093cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80093d0:	b003      	add	sp, #12
 80093d2:	4770      	bx	lr
 80093d4:	2000018c 	.word	0x2000018c
 80093d8:	ffff0208 	.word	0xffff0208

080093dc <strlcpy>:
 80093dc:	b510      	push	{r4, lr}
 80093de:	460b      	mov	r3, r1
 80093e0:	b162      	cbz	r2, 80093fc <strlcpy+0x20>
 80093e2:	3a01      	subs	r2, #1
 80093e4:	d008      	beq.n	80093f8 <strlcpy+0x1c>
 80093e6:	f813 4b01 	ldrb.w	r4, [r3], #1
 80093ea:	f800 4b01 	strb.w	r4, [r0], #1
 80093ee:	2c00      	cmp	r4, #0
 80093f0:	d1f7      	bne.n	80093e2 <strlcpy+0x6>
 80093f2:	1a58      	subs	r0, r3, r1
 80093f4:	3801      	subs	r0, #1
 80093f6:	bd10      	pop	{r4, pc}
 80093f8:	2200      	movs	r2, #0
 80093fa:	7002      	strb	r2, [r0, #0]
 80093fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009400:	2a00      	cmp	r2, #0
 8009402:	d1fb      	bne.n	80093fc <strlcpy+0x20>
 8009404:	e7f5      	b.n	80093f2 <strlcpy+0x16>
	...

08009408 <std>:
 8009408:	2300      	movs	r3, #0
 800940a:	b510      	push	{r4, lr}
 800940c:	4604      	mov	r4, r0
 800940e:	e9c0 3300 	strd	r3, r3, [r0]
 8009412:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009416:	6083      	str	r3, [r0, #8]
 8009418:	8181      	strh	r1, [r0, #12]
 800941a:	6643      	str	r3, [r0, #100]	; 0x64
 800941c:	81c2      	strh	r2, [r0, #14]
 800941e:	6183      	str	r3, [r0, #24]
 8009420:	4619      	mov	r1, r3
 8009422:	2208      	movs	r2, #8
 8009424:	305c      	adds	r0, #92	; 0x5c
 8009426:	f7ff fec9 	bl	80091bc <memset>
 800942a:	4b05      	ldr	r3, [pc, #20]	; (8009440 <std+0x38>)
 800942c:	6263      	str	r3, [r4, #36]	; 0x24
 800942e:	4b05      	ldr	r3, [pc, #20]	; (8009444 <std+0x3c>)
 8009430:	62a3      	str	r3, [r4, #40]	; 0x28
 8009432:	4b05      	ldr	r3, [pc, #20]	; (8009448 <std+0x40>)
 8009434:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009436:	4b05      	ldr	r3, [pc, #20]	; (800944c <std+0x44>)
 8009438:	6224      	str	r4, [r4, #32]
 800943a:	6323      	str	r3, [r4, #48]	; 0x30
 800943c:	bd10      	pop	{r4, pc}
 800943e:	bf00      	nop
 8009440:	08009f35 	.word	0x08009f35
 8009444:	08009f57 	.word	0x08009f57
 8009448:	08009f8f 	.word	0x08009f8f
 800944c:	08009fb3 	.word	0x08009fb3

08009450 <_cleanup_r>:
 8009450:	4901      	ldr	r1, [pc, #4]	; (8009458 <_cleanup_r+0x8>)
 8009452:	f000 b8af 	b.w	80095b4 <_fwalk_reent>
 8009456:	bf00      	nop
 8009458:	0800a28d 	.word	0x0800a28d

0800945c <__sfmoreglue>:
 800945c:	b570      	push	{r4, r5, r6, lr}
 800945e:	1e4a      	subs	r2, r1, #1
 8009460:	2568      	movs	r5, #104	; 0x68
 8009462:	4355      	muls	r5, r2
 8009464:	460e      	mov	r6, r1
 8009466:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800946a:	f7ff feff 	bl	800926c <_malloc_r>
 800946e:	4604      	mov	r4, r0
 8009470:	b140      	cbz	r0, 8009484 <__sfmoreglue+0x28>
 8009472:	2100      	movs	r1, #0
 8009474:	e9c0 1600 	strd	r1, r6, [r0]
 8009478:	300c      	adds	r0, #12
 800947a:	60a0      	str	r0, [r4, #8]
 800947c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009480:	f7ff fe9c 	bl	80091bc <memset>
 8009484:	4620      	mov	r0, r4
 8009486:	bd70      	pop	{r4, r5, r6, pc}

08009488 <__sfp_lock_acquire>:
 8009488:	4801      	ldr	r0, [pc, #4]	; (8009490 <__sfp_lock_acquire+0x8>)
 800948a:	f000 b8b3 	b.w	80095f4 <__retarget_lock_acquire_recursive>
 800948e:	bf00      	nop
 8009490:	20000e58 	.word	0x20000e58

08009494 <__sfp_lock_release>:
 8009494:	4801      	ldr	r0, [pc, #4]	; (800949c <__sfp_lock_release+0x8>)
 8009496:	f000 b8ae 	b.w	80095f6 <__retarget_lock_release_recursive>
 800949a:	bf00      	nop
 800949c:	20000e58 	.word	0x20000e58

080094a0 <__sinit_lock_acquire>:
 80094a0:	4801      	ldr	r0, [pc, #4]	; (80094a8 <__sinit_lock_acquire+0x8>)
 80094a2:	f000 b8a7 	b.w	80095f4 <__retarget_lock_acquire_recursive>
 80094a6:	bf00      	nop
 80094a8:	20000e53 	.word	0x20000e53

080094ac <__sinit_lock_release>:
 80094ac:	4801      	ldr	r0, [pc, #4]	; (80094b4 <__sinit_lock_release+0x8>)
 80094ae:	f000 b8a2 	b.w	80095f6 <__retarget_lock_release_recursive>
 80094b2:	bf00      	nop
 80094b4:	20000e53 	.word	0x20000e53

080094b8 <__sinit>:
 80094b8:	b510      	push	{r4, lr}
 80094ba:	4604      	mov	r4, r0
 80094bc:	f7ff fff0 	bl	80094a0 <__sinit_lock_acquire>
 80094c0:	69a3      	ldr	r3, [r4, #24]
 80094c2:	b11b      	cbz	r3, 80094cc <__sinit+0x14>
 80094c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094c8:	f7ff bff0 	b.w	80094ac <__sinit_lock_release>
 80094cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80094d0:	6523      	str	r3, [r4, #80]	; 0x50
 80094d2:	4b13      	ldr	r3, [pc, #76]	; (8009520 <__sinit+0x68>)
 80094d4:	4a13      	ldr	r2, [pc, #76]	; (8009524 <__sinit+0x6c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80094da:	42a3      	cmp	r3, r4
 80094dc:	bf04      	itt	eq
 80094de:	2301      	moveq	r3, #1
 80094e0:	61a3      	streq	r3, [r4, #24]
 80094e2:	4620      	mov	r0, r4
 80094e4:	f000 f820 	bl	8009528 <__sfp>
 80094e8:	6060      	str	r0, [r4, #4]
 80094ea:	4620      	mov	r0, r4
 80094ec:	f000 f81c 	bl	8009528 <__sfp>
 80094f0:	60a0      	str	r0, [r4, #8]
 80094f2:	4620      	mov	r0, r4
 80094f4:	f000 f818 	bl	8009528 <__sfp>
 80094f8:	2200      	movs	r2, #0
 80094fa:	60e0      	str	r0, [r4, #12]
 80094fc:	2104      	movs	r1, #4
 80094fe:	6860      	ldr	r0, [r4, #4]
 8009500:	f7ff ff82 	bl	8009408 <std>
 8009504:	68a0      	ldr	r0, [r4, #8]
 8009506:	2201      	movs	r2, #1
 8009508:	2109      	movs	r1, #9
 800950a:	f7ff ff7d 	bl	8009408 <std>
 800950e:	68e0      	ldr	r0, [r4, #12]
 8009510:	2202      	movs	r2, #2
 8009512:	2112      	movs	r1, #18
 8009514:	f7ff ff78 	bl	8009408 <std>
 8009518:	2301      	movs	r3, #1
 800951a:	61a3      	str	r3, [r4, #24]
 800951c:	e7d2      	b.n	80094c4 <__sinit+0xc>
 800951e:	bf00      	nop
 8009520:	0800a5ec 	.word	0x0800a5ec
 8009524:	08009451 	.word	0x08009451

08009528 <__sfp>:
 8009528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800952a:	4607      	mov	r7, r0
 800952c:	f7ff ffac 	bl	8009488 <__sfp_lock_acquire>
 8009530:	4b1e      	ldr	r3, [pc, #120]	; (80095ac <__sfp+0x84>)
 8009532:	681e      	ldr	r6, [r3, #0]
 8009534:	69b3      	ldr	r3, [r6, #24]
 8009536:	b913      	cbnz	r3, 800953e <__sfp+0x16>
 8009538:	4630      	mov	r0, r6
 800953a:	f7ff ffbd 	bl	80094b8 <__sinit>
 800953e:	3648      	adds	r6, #72	; 0x48
 8009540:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009544:	3b01      	subs	r3, #1
 8009546:	d503      	bpl.n	8009550 <__sfp+0x28>
 8009548:	6833      	ldr	r3, [r6, #0]
 800954a:	b30b      	cbz	r3, 8009590 <__sfp+0x68>
 800954c:	6836      	ldr	r6, [r6, #0]
 800954e:	e7f7      	b.n	8009540 <__sfp+0x18>
 8009550:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009554:	b9d5      	cbnz	r5, 800958c <__sfp+0x64>
 8009556:	4b16      	ldr	r3, [pc, #88]	; (80095b0 <__sfp+0x88>)
 8009558:	60e3      	str	r3, [r4, #12]
 800955a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800955e:	6665      	str	r5, [r4, #100]	; 0x64
 8009560:	f000 f847 	bl	80095f2 <__retarget_lock_init_recursive>
 8009564:	f7ff ff96 	bl	8009494 <__sfp_lock_release>
 8009568:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800956c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009570:	6025      	str	r5, [r4, #0]
 8009572:	61a5      	str	r5, [r4, #24]
 8009574:	2208      	movs	r2, #8
 8009576:	4629      	mov	r1, r5
 8009578:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800957c:	f7ff fe1e 	bl	80091bc <memset>
 8009580:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009584:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009588:	4620      	mov	r0, r4
 800958a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800958c:	3468      	adds	r4, #104	; 0x68
 800958e:	e7d9      	b.n	8009544 <__sfp+0x1c>
 8009590:	2104      	movs	r1, #4
 8009592:	4638      	mov	r0, r7
 8009594:	f7ff ff62 	bl	800945c <__sfmoreglue>
 8009598:	4604      	mov	r4, r0
 800959a:	6030      	str	r0, [r6, #0]
 800959c:	2800      	cmp	r0, #0
 800959e:	d1d5      	bne.n	800954c <__sfp+0x24>
 80095a0:	f7ff ff78 	bl	8009494 <__sfp_lock_release>
 80095a4:	230c      	movs	r3, #12
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	e7ee      	b.n	8009588 <__sfp+0x60>
 80095aa:	bf00      	nop
 80095ac:	0800a5ec 	.word	0x0800a5ec
 80095b0:	ffff0001 	.word	0xffff0001

080095b4 <_fwalk_reent>:
 80095b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095b8:	4606      	mov	r6, r0
 80095ba:	4688      	mov	r8, r1
 80095bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80095c0:	2700      	movs	r7, #0
 80095c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095c6:	f1b9 0901 	subs.w	r9, r9, #1
 80095ca:	d505      	bpl.n	80095d8 <_fwalk_reent+0x24>
 80095cc:	6824      	ldr	r4, [r4, #0]
 80095ce:	2c00      	cmp	r4, #0
 80095d0:	d1f7      	bne.n	80095c2 <_fwalk_reent+0xe>
 80095d2:	4638      	mov	r0, r7
 80095d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095d8:	89ab      	ldrh	r3, [r5, #12]
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d907      	bls.n	80095ee <_fwalk_reent+0x3a>
 80095de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095e2:	3301      	adds	r3, #1
 80095e4:	d003      	beq.n	80095ee <_fwalk_reent+0x3a>
 80095e6:	4629      	mov	r1, r5
 80095e8:	4630      	mov	r0, r6
 80095ea:	47c0      	blx	r8
 80095ec:	4307      	orrs	r7, r0
 80095ee:	3568      	adds	r5, #104	; 0x68
 80095f0:	e7e9      	b.n	80095c6 <_fwalk_reent+0x12>

080095f2 <__retarget_lock_init_recursive>:
 80095f2:	4770      	bx	lr

080095f4 <__retarget_lock_acquire_recursive>:
 80095f4:	4770      	bx	lr

080095f6 <__retarget_lock_release_recursive>:
 80095f6:	4770      	bx	lr

080095f8 <__malloc_lock>:
 80095f8:	4801      	ldr	r0, [pc, #4]	; (8009600 <__malloc_lock+0x8>)
 80095fa:	f7ff bffb 	b.w	80095f4 <__retarget_lock_acquire_recursive>
 80095fe:	bf00      	nop
 8009600:	20000e54 	.word	0x20000e54

08009604 <__malloc_unlock>:
 8009604:	4801      	ldr	r0, [pc, #4]	; (800960c <__malloc_unlock+0x8>)
 8009606:	f7ff bff6 	b.w	80095f6 <__retarget_lock_release_recursive>
 800960a:	bf00      	nop
 800960c:	20000e54 	.word	0x20000e54

08009610 <__ssputs_r>:
 8009610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009614:	688e      	ldr	r6, [r1, #8]
 8009616:	429e      	cmp	r6, r3
 8009618:	4682      	mov	sl, r0
 800961a:	460c      	mov	r4, r1
 800961c:	4690      	mov	r8, r2
 800961e:	461f      	mov	r7, r3
 8009620:	d838      	bhi.n	8009694 <__ssputs_r+0x84>
 8009622:	898a      	ldrh	r2, [r1, #12]
 8009624:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009628:	d032      	beq.n	8009690 <__ssputs_r+0x80>
 800962a:	6825      	ldr	r5, [r4, #0]
 800962c:	6909      	ldr	r1, [r1, #16]
 800962e:	eba5 0901 	sub.w	r9, r5, r1
 8009632:	6965      	ldr	r5, [r4, #20]
 8009634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009638:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800963c:	3301      	adds	r3, #1
 800963e:	444b      	add	r3, r9
 8009640:	106d      	asrs	r5, r5, #1
 8009642:	429d      	cmp	r5, r3
 8009644:	bf38      	it	cc
 8009646:	461d      	movcc	r5, r3
 8009648:	0553      	lsls	r3, r2, #21
 800964a:	d531      	bpl.n	80096b0 <__ssputs_r+0xa0>
 800964c:	4629      	mov	r1, r5
 800964e:	f7ff fe0d 	bl	800926c <_malloc_r>
 8009652:	4606      	mov	r6, r0
 8009654:	b950      	cbnz	r0, 800966c <__ssputs_r+0x5c>
 8009656:	230c      	movs	r3, #12
 8009658:	f8ca 3000 	str.w	r3, [sl]
 800965c:	89a3      	ldrh	r3, [r4, #12]
 800965e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009662:	81a3      	strh	r3, [r4, #12]
 8009664:	f04f 30ff 	mov.w	r0, #4294967295
 8009668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800966c:	6921      	ldr	r1, [r4, #16]
 800966e:	464a      	mov	r2, r9
 8009670:	f7ff fd96 	bl	80091a0 <memcpy>
 8009674:	89a3      	ldrh	r3, [r4, #12]
 8009676:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800967a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800967e:	81a3      	strh	r3, [r4, #12]
 8009680:	6126      	str	r6, [r4, #16]
 8009682:	6165      	str	r5, [r4, #20]
 8009684:	444e      	add	r6, r9
 8009686:	eba5 0509 	sub.w	r5, r5, r9
 800968a:	6026      	str	r6, [r4, #0]
 800968c:	60a5      	str	r5, [r4, #8]
 800968e:	463e      	mov	r6, r7
 8009690:	42be      	cmp	r6, r7
 8009692:	d900      	bls.n	8009696 <__ssputs_r+0x86>
 8009694:	463e      	mov	r6, r7
 8009696:	4632      	mov	r2, r6
 8009698:	6820      	ldr	r0, [r4, #0]
 800969a:	4641      	mov	r1, r8
 800969c:	f000 fea8 	bl	800a3f0 <memmove>
 80096a0:	68a3      	ldr	r3, [r4, #8]
 80096a2:	6822      	ldr	r2, [r4, #0]
 80096a4:	1b9b      	subs	r3, r3, r6
 80096a6:	4432      	add	r2, r6
 80096a8:	60a3      	str	r3, [r4, #8]
 80096aa:	6022      	str	r2, [r4, #0]
 80096ac:	2000      	movs	r0, #0
 80096ae:	e7db      	b.n	8009668 <__ssputs_r+0x58>
 80096b0:	462a      	mov	r2, r5
 80096b2:	f000 feb7 	bl	800a424 <_realloc_r>
 80096b6:	4606      	mov	r6, r0
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d1e1      	bne.n	8009680 <__ssputs_r+0x70>
 80096bc:	6921      	ldr	r1, [r4, #16]
 80096be:	4650      	mov	r0, sl
 80096c0:	f7ff fd84 	bl	80091cc <_free_r>
 80096c4:	e7c7      	b.n	8009656 <__ssputs_r+0x46>
	...

080096c8 <_svfiprintf_r>:
 80096c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096cc:	4698      	mov	r8, r3
 80096ce:	898b      	ldrh	r3, [r1, #12]
 80096d0:	061b      	lsls	r3, r3, #24
 80096d2:	b09d      	sub	sp, #116	; 0x74
 80096d4:	4607      	mov	r7, r0
 80096d6:	460d      	mov	r5, r1
 80096d8:	4614      	mov	r4, r2
 80096da:	d50e      	bpl.n	80096fa <_svfiprintf_r+0x32>
 80096dc:	690b      	ldr	r3, [r1, #16]
 80096de:	b963      	cbnz	r3, 80096fa <_svfiprintf_r+0x32>
 80096e0:	2140      	movs	r1, #64	; 0x40
 80096e2:	f7ff fdc3 	bl	800926c <_malloc_r>
 80096e6:	6028      	str	r0, [r5, #0]
 80096e8:	6128      	str	r0, [r5, #16]
 80096ea:	b920      	cbnz	r0, 80096f6 <_svfiprintf_r+0x2e>
 80096ec:	230c      	movs	r3, #12
 80096ee:	603b      	str	r3, [r7, #0]
 80096f0:	f04f 30ff 	mov.w	r0, #4294967295
 80096f4:	e0d1      	b.n	800989a <_svfiprintf_r+0x1d2>
 80096f6:	2340      	movs	r3, #64	; 0x40
 80096f8:	616b      	str	r3, [r5, #20]
 80096fa:	2300      	movs	r3, #0
 80096fc:	9309      	str	r3, [sp, #36]	; 0x24
 80096fe:	2320      	movs	r3, #32
 8009700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009704:	f8cd 800c 	str.w	r8, [sp, #12]
 8009708:	2330      	movs	r3, #48	; 0x30
 800970a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80098b4 <_svfiprintf_r+0x1ec>
 800970e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009712:	f04f 0901 	mov.w	r9, #1
 8009716:	4623      	mov	r3, r4
 8009718:	469a      	mov	sl, r3
 800971a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800971e:	b10a      	cbz	r2, 8009724 <_svfiprintf_r+0x5c>
 8009720:	2a25      	cmp	r2, #37	; 0x25
 8009722:	d1f9      	bne.n	8009718 <_svfiprintf_r+0x50>
 8009724:	ebba 0b04 	subs.w	fp, sl, r4
 8009728:	d00b      	beq.n	8009742 <_svfiprintf_r+0x7a>
 800972a:	465b      	mov	r3, fp
 800972c:	4622      	mov	r2, r4
 800972e:	4629      	mov	r1, r5
 8009730:	4638      	mov	r0, r7
 8009732:	f7ff ff6d 	bl	8009610 <__ssputs_r>
 8009736:	3001      	adds	r0, #1
 8009738:	f000 80aa 	beq.w	8009890 <_svfiprintf_r+0x1c8>
 800973c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800973e:	445a      	add	r2, fp
 8009740:	9209      	str	r2, [sp, #36]	; 0x24
 8009742:	f89a 3000 	ldrb.w	r3, [sl]
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 80a2 	beq.w	8009890 <_svfiprintf_r+0x1c8>
 800974c:	2300      	movs	r3, #0
 800974e:	f04f 32ff 	mov.w	r2, #4294967295
 8009752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009756:	f10a 0a01 	add.w	sl, sl, #1
 800975a:	9304      	str	r3, [sp, #16]
 800975c:	9307      	str	r3, [sp, #28]
 800975e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009762:	931a      	str	r3, [sp, #104]	; 0x68
 8009764:	4654      	mov	r4, sl
 8009766:	2205      	movs	r2, #5
 8009768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800976c:	4851      	ldr	r0, [pc, #324]	; (80098b4 <_svfiprintf_r+0x1ec>)
 800976e:	f7f6 fd2f 	bl	80001d0 <memchr>
 8009772:	9a04      	ldr	r2, [sp, #16]
 8009774:	b9d8      	cbnz	r0, 80097ae <_svfiprintf_r+0xe6>
 8009776:	06d0      	lsls	r0, r2, #27
 8009778:	bf44      	itt	mi
 800977a:	2320      	movmi	r3, #32
 800977c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009780:	0711      	lsls	r1, r2, #28
 8009782:	bf44      	itt	mi
 8009784:	232b      	movmi	r3, #43	; 0x2b
 8009786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800978a:	f89a 3000 	ldrb.w	r3, [sl]
 800978e:	2b2a      	cmp	r3, #42	; 0x2a
 8009790:	d015      	beq.n	80097be <_svfiprintf_r+0xf6>
 8009792:	9a07      	ldr	r2, [sp, #28]
 8009794:	4654      	mov	r4, sl
 8009796:	2000      	movs	r0, #0
 8009798:	f04f 0c0a 	mov.w	ip, #10
 800979c:	4621      	mov	r1, r4
 800979e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097a2:	3b30      	subs	r3, #48	; 0x30
 80097a4:	2b09      	cmp	r3, #9
 80097a6:	d94e      	bls.n	8009846 <_svfiprintf_r+0x17e>
 80097a8:	b1b0      	cbz	r0, 80097d8 <_svfiprintf_r+0x110>
 80097aa:	9207      	str	r2, [sp, #28]
 80097ac:	e014      	b.n	80097d8 <_svfiprintf_r+0x110>
 80097ae:	eba0 0308 	sub.w	r3, r0, r8
 80097b2:	fa09 f303 	lsl.w	r3, r9, r3
 80097b6:	4313      	orrs	r3, r2
 80097b8:	9304      	str	r3, [sp, #16]
 80097ba:	46a2      	mov	sl, r4
 80097bc:	e7d2      	b.n	8009764 <_svfiprintf_r+0x9c>
 80097be:	9b03      	ldr	r3, [sp, #12]
 80097c0:	1d19      	adds	r1, r3, #4
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	9103      	str	r1, [sp, #12]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	bfbb      	ittet	lt
 80097ca:	425b      	neglt	r3, r3
 80097cc:	f042 0202 	orrlt.w	r2, r2, #2
 80097d0:	9307      	strge	r3, [sp, #28]
 80097d2:	9307      	strlt	r3, [sp, #28]
 80097d4:	bfb8      	it	lt
 80097d6:	9204      	strlt	r2, [sp, #16]
 80097d8:	7823      	ldrb	r3, [r4, #0]
 80097da:	2b2e      	cmp	r3, #46	; 0x2e
 80097dc:	d10c      	bne.n	80097f8 <_svfiprintf_r+0x130>
 80097de:	7863      	ldrb	r3, [r4, #1]
 80097e0:	2b2a      	cmp	r3, #42	; 0x2a
 80097e2:	d135      	bne.n	8009850 <_svfiprintf_r+0x188>
 80097e4:	9b03      	ldr	r3, [sp, #12]
 80097e6:	1d1a      	adds	r2, r3, #4
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	9203      	str	r2, [sp, #12]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	bfb8      	it	lt
 80097f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80097f4:	3402      	adds	r4, #2
 80097f6:	9305      	str	r3, [sp, #20]
 80097f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098c4 <_svfiprintf_r+0x1fc>
 80097fc:	7821      	ldrb	r1, [r4, #0]
 80097fe:	2203      	movs	r2, #3
 8009800:	4650      	mov	r0, sl
 8009802:	f7f6 fce5 	bl	80001d0 <memchr>
 8009806:	b140      	cbz	r0, 800981a <_svfiprintf_r+0x152>
 8009808:	2340      	movs	r3, #64	; 0x40
 800980a:	eba0 000a 	sub.w	r0, r0, sl
 800980e:	fa03 f000 	lsl.w	r0, r3, r0
 8009812:	9b04      	ldr	r3, [sp, #16]
 8009814:	4303      	orrs	r3, r0
 8009816:	3401      	adds	r4, #1
 8009818:	9304      	str	r3, [sp, #16]
 800981a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800981e:	4826      	ldr	r0, [pc, #152]	; (80098b8 <_svfiprintf_r+0x1f0>)
 8009820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009824:	2206      	movs	r2, #6
 8009826:	f7f6 fcd3 	bl	80001d0 <memchr>
 800982a:	2800      	cmp	r0, #0
 800982c:	d038      	beq.n	80098a0 <_svfiprintf_r+0x1d8>
 800982e:	4b23      	ldr	r3, [pc, #140]	; (80098bc <_svfiprintf_r+0x1f4>)
 8009830:	bb1b      	cbnz	r3, 800987a <_svfiprintf_r+0x1b2>
 8009832:	9b03      	ldr	r3, [sp, #12]
 8009834:	3307      	adds	r3, #7
 8009836:	f023 0307 	bic.w	r3, r3, #7
 800983a:	3308      	adds	r3, #8
 800983c:	9303      	str	r3, [sp, #12]
 800983e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009840:	4433      	add	r3, r6
 8009842:	9309      	str	r3, [sp, #36]	; 0x24
 8009844:	e767      	b.n	8009716 <_svfiprintf_r+0x4e>
 8009846:	fb0c 3202 	mla	r2, ip, r2, r3
 800984a:	460c      	mov	r4, r1
 800984c:	2001      	movs	r0, #1
 800984e:	e7a5      	b.n	800979c <_svfiprintf_r+0xd4>
 8009850:	2300      	movs	r3, #0
 8009852:	3401      	adds	r4, #1
 8009854:	9305      	str	r3, [sp, #20]
 8009856:	4619      	mov	r1, r3
 8009858:	f04f 0c0a 	mov.w	ip, #10
 800985c:	4620      	mov	r0, r4
 800985e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009862:	3a30      	subs	r2, #48	; 0x30
 8009864:	2a09      	cmp	r2, #9
 8009866:	d903      	bls.n	8009870 <_svfiprintf_r+0x1a8>
 8009868:	2b00      	cmp	r3, #0
 800986a:	d0c5      	beq.n	80097f8 <_svfiprintf_r+0x130>
 800986c:	9105      	str	r1, [sp, #20]
 800986e:	e7c3      	b.n	80097f8 <_svfiprintf_r+0x130>
 8009870:	fb0c 2101 	mla	r1, ip, r1, r2
 8009874:	4604      	mov	r4, r0
 8009876:	2301      	movs	r3, #1
 8009878:	e7f0      	b.n	800985c <_svfiprintf_r+0x194>
 800987a:	ab03      	add	r3, sp, #12
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	462a      	mov	r2, r5
 8009880:	4b0f      	ldr	r3, [pc, #60]	; (80098c0 <_svfiprintf_r+0x1f8>)
 8009882:	a904      	add	r1, sp, #16
 8009884:	4638      	mov	r0, r7
 8009886:	f3af 8000 	nop.w
 800988a:	1c42      	adds	r2, r0, #1
 800988c:	4606      	mov	r6, r0
 800988e:	d1d6      	bne.n	800983e <_svfiprintf_r+0x176>
 8009890:	89ab      	ldrh	r3, [r5, #12]
 8009892:	065b      	lsls	r3, r3, #25
 8009894:	f53f af2c 	bmi.w	80096f0 <_svfiprintf_r+0x28>
 8009898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800989a:	b01d      	add	sp, #116	; 0x74
 800989c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a0:	ab03      	add	r3, sp, #12
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	462a      	mov	r2, r5
 80098a6:	4b06      	ldr	r3, [pc, #24]	; (80098c0 <_svfiprintf_r+0x1f8>)
 80098a8:	a904      	add	r1, sp, #16
 80098aa:	4638      	mov	r0, r7
 80098ac:	f000 f9d4 	bl	8009c58 <_printf_i>
 80098b0:	e7eb      	b.n	800988a <_svfiprintf_r+0x1c2>
 80098b2:	bf00      	nop
 80098b4:	0800a650 	.word	0x0800a650
 80098b8:	0800a65a 	.word	0x0800a65a
 80098bc:	00000000 	.word	0x00000000
 80098c0:	08009611 	.word	0x08009611
 80098c4:	0800a656 	.word	0x0800a656

080098c8 <__sfputc_r>:
 80098c8:	6893      	ldr	r3, [r2, #8]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	b410      	push	{r4}
 80098d0:	6093      	str	r3, [r2, #8]
 80098d2:	da08      	bge.n	80098e6 <__sfputc_r+0x1e>
 80098d4:	6994      	ldr	r4, [r2, #24]
 80098d6:	42a3      	cmp	r3, r4
 80098d8:	db01      	blt.n	80098de <__sfputc_r+0x16>
 80098da:	290a      	cmp	r1, #10
 80098dc:	d103      	bne.n	80098e6 <__sfputc_r+0x1e>
 80098de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098e2:	f000 bb6b 	b.w	8009fbc <__swbuf_r>
 80098e6:	6813      	ldr	r3, [r2, #0]
 80098e8:	1c58      	adds	r0, r3, #1
 80098ea:	6010      	str	r0, [r2, #0]
 80098ec:	7019      	strb	r1, [r3, #0]
 80098ee:	4608      	mov	r0, r1
 80098f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098f4:	4770      	bx	lr

080098f6 <__sfputs_r>:
 80098f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f8:	4606      	mov	r6, r0
 80098fa:	460f      	mov	r7, r1
 80098fc:	4614      	mov	r4, r2
 80098fe:	18d5      	adds	r5, r2, r3
 8009900:	42ac      	cmp	r4, r5
 8009902:	d101      	bne.n	8009908 <__sfputs_r+0x12>
 8009904:	2000      	movs	r0, #0
 8009906:	e007      	b.n	8009918 <__sfputs_r+0x22>
 8009908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800990c:	463a      	mov	r2, r7
 800990e:	4630      	mov	r0, r6
 8009910:	f7ff ffda 	bl	80098c8 <__sfputc_r>
 8009914:	1c43      	adds	r3, r0, #1
 8009916:	d1f3      	bne.n	8009900 <__sfputs_r+0xa>
 8009918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800991c <_vfiprintf_r>:
 800991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009920:	460d      	mov	r5, r1
 8009922:	b09d      	sub	sp, #116	; 0x74
 8009924:	4614      	mov	r4, r2
 8009926:	4698      	mov	r8, r3
 8009928:	4606      	mov	r6, r0
 800992a:	b118      	cbz	r0, 8009934 <_vfiprintf_r+0x18>
 800992c:	6983      	ldr	r3, [r0, #24]
 800992e:	b90b      	cbnz	r3, 8009934 <_vfiprintf_r+0x18>
 8009930:	f7ff fdc2 	bl	80094b8 <__sinit>
 8009934:	4b89      	ldr	r3, [pc, #548]	; (8009b5c <_vfiprintf_r+0x240>)
 8009936:	429d      	cmp	r5, r3
 8009938:	d11b      	bne.n	8009972 <_vfiprintf_r+0x56>
 800993a:	6875      	ldr	r5, [r6, #4]
 800993c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800993e:	07d9      	lsls	r1, r3, #31
 8009940:	d405      	bmi.n	800994e <_vfiprintf_r+0x32>
 8009942:	89ab      	ldrh	r3, [r5, #12]
 8009944:	059a      	lsls	r2, r3, #22
 8009946:	d402      	bmi.n	800994e <_vfiprintf_r+0x32>
 8009948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800994a:	f7ff fe53 	bl	80095f4 <__retarget_lock_acquire_recursive>
 800994e:	89ab      	ldrh	r3, [r5, #12]
 8009950:	071b      	lsls	r3, r3, #28
 8009952:	d501      	bpl.n	8009958 <_vfiprintf_r+0x3c>
 8009954:	692b      	ldr	r3, [r5, #16]
 8009956:	b9eb      	cbnz	r3, 8009994 <_vfiprintf_r+0x78>
 8009958:	4629      	mov	r1, r5
 800995a:	4630      	mov	r0, r6
 800995c:	f000 fb92 	bl	800a084 <__swsetup_r>
 8009960:	b1c0      	cbz	r0, 8009994 <_vfiprintf_r+0x78>
 8009962:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009964:	07dc      	lsls	r4, r3, #31
 8009966:	d50e      	bpl.n	8009986 <_vfiprintf_r+0x6a>
 8009968:	f04f 30ff 	mov.w	r0, #4294967295
 800996c:	b01d      	add	sp, #116	; 0x74
 800996e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009972:	4b7b      	ldr	r3, [pc, #492]	; (8009b60 <_vfiprintf_r+0x244>)
 8009974:	429d      	cmp	r5, r3
 8009976:	d101      	bne.n	800997c <_vfiprintf_r+0x60>
 8009978:	68b5      	ldr	r5, [r6, #8]
 800997a:	e7df      	b.n	800993c <_vfiprintf_r+0x20>
 800997c:	4b79      	ldr	r3, [pc, #484]	; (8009b64 <_vfiprintf_r+0x248>)
 800997e:	429d      	cmp	r5, r3
 8009980:	bf08      	it	eq
 8009982:	68f5      	ldreq	r5, [r6, #12]
 8009984:	e7da      	b.n	800993c <_vfiprintf_r+0x20>
 8009986:	89ab      	ldrh	r3, [r5, #12]
 8009988:	0598      	lsls	r0, r3, #22
 800998a:	d4ed      	bmi.n	8009968 <_vfiprintf_r+0x4c>
 800998c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800998e:	f7ff fe32 	bl	80095f6 <__retarget_lock_release_recursive>
 8009992:	e7e9      	b.n	8009968 <_vfiprintf_r+0x4c>
 8009994:	2300      	movs	r3, #0
 8009996:	9309      	str	r3, [sp, #36]	; 0x24
 8009998:	2320      	movs	r3, #32
 800999a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800999e:	f8cd 800c 	str.w	r8, [sp, #12]
 80099a2:	2330      	movs	r3, #48	; 0x30
 80099a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b68 <_vfiprintf_r+0x24c>
 80099a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099ac:	f04f 0901 	mov.w	r9, #1
 80099b0:	4623      	mov	r3, r4
 80099b2:	469a      	mov	sl, r3
 80099b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099b8:	b10a      	cbz	r2, 80099be <_vfiprintf_r+0xa2>
 80099ba:	2a25      	cmp	r2, #37	; 0x25
 80099bc:	d1f9      	bne.n	80099b2 <_vfiprintf_r+0x96>
 80099be:	ebba 0b04 	subs.w	fp, sl, r4
 80099c2:	d00b      	beq.n	80099dc <_vfiprintf_r+0xc0>
 80099c4:	465b      	mov	r3, fp
 80099c6:	4622      	mov	r2, r4
 80099c8:	4629      	mov	r1, r5
 80099ca:	4630      	mov	r0, r6
 80099cc:	f7ff ff93 	bl	80098f6 <__sfputs_r>
 80099d0:	3001      	adds	r0, #1
 80099d2:	f000 80aa 	beq.w	8009b2a <_vfiprintf_r+0x20e>
 80099d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099d8:	445a      	add	r2, fp
 80099da:	9209      	str	r2, [sp, #36]	; 0x24
 80099dc:	f89a 3000 	ldrb.w	r3, [sl]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	f000 80a2 	beq.w	8009b2a <_vfiprintf_r+0x20e>
 80099e6:	2300      	movs	r3, #0
 80099e8:	f04f 32ff 	mov.w	r2, #4294967295
 80099ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099f0:	f10a 0a01 	add.w	sl, sl, #1
 80099f4:	9304      	str	r3, [sp, #16]
 80099f6:	9307      	str	r3, [sp, #28]
 80099f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099fc:	931a      	str	r3, [sp, #104]	; 0x68
 80099fe:	4654      	mov	r4, sl
 8009a00:	2205      	movs	r2, #5
 8009a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a06:	4858      	ldr	r0, [pc, #352]	; (8009b68 <_vfiprintf_r+0x24c>)
 8009a08:	f7f6 fbe2 	bl	80001d0 <memchr>
 8009a0c:	9a04      	ldr	r2, [sp, #16]
 8009a0e:	b9d8      	cbnz	r0, 8009a48 <_vfiprintf_r+0x12c>
 8009a10:	06d1      	lsls	r1, r2, #27
 8009a12:	bf44      	itt	mi
 8009a14:	2320      	movmi	r3, #32
 8009a16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a1a:	0713      	lsls	r3, r2, #28
 8009a1c:	bf44      	itt	mi
 8009a1e:	232b      	movmi	r3, #43	; 0x2b
 8009a20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a24:	f89a 3000 	ldrb.w	r3, [sl]
 8009a28:	2b2a      	cmp	r3, #42	; 0x2a
 8009a2a:	d015      	beq.n	8009a58 <_vfiprintf_r+0x13c>
 8009a2c:	9a07      	ldr	r2, [sp, #28]
 8009a2e:	4654      	mov	r4, sl
 8009a30:	2000      	movs	r0, #0
 8009a32:	f04f 0c0a 	mov.w	ip, #10
 8009a36:	4621      	mov	r1, r4
 8009a38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a3c:	3b30      	subs	r3, #48	; 0x30
 8009a3e:	2b09      	cmp	r3, #9
 8009a40:	d94e      	bls.n	8009ae0 <_vfiprintf_r+0x1c4>
 8009a42:	b1b0      	cbz	r0, 8009a72 <_vfiprintf_r+0x156>
 8009a44:	9207      	str	r2, [sp, #28]
 8009a46:	e014      	b.n	8009a72 <_vfiprintf_r+0x156>
 8009a48:	eba0 0308 	sub.w	r3, r0, r8
 8009a4c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a50:	4313      	orrs	r3, r2
 8009a52:	9304      	str	r3, [sp, #16]
 8009a54:	46a2      	mov	sl, r4
 8009a56:	e7d2      	b.n	80099fe <_vfiprintf_r+0xe2>
 8009a58:	9b03      	ldr	r3, [sp, #12]
 8009a5a:	1d19      	adds	r1, r3, #4
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	9103      	str	r1, [sp, #12]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	bfbb      	ittet	lt
 8009a64:	425b      	neglt	r3, r3
 8009a66:	f042 0202 	orrlt.w	r2, r2, #2
 8009a6a:	9307      	strge	r3, [sp, #28]
 8009a6c:	9307      	strlt	r3, [sp, #28]
 8009a6e:	bfb8      	it	lt
 8009a70:	9204      	strlt	r2, [sp, #16]
 8009a72:	7823      	ldrb	r3, [r4, #0]
 8009a74:	2b2e      	cmp	r3, #46	; 0x2e
 8009a76:	d10c      	bne.n	8009a92 <_vfiprintf_r+0x176>
 8009a78:	7863      	ldrb	r3, [r4, #1]
 8009a7a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a7c:	d135      	bne.n	8009aea <_vfiprintf_r+0x1ce>
 8009a7e:	9b03      	ldr	r3, [sp, #12]
 8009a80:	1d1a      	adds	r2, r3, #4
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	9203      	str	r2, [sp, #12]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	bfb8      	it	lt
 8009a8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a8e:	3402      	adds	r4, #2
 8009a90:	9305      	str	r3, [sp, #20]
 8009a92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b78 <_vfiprintf_r+0x25c>
 8009a96:	7821      	ldrb	r1, [r4, #0]
 8009a98:	2203      	movs	r2, #3
 8009a9a:	4650      	mov	r0, sl
 8009a9c:	f7f6 fb98 	bl	80001d0 <memchr>
 8009aa0:	b140      	cbz	r0, 8009ab4 <_vfiprintf_r+0x198>
 8009aa2:	2340      	movs	r3, #64	; 0x40
 8009aa4:	eba0 000a 	sub.w	r0, r0, sl
 8009aa8:	fa03 f000 	lsl.w	r0, r3, r0
 8009aac:	9b04      	ldr	r3, [sp, #16]
 8009aae:	4303      	orrs	r3, r0
 8009ab0:	3401      	adds	r4, #1
 8009ab2:	9304      	str	r3, [sp, #16]
 8009ab4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ab8:	482c      	ldr	r0, [pc, #176]	; (8009b6c <_vfiprintf_r+0x250>)
 8009aba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009abe:	2206      	movs	r2, #6
 8009ac0:	f7f6 fb86 	bl	80001d0 <memchr>
 8009ac4:	2800      	cmp	r0, #0
 8009ac6:	d03f      	beq.n	8009b48 <_vfiprintf_r+0x22c>
 8009ac8:	4b29      	ldr	r3, [pc, #164]	; (8009b70 <_vfiprintf_r+0x254>)
 8009aca:	bb1b      	cbnz	r3, 8009b14 <_vfiprintf_r+0x1f8>
 8009acc:	9b03      	ldr	r3, [sp, #12]
 8009ace:	3307      	adds	r3, #7
 8009ad0:	f023 0307 	bic.w	r3, r3, #7
 8009ad4:	3308      	adds	r3, #8
 8009ad6:	9303      	str	r3, [sp, #12]
 8009ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ada:	443b      	add	r3, r7
 8009adc:	9309      	str	r3, [sp, #36]	; 0x24
 8009ade:	e767      	b.n	80099b0 <_vfiprintf_r+0x94>
 8009ae0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ae4:	460c      	mov	r4, r1
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	e7a5      	b.n	8009a36 <_vfiprintf_r+0x11a>
 8009aea:	2300      	movs	r3, #0
 8009aec:	3401      	adds	r4, #1
 8009aee:	9305      	str	r3, [sp, #20]
 8009af0:	4619      	mov	r1, r3
 8009af2:	f04f 0c0a 	mov.w	ip, #10
 8009af6:	4620      	mov	r0, r4
 8009af8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009afc:	3a30      	subs	r2, #48	; 0x30
 8009afe:	2a09      	cmp	r2, #9
 8009b00:	d903      	bls.n	8009b0a <_vfiprintf_r+0x1ee>
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d0c5      	beq.n	8009a92 <_vfiprintf_r+0x176>
 8009b06:	9105      	str	r1, [sp, #20]
 8009b08:	e7c3      	b.n	8009a92 <_vfiprintf_r+0x176>
 8009b0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b0e:	4604      	mov	r4, r0
 8009b10:	2301      	movs	r3, #1
 8009b12:	e7f0      	b.n	8009af6 <_vfiprintf_r+0x1da>
 8009b14:	ab03      	add	r3, sp, #12
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	462a      	mov	r2, r5
 8009b1a:	4b16      	ldr	r3, [pc, #88]	; (8009b74 <_vfiprintf_r+0x258>)
 8009b1c:	a904      	add	r1, sp, #16
 8009b1e:	4630      	mov	r0, r6
 8009b20:	f3af 8000 	nop.w
 8009b24:	4607      	mov	r7, r0
 8009b26:	1c78      	adds	r0, r7, #1
 8009b28:	d1d6      	bne.n	8009ad8 <_vfiprintf_r+0x1bc>
 8009b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b2c:	07d9      	lsls	r1, r3, #31
 8009b2e:	d405      	bmi.n	8009b3c <_vfiprintf_r+0x220>
 8009b30:	89ab      	ldrh	r3, [r5, #12]
 8009b32:	059a      	lsls	r2, r3, #22
 8009b34:	d402      	bmi.n	8009b3c <_vfiprintf_r+0x220>
 8009b36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b38:	f7ff fd5d 	bl	80095f6 <__retarget_lock_release_recursive>
 8009b3c:	89ab      	ldrh	r3, [r5, #12]
 8009b3e:	065b      	lsls	r3, r3, #25
 8009b40:	f53f af12 	bmi.w	8009968 <_vfiprintf_r+0x4c>
 8009b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b46:	e711      	b.n	800996c <_vfiprintf_r+0x50>
 8009b48:	ab03      	add	r3, sp, #12
 8009b4a:	9300      	str	r3, [sp, #0]
 8009b4c:	462a      	mov	r2, r5
 8009b4e:	4b09      	ldr	r3, [pc, #36]	; (8009b74 <_vfiprintf_r+0x258>)
 8009b50:	a904      	add	r1, sp, #16
 8009b52:	4630      	mov	r0, r6
 8009b54:	f000 f880 	bl	8009c58 <_printf_i>
 8009b58:	e7e4      	b.n	8009b24 <_vfiprintf_r+0x208>
 8009b5a:	bf00      	nop
 8009b5c:	0800a610 	.word	0x0800a610
 8009b60:	0800a630 	.word	0x0800a630
 8009b64:	0800a5f0 	.word	0x0800a5f0
 8009b68:	0800a650 	.word	0x0800a650
 8009b6c:	0800a65a 	.word	0x0800a65a
 8009b70:	00000000 	.word	0x00000000
 8009b74:	080098f7 	.word	0x080098f7
 8009b78:	0800a656 	.word	0x0800a656

08009b7c <_printf_common>:
 8009b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b80:	4616      	mov	r6, r2
 8009b82:	4699      	mov	r9, r3
 8009b84:	688a      	ldr	r2, [r1, #8]
 8009b86:	690b      	ldr	r3, [r1, #16]
 8009b88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	bfb8      	it	lt
 8009b90:	4613      	movlt	r3, r2
 8009b92:	6033      	str	r3, [r6, #0]
 8009b94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b98:	4607      	mov	r7, r0
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	b10a      	cbz	r2, 8009ba2 <_printf_common+0x26>
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	6033      	str	r3, [r6, #0]
 8009ba2:	6823      	ldr	r3, [r4, #0]
 8009ba4:	0699      	lsls	r1, r3, #26
 8009ba6:	bf42      	ittt	mi
 8009ba8:	6833      	ldrmi	r3, [r6, #0]
 8009baa:	3302      	addmi	r3, #2
 8009bac:	6033      	strmi	r3, [r6, #0]
 8009bae:	6825      	ldr	r5, [r4, #0]
 8009bb0:	f015 0506 	ands.w	r5, r5, #6
 8009bb4:	d106      	bne.n	8009bc4 <_printf_common+0x48>
 8009bb6:	f104 0a19 	add.w	sl, r4, #25
 8009bba:	68e3      	ldr	r3, [r4, #12]
 8009bbc:	6832      	ldr	r2, [r6, #0]
 8009bbe:	1a9b      	subs	r3, r3, r2
 8009bc0:	42ab      	cmp	r3, r5
 8009bc2:	dc26      	bgt.n	8009c12 <_printf_common+0x96>
 8009bc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009bc8:	1e13      	subs	r3, r2, #0
 8009bca:	6822      	ldr	r2, [r4, #0]
 8009bcc:	bf18      	it	ne
 8009bce:	2301      	movne	r3, #1
 8009bd0:	0692      	lsls	r2, r2, #26
 8009bd2:	d42b      	bmi.n	8009c2c <_printf_common+0xb0>
 8009bd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009bd8:	4649      	mov	r1, r9
 8009bda:	4638      	mov	r0, r7
 8009bdc:	47c0      	blx	r8
 8009bde:	3001      	adds	r0, #1
 8009be0:	d01e      	beq.n	8009c20 <_printf_common+0xa4>
 8009be2:	6823      	ldr	r3, [r4, #0]
 8009be4:	68e5      	ldr	r5, [r4, #12]
 8009be6:	6832      	ldr	r2, [r6, #0]
 8009be8:	f003 0306 	and.w	r3, r3, #6
 8009bec:	2b04      	cmp	r3, #4
 8009bee:	bf08      	it	eq
 8009bf0:	1aad      	subeq	r5, r5, r2
 8009bf2:	68a3      	ldr	r3, [r4, #8]
 8009bf4:	6922      	ldr	r2, [r4, #16]
 8009bf6:	bf0c      	ite	eq
 8009bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bfc:	2500      	movne	r5, #0
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	bfc4      	itt	gt
 8009c02:	1a9b      	subgt	r3, r3, r2
 8009c04:	18ed      	addgt	r5, r5, r3
 8009c06:	2600      	movs	r6, #0
 8009c08:	341a      	adds	r4, #26
 8009c0a:	42b5      	cmp	r5, r6
 8009c0c:	d11a      	bne.n	8009c44 <_printf_common+0xc8>
 8009c0e:	2000      	movs	r0, #0
 8009c10:	e008      	b.n	8009c24 <_printf_common+0xa8>
 8009c12:	2301      	movs	r3, #1
 8009c14:	4652      	mov	r2, sl
 8009c16:	4649      	mov	r1, r9
 8009c18:	4638      	mov	r0, r7
 8009c1a:	47c0      	blx	r8
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d103      	bne.n	8009c28 <_printf_common+0xac>
 8009c20:	f04f 30ff 	mov.w	r0, #4294967295
 8009c24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c28:	3501      	adds	r5, #1
 8009c2a:	e7c6      	b.n	8009bba <_printf_common+0x3e>
 8009c2c:	18e1      	adds	r1, r4, r3
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	2030      	movs	r0, #48	; 0x30
 8009c32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009c36:	4422      	add	r2, r4
 8009c38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009c3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c40:	3302      	adds	r3, #2
 8009c42:	e7c7      	b.n	8009bd4 <_printf_common+0x58>
 8009c44:	2301      	movs	r3, #1
 8009c46:	4622      	mov	r2, r4
 8009c48:	4649      	mov	r1, r9
 8009c4a:	4638      	mov	r0, r7
 8009c4c:	47c0      	blx	r8
 8009c4e:	3001      	adds	r0, #1
 8009c50:	d0e6      	beq.n	8009c20 <_printf_common+0xa4>
 8009c52:	3601      	adds	r6, #1
 8009c54:	e7d9      	b.n	8009c0a <_printf_common+0x8e>
	...

08009c58 <_printf_i>:
 8009c58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c5c:	460c      	mov	r4, r1
 8009c5e:	4691      	mov	r9, r2
 8009c60:	7e27      	ldrb	r7, [r4, #24]
 8009c62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009c64:	2f78      	cmp	r7, #120	; 0x78
 8009c66:	4680      	mov	r8, r0
 8009c68:	469a      	mov	sl, r3
 8009c6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009c6e:	d807      	bhi.n	8009c80 <_printf_i+0x28>
 8009c70:	2f62      	cmp	r7, #98	; 0x62
 8009c72:	d80a      	bhi.n	8009c8a <_printf_i+0x32>
 8009c74:	2f00      	cmp	r7, #0
 8009c76:	f000 80d8 	beq.w	8009e2a <_printf_i+0x1d2>
 8009c7a:	2f58      	cmp	r7, #88	; 0x58
 8009c7c:	f000 80a3 	beq.w	8009dc6 <_printf_i+0x16e>
 8009c80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009c84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c88:	e03a      	b.n	8009d00 <_printf_i+0xa8>
 8009c8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c8e:	2b15      	cmp	r3, #21
 8009c90:	d8f6      	bhi.n	8009c80 <_printf_i+0x28>
 8009c92:	a001      	add	r0, pc, #4	; (adr r0, 8009c98 <_printf_i+0x40>)
 8009c94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009c98:	08009cf1 	.word	0x08009cf1
 8009c9c:	08009d05 	.word	0x08009d05
 8009ca0:	08009c81 	.word	0x08009c81
 8009ca4:	08009c81 	.word	0x08009c81
 8009ca8:	08009c81 	.word	0x08009c81
 8009cac:	08009c81 	.word	0x08009c81
 8009cb0:	08009d05 	.word	0x08009d05
 8009cb4:	08009c81 	.word	0x08009c81
 8009cb8:	08009c81 	.word	0x08009c81
 8009cbc:	08009c81 	.word	0x08009c81
 8009cc0:	08009c81 	.word	0x08009c81
 8009cc4:	08009e11 	.word	0x08009e11
 8009cc8:	08009d35 	.word	0x08009d35
 8009ccc:	08009df3 	.word	0x08009df3
 8009cd0:	08009c81 	.word	0x08009c81
 8009cd4:	08009c81 	.word	0x08009c81
 8009cd8:	08009e33 	.word	0x08009e33
 8009cdc:	08009c81 	.word	0x08009c81
 8009ce0:	08009d35 	.word	0x08009d35
 8009ce4:	08009c81 	.word	0x08009c81
 8009ce8:	08009c81 	.word	0x08009c81
 8009cec:	08009dfb 	.word	0x08009dfb
 8009cf0:	680b      	ldr	r3, [r1, #0]
 8009cf2:	1d1a      	adds	r2, r3, #4
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	600a      	str	r2, [r1, #0]
 8009cf8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009cfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009d00:	2301      	movs	r3, #1
 8009d02:	e0a3      	b.n	8009e4c <_printf_i+0x1f4>
 8009d04:	6825      	ldr	r5, [r4, #0]
 8009d06:	6808      	ldr	r0, [r1, #0]
 8009d08:	062e      	lsls	r6, r5, #24
 8009d0a:	f100 0304 	add.w	r3, r0, #4
 8009d0e:	d50a      	bpl.n	8009d26 <_printf_i+0xce>
 8009d10:	6805      	ldr	r5, [r0, #0]
 8009d12:	600b      	str	r3, [r1, #0]
 8009d14:	2d00      	cmp	r5, #0
 8009d16:	da03      	bge.n	8009d20 <_printf_i+0xc8>
 8009d18:	232d      	movs	r3, #45	; 0x2d
 8009d1a:	426d      	negs	r5, r5
 8009d1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d20:	485e      	ldr	r0, [pc, #376]	; (8009e9c <_printf_i+0x244>)
 8009d22:	230a      	movs	r3, #10
 8009d24:	e019      	b.n	8009d5a <_printf_i+0x102>
 8009d26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009d2a:	6805      	ldr	r5, [r0, #0]
 8009d2c:	600b      	str	r3, [r1, #0]
 8009d2e:	bf18      	it	ne
 8009d30:	b22d      	sxthne	r5, r5
 8009d32:	e7ef      	b.n	8009d14 <_printf_i+0xbc>
 8009d34:	680b      	ldr	r3, [r1, #0]
 8009d36:	6825      	ldr	r5, [r4, #0]
 8009d38:	1d18      	adds	r0, r3, #4
 8009d3a:	6008      	str	r0, [r1, #0]
 8009d3c:	0628      	lsls	r0, r5, #24
 8009d3e:	d501      	bpl.n	8009d44 <_printf_i+0xec>
 8009d40:	681d      	ldr	r5, [r3, #0]
 8009d42:	e002      	b.n	8009d4a <_printf_i+0xf2>
 8009d44:	0669      	lsls	r1, r5, #25
 8009d46:	d5fb      	bpl.n	8009d40 <_printf_i+0xe8>
 8009d48:	881d      	ldrh	r5, [r3, #0]
 8009d4a:	4854      	ldr	r0, [pc, #336]	; (8009e9c <_printf_i+0x244>)
 8009d4c:	2f6f      	cmp	r7, #111	; 0x6f
 8009d4e:	bf0c      	ite	eq
 8009d50:	2308      	moveq	r3, #8
 8009d52:	230a      	movne	r3, #10
 8009d54:	2100      	movs	r1, #0
 8009d56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d5a:	6866      	ldr	r6, [r4, #4]
 8009d5c:	60a6      	str	r6, [r4, #8]
 8009d5e:	2e00      	cmp	r6, #0
 8009d60:	bfa2      	ittt	ge
 8009d62:	6821      	ldrge	r1, [r4, #0]
 8009d64:	f021 0104 	bicge.w	r1, r1, #4
 8009d68:	6021      	strge	r1, [r4, #0]
 8009d6a:	b90d      	cbnz	r5, 8009d70 <_printf_i+0x118>
 8009d6c:	2e00      	cmp	r6, #0
 8009d6e:	d04d      	beq.n	8009e0c <_printf_i+0x1b4>
 8009d70:	4616      	mov	r6, r2
 8009d72:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d76:	fb03 5711 	mls	r7, r3, r1, r5
 8009d7a:	5dc7      	ldrb	r7, [r0, r7]
 8009d7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d80:	462f      	mov	r7, r5
 8009d82:	42bb      	cmp	r3, r7
 8009d84:	460d      	mov	r5, r1
 8009d86:	d9f4      	bls.n	8009d72 <_printf_i+0x11a>
 8009d88:	2b08      	cmp	r3, #8
 8009d8a:	d10b      	bne.n	8009da4 <_printf_i+0x14c>
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	07df      	lsls	r7, r3, #31
 8009d90:	d508      	bpl.n	8009da4 <_printf_i+0x14c>
 8009d92:	6923      	ldr	r3, [r4, #16]
 8009d94:	6861      	ldr	r1, [r4, #4]
 8009d96:	4299      	cmp	r1, r3
 8009d98:	bfde      	ittt	le
 8009d9a:	2330      	movle	r3, #48	; 0x30
 8009d9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009da0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009da4:	1b92      	subs	r2, r2, r6
 8009da6:	6122      	str	r2, [r4, #16]
 8009da8:	f8cd a000 	str.w	sl, [sp]
 8009dac:	464b      	mov	r3, r9
 8009dae:	aa03      	add	r2, sp, #12
 8009db0:	4621      	mov	r1, r4
 8009db2:	4640      	mov	r0, r8
 8009db4:	f7ff fee2 	bl	8009b7c <_printf_common>
 8009db8:	3001      	adds	r0, #1
 8009dba:	d14c      	bne.n	8009e56 <_printf_i+0x1fe>
 8009dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009dc0:	b004      	add	sp, #16
 8009dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc6:	4835      	ldr	r0, [pc, #212]	; (8009e9c <_printf_i+0x244>)
 8009dc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009dcc:	6823      	ldr	r3, [r4, #0]
 8009dce:	680e      	ldr	r6, [r1, #0]
 8009dd0:	061f      	lsls	r7, r3, #24
 8009dd2:	f856 5b04 	ldr.w	r5, [r6], #4
 8009dd6:	600e      	str	r6, [r1, #0]
 8009dd8:	d514      	bpl.n	8009e04 <_printf_i+0x1ac>
 8009dda:	07d9      	lsls	r1, r3, #31
 8009ddc:	bf44      	itt	mi
 8009dde:	f043 0320 	orrmi.w	r3, r3, #32
 8009de2:	6023      	strmi	r3, [r4, #0]
 8009de4:	b91d      	cbnz	r5, 8009dee <_printf_i+0x196>
 8009de6:	6823      	ldr	r3, [r4, #0]
 8009de8:	f023 0320 	bic.w	r3, r3, #32
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	2310      	movs	r3, #16
 8009df0:	e7b0      	b.n	8009d54 <_printf_i+0xfc>
 8009df2:	6823      	ldr	r3, [r4, #0]
 8009df4:	f043 0320 	orr.w	r3, r3, #32
 8009df8:	6023      	str	r3, [r4, #0]
 8009dfa:	2378      	movs	r3, #120	; 0x78
 8009dfc:	4828      	ldr	r0, [pc, #160]	; (8009ea0 <_printf_i+0x248>)
 8009dfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009e02:	e7e3      	b.n	8009dcc <_printf_i+0x174>
 8009e04:	065e      	lsls	r6, r3, #25
 8009e06:	bf48      	it	mi
 8009e08:	b2ad      	uxthmi	r5, r5
 8009e0a:	e7e6      	b.n	8009dda <_printf_i+0x182>
 8009e0c:	4616      	mov	r6, r2
 8009e0e:	e7bb      	b.n	8009d88 <_printf_i+0x130>
 8009e10:	680b      	ldr	r3, [r1, #0]
 8009e12:	6826      	ldr	r6, [r4, #0]
 8009e14:	6960      	ldr	r0, [r4, #20]
 8009e16:	1d1d      	adds	r5, r3, #4
 8009e18:	600d      	str	r5, [r1, #0]
 8009e1a:	0635      	lsls	r5, r6, #24
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	d501      	bpl.n	8009e24 <_printf_i+0x1cc>
 8009e20:	6018      	str	r0, [r3, #0]
 8009e22:	e002      	b.n	8009e2a <_printf_i+0x1d2>
 8009e24:	0671      	lsls	r1, r6, #25
 8009e26:	d5fb      	bpl.n	8009e20 <_printf_i+0x1c8>
 8009e28:	8018      	strh	r0, [r3, #0]
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	6123      	str	r3, [r4, #16]
 8009e2e:	4616      	mov	r6, r2
 8009e30:	e7ba      	b.n	8009da8 <_printf_i+0x150>
 8009e32:	680b      	ldr	r3, [r1, #0]
 8009e34:	1d1a      	adds	r2, r3, #4
 8009e36:	600a      	str	r2, [r1, #0]
 8009e38:	681e      	ldr	r6, [r3, #0]
 8009e3a:	6862      	ldr	r2, [r4, #4]
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	4630      	mov	r0, r6
 8009e40:	f7f6 f9c6 	bl	80001d0 <memchr>
 8009e44:	b108      	cbz	r0, 8009e4a <_printf_i+0x1f2>
 8009e46:	1b80      	subs	r0, r0, r6
 8009e48:	6060      	str	r0, [r4, #4]
 8009e4a:	6863      	ldr	r3, [r4, #4]
 8009e4c:	6123      	str	r3, [r4, #16]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e54:	e7a8      	b.n	8009da8 <_printf_i+0x150>
 8009e56:	6923      	ldr	r3, [r4, #16]
 8009e58:	4632      	mov	r2, r6
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	4640      	mov	r0, r8
 8009e5e:	47d0      	blx	sl
 8009e60:	3001      	adds	r0, #1
 8009e62:	d0ab      	beq.n	8009dbc <_printf_i+0x164>
 8009e64:	6823      	ldr	r3, [r4, #0]
 8009e66:	079b      	lsls	r3, r3, #30
 8009e68:	d413      	bmi.n	8009e92 <_printf_i+0x23a>
 8009e6a:	68e0      	ldr	r0, [r4, #12]
 8009e6c:	9b03      	ldr	r3, [sp, #12]
 8009e6e:	4298      	cmp	r0, r3
 8009e70:	bfb8      	it	lt
 8009e72:	4618      	movlt	r0, r3
 8009e74:	e7a4      	b.n	8009dc0 <_printf_i+0x168>
 8009e76:	2301      	movs	r3, #1
 8009e78:	4632      	mov	r2, r6
 8009e7a:	4649      	mov	r1, r9
 8009e7c:	4640      	mov	r0, r8
 8009e7e:	47d0      	blx	sl
 8009e80:	3001      	adds	r0, #1
 8009e82:	d09b      	beq.n	8009dbc <_printf_i+0x164>
 8009e84:	3501      	adds	r5, #1
 8009e86:	68e3      	ldr	r3, [r4, #12]
 8009e88:	9903      	ldr	r1, [sp, #12]
 8009e8a:	1a5b      	subs	r3, r3, r1
 8009e8c:	42ab      	cmp	r3, r5
 8009e8e:	dcf2      	bgt.n	8009e76 <_printf_i+0x21e>
 8009e90:	e7eb      	b.n	8009e6a <_printf_i+0x212>
 8009e92:	2500      	movs	r5, #0
 8009e94:	f104 0619 	add.w	r6, r4, #25
 8009e98:	e7f5      	b.n	8009e86 <_printf_i+0x22e>
 8009e9a:	bf00      	nop
 8009e9c:	0800a661 	.word	0x0800a661
 8009ea0:	0800a672 	.word	0x0800a672

08009ea4 <_putc_r>:
 8009ea4:	b570      	push	{r4, r5, r6, lr}
 8009ea6:	460d      	mov	r5, r1
 8009ea8:	4614      	mov	r4, r2
 8009eaa:	4606      	mov	r6, r0
 8009eac:	b118      	cbz	r0, 8009eb6 <_putc_r+0x12>
 8009eae:	6983      	ldr	r3, [r0, #24]
 8009eb0:	b90b      	cbnz	r3, 8009eb6 <_putc_r+0x12>
 8009eb2:	f7ff fb01 	bl	80094b8 <__sinit>
 8009eb6:	4b1c      	ldr	r3, [pc, #112]	; (8009f28 <_putc_r+0x84>)
 8009eb8:	429c      	cmp	r4, r3
 8009eba:	d124      	bne.n	8009f06 <_putc_r+0x62>
 8009ebc:	6874      	ldr	r4, [r6, #4]
 8009ebe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ec0:	07d8      	lsls	r0, r3, #31
 8009ec2:	d405      	bmi.n	8009ed0 <_putc_r+0x2c>
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	0599      	lsls	r1, r3, #22
 8009ec8:	d402      	bmi.n	8009ed0 <_putc_r+0x2c>
 8009eca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ecc:	f7ff fb92 	bl	80095f4 <__retarget_lock_acquire_recursive>
 8009ed0:	68a3      	ldr	r3, [r4, #8]
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	60a3      	str	r3, [r4, #8]
 8009ed8:	da05      	bge.n	8009ee6 <_putc_r+0x42>
 8009eda:	69a2      	ldr	r2, [r4, #24]
 8009edc:	4293      	cmp	r3, r2
 8009ede:	db1c      	blt.n	8009f1a <_putc_r+0x76>
 8009ee0:	b2eb      	uxtb	r3, r5
 8009ee2:	2b0a      	cmp	r3, #10
 8009ee4:	d019      	beq.n	8009f1a <_putc_r+0x76>
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	1c5a      	adds	r2, r3, #1
 8009eea:	6022      	str	r2, [r4, #0]
 8009eec:	701d      	strb	r5, [r3, #0]
 8009eee:	b2ed      	uxtb	r5, r5
 8009ef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ef2:	07da      	lsls	r2, r3, #31
 8009ef4:	d405      	bmi.n	8009f02 <_putc_r+0x5e>
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	059b      	lsls	r3, r3, #22
 8009efa:	d402      	bmi.n	8009f02 <_putc_r+0x5e>
 8009efc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009efe:	f7ff fb7a 	bl	80095f6 <__retarget_lock_release_recursive>
 8009f02:	4628      	mov	r0, r5
 8009f04:	bd70      	pop	{r4, r5, r6, pc}
 8009f06:	4b09      	ldr	r3, [pc, #36]	; (8009f2c <_putc_r+0x88>)
 8009f08:	429c      	cmp	r4, r3
 8009f0a:	d101      	bne.n	8009f10 <_putc_r+0x6c>
 8009f0c:	68b4      	ldr	r4, [r6, #8]
 8009f0e:	e7d6      	b.n	8009ebe <_putc_r+0x1a>
 8009f10:	4b07      	ldr	r3, [pc, #28]	; (8009f30 <_putc_r+0x8c>)
 8009f12:	429c      	cmp	r4, r3
 8009f14:	bf08      	it	eq
 8009f16:	68f4      	ldreq	r4, [r6, #12]
 8009f18:	e7d1      	b.n	8009ebe <_putc_r+0x1a>
 8009f1a:	4629      	mov	r1, r5
 8009f1c:	4622      	mov	r2, r4
 8009f1e:	4630      	mov	r0, r6
 8009f20:	f000 f84c 	bl	8009fbc <__swbuf_r>
 8009f24:	4605      	mov	r5, r0
 8009f26:	e7e3      	b.n	8009ef0 <_putc_r+0x4c>
 8009f28:	0800a610 	.word	0x0800a610
 8009f2c:	0800a630 	.word	0x0800a630
 8009f30:	0800a5f0 	.word	0x0800a5f0

08009f34 <__sread>:
 8009f34:	b510      	push	{r4, lr}
 8009f36:	460c      	mov	r4, r1
 8009f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f3c:	f000 fa98 	bl	800a470 <_read_r>
 8009f40:	2800      	cmp	r0, #0
 8009f42:	bfab      	itete	ge
 8009f44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f46:	89a3      	ldrhlt	r3, [r4, #12]
 8009f48:	181b      	addge	r3, r3, r0
 8009f4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f4e:	bfac      	ite	ge
 8009f50:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f52:	81a3      	strhlt	r3, [r4, #12]
 8009f54:	bd10      	pop	{r4, pc}

08009f56 <__swrite>:
 8009f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f5a:	461f      	mov	r7, r3
 8009f5c:	898b      	ldrh	r3, [r1, #12]
 8009f5e:	05db      	lsls	r3, r3, #23
 8009f60:	4605      	mov	r5, r0
 8009f62:	460c      	mov	r4, r1
 8009f64:	4616      	mov	r6, r2
 8009f66:	d505      	bpl.n	8009f74 <__swrite+0x1e>
 8009f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f000 f9c8 	bl	800a304 <_lseek_r>
 8009f74:	89a3      	ldrh	r3, [r4, #12]
 8009f76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f7e:	81a3      	strh	r3, [r4, #12]
 8009f80:	4632      	mov	r2, r6
 8009f82:	463b      	mov	r3, r7
 8009f84:	4628      	mov	r0, r5
 8009f86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8a:	f000 b869 	b.w	800a060 <_write_r>

08009f8e <__sseek>:
 8009f8e:	b510      	push	{r4, lr}
 8009f90:	460c      	mov	r4, r1
 8009f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f96:	f000 f9b5 	bl	800a304 <_lseek_r>
 8009f9a:	1c43      	adds	r3, r0, #1
 8009f9c:	89a3      	ldrh	r3, [r4, #12]
 8009f9e:	bf15      	itete	ne
 8009fa0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009fa2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009fa6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009faa:	81a3      	strheq	r3, [r4, #12]
 8009fac:	bf18      	it	ne
 8009fae:	81a3      	strhne	r3, [r4, #12]
 8009fb0:	bd10      	pop	{r4, pc}

08009fb2 <__sclose>:
 8009fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb6:	f000 b8d3 	b.w	800a160 <_close_r>
	...

08009fbc <__swbuf_r>:
 8009fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fbe:	460e      	mov	r6, r1
 8009fc0:	4614      	mov	r4, r2
 8009fc2:	4605      	mov	r5, r0
 8009fc4:	b118      	cbz	r0, 8009fce <__swbuf_r+0x12>
 8009fc6:	6983      	ldr	r3, [r0, #24]
 8009fc8:	b90b      	cbnz	r3, 8009fce <__swbuf_r+0x12>
 8009fca:	f7ff fa75 	bl	80094b8 <__sinit>
 8009fce:	4b21      	ldr	r3, [pc, #132]	; (800a054 <__swbuf_r+0x98>)
 8009fd0:	429c      	cmp	r4, r3
 8009fd2:	d12b      	bne.n	800a02c <__swbuf_r+0x70>
 8009fd4:	686c      	ldr	r4, [r5, #4]
 8009fd6:	69a3      	ldr	r3, [r4, #24]
 8009fd8:	60a3      	str	r3, [r4, #8]
 8009fda:	89a3      	ldrh	r3, [r4, #12]
 8009fdc:	071a      	lsls	r2, r3, #28
 8009fde:	d52f      	bpl.n	800a040 <__swbuf_r+0x84>
 8009fe0:	6923      	ldr	r3, [r4, #16]
 8009fe2:	b36b      	cbz	r3, 800a040 <__swbuf_r+0x84>
 8009fe4:	6923      	ldr	r3, [r4, #16]
 8009fe6:	6820      	ldr	r0, [r4, #0]
 8009fe8:	1ac0      	subs	r0, r0, r3
 8009fea:	6963      	ldr	r3, [r4, #20]
 8009fec:	b2f6      	uxtb	r6, r6
 8009fee:	4283      	cmp	r3, r0
 8009ff0:	4637      	mov	r7, r6
 8009ff2:	dc04      	bgt.n	8009ffe <__swbuf_r+0x42>
 8009ff4:	4621      	mov	r1, r4
 8009ff6:	4628      	mov	r0, r5
 8009ff8:	f000 f948 	bl	800a28c <_fflush_r>
 8009ffc:	bb30      	cbnz	r0, 800a04c <__swbuf_r+0x90>
 8009ffe:	68a3      	ldr	r3, [r4, #8]
 800a000:	3b01      	subs	r3, #1
 800a002:	60a3      	str	r3, [r4, #8]
 800a004:	6823      	ldr	r3, [r4, #0]
 800a006:	1c5a      	adds	r2, r3, #1
 800a008:	6022      	str	r2, [r4, #0]
 800a00a:	701e      	strb	r6, [r3, #0]
 800a00c:	6963      	ldr	r3, [r4, #20]
 800a00e:	3001      	adds	r0, #1
 800a010:	4283      	cmp	r3, r0
 800a012:	d004      	beq.n	800a01e <__swbuf_r+0x62>
 800a014:	89a3      	ldrh	r3, [r4, #12]
 800a016:	07db      	lsls	r3, r3, #31
 800a018:	d506      	bpl.n	800a028 <__swbuf_r+0x6c>
 800a01a:	2e0a      	cmp	r6, #10
 800a01c:	d104      	bne.n	800a028 <__swbuf_r+0x6c>
 800a01e:	4621      	mov	r1, r4
 800a020:	4628      	mov	r0, r5
 800a022:	f000 f933 	bl	800a28c <_fflush_r>
 800a026:	b988      	cbnz	r0, 800a04c <__swbuf_r+0x90>
 800a028:	4638      	mov	r0, r7
 800a02a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a02c:	4b0a      	ldr	r3, [pc, #40]	; (800a058 <__swbuf_r+0x9c>)
 800a02e:	429c      	cmp	r4, r3
 800a030:	d101      	bne.n	800a036 <__swbuf_r+0x7a>
 800a032:	68ac      	ldr	r4, [r5, #8]
 800a034:	e7cf      	b.n	8009fd6 <__swbuf_r+0x1a>
 800a036:	4b09      	ldr	r3, [pc, #36]	; (800a05c <__swbuf_r+0xa0>)
 800a038:	429c      	cmp	r4, r3
 800a03a:	bf08      	it	eq
 800a03c:	68ec      	ldreq	r4, [r5, #12]
 800a03e:	e7ca      	b.n	8009fd6 <__swbuf_r+0x1a>
 800a040:	4621      	mov	r1, r4
 800a042:	4628      	mov	r0, r5
 800a044:	f000 f81e 	bl	800a084 <__swsetup_r>
 800a048:	2800      	cmp	r0, #0
 800a04a:	d0cb      	beq.n	8009fe4 <__swbuf_r+0x28>
 800a04c:	f04f 37ff 	mov.w	r7, #4294967295
 800a050:	e7ea      	b.n	800a028 <__swbuf_r+0x6c>
 800a052:	bf00      	nop
 800a054:	0800a610 	.word	0x0800a610
 800a058:	0800a630 	.word	0x0800a630
 800a05c:	0800a5f0 	.word	0x0800a5f0

0800a060 <_write_r>:
 800a060:	b538      	push	{r3, r4, r5, lr}
 800a062:	4d07      	ldr	r5, [pc, #28]	; (800a080 <_write_r+0x20>)
 800a064:	4604      	mov	r4, r0
 800a066:	4608      	mov	r0, r1
 800a068:	4611      	mov	r1, r2
 800a06a:	2200      	movs	r2, #0
 800a06c:	602a      	str	r2, [r5, #0]
 800a06e:	461a      	mov	r2, r3
 800a070:	f7f8 f805 	bl	800207e <_write>
 800a074:	1c43      	adds	r3, r0, #1
 800a076:	d102      	bne.n	800a07e <_write_r+0x1e>
 800a078:	682b      	ldr	r3, [r5, #0]
 800a07a:	b103      	cbz	r3, 800a07e <_write_r+0x1e>
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	bd38      	pop	{r3, r4, r5, pc}
 800a080:	20000e5c 	.word	0x20000e5c

0800a084 <__swsetup_r>:
 800a084:	4b32      	ldr	r3, [pc, #200]	; (800a150 <__swsetup_r+0xcc>)
 800a086:	b570      	push	{r4, r5, r6, lr}
 800a088:	681d      	ldr	r5, [r3, #0]
 800a08a:	4606      	mov	r6, r0
 800a08c:	460c      	mov	r4, r1
 800a08e:	b125      	cbz	r5, 800a09a <__swsetup_r+0x16>
 800a090:	69ab      	ldr	r3, [r5, #24]
 800a092:	b913      	cbnz	r3, 800a09a <__swsetup_r+0x16>
 800a094:	4628      	mov	r0, r5
 800a096:	f7ff fa0f 	bl	80094b8 <__sinit>
 800a09a:	4b2e      	ldr	r3, [pc, #184]	; (800a154 <__swsetup_r+0xd0>)
 800a09c:	429c      	cmp	r4, r3
 800a09e:	d10f      	bne.n	800a0c0 <__swsetup_r+0x3c>
 800a0a0:	686c      	ldr	r4, [r5, #4]
 800a0a2:	89a3      	ldrh	r3, [r4, #12]
 800a0a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0a8:	0719      	lsls	r1, r3, #28
 800a0aa:	d42c      	bmi.n	800a106 <__swsetup_r+0x82>
 800a0ac:	06dd      	lsls	r5, r3, #27
 800a0ae:	d411      	bmi.n	800a0d4 <__swsetup_r+0x50>
 800a0b0:	2309      	movs	r3, #9
 800a0b2:	6033      	str	r3, [r6, #0]
 800a0b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0b8:	81a3      	strh	r3, [r4, #12]
 800a0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a0be:	e03e      	b.n	800a13e <__swsetup_r+0xba>
 800a0c0:	4b25      	ldr	r3, [pc, #148]	; (800a158 <__swsetup_r+0xd4>)
 800a0c2:	429c      	cmp	r4, r3
 800a0c4:	d101      	bne.n	800a0ca <__swsetup_r+0x46>
 800a0c6:	68ac      	ldr	r4, [r5, #8]
 800a0c8:	e7eb      	b.n	800a0a2 <__swsetup_r+0x1e>
 800a0ca:	4b24      	ldr	r3, [pc, #144]	; (800a15c <__swsetup_r+0xd8>)
 800a0cc:	429c      	cmp	r4, r3
 800a0ce:	bf08      	it	eq
 800a0d0:	68ec      	ldreq	r4, [r5, #12]
 800a0d2:	e7e6      	b.n	800a0a2 <__swsetup_r+0x1e>
 800a0d4:	0758      	lsls	r0, r3, #29
 800a0d6:	d512      	bpl.n	800a0fe <__swsetup_r+0x7a>
 800a0d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0da:	b141      	cbz	r1, 800a0ee <__swsetup_r+0x6a>
 800a0dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0e0:	4299      	cmp	r1, r3
 800a0e2:	d002      	beq.n	800a0ea <__swsetup_r+0x66>
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f7ff f871 	bl	80091cc <_free_r>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	6363      	str	r3, [r4, #52]	; 0x34
 800a0ee:	89a3      	ldrh	r3, [r4, #12]
 800a0f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0f4:	81a3      	strh	r3, [r4, #12]
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	6063      	str	r3, [r4, #4]
 800a0fa:	6923      	ldr	r3, [r4, #16]
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	89a3      	ldrh	r3, [r4, #12]
 800a100:	f043 0308 	orr.w	r3, r3, #8
 800a104:	81a3      	strh	r3, [r4, #12]
 800a106:	6923      	ldr	r3, [r4, #16]
 800a108:	b94b      	cbnz	r3, 800a11e <__swsetup_r+0x9a>
 800a10a:	89a3      	ldrh	r3, [r4, #12]
 800a10c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a114:	d003      	beq.n	800a11e <__swsetup_r+0x9a>
 800a116:	4621      	mov	r1, r4
 800a118:	4630      	mov	r0, r6
 800a11a:	f000 f929 	bl	800a370 <__smakebuf_r>
 800a11e:	89a0      	ldrh	r0, [r4, #12]
 800a120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a124:	f010 0301 	ands.w	r3, r0, #1
 800a128:	d00a      	beq.n	800a140 <__swsetup_r+0xbc>
 800a12a:	2300      	movs	r3, #0
 800a12c:	60a3      	str	r3, [r4, #8]
 800a12e:	6963      	ldr	r3, [r4, #20]
 800a130:	425b      	negs	r3, r3
 800a132:	61a3      	str	r3, [r4, #24]
 800a134:	6923      	ldr	r3, [r4, #16]
 800a136:	b943      	cbnz	r3, 800a14a <__swsetup_r+0xc6>
 800a138:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a13c:	d1ba      	bne.n	800a0b4 <__swsetup_r+0x30>
 800a13e:	bd70      	pop	{r4, r5, r6, pc}
 800a140:	0781      	lsls	r1, r0, #30
 800a142:	bf58      	it	pl
 800a144:	6963      	ldrpl	r3, [r4, #20]
 800a146:	60a3      	str	r3, [r4, #8]
 800a148:	e7f4      	b.n	800a134 <__swsetup_r+0xb0>
 800a14a:	2000      	movs	r0, #0
 800a14c:	e7f7      	b.n	800a13e <__swsetup_r+0xba>
 800a14e:	bf00      	nop
 800a150:	2000018c 	.word	0x2000018c
 800a154:	0800a610 	.word	0x0800a610
 800a158:	0800a630 	.word	0x0800a630
 800a15c:	0800a5f0 	.word	0x0800a5f0

0800a160 <_close_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	4d06      	ldr	r5, [pc, #24]	; (800a17c <_close_r+0x1c>)
 800a164:	2300      	movs	r3, #0
 800a166:	4604      	mov	r4, r0
 800a168:	4608      	mov	r0, r1
 800a16a:	602b      	str	r3, [r5, #0]
 800a16c:	f7f7 ffa3 	bl	80020b6 <_close>
 800a170:	1c43      	adds	r3, r0, #1
 800a172:	d102      	bne.n	800a17a <_close_r+0x1a>
 800a174:	682b      	ldr	r3, [r5, #0]
 800a176:	b103      	cbz	r3, 800a17a <_close_r+0x1a>
 800a178:	6023      	str	r3, [r4, #0]
 800a17a:	bd38      	pop	{r3, r4, r5, pc}
 800a17c:	20000e5c 	.word	0x20000e5c

0800a180 <__sflush_r>:
 800a180:	898a      	ldrh	r2, [r1, #12]
 800a182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a186:	4605      	mov	r5, r0
 800a188:	0710      	lsls	r0, r2, #28
 800a18a:	460c      	mov	r4, r1
 800a18c:	d458      	bmi.n	800a240 <__sflush_r+0xc0>
 800a18e:	684b      	ldr	r3, [r1, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	dc05      	bgt.n	800a1a0 <__sflush_r+0x20>
 800a194:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a196:	2b00      	cmp	r3, #0
 800a198:	dc02      	bgt.n	800a1a0 <__sflush_r+0x20>
 800a19a:	2000      	movs	r0, #0
 800a19c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1a2:	2e00      	cmp	r6, #0
 800a1a4:	d0f9      	beq.n	800a19a <__sflush_r+0x1a>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1ac:	682f      	ldr	r7, [r5, #0]
 800a1ae:	602b      	str	r3, [r5, #0]
 800a1b0:	d032      	beq.n	800a218 <__sflush_r+0x98>
 800a1b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	075a      	lsls	r2, r3, #29
 800a1b8:	d505      	bpl.n	800a1c6 <__sflush_r+0x46>
 800a1ba:	6863      	ldr	r3, [r4, #4]
 800a1bc:	1ac0      	subs	r0, r0, r3
 800a1be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1c0:	b10b      	cbz	r3, 800a1c6 <__sflush_r+0x46>
 800a1c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1c4:	1ac0      	subs	r0, r0, r3
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1cc:	6a21      	ldr	r1, [r4, #32]
 800a1ce:	4628      	mov	r0, r5
 800a1d0:	47b0      	blx	r6
 800a1d2:	1c43      	adds	r3, r0, #1
 800a1d4:	89a3      	ldrh	r3, [r4, #12]
 800a1d6:	d106      	bne.n	800a1e6 <__sflush_r+0x66>
 800a1d8:	6829      	ldr	r1, [r5, #0]
 800a1da:	291d      	cmp	r1, #29
 800a1dc:	d82c      	bhi.n	800a238 <__sflush_r+0xb8>
 800a1de:	4a2a      	ldr	r2, [pc, #168]	; (800a288 <__sflush_r+0x108>)
 800a1e0:	40ca      	lsrs	r2, r1
 800a1e2:	07d6      	lsls	r6, r2, #31
 800a1e4:	d528      	bpl.n	800a238 <__sflush_r+0xb8>
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	6062      	str	r2, [r4, #4]
 800a1ea:	04d9      	lsls	r1, r3, #19
 800a1ec:	6922      	ldr	r2, [r4, #16]
 800a1ee:	6022      	str	r2, [r4, #0]
 800a1f0:	d504      	bpl.n	800a1fc <__sflush_r+0x7c>
 800a1f2:	1c42      	adds	r2, r0, #1
 800a1f4:	d101      	bne.n	800a1fa <__sflush_r+0x7a>
 800a1f6:	682b      	ldr	r3, [r5, #0]
 800a1f8:	b903      	cbnz	r3, 800a1fc <__sflush_r+0x7c>
 800a1fa:	6560      	str	r0, [r4, #84]	; 0x54
 800a1fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a1fe:	602f      	str	r7, [r5, #0]
 800a200:	2900      	cmp	r1, #0
 800a202:	d0ca      	beq.n	800a19a <__sflush_r+0x1a>
 800a204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a208:	4299      	cmp	r1, r3
 800a20a:	d002      	beq.n	800a212 <__sflush_r+0x92>
 800a20c:	4628      	mov	r0, r5
 800a20e:	f7fe ffdd 	bl	80091cc <_free_r>
 800a212:	2000      	movs	r0, #0
 800a214:	6360      	str	r0, [r4, #52]	; 0x34
 800a216:	e7c1      	b.n	800a19c <__sflush_r+0x1c>
 800a218:	6a21      	ldr	r1, [r4, #32]
 800a21a:	2301      	movs	r3, #1
 800a21c:	4628      	mov	r0, r5
 800a21e:	47b0      	blx	r6
 800a220:	1c41      	adds	r1, r0, #1
 800a222:	d1c7      	bne.n	800a1b4 <__sflush_r+0x34>
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d0c4      	beq.n	800a1b4 <__sflush_r+0x34>
 800a22a:	2b1d      	cmp	r3, #29
 800a22c:	d001      	beq.n	800a232 <__sflush_r+0xb2>
 800a22e:	2b16      	cmp	r3, #22
 800a230:	d101      	bne.n	800a236 <__sflush_r+0xb6>
 800a232:	602f      	str	r7, [r5, #0]
 800a234:	e7b1      	b.n	800a19a <__sflush_r+0x1a>
 800a236:	89a3      	ldrh	r3, [r4, #12]
 800a238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a23c:	81a3      	strh	r3, [r4, #12]
 800a23e:	e7ad      	b.n	800a19c <__sflush_r+0x1c>
 800a240:	690f      	ldr	r7, [r1, #16]
 800a242:	2f00      	cmp	r7, #0
 800a244:	d0a9      	beq.n	800a19a <__sflush_r+0x1a>
 800a246:	0793      	lsls	r3, r2, #30
 800a248:	680e      	ldr	r6, [r1, #0]
 800a24a:	bf08      	it	eq
 800a24c:	694b      	ldreq	r3, [r1, #20]
 800a24e:	600f      	str	r7, [r1, #0]
 800a250:	bf18      	it	ne
 800a252:	2300      	movne	r3, #0
 800a254:	eba6 0807 	sub.w	r8, r6, r7
 800a258:	608b      	str	r3, [r1, #8]
 800a25a:	f1b8 0f00 	cmp.w	r8, #0
 800a25e:	dd9c      	ble.n	800a19a <__sflush_r+0x1a>
 800a260:	6a21      	ldr	r1, [r4, #32]
 800a262:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a264:	4643      	mov	r3, r8
 800a266:	463a      	mov	r2, r7
 800a268:	4628      	mov	r0, r5
 800a26a:	47b0      	blx	r6
 800a26c:	2800      	cmp	r0, #0
 800a26e:	dc06      	bgt.n	800a27e <__sflush_r+0xfe>
 800a270:	89a3      	ldrh	r3, [r4, #12]
 800a272:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a276:	81a3      	strh	r3, [r4, #12]
 800a278:	f04f 30ff 	mov.w	r0, #4294967295
 800a27c:	e78e      	b.n	800a19c <__sflush_r+0x1c>
 800a27e:	4407      	add	r7, r0
 800a280:	eba8 0800 	sub.w	r8, r8, r0
 800a284:	e7e9      	b.n	800a25a <__sflush_r+0xda>
 800a286:	bf00      	nop
 800a288:	20400001 	.word	0x20400001

0800a28c <_fflush_r>:
 800a28c:	b538      	push	{r3, r4, r5, lr}
 800a28e:	690b      	ldr	r3, [r1, #16]
 800a290:	4605      	mov	r5, r0
 800a292:	460c      	mov	r4, r1
 800a294:	b913      	cbnz	r3, 800a29c <_fflush_r+0x10>
 800a296:	2500      	movs	r5, #0
 800a298:	4628      	mov	r0, r5
 800a29a:	bd38      	pop	{r3, r4, r5, pc}
 800a29c:	b118      	cbz	r0, 800a2a6 <_fflush_r+0x1a>
 800a29e:	6983      	ldr	r3, [r0, #24]
 800a2a0:	b90b      	cbnz	r3, 800a2a6 <_fflush_r+0x1a>
 800a2a2:	f7ff f909 	bl	80094b8 <__sinit>
 800a2a6:	4b14      	ldr	r3, [pc, #80]	; (800a2f8 <_fflush_r+0x6c>)
 800a2a8:	429c      	cmp	r4, r3
 800a2aa:	d11b      	bne.n	800a2e4 <_fflush_r+0x58>
 800a2ac:	686c      	ldr	r4, [r5, #4]
 800a2ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d0ef      	beq.n	800a296 <_fflush_r+0xa>
 800a2b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2b8:	07d0      	lsls	r0, r2, #31
 800a2ba:	d404      	bmi.n	800a2c6 <_fflush_r+0x3a>
 800a2bc:	0599      	lsls	r1, r3, #22
 800a2be:	d402      	bmi.n	800a2c6 <_fflush_r+0x3a>
 800a2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2c2:	f7ff f997 	bl	80095f4 <__retarget_lock_acquire_recursive>
 800a2c6:	4628      	mov	r0, r5
 800a2c8:	4621      	mov	r1, r4
 800a2ca:	f7ff ff59 	bl	800a180 <__sflush_r>
 800a2ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2d0:	07da      	lsls	r2, r3, #31
 800a2d2:	4605      	mov	r5, r0
 800a2d4:	d4e0      	bmi.n	800a298 <_fflush_r+0xc>
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	059b      	lsls	r3, r3, #22
 800a2da:	d4dd      	bmi.n	800a298 <_fflush_r+0xc>
 800a2dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2de:	f7ff f98a 	bl	80095f6 <__retarget_lock_release_recursive>
 800a2e2:	e7d9      	b.n	800a298 <_fflush_r+0xc>
 800a2e4:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <_fflush_r+0x70>)
 800a2e6:	429c      	cmp	r4, r3
 800a2e8:	d101      	bne.n	800a2ee <_fflush_r+0x62>
 800a2ea:	68ac      	ldr	r4, [r5, #8]
 800a2ec:	e7df      	b.n	800a2ae <_fflush_r+0x22>
 800a2ee:	4b04      	ldr	r3, [pc, #16]	; (800a300 <_fflush_r+0x74>)
 800a2f0:	429c      	cmp	r4, r3
 800a2f2:	bf08      	it	eq
 800a2f4:	68ec      	ldreq	r4, [r5, #12]
 800a2f6:	e7da      	b.n	800a2ae <_fflush_r+0x22>
 800a2f8:	0800a610 	.word	0x0800a610
 800a2fc:	0800a630 	.word	0x0800a630
 800a300:	0800a5f0 	.word	0x0800a5f0

0800a304 <_lseek_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	4d07      	ldr	r5, [pc, #28]	; (800a324 <_lseek_r+0x20>)
 800a308:	4604      	mov	r4, r0
 800a30a:	4608      	mov	r0, r1
 800a30c:	4611      	mov	r1, r2
 800a30e:	2200      	movs	r2, #0
 800a310:	602a      	str	r2, [r5, #0]
 800a312:	461a      	mov	r2, r3
 800a314:	f7f7 fef6 	bl	8002104 <_lseek>
 800a318:	1c43      	adds	r3, r0, #1
 800a31a:	d102      	bne.n	800a322 <_lseek_r+0x1e>
 800a31c:	682b      	ldr	r3, [r5, #0]
 800a31e:	b103      	cbz	r3, 800a322 <_lseek_r+0x1e>
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	bd38      	pop	{r3, r4, r5, pc}
 800a324:	20000e5c 	.word	0x20000e5c

0800a328 <__swhatbuf_r>:
 800a328:	b570      	push	{r4, r5, r6, lr}
 800a32a:	460e      	mov	r6, r1
 800a32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a330:	2900      	cmp	r1, #0
 800a332:	b096      	sub	sp, #88	; 0x58
 800a334:	4614      	mov	r4, r2
 800a336:	461d      	mov	r5, r3
 800a338:	da07      	bge.n	800a34a <__swhatbuf_r+0x22>
 800a33a:	2300      	movs	r3, #0
 800a33c:	602b      	str	r3, [r5, #0]
 800a33e:	89b3      	ldrh	r3, [r6, #12]
 800a340:	061a      	lsls	r2, r3, #24
 800a342:	d410      	bmi.n	800a366 <__swhatbuf_r+0x3e>
 800a344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a348:	e00e      	b.n	800a368 <__swhatbuf_r+0x40>
 800a34a:	466a      	mov	r2, sp
 800a34c:	f000 f8a2 	bl	800a494 <_fstat_r>
 800a350:	2800      	cmp	r0, #0
 800a352:	dbf2      	blt.n	800a33a <__swhatbuf_r+0x12>
 800a354:	9a01      	ldr	r2, [sp, #4]
 800a356:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a35a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a35e:	425a      	negs	r2, r3
 800a360:	415a      	adcs	r2, r3
 800a362:	602a      	str	r2, [r5, #0]
 800a364:	e7ee      	b.n	800a344 <__swhatbuf_r+0x1c>
 800a366:	2340      	movs	r3, #64	; 0x40
 800a368:	2000      	movs	r0, #0
 800a36a:	6023      	str	r3, [r4, #0]
 800a36c:	b016      	add	sp, #88	; 0x58
 800a36e:	bd70      	pop	{r4, r5, r6, pc}

0800a370 <__smakebuf_r>:
 800a370:	898b      	ldrh	r3, [r1, #12]
 800a372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a374:	079d      	lsls	r5, r3, #30
 800a376:	4606      	mov	r6, r0
 800a378:	460c      	mov	r4, r1
 800a37a:	d507      	bpl.n	800a38c <__smakebuf_r+0x1c>
 800a37c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	6123      	str	r3, [r4, #16]
 800a384:	2301      	movs	r3, #1
 800a386:	6163      	str	r3, [r4, #20]
 800a388:	b002      	add	sp, #8
 800a38a:	bd70      	pop	{r4, r5, r6, pc}
 800a38c:	ab01      	add	r3, sp, #4
 800a38e:	466a      	mov	r2, sp
 800a390:	f7ff ffca 	bl	800a328 <__swhatbuf_r>
 800a394:	9900      	ldr	r1, [sp, #0]
 800a396:	4605      	mov	r5, r0
 800a398:	4630      	mov	r0, r6
 800a39a:	f7fe ff67 	bl	800926c <_malloc_r>
 800a39e:	b948      	cbnz	r0, 800a3b4 <__smakebuf_r+0x44>
 800a3a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3a4:	059a      	lsls	r2, r3, #22
 800a3a6:	d4ef      	bmi.n	800a388 <__smakebuf_r+0x18>
 800a3a8:	f023 0303 	bic.w	r3, r3, #3
 800a3ac:	f043 0302 	orr.w	r3, r3, #2
 800a3b0:	81a3      	strh	r3, [r4, #12]
 800a3b2:	e7e3      	b.n	800a37c <__smakebuf_r+0xc>
 800a3b4:	4b0d      	ldr	r3, [pc, #52]	; (800a3ec <__smakebuf_r+0x7c>)
 800a3b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a3b8:	89a3      	ldrh	r3, [r4, #12]
 800a3ba:	6020      	str	r0, [r4, #0]
 800a3bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c0:	81a3      	strh	r3, [r4, #12]
 800a3c2:	9b00      	ldr	r3, [sp, #0]
 800a3c4:	6163      	str	r3, [r4, #20]
 800a3c6:	9b01      	ldr	r3, [sp, #4]
 800a3c8:	6120      	str	r0, [r4, #16]
 800a3ca:	b15b      	cbz	r3, 800a3e4 <__smakebuf_r+0x74>
 800a3cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	f000 f871 	bl	800a4b8 <_isatty_r>
 800a3d6:	b128      	cbz	r0, 800a3e4 <__smakebuf_r+0x74>
 800a3d8:	89a3      	ldrh	r3, [r4, #12]
 800a3da:	f023 0303 	bic.w	r3, r3, #3
 800a3de:	f043 0301 	orr.w	r3, r3, #1
 800a3e2:	81a3      	strh	r3, [r4, #12]
 800a3e4:	89a0      	ldrh	r0, [r4, #12]
 800a3e6:	4305      	orrs	r5, r0
 800a3e8:	81a5      	strh	r5, [r4, #12]
 800a3ea:	e7cd      	b.n	800a388 <__smakebuf_r+0x18>
 800a3ec:	08009451 	.word	0x08009451

0800a3f0 <memmove>:
 800a3f0:	4288      	cmp	r0, r1
 800a3f2:	b510      	push	{r4, lr}
 800a3f4:	eb01 0402 	add.w	r4, r1, r2
 800a3f8:	d902      	bls.n	800a400 <memmove+0x10>
 800a3fa:	4284      	cmp	r4, r0
 800a3fc:	4623      	mov	r3, r4
 800a3fe:	d807      	bhi.n	800a410 <memmove+0x20>
 800a400:	1e43      	subs	r3, r0, #1
 800a402:	42a1      	cmp	r1, r4
 800a404:	d008      	beq.n	800a418 <memmove+0x28>
 800a406:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a40a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a40e:	e7f8      	b.n	800a402 <memmove+0x12>
 800a410:	4402      	add	r2, r0
 800a412:	4601      	mov	r1, r0
 800a414:	428a      	cmp	r2, r1
 800a416:	d100      	bne.n	800a41a <memmove+0x2a>
 800a418:	bd10      	pop	{r4, pc}
 800a41a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a41e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a422:	e7f7      	b.n	800a414 <memmove+0x24>

0800a424 <_realloc_r>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	4607      	mov	r7, r0
 800a428:	4614      	mov	r4, r2
 800a42a:	460e      	mov	r6, r1
 800a42c:	b921      	cbnz	r1, 800a438 <_realloc_r+0x14>
 800a42e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a432:	4611      	mov	r1, r2
 800a434:	f7fe bf1a 	b.w	800926c <_malloc_r>
 800a438:	b922      	cbnz	r2, 800a444 <_realloc_r+0x20>
 800a43a:	f7fe fec7 	bl	80091cc <_free_r>
 800a43e:	4625      	mov	r5, r4
 800a440:	4628      	mov	r0, r5
 800a442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a444:	f000 f848 	bl	800a4d8 <_malloc_usable_size_r>
 800a448:	42a0      	cmp	r0, r4
 800a44a:	d20f      	bcs.n	800a46c <_realloc_r+0x48>
 800a44c:	4621      	mov	r1, r4
 800a44e:	4638      	mov	r0, r7
 800a450:	f7fe ff0c 	bl	800926c <_malloc_r>
 800a454:	4605      	mov	r5, r0
 800a456:	2800      	cmp	r0, #0
 800a458:	d0f2      	beq.n	800a440 <_realloc_r+0x1c>
 800a45a:	4631      	mov	r1, r6
 800a45c:	4622      	mov	r2, r4
 800a45e:	f7fe fe9f 	bl	80091a0 <memcpy>
 800a462:	4631      	mov	r1, r6
 800a464:	4638      	mov	r0, r7
 800a466:	f7fe feb1 	bl	80091cc <_free_r>
 800a46a:	e7e9      	b.n	800a440 <_realloc_r+0x1c>
 800a46c:	4635      	mov	r5, r6
 800a46e:	e7e7      	b.n	800a440 <_realloc_r+0x1c>

0800a470 <_read_r>:
 800a470:	b538      	push	{r3, r4, r5, lr}
 800a472:	4d07      	ldr	r5, [pc, #28]	; (800a490 <_read_r+0x20>)
 800a474:	4604      	mov	r4, r0
 800a476:	4608      	mov	r0, r1
 800a478:	4611      	mov	r1, r2
 800a47a:	2200      	movs	r2, #0
 800a47c:	602a      	str	r2, [r5, #0]
 800a47e:	461a      	mov	r2, r3
 800a480:	f7f7 fde0 	bl	8002044 <_read>
 800a484:	1c43      	adds	r3, r0, #1
 800a486:	d102      	bne.n	800a48e <_read_r+0x1e>
 800a488:	682b      	ldr	r3, [r5, #0]
 800a48a:	b103      	cbz	r3, 800a48e <_read_r+0x1e>
 800a48c:	6023      	str	r3, [r4, #0]
 800a48e:	bd38      	pop	{r3, r4, r5, pc}
 800a490:	20000e5c 	.word	0x20000e5c

0800a494 <_fstat_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4d07      	ldr	r5, [pc, #28]	; (800a4b4 <_fstat_r+0x20>)
 800a498:	2300      	movs	r3, #0
 800a49a:	4604      	mov	r4, r0
 800a49c:	4608      	mov	r0, r1
 800a49e:	4611      	mov	r1, r2
 800a4a0:	602b      	str	r3, [r5, #0]
 800a4a2:	f7f7 fe14 	bl	80020ce <_fstat>
 800a4a6:	1c43      	adds	r3, r0, #1
 800a4a8:	d102      	bne.n	800a4b0 <_fstat_r+0x1c>
 800a4aa:	682b      	ldr	r3, [r5, #0]
 800a4ac:	b103      	cbz	r3, 800a4b0 <_fstat_r+0x1c>
 800a4ae:	6023      	str	r3, [r4, #0]
 800a4b0:	bd38      	pop	{r3, r4, r5, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20000e5c 	.word	0x20000e5c

0800a4b8 <_isatty_r>:
 800a4b8:	b538      	push	{r3, r4, r5, lr}
 800a4ba:	4d06      	ldr	r5, [pc, #24]	; (800a4d4 <_isatty_r+0x1c>)
 800a4bc:	2300      	movs	r3, #0
 800a4be:	4604      	mov	r4, r0
 800a4c0:	4608      	mov	r0, r1
 800a4c2:	602b      	str	r3, [r5, #0]
 800a4c4:	f7f7 fe13 	bl	80020ee <_isatty>
 800a4c8:	1c43      	adds	r3, r0, #1
 800a4ca:	d102      	bne.n	800a4d2 <_isatty_r+0x1a>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	b103      	cbz	r3, 800a4d2 <_isatty_r+0x1a>
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	bd38      	pop	{r3, r4, r5, pc}
 800a4d4:	20000e5c 	.word	0x20000e5c

0800a4d8 <_malloc_usable_size_r>:
 800a4d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4dc:	1f18      	subs	r0, r3, #4
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	bfbc      	itt	lt
 800a4e2:	580b      	ldrlt	r3, [r1, r0]
 800a4e4:	18c0      	addlt	r0, r0, r3
 800a4e6:	4770      	bx	lr

0800a4e8 <_init>:
 800a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ea:	bf00      	nop
 800a4ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4ee:	bc08      	pop	{r3}
 800a4f0:	469e      	mov	lr, r3
 800a4f2:	4770      	bx	lr

0800a4f4 <_fini>:
 800a4f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f6:	bf00      	nop
 800a4f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4fa:	bc08      	pop	{r3}
 800a4fc:	469e      	mov	lr, r3
 800a4fe:	4770      	bx	lr


psd-ecm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a204  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800a394  0800a394  0001a394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a518  0800a518  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a518  0800a518  0001a518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a520  0800a520  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a520  0800a520  0001a520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a524  0800a524  0001a524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a528  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c60  200001ec  0800a714  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20000e4c  0800a714  00020e4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020acf  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042a0  00000000  00000000  00040ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00044f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  00046398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262d8  00000000  00000000  000475d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001756d  00000000  00000000  0006d8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d01b5  00000000  00000000  00084e1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154fd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf8  00000000  00000000  00155028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a37c 	.word	0x0800a37c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800a37c 	.word	0x0800a37c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_CAN1_Init+0x64>)
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <MX_CAN1_Init+0x68>)
 8000570:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000572:	4b16      	ldr	r3, [pc, #88]	; (80005cc <MX_CAN1_Init+0x64>)
 8000574:	220a      	movs	r2, #10
 8000576:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_CAN1_Init+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MX_CAN1_Init+0x64>)
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_CAN1_Init+0x64>)
 8000586:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800058a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_CAN1_Init+0x64>)
 800058e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000592:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <MX_CAN1_Init+0x64>)
 8000596:	2200      	movs	r2, #0
 8000598:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_CAN1_Init+0x64>)
 800059c:	2200      	movs	r2, #0
 800059e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_CAN1_Init+0x64>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_CAN1_Init+0x64>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <MX_CAN1_Init+0x64>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_CAN1_Init+0x64>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_CAN1_Init+0x64>)
 80005ba:	f001 fe49 	bl	8002250 <HAL_CAN_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005c4:	f001 fb20 	bl	8001c08 <Error_Handler>
  }

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000043c 	.word	0x2000043c
 80005d0:	40006400 	.word	0x40006400

080005d4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <MX_CAN2_Init+0x64>)
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <MX_CAN2_Init+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 50;
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_CAN2_Init+0x64>)
 80005e0:	2232      	movs	r2, #50	; 0x32
 80005e2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <MX_CAN2_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_CAN2_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_CAN2_Init+0x64>)
 80005f2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80005f6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_CAN2_Init+0x64>)
 80005fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005fe:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_CAN2_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_CAN2_Init+0x64>)
 8000608:	2200      	movs	r2, #0
 800060a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <MX_CAN2_Init+0x64>)
 800060e:	2200      	movs	r2, #0
 8000610:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_CAN2_Init+0x64>)
 8000614:	2200      	movs	r2, #0
 8000616:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <MX_CAN2_Init+0x64>)
 800061a:	2200      	movs	r2, #0
 800061c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_CAN2_Init+0x64>)
 8000620:	2200      	movs	r2, #0
 8000622:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_CAN2_Init+0x64>)
 8000626:	f001 fe13 	bl	8002250 <HAL_CAN_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000630:	f001 faea 	bl	8001c08 <Error_Handler>
  }

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200002f4 	.word	0x200002f4
 800063c:	40006800 	.word	0x40006800

08000640 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	; 0x30
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a5b      	ldr	r2, [pc, #364]	; (80007cc <HAL_CAN_MspInit+0x18c>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d14e      	bne.n	8000700 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000662:	4b5b      	ldr	r3, [pc, #364]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	4a59      	ldr	r2, [pc, #356]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 800066a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800066c:	4b58      	ldr	r3, [pc, #352]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d10d      	bne.n	8000690 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
 8000678:	4b56      	ldr	r3, [pc, #344]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a55      	ldr	r2, [pc, #340]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800067e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b53      	ldr	r3, [pc, #332]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800068c:	61bb      	str	r3, [r7, #24]
 800068e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	4b4f      	ldr	r3, [pc, #316]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	4a4e      	ldr	r2, [pc, #312]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6313      	str	r3, [r2, #48]	; 0x30
 80006a0:	4b4c      	ldr	r3, [pc, #304]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ba:	2303      	movs	r3, #3
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006be:	2309      	movs	r3, #9
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4843      	ldr	r0, [pc, #268]	; (80007d8 <HAL_CAN_MspInit+0x198>)
 80006ca:	f002 fd75 	bl	80031b8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	2013      	movs	r0, #19
 80006d4:	f002 fd39 	bl	800314a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80006d8:	2013      	movs	r0, #19
 80006da:	f002 fd52 	bl	8003182 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2103      	movs	r1, #3
 80006e2:	2014      	movs	r0, #20
 80006e4:	f002 fd31 	bl	800314a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006e8:	2014      	movs	r0, #20
 80006ea:	f002 fd4a 	bl	8003182 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 3, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2103      	movs	r1, #3
 80006f2:	2015      	movs	r0, #21
 80006f4:	f002 fd29 	bl	800314a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006f8:	2015      	movs	r0, #21
 80006fa:	f002 fd42 	bl	8003182 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80006fe:	e060      	b.n	80007c2 <HAL_CAN_MspInit+0x182>
  else if(canHandle->Instance==CAN2)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a35      	ldr	r2, [pc, #212]	; (80007dc <HAL_CAN_MspInit+0x19c>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d15b      	bne.n	80007c2 <HAL_CAN_MspInit+0x182>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	4a30      	ldr	r2, [pc, #192]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000714:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000718:	6413      	str	r3, [r2, #64]	; 0x40
 800071a:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	3301      	adds	r3, #1
 800072c:	4a28      	ldr	r2, [pc, #160]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 800072e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d10d      	bne.n	8000754 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a24      	ldr	r2, [pc, #144]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800075e:	f043 0302 	orr.w	r3, r3, #2
 8000762:	6313      	str	r3, [r2, #48]	; 0x30
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000768:	f003 0302 	and.w	r3, r3, #2
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000770:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000782:	2309      	movs	r3, #9
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	4814      	ldr	r0, [pc, #80]	; (80007e0 <HAL_CAN_MspInit+0x1a0>)
 800078e:	f002 fd13 	bl	80031b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 2, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2102      	movs	r1, #2
 8000796:	203f      	movs	r0, #63	; 0x3f
 8000798:	f002 fcd7 	bl	800314a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800079c:	203f      	movs	r0, #63	; 0x3f
 800079e:	f002 fcf0 	bl	8003182 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	2040      	movs	r0, #64	; 0x40
 80007a8:	f002 fccf 	bl	800314a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80007ac:	2040      	movs	r0, #64	; 0x40
 80007ae:	f002 fce8 	bl	8003182 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	2041      	movs	r0, #65	; 0x41
 80007b8:	f002 fcc7 	bl	800314a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80007bc:	2041      	movs	r0, #65	; 0x41
 80007be:	f002 fce0 	bl	8003182 <HAL_NVIC_EnableIRQ>
}
 80007c2:	bf00      	nop
 80007c4:	3730      	adds	r7, #48	; 0x30
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40006400 	.word	0x40006400
 80007d0:	20000208 	.word	0x20000208
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40006800 	.word	0x40006800
 80007e0:	40020400 	.word	0x40020400

080007e4 <CanInit>:
/**
 * @brief: Initialize CAN network
 * @param chosen_network
 *
 **/
void CanInit(CAN_HandleTypeDef chosen_network) {
 80007e4:	b084      	sub	sp, #16
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	f107 0c08 	add.w	ip, r7, #8
 80007ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (HAL_CAN_Start(&chosen_network) != HAL_OK) {
 80007f2:	f107 0008 	add.w	r0, r7, #8
 80007f6:	f001 ff07 	bl	8002608 <HAL_CAN_Start>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <CanInit+0x20>
		Error_Handler();
 8000800:	f001 fa02 	bl	8001c08 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&chosen_network,
 8000804:	2103      	movs	r1, #3
 8000806:	f107 0008 	add.w	r0, r7, #8
 800080a:	f002 f963 	bl	8002ad4 <HAL_CAN_ActivateNotification>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <CanInit+0x34>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 8000814:	f001 f9f8 	bl	8001c08 <Error_Handler>
	}
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000820:	b004      	add	sp, #16
 8000822:	4770      	bx	lr

08000824 <CanSaveReceivedData>:
		Error_Handler();
	}
	CanClearRxDataFrame(ptr_can_rx_frame_template);
}

CanDataFrameInit CanSaveReceivedData(CAN_HandleTypeDef chosen_network, CanDataFrameInit *ptr_can_rx_frame_template) {
 8000824:	b084      	sub	sp, #16
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	f107 0014 	add.w	r0, r7, #20
 8000832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (HAL_CAN_GetRxMessage(&chosen_network, CAN_RX_FIFO0, &ptr_can_rx_frame_template->rx_header,
 8000836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000838:	f103 0220 	add.w	r2, r3, #32
			ptr_can_rx_frame_template->rx_data) != HAL_OK) {
 800083c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800083e:	333c      	adds	r3, #60	; 0x3c
	if (HAL_CAN_GetRxMessage(&chosen_network, CAN_RX_FIFO0, &ptr_can_rx_frame_template->rx_header,
 8000840:	f107 0014 	add.w	r0, r7, #20
 8000844:	2100      	movs	r1, #0
 8000846:	f002 f833 	bl	80028b0 <HAL_CAN_GetRxMessage>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <CanSaveReceivedData+0x30>
		/* Reception Error */
		Error_Handler();
 8000850:	f001 f9da 	bl	8001c08 <Error_Handler>
	}
	return *ptr_can_rx_frame_template;
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000858:	4610      	mov	r0, r2
 800085a:	4619      	mov	r1, r3
 800085c:	2344      	movs	r3, #68	; 0x44
 800085e:	461a      	mov	r2, r3
 8000860:	f008 fbe8 	bl	8009034 <memcpy>
}
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800086e:	b004      	add	sp, #16
 8000870:	4770      	bx	lr
	...

08000874 <CanConfigFilter>:
 * @param can_filter_id_low: Low byte of CAN ID to be received
 * @param can_filter_mask_id_high: High byte of CAN ID mask - IDs to be received
 * @param can_filter_mask_id_low: Low byte of CAN ID mask - IDs to be received
 *
 **/
void CanConfigFilter(CAN_HandleTypeDef chosen_network, uint8_t can_filter_bank){
 8000874:	b084      	sub	sp, #16
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
 800087a:	f107 0c08 	add.w	ip, r7, #8
 800087e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	can_filter_template.FilterBank = can_filter_bank;
 8000882:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000886:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <CanConfigFilter+0x6c>)
 8000888:	6153      	str	r3, [r2, #20]
	can_filter_template.FilterMode = CAN_FILTERMODE_IDMASK;
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <CanConfigFilter+0x6c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
	can_filter_template.FilterScale = CAN_FILTERSCALE_32BIT;
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <CanConfigFilter+0x6c>)
 8000892:	2201      	movs	r2, #1
 8000894:	61da      	str	r2, [r3, #28]
	can_filter_template.FilterIdHigh = 0x0000;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <CanConfigFilter+0x6c>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
	can_filter_template.FilterIdLow = 0x0000;
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <CanConfigFilter+0x6c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
	can_filter_template.FilterMaskIdHigh = 0x0000;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <CanConfigFilter+0x6c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
	can_filter_template.FilterMaskIdLow = 0x0000;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <CanConfigFilter+0x6c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
	can_filter_template.FilterFIFOAssignment = CAN_RX_FIFO0;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <CanConfigFilter+0x6c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
	can_filter_template.FilterActivation = ENABLE;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <CanConfigFilter+0x6c>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	621a      	str	r2, [r3, #32]
	can_filter_template.SlaveStartFilterBank = 14;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <CanConfigFilter+0x6c>)
 80008bc:	220e      	movs	r2, #14
 80008be:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&chosen_network, &can_filter_template) != HAL_OK) {
 80008c0:	4907      	ldr	r1, [pc, #28]	; (80008e0 <CanConfigFilter+0x6c>)
 80008c2:	f107 0008 	add.w	r0, r7, #8
 80008c6:	f001 fdbf 	bl	8002448 <HAL_CAN_ConfigFilter>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <CanConfigFilter+0x60>
		Error_Handler();
 80008d0:	f001 f99a 	bl	8001c08 <Error_Handler>
	}

}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008dc:	b004      	add	sp, #16
 80008de:	4770      	bx	lr
 80008e0:	20000390 	.word	0x20000390

080008e4 <CanSendNmt>:
 * @param node_id: chosen node to receive the order
 * @param ptr_can_frame_template: pointer to a structure with basic can frame parameteres
 *
 */
void CanSendNmt(CAN_HandleTypeDef chosen_network, uint8_t state,
		uint8_t node_id, CanDataFrameInit *ptr_can_frame_template) {
 80008e4:	b084      	sub	sp, #16
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	f107 0c08 	add.w	ip, r7, #8
 80008ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ptr_can_frame_template->tx_header.StdId = 0x000;
 80008f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 80008f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 80008fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = 2;
 8000904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000906:	2202      	movs	r2, #2
 8000908:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 800090a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800090c:	2200      	movs	r2, #0
 800090e:	771a      	strb	r2, [r3, #28]

	ptr_can_frame_template->tx_data[0] = state;
 8000910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000912:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000916:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = node_id;
 8000918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800091a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800091e:	705a      	strb	r2, [r3, #1]

	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000922:	f103 0108 	add.w	r1, r3, #8
			&ptr_can_frame_template->tx_header, ptr_can_frame_template->tx_data,
 8000926:	6bba      	ldr	r2, [r7, #56]	; 0x38
	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <CanSendNmt+0x78>)
 800092a:	f107 0008 	add.w	r0, r7, #8
 800092e:	f001 feaf 	bl	8002690 <HAL_CAN_AddTxMessage>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <CanSendNmt+0x58>
			&can_tx_mailbox) != HAL_OK) {
		Error_Handler();
 8000938:	f001 f966 	bl	8001c08 <Error_Handler>
	}
	while (HAL_CAN_GetTxMailboxesFreeLevel(&chosen_network) != 3) {
 800093c:	bf00      	nop
 800093e:	f107 0008 	add.w	r0, r7, #8
 8000942:	f001 ff80 	bl	8002846 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b03      	cmp	r3, #3
 800094a:	d1f8      	bne.n	800093e <CanSendNmt+0x5a>
	}
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000956:	b004      	add	sp, #16
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	2000021c 	.word	0x2000021c

08000960 <CanSendPdo>:
}

void CanSendPdo(CAN_HandleTypeDef chosen_network, uint32_t frame_pdo_id,
		uint8_t number_of_bytes, CanDataFrameInit *ptr_can_frame_template,
		uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3,
		uint8_t byte4, uint8_t byte5, uint8_t byte6, uint8_t byte7) {
 8000960:	b084      	sub	sp, #16
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
 8000966:	f107 0c08 	add.w	ip, r7, #8
 800096a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ptr_can_frame_template->tx_header.StdId = frame_pdo_id;
 800096e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000972:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 8000974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 800097a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = number_of_bytes;
 8000980:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8000984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000986:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 8000988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800098a:	2200      	movs	r2, #0
 800098c:	771a      	strb	r2, [r3, #28]
	ptr_can_frame_template->tx_data[0] = byte0;
 800098e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000990:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000994:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = byte1;
 8000996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000998:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800099c:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = byte2;
 800099e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009a0:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80009a4:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = byte3;
 80009a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009a8:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80009ac:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = byte4;
 80009ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009b0:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80009b4:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = byte5;
 80009b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009b8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80009bc:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = byte6;
 80009be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009c0:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80009c4:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = byte7;
 80009c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009c8:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80009cc:	71da      	strb	r2, [r3, #7]

	if (HAL_CAN_AddTxMessage(&chosen_network,
 80009ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d0:	f103 0108 	add.w	r1, r3, #8
			&ptr_can_frame_template->tx_header, ptr_can_frame_template->tx_data,
 80009d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
	if (HAL_CAN_AddTxMessage(&chosen_network,
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <CanSendPdo+0xa8>)
 80009d8:	f107 0008 	add.w	r0, r7, #8
 80009dc:	f001 fe58 	bl	8002690 <HAL_CAN_AddTxMessage>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <CanSendPdo+0x8a>
			&can_tx_mailbox) != HAL_OK) {
		Error_Handler();
 80009e6:	f001 f90f 	bl	8001c08 <Error_Handler>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&chosen_network) != 3) {
 80009ea:	bf00      	nop
 80009ec:	f107 0008 	add.w	r0, r7, #8
 80009f0:	f001 ff29 	bl	8002846 <HAL_CAN_GetTxMailboxesFreeLevel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	d1f8      	bne.n	80009ec <CanSendPdo+0x8c>
	}
}
 80009fa:	bf00      	nop
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a04:	b004      	add	sp, #16
 8000a06:	4770      	bx	lr
 8000a08:	2000021c 	.word	0x2000021c

08000a0c <CanSendSdo>:
 *
 **/
void CanSendSdo(CAN_HandleTypeDef chosen_network, uint32_t frame_sdo_id,
		CanDataFrameInit *ptr_can_frame_template, uint8_t number_of_bytes,
		uint8_t command_byte, uint8_t byte0, uint8_t byte1, uint8_t byte2,
		uint8_t byte3, uint8_t byte4, uint8_t byte5, uint8_t byte6) {
 8000a0c:	b084      	sub	sp, #16
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	f107 0c08 	add.w	ip, r7, #8
 8000a16:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ptr_can_frame_template->tx_header.StdId = frame_sdo_id;
 8000a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a1e:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = number_of_bytes;
 8000a2c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a32:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 8000a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a36:	2200      	movs	r2, #0
 8000a38:	771a      	strb	r2, [r3, #28]
	ptr_can_frame_template->tx_data[0] = command_byte;
 8000a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3c:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000a40:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = byte0;
 8000a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a44:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000a48:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = byte1;
 8000a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000a50:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = byte2;
 8000a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a54:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8000a58:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = byte3;
 8000a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a5c:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000a60:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = byte4;
 8000a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a64:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000a68:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = byte5;
 8000a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a6c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8000a70:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = byte6;
 8000a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a74:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8000a78:	71da      	strb	r2, [r3, #7]

	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a7c:	f103 0108 	add.w	r1, r3, #8
			&ptr_can_frame_template->tx_header, ptr_can_frame_template->tx_data,
 8000a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <CanSendSdo+0xa8>)
 8000a84:	f107 0008 	add.w	r0, r7, #8
 8000a88:	f001 fe02 	bl	8002690 <HAL_CAN_AddTxMessage>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <CanSendSdo+0x8a>
			&can_tx_mailbox) != HAL_OK) {
		Error_Handler();
 8000a92:	f001 f8b9 	bl	8001c08 <Error_Handler>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&chosen_network) != 3) {
 8000a96:	bf00      	nop
 8000a98:	f107 0008 	add.w	r0, r7, #8
 8000a9c:	f001 fed3 	bl	8002846 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d1f8      	bne.n	8000a98 <CanSendSdo+0x8c>
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr
 8000ab4:	2000021c 	.word	0x2000021c

08000ab8 <StopCanCommunication>:
			&can_frame_template);
	HAL_Delay(1);
}

void StopCanCommunication()
{
 8000ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aba:	b08b      	sub	sp, #44	; 0x2c
 8000abc:	af0a      	add	r7, sp, #40	; 0x28
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, bms.node_id,
 8000abe:	4b62      	ldr	r3, [pc, #392]	; (8000c48 <StopCanCommunication+0x190>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	4e62      	ldr	r6, [pc, #392]	; (8000c4c <StopCanCommunication+0x194>)
 8000ac4:	4a62      	ldr	r2, [pc, #392]	; (8000c50 <StopCanCommunication+0x198>)
 8000ac6:	9208      	str	r2, [sp, #32]
 8000ac8:	9307      	str	r3, [sp, #28]
 8000aca:	2302      	movs	r3, #2
 8000acc:	9306      	str	r3, [sp, #24]
 8000ace:	466d      	mov	r5, sp
 8000ad0:	f106 0410 	add.w	r4, r6, #16
 8000ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ad8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000adc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ae0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ae4:	f7ff fefe 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f001 fb8d 	bl	8002208 <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, inverter_1.node_id,
 8000aee:	4b59      	ldr	r3, [pc, #356]	; (8000c54 <StopCanCommunication+0x19c>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	4e56      	ldr	r6, [pc, #344]	; (8000c4c <StopCanCommunication+0x194>)
 8000af4:	4a56      	ldr	r2, [pc, #344]	; (8000c50 <StopCanCommunication+0x198>)
 8000af6:	9208      	str	r2, [sp, #32]
 8000af8:	9307      	str	r3, [sp, #28]
 8000afa:	2302      	movs	r3, #2
 8000afc:	9306      	str	r3, [sp, #24]
 8000afe:	466d      	mov	r5, sp
 8000b00:	f106 0410 	add.w	r4, r6, #16
 8000b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b10:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b14:	f7ff fee6 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f001 fb75 	bl	8002208 <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, inverter_2.node_id,
 8000b1e:	4b4e      	ldr	r3, [pc, #312]	; (8000c58 <StopCanCommunication+0x1a0>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4e4a      	ldr	r6, [pc, #296]	; (8000c4c <StopCanCommunication+0x194>)
 8000b24:	4a4a      	ldr	r2, [pc, #296]	; (8000c50 <StopCanCommunication+0x198>)
 8000b26:	9208      	str	r2, [sp, #32]
 8000b28:	9307      	str	r3, [sp, #28]
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	9306      	str	r3, [sp, #24]
 8000b2e:	466d      	mov	r5, sp
 8000b30:	f106 0410 	add.w	r4, r6, #16
 8000b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b40:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b44:	f7ff fece 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f001 fb5d 	bl	8002208 <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, mppt_1.node_id,
 8000b4e:	4b43      	ldr	r3, [pc, #268]	; (8000c5c <StopCanCommunication+0x1a4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	4e3e      	ldr	r6, [pc, #248]	; (8000c4c <StopCanCommunication+0x194>)
 8000b54:	4a3e      	ldr	r2, [pc, #248]	; (8000c50 <StopCanCommunication+0x198>)
 8000b56:	9208      	str	r2, [sp, #32]
 8000b58:	9307      	str	r3, [sp, #28]
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	9306      	str	r3, [sp, #24]
 8000b5e:	466d      	mov	r5, sp
 8000b60:	f106 0410 	add.w	r4, r6, #16
 8000b64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b70:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b74:	f7ff feb6 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f001 fb45 	bl	8002208 <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, mppt_2.node_id,
 8000b7e:	4b38      	ldr	r3, [pc, #224]	; (8000c60 <StopCanCommunication+0x1a8>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	4e32      	ldr	r6, [pc, #200]	; (8000c4c <StopCanCommunication+0x194>)
 8000b84:	4a32      	ldr	r2, [pc, #200]	; (8000c50 <StopCanCommunication+0x198>)
 8000b86:	9208      	str	r2, [sp, #32]
 8000b88:	9307      	str	r3, [sp, #28]
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	9306      	str	r3, [sp, #24]
 8000b8e:	466d      	mov	r5, sp
 8000b90:	f106 0410 	add.w	r4, r6, #16
 8000b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ba0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ba4:	f7ff fe9e 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f001 fb2d 	bl	8002208 <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, mppt_3.node_id,
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <StopCanCommunication+0x1ac>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	4e26      	ldr	r6, [pc, #152]	; (8000c4c <StopCanCommunication+0x194>)
 8000bb4:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <StopCanCommunication+0x198>)
 8000bb6:	9208      	str	r2, [sp, #32]
 8000bb8:	9307      	str	r3, [sp, #28]
 8000bba:	2302      	movs	r3, #2
 8000bbc:	9306      	str	r3, [sp, #24]
 8000bbe:	466d      	mov	r5, sp
 8000bc0:	f106 0410 	add.w	r4, r6, #16
 8000bc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bcc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bd0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000bd4:	f7ff fe86 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f001 fb15 	bl	8002208 <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, lights_controller.node_id,
 8000bde:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <StopCanCommunication+0x1b0>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	4e1a      	ldr	r6, [pc, #104]	; (8000c4c <StopCanCommunication+0x194>)
 8000be4:	4a1a      	ldr	r2, [pc, #104]	; (8000c50 <StopCanCommunication+0x198>)
 8000be6:	9208      	str	r2, [sp, #32]
 8000be8:	9307      	str	r3, [sp, #28]
 8000bea:	2302      	movs	r3, #2
 8000bec:	9306      	str	r3, [sp, #24]
 8000bee:	466d      	mov	r5, sp
 8000bf0:	f106 0410 	add.w	r4, r6, #16
 8000bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c00:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c04:	f7ff fe6e 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f001 fafd 	bl	8002208 <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, dashboard.node_id,
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <StopCanCommunication+0x1b4>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	4e0e      	ldr	r6, [pc, #56]	; (8000c4c <StopCanCommunication+0x194>)
 8000c14:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <StopCanCommunication+0x198>)
 8000c16:	9208      	str	r2, [sp, #32]
 8000c18:	9307      	str	r3, [sp, #28]
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	9306      	str	r3, [sp, #24]
 8000c1e:	466d      	mov	r5, sp
 8000c20:	f106 0410 	add.w	r4, r6, #16
 8000c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c30:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c34:	f7ff fe56 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f001 fae5 	bl	8002208 <HAL_Delay>
}
 8000c3e:	bf00      	nop
 8000c40:	3704      	adds	r7, #4
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200002d4 	.word	0x200002d4
 8000c4c:	2000043c 	.word	0x2000043c
 8000c50:	20000274 	.word	0x20000274
 8000c54:	20000354 	.word	0x20000354
 8000c58:	20000420 	.word	0x20000420
 8000c5c:	20000258 	.word	0x20000258
 8000c60:	20000404 	.word	0x20000404
 8000c64:	2000031c 	.word	0x2000031c
 8000c68:	200002b8 	.word	0x200002b8
 8000c6c:	20000338 	.word	0x20000338

08000c70 <CanClearTxDataFrame>:
 * @brief: data sent over usb is not correctly shown when structure is not cleared
 *         after every message sent. Assigning zeros has no influence on the network
 * @param ptr_can_frame_template: chosen structure which helds all the data
 *
 **/
void CanClearTxDataFrame(CanDataFrameInit *ptr_can_frame_template) {
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	ptr_can_frame_template->tx_header.StdId = 0x00;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = 0;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	771a      	strb	r2, [r3, #28]

	ptr_can_frame_template->tx_data[0] = 0x0;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = 0x0;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = 0x0;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = 0x0;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = 0x0;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = 0x0;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = 0x0;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = 0x0;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	71da      	strb	r2, [r3, #7]
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <testMath>:
	}
}

/*My math mini library BEGIN*/
void testMath(int to_test)
{
 8000cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cd6:	b095      	sub	sp, #84	; 0x54
 8000cd8:	af12      	add	r7, sp, #72	; 0x48
 8000cda:	6078      	str	r0, [r7, #4]
	if(to_test == 3000){
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d123      	bne.n	8000d2e <testMath+0x5a>
		CanSendPdo(hcan1, 0x69, 2, &can_frame_template, 6, 9, 0, 0, 0, 0, 0, 0);
 8000ce6:	4e14      	ldr	r6, [pc, #80]	; (8000d38 <testMath+0x64>)
 8000ce8:	2300      	movs	r3, #0
 8000cea:	9310      	str	r3, [sp, #64]	; 0x40
 8000cec:	2300      	movs	r3, #0
 8000cee:	930f      	str	r3, [sp, #60]	; 0x3c
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	930e      	str	r3, [sp, #56]	; 0x38
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	930d      	str	r3, [sp, #52]	; 0x34
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	930c      	str	r3, [sp, #48]	; 0x30
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8000d00:	2309      	movs	r3, #9
 8000d02:	930a      	str	r3, [sp, #40]	; 0x28
 8000d04:	2306      	movs	r3, #6
 8000d06:	9309      	str	r3, [sp, #36]	; 0x24
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <testMath+0x68>)
 8000d0a:	9308      	str	r3, [sp, #32]
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	9307      	str	r3, [sp, #28]
 8000d10:	2369      	movs	r3, #105	; 0x69
 8000d12:	9306      	str	r3, [sp, #24]
 8000d14:	466d      	mov	r5, sp
 8000d16:	f106 0410 	add.w	r4, r6, #16
 8000d1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d22:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d26:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d2a:	f7ff fe19 	bl	8000960 <CanSendPdo>
	}
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2000043c 	.word	0x2000043c
 8000d3c:	20000274 	.word	0x20000274

08000d40 <unParse2Bytes>:

int unParse2Bytes(uint8_t lowerByte, uint8_t higherByte)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	460a      	mov	r2, r1
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	71bb      	strb	r3, [r7, #6]
	int cas = ((int)lowerByte + (int)higherByte * byteMaxValue);
 8000d50:	79fa      	ldrb	r2, [r7, #7]
 8000d52:	79bb      	ldrb	r3, [r7, #6]
 8000d54:	021b      	lsls	r3, r3, #8
 8000d56:	4413      	add	r3, r2
 8000d58:	60fb      	str	r3, [r7, #12]
	return cas;
 8000d5a:	68fb      	ldr	r3, [r7, #12]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <ReverseManagement>:
	}
}


void ReverseManagement(CanDataFrameInit *canFrame)
{
 8000d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d6a:	b095      	sub	sp, #84	; 0x54
 8000d6c:	af12      	add	r7, sp, #72	; 0x48
 8000d6e:	6078      	str	r0, [r7, #4]
	if(canFrame->rx_header.StdId == 0x90)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a1b      	ldr	r3, [r3, #32]
 8000d74:	2b90      	cmp	r3, #144	; 0x90
 8000d76:	d15d      	bne.n	8000e34 <ReverseManagement+0xcc>
	{
		if(canFrame->rx_data[0] == 0x4)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d7e:	2b04      	cmp	r3, #4
 8000d80:	d125      	bne.n	8000dce <ReverseManagement+0x66>
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <ReverseManagement+0xd4>)
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	4e2e      	ldr	r6, [pc, #184]	; (8000e40 <ReverseManagement+0xd8>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	9210      	str	r2, [sp, #64]	; 0x40
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	920f      	str	r2, [sp, #60]	; 0x3c
 8000d90:	2200      	movs	r2, #0
 8000d92:	920e      	str	r2, [sp, #56]	; 0x38
 8000d94:	2200      	movs	r2, #0
 8000d96:	920d      	str	r2, [sp, #52]	; 0x34
 8000d98:	2200      	movs	r2, #0
 8000d9a:	920c      	str	r2, [sp, #48]	; 0x30
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	920b      	str	r2, [sp, #44]	; 0x2c
 8000da0:	2204      	movs	r2, #4
 8000da2:	920a      	str	r2, [sp, #40]	; 0x28
 8000da4:	2240      	movs	r2, #64	; 0x40
 8000da6:	9209      	str	r2, [sp, #36]	; 0x24
 8000da8:	2203      	movs	r2, #3
 8000daa:	9208      	str	r2, [sp, #32]
 8000dac:	4a25      	ldr	r2, [pc, #148]	; (8000e44 <ReverseManagement+0xdc>)
 8000dae:	9207      	str	r2, [sp, #28]
 8000db0:	9306      	str	r3, [sp, #24]
 8000db2:	466d      	mov	r5, sp
 8000db4:	f106 0410 	add.w	r4, r6, #16
 8000db8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000dc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dc4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000dc8:	f7ff fe20 	bl	8000a0c <CanSendSdo>
		else if(canFrame->rx_data[0] == 0x0)
		{
			error = true;
		}
	}
}
 8000dcc:	e032      	b.n	8000e34 <ReverseManagement+0xcc>
		else if (canFrame->rx_data[0] == 0x3)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d125      	bne.n	8000e24 <ReverseManagement+0xbc>
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <ReverseManagement+0xd4>)
 8000dda:	691b      	ldr	r3, [r3, #16]
 8000ddc:	4e18      	ldr	r6, [pc, #96]	; (8000e40 <ReverseManagement+0xd8>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	9210      	str	r2, [sp, #64]	; 0x40
 8000de2:	2200      	movs	r2, #0
 8000de4:	920f      	str	r2, [sp, #60]	; 0x3c
 8000de6:	2200      	movs	r2, #0
 8000de8:	920e      	str	r2, [sp, #56]	; 0x38
 8000dea:	2200      	movs	r2, #0
 8000dec:	920d      	str	r2, [sp, #52]	; 0x34
 8000dee:	2200      	movs	r2, #0
 8000df0:	920c      	str	r2, [sp, #48]	; 0x30
 8000df2:	2200      	movs	r2, #0
 8000df4:	920b      	str	r2, [sp, #44]	; 0x2c
 8000df6:	2204      	movs	r2, #4
 8000df8:	920a      	str	r2, [sp, #40]	; 0x28
 8000dfa:	2240      	movs	r2, #64	; 0x40
 8000dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8000dfe:	2203      	movs	r2, #3
 8000e00:	9208      	str	r2, [sp, #32]
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <ReverseManagement+0xdc>)
 8000e04:	9207      	str	r2, [sp, #28]
 8000e06:	9306      	str	r3, [sp, #24]
 8000e08:	466d      	mov	r5, sp
 8000e0a:	f106 0410 	add.w	r4, r6, #16
 8000e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e16:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e1a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000e1e:	f7ff fdf5 	bl	8000a0c <CanSendSdo>
}
 8000e22:	e007      	b.n	8000e34 <ReverseManagement+0xcc>
		else if(canFrame->rx_data[0] == 0x0)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d102      	bne.n	8000e34 <ReverseManagement+0xcc>
			error = true;
 8000e2e:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <ReverseManagement+0xe0>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	701a      	strb	r2, [r3, #0]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e3c:	200002b8 	.word	0x200002b8
 8000e40:	200002f4 	.word	0x200002f4
 8000e44:	20000274 	.word	0x20000274
 8000e48:	20000400 	.word	0x20000400

08000e4c <BMSWarningHandler>:

void BMSWarningHandler(CanDataFrameInit *canFrame)
{
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4e:	b095      	sub	sp, #84	; 0x54
 8000e50:	af12      	add	r7, sp, #72	; 0x48
 8000e52:	6078      	str	r0, [r7, #4]
	if(canFrame->rx_header.StdId == 0x86)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6a1b      	ldr	r3, [r3, #32]
 8000e58:	2b86      	cmp	r3, #134	; 0x86
 8000e5a:	d144      	bne.n	8000ee6 <BMSWarningHandler+0x9a>
	{
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
				0x01 & canFrame->rx_data[0],
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	b2db      	uxtb	r3, r3
				(0x02 & canFrame->rx_data[0]) >> 1,
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8000e6e:	0852      	lsrs	r2, r2, #1
 8000e70:	b2d2      	uxtb	r2, r2
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
 8000e72:	f002 0201 	and.w	r2, r2, #1
 8000e76:	b2d2      	uxtb	r2, r2
				(0x04 & canFrame->rx_data[0]) >> 2,
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 8000e7e:	0889      	lsrs	r1, r1, #2
 8000e80:	b2c9      	uxtb	r1, r1
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
 8000e82:	f001 0101 	and.w	r1, r1, #1
 8000e86:	b2c9      	uxtb	r1, r1
				(0x08 & canFrame->rx_data[0]) >> 3,
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8000e8e:	08c0      	lsrs	r0, r0, #3
 8000e90:	b2c0      	uxtb	r0, r0
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
 8000e92:	f000 0001 	and.w	r0, r0, #1
 8000e96:	b2c0      	uxtb	r0, r0
				(0x10 & canFrame->rx_data[0]) >> 4,
 8000e98:	687c      	ldr	r4, [r7, #4]
 8000e9a:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 8000e9e:	0924      	lsrs	r4, r4, #4
 8000ea0:	b2e4      	uxtb	r4, r4
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
 8000ea2:	f004 0401 	and.w	r4, r4, #1
 8000ea6:	b2e4      	uxtb	r4, r4
 8000ea8:	4e11      	ldr	r6, [pc, #68]	; (8000ef0 <BMSWarningHandler+0xa4>)
 8000eaa:	2500      	movs	r5, #0
 8000eac:	9510      	str	r5, [sp, #64]	; 0x40
 8000eae:	2500      	movs	r5, #0
 8000eb0:	950f      	str	r5, [sp, #60]	; 0x3c
 8000eb2:	2500      	movs	r5, #0
 8000eb4:	950e      	str	r5, [sp, #56]	; 0x38
 8000eb6:	940d      	str	r4, [sp, #52]	; 0x34
 8000eb8:	900c      	str	r0, [sp, #48]	; 0x30
 8000eba:	910b      	str	r1, [sp, #44]	; 0x2c
 8000ebc:	920a      	str	r2, [sp, #40]	; 0x28
 8000ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <BMSWarningHandler+0xa8>)
 8000ec2:	9308      	str	r3, [sp, #32]
 8000ec4:	2308      	movs	r3, #8
 8000ec6:	9307      	str	r3, [sp, #28]
 8000ec8:	2387      	movs	r3, #135	; 0x87
 8000eca:	9306      	str	r3, [sp, #24]
 8000ecc:	466d      	mov	r5, sp
 8000ece:	f106 0410 	add.w	r4, r6, #16
 8000ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000eda:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ede:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ee2:	f7ff fd3d 	bl	8000960 <CanSendPdo>
				0, 0, 0);
	}
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000043c 	.word	0x2000043c
 8000ef4:	20000274 	.word	0x20000274

08000ef8 <ActUponCurrentAndVoltage>:

}

/*CHARGING ACTIONS BEGIN*/
void ActUponCurrentAndVoltage(CanDataFrameInit *canFrame, int maxVoltage, int maxCurrent)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
	int voltage = unParse2Bytes(canFrame->rx_data[1], canFrame->rx_data[0]);
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f10:	4619      	mov	r1, r3
 8000f12:	4610      	mov	r0, r2
 8000f14:	f7ff ff14 	bl	8000d40 <unParse2Bytes>
 8000f18:	6178      	str	r0, [r7, #20]
	int current = unParse2Bytes(canFrame->rx_data[3], canFrame->rx_data[2]);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000f26:	4619      	mov	r1, r3
 8000f28:	4610      	mov	r0, r2
 8000f2a:	f7ff ff09 	bl	8000d40 <unParse2Bytes>
 8000f2e:	6138      	str	r0, [r7, #16]
	testMath(voltage);
 8000f30:	6978      	ldr	r0, [r7, #20]
 8000f32:	f7ff fecf 	bl	8000cd4 <testMath>
	error = ( (voltage>maxVoltage) || (current>maxCurrent) );
 8000f36:	697a      	ldr	r2, [r7, #20]
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	dc03      	bgt.n	8000f46 <ActUponCurrentAndVoltage+0x4e>
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dd01      	ble.n	8000f4a <ActUponCurrentAndVoltage+0x52>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <ActUponCurrentAndVoltage+0x54>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b03      	ldr	r3, [pc, #12]	; (8000f60 <ActUponCurrentAndVoltage+0x68>)
 8000f54:	701a      	strb	r2, [r3, #0]
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000400 	.word	0x20000400

08000f64 <CatchChargingErrorOccuring>:

void CatchChargingErrorOccuring(CanDataFrameInit *canFrame)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	error = ( canFrame->rx_data[4] != 0 );
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	bf14      	ite	ne
 8000f76:	2301      	movne	r3, #1
 8000f78:	2300      	moveq	r3, #0
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <CatchChargingErrorOccuring+0x28>)
 8000f7e:	701a      	strb	r2, [r3, #0]
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	20000400 	.word	0x20000400

08000f90 <CatchErrorOccuring>:
/*CHARGING ACTIONS END*/

/*DRIVING ACTIONS BEGIN*/
void CatchErrorOccuring(CanDataFrameInit *canFrame)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	/* BMS Errors handling */
	if( (canFrame->rx_header.StdId == 0x85) )
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6a1b      	ldr	r3, [r3, #32]
 8000f9c:	2b85      	cmp	r3, #133	; 0x85
 8000f9e:	d104      	bne.n	8000faa <CatchErrorOccuring+0x1a>
	{
		error = true;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <CatchErrorOccuring+0x24>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	701a      	strb	r2, [r3, #0]
		StopCanCommunication();
 8000fa6:	f7ff fd87 	bl	8000ab8 <StopCanCommunication>
	}
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000400 	.word	0x20000400

08000fb8 <WarningHandler>:

void WarningHandler(CanDataFrameInit *canFrame)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	if(canFrame->rx_header.StdId == 0x55)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	2b55      	cmp	r3, #85	; 0x55
 8000fc6:	d109      	bne.n	8000fdc <WarningHandler+0x24>
	{
		SendErrorFrame(canFrame->rx_data[1], canFrame->rx_data[2]);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4610      	mov	r0, r2
 8000fd8:	f000 f804 	bl	8000fe4 <SendErrorFrame>
	}
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <SendErrorFrame>:

void SendErrorFrame(uint8_t highCondition, uint8_t lowCondition)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af06      	add	r7, sp, #24
 8000fea:	4603      	mov	r3, r0
 8000fec:	460a      	mov	r2, r1
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	71bb      	strb	r3, [r7, #6]
	if( (highCondition >= 0x01) && (lowCondition>=0xD0) )
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d013      	beq.n	8001022 <SendErrorFrame+0x3e>
 8000ffa:	79bb      	ldrb	r3, [r7, #6]
 8000ffc:	2bcf      	cmp	r3, #207	; 0xcf
 8000ffe:	d910      	bls.n	8001022 <SendErrorFrame+0x3e>
	{
		UsbTransferDataByte(0x56, 0x01, 0x0, 0, 0, 0, 0, 0, 0);
 8001000:	2300      	movs	r3, #0
 8001002:	9304      	str	r3, [sp, #16]
 8001004:	2300      	movs	r3, #0
 8001006:	9303      	str	r3, [sp, #12]
 8001008:	2300      	movs	r3, #0
 800100a:	9302      	str	r3, [sp, #8]
 800100c:	2300      	movs	r3, #0
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	2300      	movs	r3, #0
 8001012:	9300      	str	r3, [sp, #0]
 8001014:	2300      	movs	r3, #0
 8001016:	2200      	movs	r2, #0
 8001018:	2101      	movs	r1, #1
 800101a:	2056      	movs	r0, #86	; 0x56
 800101c:	f007 fb82 	bl	8008724 <UsbTransferDataByte>
 8001020:	e010      	b.n	8001044 <SendErrorFrame+0x60>
	}
	else
	{
		UsbTransferDataByte(0x56, 0x0, 0x0, 0, 0, 0, 0, 0, 0);
 8001022:	2300      	movs	r3, #0
 8001024:	9304      	str	r3, [sp, #16]
 8001026:	2300      	movs	r3, #0
 8001028:	9303      	str	r3, [sp, #12]
 800102a:	2300      	movs	r3, #0
 800102c:	9302      	str	r3, [sp, #8]
 800102e:	2300      	movs	r3, #0
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	2300      	movs	r3, #0
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2300      	movs	r3, #0
 8001038:	2200      	movs	r2, #0
 800103a:	2100      	movs	r1, #0
 800103c:	2056      	movs	r0, #86	; 0x56
 800103e:	f007 fb71 	bl	8008724 <UsbTransferDataByte>
	}
}
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <CanopenObjectDictInit>:
  ******************************************************************************
  */

#include <canopen_object_dict.h>

void CanopenObjectDictInit() {
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
	dashboard.node_id = 0x70;
 8001050:	4b47      	ldr	r3, [pc, #284]	; (8001170 <CanopenObjectDictInit+0x124>)
 8001052:	2270      	movs	r2, #112	; 0x70
 8001054:	701a      	strb	r2, [r3, #0]
	dashboard.sdo_download_id = 0x581;		// Channel with ecm
 8001056:	4b46      	ldr	r3, [pc, #280]	; (8001170 <CanopenObjectDictInit+0x124>)
 8001058:	f240 5281 	movw	r2, #1409	; 0x581
 800105c:	60da      	str	r2, [r3, #12]
	dashboard.emcy_id = 0xF0;
 800105e:	4b44      	ldr	r3, [pc, #272]	; (8001170 <CanopenObjectDictInit+0x124>)
 8001060:	22f0      	movs	r2, #240	; 0xf0
 8001062:	761a      	strb	r2, [r3, #24]

	inverter_1.node_id = 0x10;
 8001064:	4b43      	ldr	r3, [pc, #268]	; (8001174 <CanopenObjectDictInit+0x128>)
 8001066:	2210      	movs	r2, #16
 8001068:	701a      	strb	r2, [r3, #0]
	inverter_1.pdo_producer_id = 0x290;	// 0x290 - 0x296 Channel with ecm
 800106a:	4b42      	ldr	r3, [pc, #264]	; (8001174 <CanopenObjectDictInit+0x128>)
 800106c:	f44f 7224 	mov.w	r2, #656	; 0x290
 8001070:	615a      	str	r2, [r3, #20]
	inverter_1.emcy_id = 0x90;
 8001072:	4b40      	ldr	r3, [pc, #256]	; (8001174 <CanopenObjectDictInit+0x128>)
 8001074:	2290      	movs	r2, #144	; 0x90
 8001076:	761a      	strb	r2, [r3, #24]

	inverter_2.node_id = 0x15;
 8001078:	4b3f      	ldr	r3, [pc, #252]	; (8001178 <CanopenObjectDictInit+0x12c>)
 800107a:	2215      	movs	r2, #21
 800107c:	701a      	strb	r2, [r3, #0]
	inverter_2.pdo_producer_id = 0x395;	// 0x395 - 0x401 Channel with ecm
 800107e:	4b3e      	ldr	r3, [pc, #248]	; (8001178 <CanopenObjectDictInit+0x12c>)
 8001080:	f240 3295 	movw	r2, #917	; 0x395
 8001084:	615a      	str	r2, [r3, #20]
	inverter_2.emcy_id = 0x95;
 8001086:	4b3c      	ldr	r3, [pc, #240]	; (8001178 <CanopenObjectDictInit+0x12c>)
 8001088:	2295      	movs	r2, #149	; 0x95
 800108a:	761a      	strb	r2, [r3, #24]

	mppt_1.node_id = 0x33;
 800108c:	4b3b      	ldr	r3, [pc, #236]	; (800117c <CanopenObjectDictInit+0x130>)
 800108e:	2233      	movs	r2, #51	; 0x33
 8001090:	701a      	strb	r2, [r3, #0]
	mppt_1.sdo_upload_id = 0x633;		// Channel with ecm
 8001092:	4b3a      	ldr	r3, [pc, #232]	; (800117c <CanopenObjectDictInit+0x130>)
 8001094:	f240 6233 	movw	r2, #1587	; 0x633
 8001098:	609a      	str	r2, [r3, #8]
	mppt_1.sdo_download_id = 0x5B3;
 800109a:	4b38      	ldr	r3, [pc, #224]	; (800117c <CanopenObjectDictInit+0x130>)
 800109c:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80010a0:	60da      	str	r2, [r3, #12]
	mppt_1.emcy_id = 0xB3;
 80010a2:	4b36      	ldr	r3, [pc, #216]	; (800117c <CanopenObjectDictInit+0x130>)
 80010a4:	22b3      	movs	r2, #179	; 0xb3
 80010a6:	761a      	strb	r2, [r3, #24]
	mppt_1.index = 0xAAAB;
 80010a8:	4b34      	ldr	r3, [pc, #208]	; (800117c <CanopenObjectDictInit+0x130>)
 80010aa:	f64a 22ab 	movw	r2, #43691	; 0xaaab
 80010ae:	805a      	strh	r2, [r3, #2]
	mppt_1.subindex_1 = 0x01;
 80010b0:	4b32      	ldr	r3, [pc, #200]	; (800117c <CanopenObjectDictInit+0x130>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	711a      	strb	r2, [r3, #4]
	mppt_1.subindex_2 = 0x02;
 80010b6:	4b31      	ldr	r3, [pc, #196]	; (800117c <CanopenObjectDictInit+0x130>)
 80010b8:	2202      	movs	r2, #2
 80010ba:	715a      	strb	r2, [r3, #5]
	mppt_1.subindex_3 = 0x03;			// 0x01 - 0x03
 80010bc:	4b2f      	ldr	r3, [pc, #188]	; (800117c <CanopenObjectDictInit+0x130>)
 80010be:	2203      	movs	r2, #3
 80010c0:	719a      	strb	r2, [r3, #6]

	mppt_2.node_id = 0x36;
 80010c2:	4b2f      	ldr	r3, [pc, #188]	; (8001180 <CanopenObjectDictInit+0x134>)
 80010c4:	2236      	movs	r2, #54	; 0x36
 80010c6:	701a      	strb	r2, [r3, #0]
	mppt_2.sdo_upload_id = 0x636;		// Channel with ecm
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <CanopenObjectDictInit+0x134>)
 80010ca:	f240 6236 	movw	r2, #1590	; 0x636
 80010ce:	609a      	str	r2, [r3, #8]
	mppt_2.sdo_download_id = 0x5B6;
 80010d0:	4b2b      	ldr	r3, [pc, #172]	; (8001180 <CanopenObjectDictInit+0x134>)
 80010d2:	f240 52b6 	movw	r2, #1462	; 0x5b6
 80010d6:	60da      	str	r2, [r3, #12]
	mppt_2.emcy_id = 0xB6;
 80010d8:	4b29      	ldr	r3, [pc, #164]	; (8001180 <CanopenObjectDictInit+0x134>)
 80010da:	22b6      	movs	r2, #182	; 0xb6
 80010dc:	761a      	strb	r2, [r3, #24]
	mppt_2.index = 0xAAAA;
 80010de:	4b28      	ldr	r3, [pc, #160]	; (8001180 <CanopenObjectDictInit+0x134>)
 80010e0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80010e4:	805a      	strh	r2, [r3, #2]
	mppt_2.subindex_1 = 0x01;
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <CanopenObjectDictInit+0x134>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	711a      	strb	r2, [r3, #4]
	mppt_2.subindex_2 = 0x02;
 80010ec:	4b24      	ldr	r3, [pc, #144]	; (8001180 <CanopenObjectDictInit+0x134>)
 80010ee:	2202      	movs	r2, #2
 80010f0:	715a      	strb	r2, [r3, #5]
	mppt_2.subindex_3 = 0x03;			// 0x01 - 0x03
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <CanopenObjectDictInit+0x134>)
 80010f4:	2203      	movs	r2, #3
 80010f6:	719a      	strb	r2, [r3, #6]

	mppt_3.node_id = 0x39;
 80010f8:	4b22      	ldr	r3, [pc, #136]	; (8001184 <CanopenObjectDictInit+0x138>)
 80010fa:	2239      	movs	r2, #57	; 0x39
 80010fc:	701a      	strb	r2, [r3, #0]
	mppt_3.sdo_upload_id = 0x639;		// Channel with ecm
 80010fe:	4b21      	ldr	r3, [pc, #132]	; (8001184 <CanopenObjectDictInit+0x138>)
 8001100:	f240 6239 	movw	r2, #1593	; 0x639
 8001104:	609a      	str	r2, [r3, #8]
	mppt_3.sdo_download_id = 0x5B9;
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <CanopenObjectDictInit+0x138>)
 8001108:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800110c:	60da      	str	r2, [r3, #12]
	mppt_3.emcy_id = 0xB9;
 800110e:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <CanopenObjectDictInit+0x138>)
 8001110:	22b9      	movs	r2, #185	; 0xb9
 8001112:	761a      	strb	r2, [r3, #24]
	mppt_3.index = 0xAAAA;
 8001114:	4b1b      	ldr	r3, [pc, #108]	; (8001184 <CanopenObjectDictInit+0x138>)
 8001116:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800111a:	805a      	strh	r2, [r3, #2]
	mppt_3.subindex_1 = 0x01;
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <CanopenObjectDictInit+0x138>)
 800111e:	2201      	movs	r2, #1
 8001120:	711a      	strb	r2, [r3, #4]
	mppt_3.subindex_2 = 0x02;
 8001122:	4b18      	ldr	r3, [pc, #96]	; (8001184 <CanopenObjectDictInit+0x138>)
 8001124:	2202      	movs	r2, #2
 8001126:	715a      	strb	r2, [r3, #5]
	mppt_3.subindex_3 = 0x03; 			// 0x01 - 0x03
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <CanopenObjectDictInit+0x138>)
 800112a:	2203      	movs	r2, #3
 800112c:	719a      	strb	r2, [r3, #6]

	ecm.node_id = 0x01;
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <CanopenObjectDictInit+0x13c>)
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
	ecm.sdo_upload_id = 0x581;
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <CanopenObjectDictInit+0x13c>)
 8001136:	f240 5281 	movw	r2, #1409	; 0x581
 800113a:	609a      	str	r2, [r3, #8]
	ecm.emcy_id = 0x81;
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <CanopenObjectDictInit+0x13c>)
 800113e:	2281      	movs	r2, #129	; 0x81
 8001140:	761a      	strb	r2, [r3, #24]

	bms.node_id = 0x05;
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <CanopenObjectDictInit+0x140>)
 8001144:	2205      	movs	r2, #5
 8001146:	701a      	strb	r2, [r3, #0]
	bms.pdo_producer_id = 0x185;			// 0x185 - 0x196
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <CanopenObjectDictInit+0x140>)
 800114a:	f240 1285 	movw	r2, #389	; 0x185
 800114e:	615a      	str	r2, [r3, #20]
	bms.emcy_id = 0x85;
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <CanopenObjectDictInit+0x140>)
 8001152:	2285      	movs	r2, #133	; 0x85
 8001154:	761a      	strb	r2, [r3, #24]

	lights_controller.node_id = 0x50;
 8001156:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <CanopenObjectDictInit+0x144>)
 8001158:	2250      	movs	r2, #80	; 0x50
 800115a:	701a      	strb	r2, [r3, #0]
	lights_controller.pdo_consumer_id = 0x581;
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <CanopenObjectDictInit+0x144>)
 800115e:	f240 5281 	movw	r2, #1409	; 0x581
 8001162:	611a      	str	r2, [r3, #16]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	20000338 	.word	0x20000338
 8001174:	20000354 	.word	0x20000354
 8001178:	20000420 	.word	0x20000420
 800117c:	20000258 	.word	0x20000258
 8001180:	20000404 	.word	0x20000404
 8001184:	2000031c 	.word	0x2000031c
 8001188:	20000220 	.word	0x20000220
 800118c:	200002d4 	.word	0x200002d4
 8001190:	200002b8 	.word	0x200002b8

08001194 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08c      	sub	sp, #48	; 0x30
 8001198:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 031c 	add.w	r3, r7, #28
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
 80011ae:	4b79      	ldr	r3, [pc, #484]	; (8001394 <MX_GPIO_Init+0x200>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a78      	ldr	r2, [pc, #480]	; (8001394 <MX_GPIO_Init+0x200>)
 80011b4:	f043 0310 	orr.w	r3, r3, #16
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b76      	ldr	r3, [pc, #472]	; (8001394 <MX_GPIO_Init+0x200>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	61bb      	str	r3, [r7, #24]
 80011c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	4b72      	ldr	r3, [pc, #456]	; (8001394 <MX_GPIO_Init+0x200>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a71      	ldr	r2, [pc, #452]	; (8001394 <MX_GPIO_Init+0x200>)
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b6f      	ldr	r3, [pc, #444]	; (8001394 <MX_GPIO_Init+0x200>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	4b6b      	ldr	r3, [pc, #428]	; (8001394 <MX_GPIO_Init+0x200>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a6a      	ldr	r2, [pc, #424]	; (8001394 <MX_GPIO_Init+0x200>)
 80011ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b68      	ldr	r3, [pc, #416]	; (8001394 <MX_GPIO_Init+0x200>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	4b64      	ldr	r3, [pc, #400]	; (8001394 <MX_GPIO_Init+0x200>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a63      	ldr	r2, [pc, #396]	; (8001394 <MX_GPIO_Init+0x200>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b61      	ldr	r3, [pc, #388]	; (8001394 <MX_GPIO_Init+0x200>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	4b5d      	ldr	r3, [pc, #372]	; (8001394 <MX_GPIO_Init+0x200>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a5c      	ldr	r2, [pc, #368]	; (8001394 <MX_GPIO_Init+0x200>)
 8001224:	f043 0308 	orr.w	r3, r3, #8
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b5a      	ldr	r3, [pc, #360]	; (8001394 <MX_GPIO_Init+0x200>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	4b56      	ldr	r3, [pc, #344]	; (8001394 <MX_GPIO_Init+0x200>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a55      	ldr	r2, [pc, #340]	; (8001394 <MX_GPIO_Init+0x200>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b53      	ldr	r3, [pc, #332]	; (8001394 <MX_GPIO_Init+0x200>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	607b      	str	r3, [r7, #4]
 8001250:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_D4_Pin|LED_D5_Pin|LED_D6_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001258:	484f      	ldr	r0, [pc, #316]	; (8001398 <MX_GPIO_Init+0x204>)
 800125a:	f002 f961 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PWM1_BLACK_UPS_RELAY_Pin|PWM2_WHITE_MAIN_RELAY_Pin|PWM3_BROWN_CHARGER_RELAY_Pin|PWM4_BLUE_ENABLE_RELAYS_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001264:	484d      	ldr	r0, [pc, #308]	; (800139c <MX_GPIO_Init+0x208>)
 8001266:	f002 f95b 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN1_RS_GPIO_Port, CAN1_RS_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001270:	484b      	ldr	r0, [pc, #300]	; (80013a0 <MX_GPIO_Init+0x20c>)
 8001272:	f002 f955 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN2_RS_GPIO_Port, CAN2_RS_Pin, GPIO_PIN_RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2180      	movs	r1, #128	; 0x80
 800127a:	484a      	ldr	r0, [pc, #296]	; (80013a4 <MX_GPIO_Init+0x210>)
 800127c:	f002 f950 	bl	8003520 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = OPTO_INPUT2_Pin|OPTO_INPUT3_Pin|OPTO_INPUT4_Pin|OPTO_INPUT5_Pin
 8001280:	f240 73fe 	movw	r3, #2046	; 0x7fe
 8001284:	61fb      	str	r3, [r7, #28]
                          |OPTO_INPUT6_Pin|OPTO_INPUT7_Pin|OPTO_INPUT8_Pin|OPTO_INPUT9_Pin
                          |OPTO_INPUT10_Pin|OPTO_INPUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001286:	4b48      	ldr	r3, [pc, #288]	; (80013a8 <MX_GPIO_Init+0x214>)
 8001288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	4619      	mov	r1, r3
 8001294:	4845      	ldr	r0, [pc, #276]	; (80013ac <MX_GPIO_Init+0x218>)
 8001296:	f001 ff8f 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_D4_Pin|LED_D5_Pin|LED_D6_Pin;
 800129a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	2301      	movs	r3, #1
 80012a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	4619      	mov	r1, r3
 80012b2:	4839      	ldr	r0, [pc, #228]	; (8001398 <MX_GPIO_Init+0x204>)
 80012b4:	f001 ff80 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = OPTO_INPUT11_Pin|OPTO_INPUT12_Pin|OPTO_INPUT13_Pin|OPTO_INPUT14_Pin
 80012b8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80012bc:	61fb      	str	r3, [r7, #28]
                          |OPTO_INPUT15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012be:	4b3c      	ldr	r3, [pc, #240]	; (80013b0 <MX_GPIO_Init+0x21c>)
 80012c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	4619      	mov	r1, r3
 80012cc:	4837      	ldr	r0, [pc, #220]	; (80013ac <MX_GPIO_Init+0x218>)
 80012ce:	f001 ff73 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PWM1_BLACK_UPS_RELAY_Pin|PWM2_WHITE_MAIN_RELAY_Pin|PWM3_BROWN_CHARGER_RELAY_Pin|PWM4_BLUE_ENABLE_RELAYS_Pin;
 80012d2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80012d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012e4:	f107 031c 	add.w	r3, r7, #28
 80012e8:	4619      	mov	r1, r3
 80012ea:	482c      	ldr	r0, [pc, #176]	; (800139c <MX_GPIO_Init+0x208>)
 80012ec:	f001 ff64 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN1_RS_Pin;
 80012f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012fa:	2302      	movs	r3, #2
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAN1_RS_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4825      	ldr	r0, [pc, #148]	; (80013a0 <MX_GPIO_Init+0x20c>)
 800130a:	f001 ff55 	bl	80031b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN2_RS_Pin;
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001316:	2302      	movs	r3, #2
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAN2_RS_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	481f      	ldr	r0, [pc, #124]	; (80013a4 <MX_GPIO_Init+0x210>)
 8001326:	f001 ff47 	bl	80031b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2102      	movs	r1, #2
 800132e:	2007      	movs	r0, #7
 8001330:	f001 ff0b 	bl	800314a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001334:	2007      	movs	r0, #7
 8001336:	f001 ff24 	bl	8003182 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2102      	movs	r1, #2
 800133e:	2008      	movs	r0, #8
 8001340:	f001 ff03 	bl	800314a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001344:	2008      	movs	r0, #8
 8001346:	f001 ff1c 	bl	8003182 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2102      	movs	r1, #2
 800134e:	2009      	movs	r0, #9
 8001350:	f001 fefb 	bl	800314a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001354:	2009      	movs	r0, #9
 8001356:	f001 ff14 	bl	8003182 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	2102      	movs	r1, #2
 800135e:	200a      	movs	r0, #10
 8001360:	f001 fef3 	bl	800314a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001364:	200a      	movs	r0, #10
 8001366:	f001 ff0c 	bl	8003182 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2102      	movs	r1, #2
 800136e:	2017      	movs	r0, #23
 8001370:	f001 feeb 	bl	800314a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001374:	2017      	movs	r0, #23
 8001376:	f001 ff04 	bl	8003182 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2102      	movs	r1, #2
 800137e:	2028      	movs	r0, #40	; 0x28
 8001380:	f001 fee3 	bl	800314a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001384:	2028      	movs	r0, #40	; 0x28
 8001386:	f001 fefc 	bl	8003182 <HAL_NVIC_EnableIRQ>

}
 800138a:	bf00      	nop
 800138c:	3730      	adds	r7, #48	; 0x30
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40020800 	.word	0x40020800
 800139c:	40020c00 	.word	0x40020c00
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	10310000 	.word	0x10310000
 80013ac:	40021000 	.word	0x40021000
 80013b0:	10110000 	.word	0x10110000

080013b4 <HAL_GPIO_EXTI_Callback>:

}

/*Lights management*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b6:	b095      	sub	sp, #84	; 0x54
 80013b8:	af12      	add	r7, sp, #72	; 0x48
 80013ba:	4603      	mov	r3, r0
 80013bc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == OPTO_INPUT5_Pin)
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	2b20      	cmp	r3, #32
 80013c2:	d176      	bne.n	80014b2 <HAL_GPIO_EXTI_Callback+0xfe>
	{
		/* opto input 5 - Night Lights */
		if (HAL_GPIO_ReadPin(OPTO_INPUT5_GPIO_Port, OPTO_INPUT5_Pin)
 80013c4:	2120      	movs	r1, #32
 80013c6:	4898      	ldr	r0, [pc, #608]	; (8001628 <HAL_GPIO_EXTI_Callback+0x274>)
 80013c8:	f002 f892 	bl	80034f0 <HAL_GPIO_ReadPin>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d136      	bne.n	8001440 <HAL_GPIO_EXTI_Callback+0x8c>
				== GPIO_PIN_SET)
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 80013d2:	4b96      	ldr	r3, [pc, #600]	; (800162c <HAL_GPIO_EXTI_Callback+0x278>)
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	4e96      	ldr	r6, [pc, #600]	; (8001630 <HAL_GPIO_EXTI_Callback+0x27c>)
 80013d8:	2200      	movs	r2, #0
 80013da:	9210      	str	r2, [sp, #64]	; 0x40
 80013dc:	2200      	movs	r2, #0
 80013de:	920f      	str	r2, [sp, #60]	; 0x3c
 80013e0:	2200      	movs	r2, #0
 80013e2:	920e      	str	r2, [sp, #56]	; 0x38
 80013e4:	2200      	movs	r2, #0
 80013e6:	920d      	str	r2, [sp, #52]	; 0x34
 80013e8:	2200      	movs	r2, #0
 80013ea:	920c      	str	r2, [sp, #48]	; 0x30
 80013ec:	2201      	movs	r2, #1
 80013ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80013f0:	2201      	movs	r2, #1
 80013f2:	920a      	str	r2, [sp, #40]	; 0x28
 80013f4:	2240      	movs	r2, #64	; 0x40
 80013f6:	9209      	str	r2, [sp, #36]	; 0x24
 80013f8:	2203      	movs	r2, #3
 80013fa:	9208      	str	r2, [sp, #32]
 80013fc:	4a8d      	ldr	r2, [pc, #564]	; (8001634 <HAL_GPIO_EXTI_Callback+0x280>)
 80013fe:	9207      	str	r2, [sp, #28]
 8001400:	9306      	str	r3, [sp, #24]
 8001402:	466d      	mov	r5, sp
 8001404:	f106 0410 	add.w	r4, r6, #16
 8001408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800140a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800140c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001410:	e885 0003 	stmia.w	r5, {r0, r1}
 8001414:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001418:	f7ff faf8 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x01, 1, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x01, 1, 0, 0, 0, 0, 0, 0);
 800141c:	4b83      	ldr	r3, [pc, #524]	; (800162c <HAL_GPIO_EXTI_Callback+0x278>)
 800141e:	6918      	ldr	r0, [r3, #16]
 8001420:	2300      	movs	r3, #0
 8001422:	9304      	str	r3, [sp, #16]
 8001424:	2300      	movs	r3, #0
 8001426:	9303      	str	r3, [sp, #12]
 8001428:	2300      	movs	r3, #0
 800142a:	9302      	str	r3, [sp, #8]
 800142c:	2300      	movs	r3, #0
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	2300      	movs	r3, #0
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2300      	movs	r3, #0
 8001436:	2201      	movs	r2, #1
 8001438:	2101      	movs	r1, #1
 800143a:	f007 f973 	bl	8008724 <UsbTransferDataByte>
 800143e:	e035      	b.n	80014ac <HAL_GPIO_EXTI_Callback+0xf8>
		}
		else
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 8001440:	4b7a      	ldr	r3, [pc, #488]	; (800162c <HAL_GPIO_EXTI_Callback+0x278>)
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	4e7a      	ldr	r6, [pc, #488]	; (8001630 <HAL_GPIO_EXTI_Callback+0x27c>)
 8001446:	2200      	movs	r2, #0
 8001448:	9210      	str	r2, [sp, #64]	; 0x40
 800144a:	2200      	movs	r2, #0
 800144c:	920f      	str	r2, [sp, #60]	; 0x3c
 800144e:	2200      	movs	r2, #0
 8001450:	920e      	str	r2, [sp, #56]	; 0x38
 8001452:	2200      	movs	r2, #0
 8001454:	920d      	str	r2, [sp, #52]	; 0x34
 8001456:	2200      	movs	r2, #0
 8001458:	920c      	str	r2, [sp, #48]	; 0x30
 800145a:	2200      	movs	r2, #0
 800145c:	920b      	str	r2, [sp, #44]	; 0x2c
 800145e:	2201      	movs	r2, #1
 8001460:	920a      	str	r2, [sp, #40]	; 0x28
 8001462:	2240      	movs	r2, #64	; 0x40
 8001464:	9209      	str	r2, [sp, #36]	; 0x24
 8001466:	2203      	movs	r2, #3
 8001468:	9208      	str	r2, [sp, #32]
 800146a:	4a72      	ldr	r2, [pc, #456]	; (8001634 <HAL_GPIO_EXTI_Callback+0x280>)
 800146c:	9207      	str	r2, [sp, #28]
 800146e:	9306      	str	r3, [sp, #24]
 8001470:	466d      	mov	r5, sp
 8001472:	f106 0410 	add.w	r4, r6, #16
 8001476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800147e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001482:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001486:	f7ff fac1 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x01, 0, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x01, 0, 0, 0, 0, 0, 0, 0);
 800148a:	4b68      	ldr	r3, [pc, #416]	; (800162c <HAL_GPIO_EXTI_Callback+0x278>)
 800148c:	6918      	ldr	r0, [r3, #16]
 800148e:	2300      	movs	r3, #0
 8001490:	9304      	str	r3, [sp, #16]
 8001492:	2300      	movs	r3, #0
 8001494:	9303      	str	r3, [sp, #12]
 8001496:	2300      	movs	r3, #0
 8001498:	9302      	str	r3, [sp, #8]
 800149a:	2300      	movs	r3, #0
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	2300      	movs	r3, #0
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2300      	movs	r3, #0
 80014a4:	2200      	movs	r2, #0
 80014a6:	2101      	movs	r1, #1
 80014a8:	f007 f93c 	bl	8008724 <UsbTransferDataByte>
		}
		HAL_Delay(10);
 80014ac:	200a      	movs	r0, #10
 80014ae:	f000 feab 	bl	8002208 <HAL_Delay>
	}

	if (GPIO_Pin == OPTO_INPUT6_Pin)
 80014b2:	88fb      	ldrh	r3, [r7, #6]
 80014b4:	2b40      	cmp	r3, #64	; 0x40
 80014b6:	d176      	bne.n	80015a6 <HAL_GPIO_EXTI_Callback+0x1f2>
	{
		/* opto input 6 - RIGHT */
		if (HAL_GPIO_ReadPin(OPTO_INPUT6_GPIO_Port, OPTO_INPUT6_Pin)
 80014b8:	2140      	movs	r1, #64	; 0x40
 80014ba:	485b      	ldr	r0, [pc, #364]	; (8001628 <HAL_GPIO_EXTI_Callback+0x274>)
 80014bc:	f002 f818 	bl	80034f0 <HAL_GPIO_ReadPin>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d136      	bne.n	8001534 <HAL_GPIO_EXTI_Callback+0x180>
				== GPIO_PIN_SET)
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 80014c6:	4b59      	ldr	r3, [pc, #356]	; (800162c <HAL_GPIO_EXTI_Callback+0x278>)
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	4e59      	ldr	r6, [pc, #356]	; (8001630 <HAL_GPIO_EXTI_Callback+0x27c>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	9210      	str	r2, [sp, #64]	; 0x40
 80014d0:	2200      	movs	r2, #0
 80014d2:	920f      	str	r2, [sp, #60]	; 0x3c
 80014d4:	2200      	movs	r2, #0
 80014d6:	920e      	str	r2, [sp, #56]	; 0x38
 80014d8:	2200      	movs	r2, #0
 80014da:	920d      	str	r2, [sp, #52]	; 0x34
 80014dc:	2200      	movs	r2, #0
 80014de:	920c      	str	r2, [sp, #48]	; 0x30
 80014e0:	2201      	movs	r2, #1
 80014e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80014e4:	2202      	movs	r2, #2
 80014e6:	920a      	str	r2, [sp, #40]	; 0x28
 80014e8:	2240      	movs	r2, #64	; 0x40
 80014ea:	9209      	str	r2, [sp, #36]	; 0x24
 80014ec:	2203      	movs	r2, #3
 80014ee:	9208      	str	r2, [sp, #32]
 80014f0:	4a50      	ldr	r2, [pc, #320]	; (8001634 <HAL_GPIO_EXTI_Callback+0x280>)
 80014f2:	9207      	str	r2, [sp, #28]
 80014f4:	9306      	str	r3, [sp, #24]
 80014f6:	466d      	mov	r5, sp
 80014f8:	f106 0410 	add.w	r4, r6, #16
 80014fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001500:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001504:	e885 0003 	stmia.w	r5, {r0, r1}
 8001508:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800150c:	f7ff fa7e 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x02, 1, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x02, 1, 0, 0, 0, 0, 0, 0);
 8001510:	4b46      	ldr	r3, [pc, #280]	; (800162c <HAL_GPIO_EXTI_Callback+0x278>)
 8001512:	6918      	ldr	r0, [r3, #16]
 8001514:	2300      	movs	r3, #0
 8001516:	9304      	str	r3, [sp, #16]
 8001518:	2300      	movs	r3, #0
 800151a:	9303      	str	r3, [sp, #12]
 800151c:	2300      	movs	r3, #0
 800151e:	9302      	str	r3, [sp, #8]
 8001520:	2300      	movs	r3, #0
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	2300      	movs	r3, #0
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	2300      	movs	r3, #0
 800152a:	2201      	movs	r2, #1
 800152c:	2102      	movs	r1, #2
 800152e:	f007 f8f9 	bl	8008724 <UsbTransferDataByte>
 8001532:	e035      	b.n	80015a0 <HAL_GPIO_EXTI_Callback+0x1ec>
		}
		else
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 8001534:	4b3d      	ldr	r3, [pc, #244]	; (800162c <HAL_GPIO_EXTI_Callback+0x278>)
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	4e3d      	ldr	r6, [pc, #244]	; (8001630 <HAL_GPIO_EXTI_Callback+0x27c>)
 800153a:	2200      	movs	r2, #0
 800153c:	9210      	str	r2, [sp, #64]	; 0x40
 800153e:	2200      	movs	r2, #0
 8001540:	920f      	str	r2, [sp, #60]	; 0x3c
 8001542:	2200      	movs	r2, #0
 8001544:	920e      	str	r2, [sp, #56]	; 0x38
 8001546:	2200      	movs	r2, #0
 8001548:	920d      	str	r2, [sp, #52]	; 0x34
 800154a:	2200      	movs	r2, #0
 800154c:	920c      	str	r2, [sp, #48]	; 0x30
 800154e:	2200      	movs	r2, #0
 8001550:	920b      	str	r2, [sp, #44]	; 0x2c
 8001552:	2202      	movs	r2, #2
 8001554:	920a      	str	r2, [sp, #40]	; 0x28
 8001556:	2240      	movs	r2, #64	; 0x40
 8001558:	9209      	str	r2, [sp, #36]	; 0x24
 800155a:	2203      	movs	r2, #3
 800155c:	9208      	str	r2, [sp, #32]
 800155e:	4a35      	ldr	r2, [pc, #212]	; (8001634 <HAL_GPIO_EXTI_Callback+0x280>)
 8001560:	9207      	str	r2, [sp, #28]
 8001562:	9306      	str	r3, [sp, #24]
 8001564:	466d      	mov	r5, sp
 8001566:	f106 0410 	add.w	r4, r6, #16
 800156a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800156c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001572:	e885 0003 	stmia.w	r5, {r0, r1}
 8001576:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800157a:	f7ff fa47 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x02, 0, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x02, 0, 0, 0, 0, 0, 0, 0);
 800157e:	4b2b      	ldr	r3, [pc, #172]	; (800162c <HAL_GPIO_EXTI_Callback+0x278>)
 8001580:	6918      	ldr	r0, [r3, #16]
 8001582:	2300      	movs	r3, #0
 8001584:	9304      	str	r3, [sp, #16]
 8001586:	2300      	movs	r3, #0
 8001588:	9303      	str	r3, [sp, #12]
 800158a:	2300      	movs	r3, #0
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	2300      	movs	r3, #0
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	2300      	movs	r3, #0
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	2300      	movs	r3, #0
 8001598:	2200      	movs	r2, #0
 800159a:	2102      	movs	r1, #2
 800159c:	f007 f8c2 	bl	8008724 <UsbTransferDataByte>
		}

		HAL_Delay(10);
 80015a0:	200a      	movs	r0, #10
 80015a2:	f000 fe31 	bl	8002208 <HAL_Delay>
	}

	if (GPIO_Pin == OPTO_INPUT7_Pin)
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	2b80      	cmp	r3, #128	; 0x80
 80015aa:	d17e      	bne.n	80016aa <HAL_GPIO_EXTI_Callback+0x2f6>
	{
		/* opto input 7 LEFT */
		if (HAL_GPIO_ReadPin(OPTO_INPUT7_GPIO_Port, OPTO_INPUT7_Pin)
 80015ac:	2180      	movs	r1, #128	; 0x80
 80015ae:	481e      	ldr	r0, [pc, #120]	; (8001628 <HAL_GPIO_EXTI_Callback+0x274>)
 80015b0:	f001 ff9e 	bl	80034f0 <HAL_GPIO_ReadPin>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d13e      	bne.n	8001638 <HAL_GPIO_EXTI_Callback+0x284>
				== GPIO_PIN_SET)
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 80015ba:	4b1c      	ldr	r3, [pc, #112]	; (800162c <HAL_GPIO_EXTI_Callback+0x278>)
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	4e1c      	ldr	r6, [pc, #112]	; (8001630 <HAL_GPIO_EXTI_Callback+0x27c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	9210      	str	r2, [sp, #64]	; 0x40
 80015c4:	2200      	movs	r2, #0
 80015c6:	920f      	str	r2, [sp, #60]	; 0x3c
 80015c8:	2200      	movs	r2, #0
 80015ca:	920e      	str	r2, [sp, #56]	; 0x38
 80015cc:	2200      	movs	r2, #0
 80015ce:	920d      	str	r2, [sp, #52]	; 0x34
 80015d0:	2200      	movs	r2, #0
 80015d2:	920c      	str	r2, [sp, #48]	; 0x30
 80015d4:	2201      	movs	r2, #1
 80015d6:	920b      	str	r2, [sp, #44]	; 0x2c
 80015d8:	2203      	movs	r2, #3
 80015da:	920a      	str	r2, [sp, #40]	; 0x28
 80015dc:	2240      	movs	r2, #64	; 0x40
 80015de:	9209      	str	r2, [sp, #36]	; 0x24
 80015e0:	2203      	movs	r2, #3
 80015e2:	9208      	str	r2, [sp, #32]
 80015e4:	4a13      	ldr	r2, [pc, #76]	; (8001634 <HAL_GPIO_EXTI_Callback+0x280>)
 80015e6:	9207      	str	r2, [sp, #28]
 80015e8:	9306      	str	r3, [sp, #24]
 80015ea:	466d      	mov	r5, sp
 80015ec:	f106 0410 	add.w	r4, r6, #16
 80015f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80015fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001600:	f7ff fa04 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x03, 1, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x03, 1, 0, 0, 0, 0, 0, 0);
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_GPIO_EXTI_Callback+0x278>)
 8001606:	6918      	ldr	r0, [r3, #16]
 8001608:	2300      	movs	r3, #0
 800160a:	9304      	str	r3, [sp, #16]
 800160c:	2300      	movs	r3, #0
 800160e:	9303      	str	r3, [sp, #12]
 8001610:	2300      	movs	r3, #0
 8001612:	9302      	str	r3, [sp, #8]
 8001614:	2300      	movs	r3, #0
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	2300      	movs	r3, #0
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	2300      	movs	r3, #0
 800161e:	2201      	movs	r2, #1
 8001620:	2103      	movs	r1, #3
 8001622:	f007 f87f 	bl	8008724 <UsbTransferDataByte>
 8001626:	e03d      	b.n	80016a4 <HAL_GPIO_EXTI_Callback+0x2f0>
 8001628:	40021000 	.word	0x40021000
 800162c:	200002b8 	.word	0x200002b8
 8001630:	200002f4 	.word	0x200002f4
 8001634:	20000274 	.word	0x20000274

		}
		else
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 8001638:	4b9c      	ldr	r3, [pc, #624]	; (80018ac <HAL_GPIO_EXTI_Callback+0x4f8>)
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	4e9c      	ldr	r6, [pc, #624]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x4fc>)
 800163e:	2200      	movs	r2, #0
 8001640:	9210      	str	r2, [sp, #64]	; 0x40
 8001642:	2200      	movs	r2, #0
 8001644:	920f      	str	r2, [sp, #60]	; 0x3c
 8001646:	2200      	movs	r2, #0
 8001648:	920e      	str	r2, [sp, #56]	; 0x38
 800164a:	2200      	movs	r2, #0
 800164c:	920d      	str	r2, [sp, #52]	; 0x34
 800164e:	2200      	movs	r2, #0
 8001650:	920c      	str	r2, [sp, #48]	; 0x30
 8001652:	2200      	movs	r2, #0
 8001654:	920b      	str	r2, [sp, #44]	; 0x2c
 8001656:	2203      	movs	r2, #3
 8001658:	920a      	str	r2, [sp, #40]	; 0x28
 800165a:	2240      	movs	r2, #64	; 0x40
 800165c:	9209      	str	r2, [sp, #36]	; 0x24
 800165e:	2203      	movs	r2, #3
 8001660:	9208      	str	r2, [sp, #32]
 8001662:	4a94      	ldr	r2, [pc, #592]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x500>)
 8001664:	9207      	str	r2, [sp, #28]
 8001666:	9306      	str	r3, [sp, #24]
 8001668:	466d      	mov	r5, sp
 800166a:	f106 0410 	add.w	r4, r6, #16
 800166e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001672:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001676:	e885 0003 	stmia.w	r5, {r0, r1}
 800167a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800167e:	f7ff f9c5 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x03, 0, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x03, 0, 0, 0, 0, 0, 0, 0);
 8001682:	4b8a      	ldr	r3, [pc, #552]	; (80018ac <HAL_GPIO_EXTI_Callback+0x4f8>)
 8001684:	6918      	ldr	r0, [r3, #16]
 8001686:	2300      	movs	r3, #0
 8001688:	9304      	str	r3, [sp, #16]
 800168a:	2300      	movs	r3, #0
 800168c:	9303      	str	r3, [sp, #12]
 800168e:	2300      	movs	r3, #0
 8001690:	9302      	str	r3, [sp, #8]
 8001692:	2300      	movs	r3, #0
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	2300      	movs	r3, #0
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2300      	movs	r3, #0
 800169c:	2200      	movs	r2, #0
 800169e:	2103      	movs	r1, #3
 80016a0:	f007 f840 	bl	8008724 <UsbTransferDataByte>
		}

		HAL_Delay(10);
 80016a4:	200a      	movs	r0, #10
 80016a6:	f000 fdaf 	bl	8002208 <HAL_Delay>
	}

	if (GPIO_Pin == OPTO_INPUT8_Pin)
 80016aa:	88fb      	ldrh	r3, [r7, #6]
 80016ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016b0:	d177      	bne.n	80017a2 <HAL_GPIO_EXTI_Callback+0x3ee>
	{
		/* opto input 8 Emergency */
		if (HAL_GPIO_ReadPin(OPTO_INPUT8_GPIO_Port, OPTO_INPUT8_Pin)
 80016b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016b6:	4880      	ldr	r0, [pc, #512]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x504>)
 80016b8:	f001 ff1a 	bl	80034f0 <HAL_GPIO_ReadPin>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d136      	bne.n	8001730 <HAL_GPIO_EXTI_Callback+0x37c>
				== GPIO_PIN_SET)
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 80016c2:	4b7a      	ldr	r3, [pc, #488]	; (80018ac <HAL_GPIO_EXTI_Callback+0x4f8>)
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	4e7a      	ldr	r6, [pc, #488]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x4fc>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	9210      	str	r2, [sp, #64]	; 0x40
 80016cc:	2200      	movs	r2, #0
 80016ce:	920f      	str	r2, [sp, #60]	; 0x3c
 80016d0:	2200      	movs	r2, #0
 80016d2:	920e      	str	r2, [sp, #56]	; 0x38
 80016d4:	2200      	movs	r2, #0
 80016d6:	920d      	str	r2, [sp, #52]	; 0x34
 80016d8:	2200      	movs	r2, #0
 80016da:	920c      	str	r2, [sp, #48]	; 0x30
 80016dc:	2201      	movs	r2, #1
 80016de:	920b      	str	r2, [sp, #44]	; 0x2c
 80016e0:	2206      	movs	r2, #6
 80016e2:	920a      	str	r2, [sp, #40]	; 0x28
 80016e4:	2240      	movs	r2, #64	; 0x40
 80016e6:	9209      	str	r2, [sp, #36]	; 0x24
 80016e8:	2203      	movs	r2, #3
 80016ea:	9208      	str	r2, [sp, #32]
 80016ec:	4a71      	ldr	r2, [pc, #452]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x500>)
 80016ee:	9207      	str	r2, [sp, #28]
 80016f0:	9306      	str	r3, [sp, #24]
 80016f2:	466d      	mov	r5, sp
 80016f4:	f106 0410 	add.w	r4, r6, #16
 80016f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001700:	e885 0003 	stmia.w	r5, {r0, r1}
 8001704:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001708:	f7ff f980 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x06, 1, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x06, 1, 0, 0, 0, 0, 0, 0);
 800170c:	4b67      	ldr	r3, [pc, #412]	; (80018ac <HAL_GPIO_EXTI_Callback+0x4f8>)
 800170e:	6918      	ldr	r0, [r3, #16]
 8001710:	2300      	movs	r3, #0
 8001712:	9304      	str	r3, [sp, #16]
 8001714:	2300      	movs	r3, #0
 8001716:	9303      	str	r3, [sp, #12]
 8001718:	2300      	movs	r3, #0
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	2300      	movs	r3, #0
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	2300      	movs	r3, #0
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	2300      	movs	r3, #0
 8001726:	2201      	movs	r2, #1
 8001728:	2106      	movs	r1, #6
 800172a:	f006 fffb 	bl	8008724 <UsbTransferDataByte>
 800172e:	e035      	b.n	800179c <HAL_GPIO_EXTI_Callback+0x3e8>

		}
		else
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 8001730:	4b5e      	ldr	r3, [pc, #376]	; (80018ac <HAL_GPIO_EXTI_Callback+0x4f8>)
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	4e5e      	ldr	r6, [pc, #376]	; (80018b0 <HAL_GPIO_EXTI_Callback+0x4fc>)
 8001736:	2200      	movs	r2, #0
 8001738:	9210      	str	r2, [sp, #64]	; 0x40
 800173a:	2200      	movs	r2, #0
 800173c:	920f      	str	r2, [sp, #60]	; 0x3c
 800173e:	2200      	movs	r2, #0
 8001740:	920e      	str	r2, [sp, #56]	; 0x38
 8001742:	2200      	movs	r2, #0
 8001744:	920d      	str	r2, [sp, #52]	; 0x34
 8001746:	2200      	movs	r2, #0
 8001748:	920c      	str	r2, [sp, #48]	; 0x30
 800174a:	2200      	movs	r2, #0
 800174c:	920b      	str	r2, [sp, #44]	; 0x2c
 800174e:	2206      	movs	r2, #6
 8001750:	920a      	str	r2, [sp, #40]	; 0x28
 8001752:	2240      	movs	r2, #64	; 0x40
 8001754:	9209      	str	r2, [sp, #36]	; 0x24
 8001756:	2203      	movs	r2, #3
 8001758:	9208      	str	r2, [sp, #32]
 800175a:	4a56      	ldr	r2, [pc, #344]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x500>)
 800175c:	9207      	str	r2, [sp, #28]
 800175e:	9306      	str	r3, [sp, #24]
 8001760:	466d      	mov	r5, sp
 8001762:	f106 0410 	add.w	r4, r6, #16
 8001766:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800176a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800176e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001772:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001776:	f7ff f949 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x06, 0, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x06, 0, 0, 0, 0, 0, 0, 0);
 800177a:	4b4c      	ldr	r3, [pc, #304]	; (80018ac <HAL_GPIO_EXTI_Callback+0x4f8>)
 800177c:	6918      	ldr	r0, [r3, #16]
 800177e:	2300      	movs	r3, #0
 8001780:	9304      	str	r3, [sp, #16]
 8001782:	2300      	movs	r3, #0
 8001784:	9303      	str	r3, [sp, #12]
 8001786:	2300      	movs	r3, #0
 8001788:	9302      	str	r3, [sp, #8]
 800178a:	2300      	movs	r3, #0
 800178c:	9301      	str	r3, [sp, #4]
 800178e:	2300      	movs	r3, #0
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2300      	movs	r3, #0
 8001794:	2200      	movs	r2, #0
 8001796:	2106      	movs	r1, #6
 8001798:	f006 ffc4 	bl	8008724 <UsbTransferDataByte>
		}
		HAL_Delay(10);
 800179c:	200a      	movs	r0, #10
 800179e:	f000 fd33 	bl	8002208 <HAL_Delay>
	}

	/*Charging state register*/
	if (GPIO_Pin == OPTO_INPUT10_Pin)
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017a8:	d134      	bne.n	8001814 <HAL_GPIO_EXTI_Callback+0x460>
	{
		if (HAL_GPIO_ReadPin(OPTO_INPUT10_GPIO_Port, OPTO_INPUT10_Pin)
 80017aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ae:	4842      	ldr	r0, [pc, #264]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x504>)
 80017b0:	f001 fe9e 	bl	80034f0 <HAL_GPIO_ReadPin>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d116      	bne.n	80017e8 <HAL_GPIO_EXTI_Callback+0x434>
				== GPIO_PIN_SET)
		{
			charging = true;
 80017ba:	4b40      	ldr	r3, [pc, #256]	; (80018bc <HAL_GPIO_EXTI_Callback+0x508>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
			UsbTransferDataByte(0x0C, 0x01, 0, 0, 0, 0, 0, 0, 0);
 80017c0:	2300      	movs	r3, #0
 80017c2:	9304      	str	r3, [sp, #16]
 80017c4:	2300      	movs	r3, #0
 80017c6:	9303      	str	r3, [sp, #12]
 80017c8:	2300      	movs	r3, #0
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	2300      	movs	r3, #0
 80017ce:	9301      	str	r3, [sp, #4]
 80017d0:	2300      	movs	r3, #0
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	2300      	movs	r3, #0
 80017d6:	2200      	movs	r2, #0
 80017d8:	2101      	movs	r1, #1
 80017da:	200c      	movs	r0, #12
 80017dc:	f006 ffa2 	bl	8008724 <UsbTransferDataByte>
			HAL_Delay(10);
 80017e0:	200a      	movs	r0, #10
 80017e2:	f000 fd11 	bl	8002208 <HAL_Delay>
 80017e6:	e015      	b.n	8001814 <HAL_GPIO_EXTI_Callback+0x460>
		}
		else
		{
			charging = false;
 80017e8:	4b34      	ldr	r3, [pc, #208]	; (80018bc <HAL_GPIO_EXTI_Callback+0x508>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	701a      	strb	r2, [r3, #0]
			UsbTransferDataByte(0x0C, 0x0, 0, 0, 0, 0, 0, 0, 0);
 80017ee:	2300      	movs	r3, #0
 80017f0:	9304      	str	r3, [sp, #16]
 80017f2:	2300      	movs	r3, #0
 80017f4:	9303      	str	r3, [sp, #12]
 80017f6:	2300      	movs	r3, #0
 80017f8:	9302      	str	r3, [sp, #8]
 80017fa:	2300      	movs	r3, #0
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	2300      	movs	r3, #0
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2300      	movs	r3, #0
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	200c      	movs	r0, #12
 800180a:	f006 ff8b 	bl	8008724 <UsbTransferDataByte>
			HAL_Delay(10);
 800180e:	200a      	movs	r0, #10
 8001810:	f000 fcfa 	bl	8002208 <HAL_Delay>
		}
	}

	if (GPIO_Pin == OPTO_INPUT11_Pin)
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800181a:	d142      	bne.n	80018a2 <HAL_GPIO_EXTI_Callback+0x4ee>
		{
		if (HAL_GPIO_ReadPin(OPTO_INPUT10_GPIO_Port, OPTO_INPUT11_Pin)
 800181c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001820:	4825      	ldr	r0, [pc, #148]	; (80018b8 <HAL_GPIO_EXTI_Callback+0x504>)
 8001822:	f001 fe65 	bl	80034f0 <HAL_GPIO_ReadPin>
 8001826:	4603      	mov	r3, r0
 8001828:	2b01      	cmp	r3, #1
 800182a:	d122      	bne.n	8001872 <HAL_GPIO_EXTI_Callback+0x4be>
				== GPIO_PIN_SET && !highVoltageActive) {
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <HAL_GPIO_EXTI_Callback+0x50c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	f083 0301 	eor.w	r3, r3, #1
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d01b      	beq.n	8001872 <HAL_GPIO_EXTI_Callback+0x4be>
			CanSendNmt(hcan1, OPERATIONAL_STATE, bms.node_id,
 800183a:	4b22      	ldr	r3, [pc, #136]	; (80018c4 <HAL_GPIO_EXTI_Callback+0x510>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	4e22      	ldr	r6, [pc, #136]	; (80018c8 <HAL_GPIO_EXTI_Callback+0x514>)
 8001840:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x500>)
 8001842:	9208      	str	r2, [sp, #32]
 8001844:	9307      	str	r3, [sp, #28]
 8001846:	2301      	movs	r3, #1
 8001848:	9306      	str	r3, [sp, #24]
 800184a:	466d      	mov	r5, sp
 800184c:	f106 0410 	add.w	r4, r6, #16
 8001850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001854:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001858:	e885 0003 	stmia.w	r5, {r0, r1}
 800185c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001860:	f7ff f840 	bl	80008e4 <CanSendNmt>
					&can_frame_template);
			highVoltageActive = true;
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <HAL_GPIO_EXTI_Callback+0x50c>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
			HAL_Delay(2);
 800186a:	2002      	movs	r0, #2
 800186c:	f000 fccc 	bl	8002208 <HAL_Delay>
			CanSendNmt(hcan1, STOPPED_STATE, bms.node_id,
					&can_frame_template);
			highVoltageActive = true;
		}
	}
}
 8001870:	e017      	b.n	80018a2 <HAL_GPIO_EXTI_Callback+0x4ee>
			CanSendNmt(hcan1, STOPPED_STATE, bms.node_id,
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_GPIO_EXTI_Callback+0x510>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	4e14      	ldr	r6, [pc, #80]	; (80018c8 <HAL_GPIO_EXTI_Callback+0x514>)
 8001878:	4a0e      	ldr	r2, [pc, #56]	; (80018b4 <HAL_GPIO_EXTI_Callback+0x500>)
 800187a:	9208      	str	r2, [sp, #32]
 800187c:	9307      	str	r3, [sp, #28]
 800187e:	2302      	movs	r3, #2
 8001880:	9306      	str	r3, [sp, #24]
 8001882:	466d      	mov	r5, sp
 8001884:	f106 0410 	add.w	r4, r6, #16
 8001888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800188a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001890:	e885 0003 	stmia.w	r5, {r0, r1}
 8001894:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001898:	f7ff f824 	bl	80008e4 <CanSendNmt>
			highVoltageActive = true;
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_GPIO_EXTI_Callback+0x50c>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018aa:	bf00      	nop
 80018ac:	200002b8 	.word	0x200002b8
 80018b0:	200002f4 	.word	0x200002f4
 80018b4:	20000274 	.word	0x20000274
 80018b8:	40021000 	.word	0x40021000
 80018bc:	200002f0 	.word	0x200002f0
 80018c0:	20000464 	.word	0x20000464
 80018c4:	200002d4 	.word	0x200002d4
 80018c8:	2000043c 	.word	0x2000043c

080018cc <sendZeroes>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void sendZeroes()
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af06      	add	r7, sp, #24
	UsbTransferDataByte(0, 0, 0, 0, 0, 0, 0, 0, 0);
 80018d2:	2300      	movs	r3, #0
 80018d4:	9304      	str	r3, [sp, #16]
 80018d6:	2300      	movs	r3, #0
 80018d8:	9303      	str	r3, [sp, #12]
 80018da:	2300      	movs	r3, #0
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	2300      	movs	r3, #0
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	2300      	movs	r3, #0
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2300      	movs	r3, #0
 80018e8:	2200      	movs	r2, #0
 80018ea:	2100      	movs	r1, #0
 80018ec:	2000      	movs	r0, #0
 80018ee:	f006 ff19 	bl	8008724 <UsbTransferDataByte>
	HAL_Delay(100);
 80018f2:	2064      	movs	r0, #100	; 0x64
 80018f4:	f000 fc88 	bl	8002208 <HAL_Delay>
	UsbTransferDataByte(0, 0, 0, 0, 0, 0, 0, 0, 0);
 80018f8:	2300      	movs	r3, #0
 80018fa:	9304      	str	r3, [sp, #16]
 80018fc:	2300      	movs	r3, #0
 80018fe:	9303      	str	r3, [sp, #12]
 8001900:	2300      	movs	r3, #0
 8001902:	9302      	str	r3, [sp, #8]
 8001904:	2300      	movs	r3, #0
 8001906:	9301      	str	r3, [sp, #4]
 8001908:	2300      	movs	r3, #0
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	2300      	movs	r3, #0
 800190e:	2200      	movs	r2, #0
 8001910:	2100      	movs	r1, #0
 8001912:	2000      	movs	r0, #0
 8001914:	f006 ff06 	bl	8008724 <UsbTransferDataByte>
	HAL_Delay(100);
 8001918:	2064      	movs	r0, #100	; 0x64
 800191a:	f000 fc75 	bl	8002208 <HAL_Delay>
	UsbTransferDataByte(0, 0, 0, 0, 0, 0, 0, 0, 0);
 800191e:	2300      	movs	r3, #0
 8001920:	9304      	str	r3, [sp, #16]
 8001922:	2300      	movs	r3, #0
 8001924:	9303      	str	r3, [sp, #12]
 8001926:	2300      	movs	r3, #0
 8001928:	9302      	str	r3, [sp, #8]
 800192a:	2300      	movs	r3, #0
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	2300      	movs	r3, #0
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2300      	movs	r3, #0
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	2000      	movs	r0, #0
 800193a:	f006 fef3 	bl	8008724 <UsbTransferDataByte>
	HAL_Delay(100);
 800193e:	2064      	movs	r0, #100	; 0x64
 8001940:	f000 fc62 	bl	8002208 <HAL_Delay>
	UsbTransferDataByte(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8001944:	2300      	movs	r3, #0
 8001946:	9304      	str	r3, [sp, #16]
 8001948:	2300      	movs	r3, #0
 800194a:	9303      	str	r3, [sp, #12]
 800194c:	2300      	movs	r3, #0
 800194e:	9302      	str	r3, [sp, #8]
 8001950:	2300      	movs	r3, #0
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	2300      	movs	r3, #0
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	2300      	movs	r3, #0
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	2000      	movs	r0, #0
 8001960:	f006 fee0 	bl	8008724 <UsbTransferDataByte>
	HAL_Delay(100);
 8001964:	2064      	movs	r0, #100	; 0x64
 8001966:	f000 fc4f 	bl	8002208 <HAL_Delay>
	UsbTransferDataByte(0, 0, 0, 0, 0, 0, 0, 0, 0);
 800196a:	2300      	movs	r3, #0
 800196c:	9304      	str	r3, [sp, #16]
 800196e:	2300      	movs	r3, #0
 8001970:	9303      	str	r3, [sp, #12]
 8001972:	2300      	movs	r3, #0
 8001974:	9302      	str	r3, [sp, #8]
 8001976:	2300      	movs	r3, #0
 8001978:	9301      	str	r3, [sp, #4]
 800197a:	2300      	movs	r3, #0
 800197c:	9300      	str	r3, [sp, #0]
 800197e:	2300      	movs	r3, #0
 8001980:	2200      	movs	r2, #0
 8001982:	2100      	movs	r1, #0
 8001984:	2000      	movs	r0, #0
 8001986:	f006 fecd 	bl	8008724 <UsbTransferDataByte>
	HAL_Delay(100);
 800198a:	2064      	movs	r0, #100	; 0x64
 800198c:	f000 fc3c 	bl	8002208 <HAL_Delay>
	UsbTransferDataByte(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8001990:	2300      	movs	r3, #0
 8001992:	9304      	str	r3, [sp, #16]
 8001994:	2300      	movs	r3, #0
 8001996:	9303      	str	r3, [sp, #12]
 8001998:	2300      	movs	r3, #0
 800199a:	9302      	str	r3, [sp, #8]
 800199c:	2300      	movs	r3, #0
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	2300      	movs	r3, #0
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	2300      	movs	r3, #0
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2000      	movs	r0, #0
 80019ac:	f006 feba 	bl	8008724 <UsbTransferDataByte>
	HAL_Delay(100);
 80019b0:	2064      	movs	r0, #100	; 0x64
 80019b2:	f000 fc29 	bl	8002208 <HAL_Delay>
	UsbTransferDataByte(0, 0, 0, 0, 0, 0, 0, 0, 0);
 80019b6:	2300      	movs	r3, #0
 80019b8:	9304      	str	r3, [sp, #16]
 80019ba:	2300      	movs	r3, #0
 80019bc:	9303      	str	r3, [sp, #12]
 80019be:	2300      	movs	r3, #0
 80019c0:	9302      	str	r3, [sp, #8]
 80019c2:	2300      	movs	r3, #0
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	2300      	movs	r3, #0
 80019c8:	9300      	str	r3, [sp, #0]
 80019ca:	2300      	movs	r3, #0
 80019cc:	2200      	movs	r2, #0
 80019ce:	2100      	movs	r1, #0
 80019d0:	2000      	movs	r0, #0
 80019d2:	f006 fea7 	bl	8008724 <UsbTransferDataByte>
	HAL_Delay(100);
 80019d6:	2064      	movs	r0, #100	; 0x64
 80019d8:	f000 fc16 	bl	8002208 <HAL_Delay>
	UsbTransferDataByte(0, 0, 0, 0, 0, 0, 0, 0, 0);
 80019dc:	2300      	movs	r3, #0
 80019de:	9304      	str	r3, [sp, #16]
 80019e0:	2300      	movs	r3, #0
 80019e2:	9303      	str	r3, [sp, #12]
 80019e4:	2300      	movs	r3, #0
 80019e6:	9302      	str	r3, [sp, #8]
 80019e8:	2300      	movs	r3, #0
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	2300      	movs	r3, #0
 80019ee:	9300      	str	r3, [sp, #0]
 80019f0:	2300      	movs	r3, #0
 80019f2:	2200      	movs	r2, #0
 80019f4:	2100      	movs	r1, #0
 80019f6:	2000      	movs	r0, #0
 80019f8:	f006 fe94 	bl	8008724 <UsbTransferDataByte>
	HAL_Delay(100);
 80019fc:	2064      	movs	r0, #100	; 0x64
 80019fe:	f000 fc03 	bl	8002208 <HAL_Delay>
	UsbTransferDataByte(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8001a02:	2300      	movs	r3, #0
 8001a04:	9304      	str	r3, [sp, #16]
 8001a06:	2300      	movs	r3, #0
 8001a08:	9303      	str	r3, [sp, #12]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	9302      	str	r3, [sp, #8]
 8001a0e:	2300      	movs	r3, #0
 8001a10:	9301      	str	r3, [sp, #4]
 8001a12:	2300      	movs	r3, #0
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2300      	movs	r3, #0
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f006 fe81 	bl	8008724 <UsbTransferDataByte>
	HAL_Delay(100);
 8001a22:	2064      	movs	r0, #100	; 0x64
 8001a24:	f000 fbf0 	bl	8002208 <HAL_Delay>
	UsbTransferDataByte(0, 0, 0, 0, 0, 0, 0, 0, 0);
 8001a28:	2300      	movs	r3, #0
 8001a2a:	9304      	str	r3, [sp, #16]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9303      	str	r3, [sp, #12]
 8001a30:	2300      	movs	r3, #0
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	2300      	movs	r3, #0
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	2000      	movs	r0, #0
 8001a44:	f006 fe6e 	bl	8008724 <UsbTransferDataByte>
	HAL_Delay(2);
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f000 fbdd 	bl	8002208 <HAL_Delay>

}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a5a:	f000 fb63 	bl	8002124 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a5e:	f000 f86b 	bl	8001b38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a62:	f7ff fb97 	bl	8001194 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001a66:	f7fe fd7f 	bl	8000568 <MX_CAN1_Init>
  MX_CAN2_Init();
 8001a6a:	f7fe fdb3 	bl	80005d4 <MX_CAN2_Init>
  MX_TIM10_Init();
 8001a6e:	f000 fae3 	bl	8002038 <MX_TIM10_Init>
  MX_USB_DEVICE_Init();
 8001a72:	f006 fced 	bl	8008450 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	/************************************************************************************************
	 CAN PERIPHERIAL AND ITS COMPONENTS
	 ************************************************************************************************/
	CanopenObjectDictInit();
 8001a76:	f7ff fae9 	bl	800104c <CanopenObjectDictInit>

	CanConfigFilter(CAN_HIGH_SPEED, 1);
 8001a7a:	4e29      	ldr	r6, [pc, #164]	; (8001b20 <main+0xcc>)
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	9306      	str	r3, [sp, #24]
 8001a80:	466d      	mov	r5, sp
 8001a82:	f106 0410 	add.w	r4, r6, #16
 8001a86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a92:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a96:	f7fe feed 	bl	8000874 <CanConfigFilter>
	CanInit(CAN_HIGH_SPEED);
 8001a9a:	4e21      	ldr	r6, [pc, #132]	; (8001b20 <main+0xcc>)
 8001a9c:	466d      	mov	r5, sp
 8001a9e:	f106 0410 	add.w	r4, r6, #16
 8001aa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001aa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aa6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aaa:	e885 0003 	stmia.w	r5, {r0, r1}
 8001aae:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001ab2:	f7fe fe97 	bl	80007e4 <CanInit>

	CanConfigFilter(CAN_LOW_SPEED, 0);
 8001ab6:	4e1b      	ldr	r6, [pc, #108]	; (8001b24 <main+0xd0>)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9306      	str	r3, [sp, #24]
 8001abc:	466d      	mov	r5, sp
 8001abe:	f106 0410 	add.w	r4, r6, #16
 8001ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001aca:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ace:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001ad2:	f7fe fecf 	bl	8000874 <CanConfigFilter>
	CanInit(CAN_LOW_SPEED);
 8001ad6:	4e13      	ldr	r6, [pc, #76]	; (8001b24 <main+0xd0>)
 8001ad8:	466d      	mov	r5, sp
 8001ada:	f106 0410 	add.w	r4, r6, #16
 8001ade:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ae0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ae2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ae6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001aea:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001aee:	f7fe fe79 	bl	80007e4 <CanInit>

	HAL_TIM_Base_Start_IT(&htim10);
 8001af2:	480d      	ldr	r0, [pc, #52]	; (8001b28 <main+0xd4>)
 8001af4:	f003 fb51 	bl	800519a <HAL_TIM_Base_Start_IT>
	 ************************************************************************************************/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	error = false;
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <main+0xd8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
	charging = false;
 8001afe:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <main+0xdc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	701a      	strb	r2, [r3, #0]
	highVoltageActive = false;
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <main+0xe0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
	while (1) {

//		SendAllFramesForDashboard();
		sendZeroes();
 8001b0a:	f7ff fedf 	bl	80018cc <sendZeroes>
//		UsbTransferDataByte(0x581, 0, 2, 1, 0, 0, 0, 0, 0);
		HAL_Delay(10);
 8001b0e:	200a      	movs	r0, #10
 8001b10:	f000 fb7a 	bl	8002208 <HAL_Delay>
		sendZeroes();
 8001b14:	f7ff feda 	bl	80018cc <sendZeroes>
//		UsbTransferDataByte(0x581, 0, 2, 0, 0, 0, 0, 0, 0);
		HAL_Delay(100);
 8001b18:	2064      	movs	r0, #100	; 0x64
 8001b1a:	f000 fb75 	bl	8002208 <HAL_Delay>
		sendZeroes();
 8001b1e:	e7f4      	b.n	8001b0a <main+0xb6>
 8001b20:	2000043c 	.word	0x2000043c
 8001b24:	200002f4 	.word	0x200002f4
 8001b28:	20000470 	.word	0x20000470
 8001b2c:	20000400 	.word	0x20000400
 8001b30:	200002f0 	.word	0x200002f0
 8001b34:	20000464 	.word	0x20000464

08001b38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b094      	sub	sp, #80	; 0x50
 8001b3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b3e:	f107 0320 	add.w	r3, r7, #32
 8001b42:	2230      	movs	r2, #48	; 0x30
 8001b44:	2100      	movs	r1, #0
 8001b46:	4618      	mov	r0, r3
 8001b48:	f007 fa82 	bl	8009050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <SystemClock_Config+0xc8>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	4a26      	ldr	r2, [pc, #152]	; (8001c00 <SystemClock_Config+0xc8>)
 8001b66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6c:	4b24      	ldr	r3, [pc, #144]	; (8001c00 <SystemClock_Config+0xc8>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	607b      	str	r3, [r7, #4]
 8001b7c:	4b21      	ldr	r3, [pc, #132]	; (8001c04 <SystemClock_Config+0xcc>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a20      	ldr	r2, [pc, #128]	; (8001c04 <SystemClock_Config+0xcc>)
 8001b82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b1e      	ldr	r3, [pc, #120]	; (8001c04 <SystemClock_Config+0xcc>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b90:	607b      	str	r3, [r7, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b94:	2301      	movs	r3, #1
 8001b96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ba2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ba8:	2308      	movs	r3, #8
 8001baa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001bac:	2378      	movs	r3, #120	; 0x78
 8001bae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001bb0:	2306      	movs	r3, #6
 8001bb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001bb4:	2305      	movs	r3, #5
 8001bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bb8:	f107 0320 	add.w	r3, r7, #32
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f002 fe7f 	bl	80048c0 <HAL_RCC_OscConfig>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bc8:	f000 f81e 	bl	8001c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bcc:	230f      	movs	r3, #15
 8001bce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001be0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001be2:	f107 030c 	add.w	r3, r7, #12
 8001be6:	2101      	movs	r1, #1
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 f8d9 	bl	8004da0 <HAL_RCC_ClockConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001bf4:	f000 f808 	bl	8001c08 <Error_Handler>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	3750      	adds	r7, #80	; 0x50
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40007000 	.word	0x40007000

08001c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	4a0f      	ldr	r2, [pc, #60]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_MspInit+0x4c>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800

08001c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c6c:	bf00      	nop
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr

08001c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c76:	b480      	push	{r7}
 8001c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c7a:	e7fe      	b.n	8001c7a <HardFault_Handler+0x4>

08001c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <MemManage_Handler+0x4>

08001c82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c86:	e7fe      	b.n	8001c86 <BusFault_Handler+0x4>

08001c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <UsageFault_Handler+0x4>

08001c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001caa:	b480      	push	{r7}
 8001cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cae:	bf00      	nop
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cbc:	f000 fa84 	bl	80021c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001cc8:	2002      	movs	r0, #2
 8001cca:	f001 fc5d 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
	 ************************************************************************************************/
	/* opto input 1 - long lights */
//	OptoInputsRisingFalling(OPTO_INPUT1_GPIO_Port, OPTO_INPUT1_Pin, 0x01);

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001cd6:	2004      	movs	r0, #4
 8001cd8:	f001 fc56 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
	 ************************************************************************************************/
	/* opto input 2 - long lights */
//	OptoInputsRisingFalling(OPTO_INPUT2_GPIO_Port, OPTO_INPUT2_Pin, 0x01);

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001ce4:	2008      	movs	r0, #8
 8001ce6:	f001 fc4f 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
	 ************************************************************************************************/
	/* opto input 3 - right indicator */
//	OptoInputsRisingFalling(OPTO_INPUT3_GPIO_Port, OPTO_INPUT3_Pin, 0x02);

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}

08001cee <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cee:	b580      	push	{r7, lr}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001cf2:	2010      	movs	r0, #16
 8001cf4:	f001 fc48 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
	 ************************************************************************************************/
	/* opto input - left indicator4 */
//	OptoInputsRisingFalling(OPTO_INPUT4_GPIO_Port, OPTO_INPUT4_Pin, 0x03);

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d00:	4805      	ldr	r0, [pc, #20]	; (8001d18 <CAN1_TX_IRQHandler+0x1c>)
 8001d02:	f000 ff0d 	bl	8002b20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */
  UsbTransfer(&can_frame_template);
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <CAN1_TX_IRQHandler+0x20>)
 8001d08:	f006 fcc8 	bl	800869c <UsbTransfer>

	/************************************************************************************************
	 CAN_HIGH_SPEED TX INTERRUPT HANDLING
	 ************************************************************************************************/

  CanClearTxDataFrame(&can_frame_template);
 8001d0c:	4803      	ldr	r0, [pc, #12]	; (8001d1c <CAN1_TX_IRQHandler+0x20>)
 8001d0e:	f7fe ffaf 	bl	8000c70 <CanClearTxDataFrame>
  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2000043c 	.word	0x2000043c
 8001d1c:	20000274 	.word	0x20000274

08001d20 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d22:	b09b      	sub	sp, #108	; 0x6c
 8001d24:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d26:	481b      	ldr	r0, [pc, #108]	; (8001d94 <CAN1_RX0_IRQHandler+0x74>)
 8001d28:	f000 fefa 	bl	8002b20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

	/************************************************************************************************
	 CAN_HIGH_SPEED RX INTERRUPT HANDLING
	 ************************************************************************************************/
	CanSaveReceivedData(CAN_HIGH_SPEED, &can_rx_frame_template);
 8001d2c:	46bc      	mov	ip, r7
 8001d2e:	4e19      	ldr	r6, [pc, #100]	; (8001d94 <CAN1_RX0_IRQHandler+0x74>)
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <CAN1_RX0_IRQHandler+0x78>)
 8001d32:	9307      	str	r3, [sp, #28]
 8001d34:	466d      	mov	r5, sp
 8001d36:	f106 040c 	add.w	r4, r6, #12
 8001d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d3e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d42:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d46:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001d4a:	4660      	mov	r0, ip
 8001d4c:	f7fe fd6a 	bl	8000824 <CanSaveReceivedData>
	UsbTransfer(&can_rx_frame_template);
 8001d50:	4811      	ldr	r0, [pc, #68]	; (8001d98 <CAN1_RX0_IRQHandler+0x78>)
 8001d52:	f006 fca3 	bl	800869c <UsbTransfer>
	if (can_rx_frame_template.rx_header.ExtId == 0x18FF50E5)
 8001d56:	4b10      	ldr	r3, [pc, #64]	; (8001d98 <CAN1_RX0_IRQHandler+0x78>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <CAN1_RX0_IRQHandler+0x7c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d108      	bne.n	8001d72 <CAN1_RX0_IRQHandler+0x52>
	{
		ActUponCurrentAndVoltage(&can_rx_frame_template, 3000, 200);
 8001d60:	22c8      	movs	r2, #200	; 0xc8
 8001d62:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001d66:	480c      	ldr	r0, [pc, #48]	; (8001d98 <CAN1_RX0_IRQHandler+0x78>)
 8001d68:	f7ff f8c6 	bl	8000ef8 <ActUponCurrentAndVoltage>
		CatchChargingErrorOccuring(&can_rx_frame_template);
 8001d6c:	480a      	ldr	r0, [pc, #40]	; (8001d98 <CAN1_RX0_IRQHandler+0x78>)
 8001d6e:	f7ff f8f9 	bl	8000f64 <CatchChargingErrorOccuring>
	}

//	CanTransferFrame(hcan1, &can_rx_frame_template);

	CatchErrorOccuring(&can_rx_frame_template);
 8001d72:	4809      	ldr	r0, [pc, #36]	; (8001d98 <CAN1_RX0_IRQHandler+0x78>)
 8001d74:	f7ff f90c 	bl	8000f90 <CatchErrorOccuring>

	WarningHandler(&can_rx_frame_template);
 8001d78:	4807      	ldr	r0, [pc, #28]	; (8001d98 <CAN1_RX0_IRQHandler+0x78>)
 8001d7a:	f7ff f91d 	bl	8000fb8 <WarningHandler>

	BMSWarningHandler(&can_rx_frame_template);
 8001d7e:	4806      	ldr	r0, [pc, #24]	; (8001d98 <CAN1_RX0_IRQHandler+0x78>)
 8001d80:	f7ff f864 	bl	8000e4c <BMSWarningHandler>

	ReverseManagement(&can_rx_frame_template);
 8001d84:	4804      	ldr	r0, [pc, #16]	; (8001d98 <CAN1_RX0_IRQHandler+0x78>)
 8001d86:	f7fe ffef 	bl	8000d68 <ReverseManagement>


  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	374c      	adds	r7, #76	; 0x4c
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2000043c 	.word	0x2000043c
 8001d98:	200003bc 	.word	0x200003bc
 8001d9c:	18ff50e5 	.word	0x18ff50e5

08001da0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <CAN1_RX1_IRQHandler+0x10>)
 8001da6:	f000 febb 	bl	8002b20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	2000043c 	.word	0x2000043c

08001db4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001db8:	2020      	movs	r0, #32
 8001dba:	f001 fbe5 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001dbe:	2040      	movs	r0, #64	; 0x40
 8001dc0:	f001 fbe2 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001dc4:	2080      	movs	r0, #128	; 0x80
 8001dc6:	f001 fbdf 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001dca:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001dce:	f001 fbdb 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001dd2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001dd6:	f001 fbd7 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
	/* opto input 12 - day lights */

	/* opto input 13 - sport */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001de6:	f003 f9fc 	bl	80051e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

	/************************************************************************************************
	 TIMER 10Hz INTERRUPT HANDLING
	 ************************************************************************************************/
	HAL_GPIO_TogglePin(LED_D4_GPIO_Port, LED_D4_Pin);
 8001dea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dee:	4803      	ldr	r0, [pc, #12]	; (8001dfc <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001df0:	f001 fbaf 	bl	8003552 <HAL_GPIO_TogglePin>
//	{
//		ChargingStateModule();
//	}

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001df4:	bf00      	nop
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	20000470 	.word	0x20000470
 8001dfc:	40020800 	.word	0x40020800

08001e00 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001e04:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e08:	f001 fbbe 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001e0c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e10:	f001 fbba 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001e14:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e18:	f001 fbb6 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e1c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e20:	f001 fbb2 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001e24:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e28:	f001 fbae 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001e2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e30:	f001 fbaa 	bl	8003588 <HAL_GPIO_EXTI_IRQHandler>
	 OPTO-INPUTS INTERRUPT HANDLING
	 ************************************************************************************************/


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001e3c:	4803      	ldr	r0, [pc, #12]	; (8001e4c <CAN2_TX_IRQHandler+0x14>)
 8001e3e:	f000 fe6f 	bl	8002b20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

	/************************************************************************************************
	 CAN_LOW_SPEED TX INTERRUPT HANDLING
	 ************************************************************************************************/
	UsbTransfer(&can_frame_template);
 8001e42:	4803      	ldr	r0, [pc, #12]	; (8001e50 <CAN2_TX_IRQHandler+0x18>)
 8001e44:	f006 fc2a 	bl	800869c <UsbTransfer>

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200002f4 	.word	0x200002f4
 8001e50:	20000274 	.word	0x20000274

08001e54 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e56:	b09b      	sub	sp, #108	; 0x6c
 8001e58:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001e5a:	480e      	ldr	r0, [pc, #56]	; (8001e94 <CAN2_RX0_IRQHandler+0x40>)
 8001e5c:	f000 fe60 	bl	8002b20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
  CanSaveReceivedData(CAN_LOW_SPEED, &can_rx_frame_template);
 8001e60:	46bc      	mov	ip, r7
 8001e62:	4e0c      	ldr	r6, [pc, #48]	; (8001e94 <CAN2_RX0_IRQHandler+0x40>)
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <CAN2_RX0_IRQHandler+0x44>)
 8001e66:	9307      	str	r3, [sp, #28]
 8001e68:	466d      	mov	r5, sp
 8001e6a:	f106 040c 	add.w	r4, r6, #12
 8001e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e72:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001e76:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001e7a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001e7e:	4660      	mov	r0, ip
 8001e80:	f7fe fcd0 	bl	8000824 <CanSaveReceivedData>
  CatchErrorOccuring(&can_rx_frame_template);
 8001e84:	4804      	ldr	r0, [pc, #16]	; (8001e98 <CAN2_RX0_IRQHandler+0x44>)
 8001e86:	f7ff f883 	bl	8000f90 <CatchErrorOccuring>

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	374c      	adds	r7, #76	; 0x4c
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200002f4 	.word	0x200002f4
 8001e98:	200003bc 	.word	0x200003bc

08001e9c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <CAN2_RX1_IRQHandler+0x10>)
 8001ea2:	f000 fe3d 	bl	8002b20 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200002f4 	.word	0x200002f4

08001eb0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001eb4:	4802      	ldr	r0, [pc, #8]	; (8001ec0 <OTG_HS_IRQHandler+0x10>)
 8001eb6:	f001 fccf 	bl	8003858 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */
//HAL_GPIO_TogglePin(LED_D6_GPIO_Port, LED_D6_Pin);
  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001eba:	bf00      	nop
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	20000a34 	.word	0x20000a34

08001ec4 <_read>:
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e00a      	b.n	8001eec <_read+0x28>
 8001ed6:	f3af 8000 	nop.w
 8001eda:	4601      	mov	r1, r0
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	60ba      	str	r2, [r7, #8]
 8001ee2:	b2ca      	uxtb	r2, r1
 8001ee4:	701a      	strb	r2, [r3, #0]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbf0      	blt.n	8001ed6 <_read+0x12>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_write>:
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e009      	b.n	8001f24 <_write+0x26>
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	60ba      	str	r2, [r7, #8]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f3af 8000 	nop.w
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dbf1      	blt.n	8001f10 <_write+0x12>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_close>:
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <_fstat>:
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
 8001f56:	6039      	str	r1, [r7, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	2300      	movs	r3, #0
 8001f62:	4618      	mov	r0, r3
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <_isatty>:
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	2301      	movs	r3, #1
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <_lseek>:
 8001f84:	b480      	push	{r7}
 8001f86:	b085      	sub	sp, #20
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	2300      	movs	r3, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <_sbrk>:
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <_sbrk+0x5c>)
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <_sbrk+0x60>)
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <_sbrk+0x22>
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <_sbrk+0x64>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <_sbrk+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <_sbrk+0x40>
 8001fd0:	f006 fff6 	bl	8008fc0 <__errno>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295
 8001fde:	e009      	b.n	8001ff4 <_sbrk+0x54>
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <_sbrk+0x64>)
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20020000 	.word	0x20020000
 8002000:	00004000 	.word	0x00004000
 8002004:	2000020c 	.word	0x2000020c
 8002008:	20000e50 	.word	0x20000e50

0800200c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002010:	4b08      	ldr	r3, [pc, #32]	; (8002034 <SystemInit+0x28>)
 8002012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002016:	4a07      	ldr	r2, [pc, #28]	; (8002034 <SystemInit+0x28>)
 8002018:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800201c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <SystemInit+0x28>)
 8002022:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002026:	609a      	str	r2, [r3, #8]
#endif
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 800203c:	4b0e      	ldr	r3, [pc, #56]	; (8002078 <MX_TIM10_Init+0x40>)
 800203e:	4a0f      	ldr	r2, [pc, #60]	; (800207c <MX_TIM10_Init+0x44>)
 8002040:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4999;
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <MX_TIM10_Init+0x40>)
 8002044:	f241 3287 	movw	r2, #4999	; 0x1387
 8002048:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <MX_TIM10_Init+0x40>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 7999;
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <MX_TIM10_Init+0x40>)
 8002052:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002056:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002058:	4b07      	ldr	r3, [pc, #28]	; (8002078 <MX_TIM10_Init+0x40>)
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <MX_TIM10_Init+0x40>)
 8002060:	2200      	movs	r2, #0
 8002062:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002064:	4804      	ldr	r0, [pc, #16]	; (8002078 <MX_TIM10_Init+0x40>)
 8002066:	f003 f86d 	bl	8005144 <HAL_TIM_Base_Init>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002070:	f7ff fdca 	bl	8001c08 <Error_Handler>
  }

}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000470 	.word	0x20000470
 800207c:	40014400 	.word	0x40014400

08002080 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0e      	ldr	r2, [pc, #56]	; (80020c8 <HAL_TIM_Base_MspInit+0x48>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d115      	bne.n	80020be <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <HAL_TIM_Base_MspInit+0x4c>)
 8002098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209a:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <HAL_TIM_Base_MspInit+0x4c>)
 800209c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a0:	6453      	str	r3, [r2, #68]	; 0x44
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <HAL_TIM_Base_MspInit+0x4c>)
 80020a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2101      	movs	r1, #1
 80020b2:	2019      	movs	r0, #25
 80020b4:	f001 f849 	bl	800314a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020b8:	2019      	movs	r0, #25
 80020ba:	f001 f862 	bl	8003182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40014400 	.word	0x40014400
 80020cc:	40023800 	.word	0x40023800

080020d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002108 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020d6:	e003      	b.n	80020e0 <LoopCopyDataInit>

080020d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020de:	3104      	adds	r1, #4

080020e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020e0:	480b      	ldr	r0, [pc, #44]	; (8002110 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020e2:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020e8:	d3f6      	bcc.n	80020d8 <CopyDataInit>
  ldr  r2, =_sbss
 80020ea:	4a0b      	ldr	r2, [pc, #44]	; (8002118 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020ec:	e002      	b.n	80020f4 <LoopFillZerobss>

080020ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020f0:	f842 3b04 	str.w	r3, [r2], #4

080020f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020f4:	4b09      	ldr	r3, [pc, #36]	; (800211c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020f8:	d3f9      	bcc.n	80020ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020fa:	f7ff ff87 	bl	800200c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020fe:	f006 ff65 	bl	8008fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002102:	f7ff fca7 	bl	8001a54 <main>
  bx  lr    
 8002106:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002108:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800210c:	0800a528 	.word	0x0800a528
  ldr  r0, =_sdata
 8002110:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002114:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8002118:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 800211c:	20000e4c 	.word	0x20000e4c

08002120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002120:	e7fe      	b.n	8002120 <ADC_IRQHandler>
	...

08002124 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002128:	4b0e      	ldr	r3, [pc, #56]	; (8002164 <HAL_Init+0x40>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0d      	ldr	r2, [pc, #52]	; (8002164 <HAL_Init+0x40>)
 800212e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002132:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_Init+0x40>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <HAL_Init+0x40>)
 800213a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800213e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002140:	4b08      	ldr	r3, [pc, #32]	; (8002164 <HAL_Init+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a07      	ldr	r2, [pc, #28]	; (8002164 <HAL_Init+0x40>)
 8002146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800214a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800214c:	2003      	movs	r0, #3
 800214e:	f000 fff1 	bl	8003134 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002152:	2000      	movs	r0, #0
 8002154:	f000 f808 	bl	8002168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002158:	f7ff fd5e 	bl	8001c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023c00 	.word	0x40023c00

08002168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <HAL_InitTick+0x54>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <HAL_InitTick+0x58>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4619      	mov	r1, r3
 800217a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800217e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002182:	fbb2 f3f3 	udiv	r3, r2, r3
 8002186:	4618      	mov	r0, r3
 8002188:	f001 f809 	bl	800319e <HAL_SYSTICK_Config>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e00e      	b.n	80021b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2b0f      	cmp	r3, #15
 800219a:	d80a      	bhi.n	80021b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800219c:	2200      	movs	r2, #0
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	f04f 30ff 	mov.w	r0, #4294967295
 80021a4:	f000 ffd1 	bl	800314a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021a8:	4a06      	ldr	r2, [pc, #24]	; (80021c4 <HAL_InitTick+0x5c>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
 80021b0:	e000      	b.n	80021b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	3708      	adds	r7, #8
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000000 	.word	0x20000000
 80021c0:	20000008 	.word	0x20000008
 80021c4:	20000004 	.word	0x20000004

080021c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_IncTick+0x20>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_IncTick+0x24>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4413      	add	r3, r2
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_IncTick+0x24>)
 80021da:	6013      	str	r3, [r2, #0]
}
 80021dc:	bf00      	nop
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20000008 	.word	0x20000008
 80021ec:	200004b0 	.word	0x200004b0

080021f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  return uwTick;
 80021f4:	4b03      	ldr	r3, [pc, #12]	; (8002204 <HAL_GetTick+0x14>)
 80021f6:	681b      	ldr	r3, [r3, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	200004b0 	.word	0x200004b0

08002208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002210:	f7ff ffee 	bl	80021f0 <HAL_GetTick>
 8002214:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002220:	d005      	beq.n	800222e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002222:	4b0a      	ldr	r3, [pc, #40]	; (800224c <HAL_Delay+0x44>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4413      	add	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800222e:	bf00      	nop
 8002230:	f7ff ffde 	bl	80021f0 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	429a      	cmp	r2, r3
 800223e:	d8f7      	bhi.n	8002230 <HAL_Delay+0x28>
  {
  }
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20000008 	.word	0x20000008

08002250 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e0ed      	b.n	800243e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d102      	bne.n	8002274 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7fe f9e6 	bl	8000640 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f022 0202 	bic.w	r2, r2, #2
 8002282:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002284:	f7ff ffb4 	bl	80021f0 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800228a:	e012      	b.n	80022b2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800228c:	f7ff ffb0 	bl	80021f0 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b0a      	cmp	r3, #10
 8002298:	d90b      	bls.n	80022b2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2205      	movs	r2, #5
 80022aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e0c5      	b.n	800243e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0302 	and.w	r3, r3, #2
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1e5      	bne.n	800228c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022d0:	f7ff ff8e 	bl	80021f0 <HAL_GetTick>
 80022d4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022d6:	e012      	b.n	80022fe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022d8:	f7ff ff8a 	bl	80021f0 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b0a      	cmp	r3, #10
 80022e4:	d90b      	bls.n	80022fe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2205      	movs	r2, #5
 80022f6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e09f      	b.n	800243e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0e5      	beq.n	80022d8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	7e1b      	ldrb	r3, [r3, #24]
 8002310:	2b01      	cmp	r3, #1
 8002312:	d108      	bne.n	8002326 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	e007      	b.n	8002336 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7e5b      	ldrb	r3, [r3, #25]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d108      	bne.n	8002350 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	e007      	b.n	8002360 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800235e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7e9b      	ldrb	r3, [r3, #26]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d108      	bne.n	800237a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0220 	orr.w	r2, r2, #32
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e007      	b.n	800238a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0220 	bic.w	r2, r2, #32
 8002388:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	7edb      	ldrb	r3, [r3, #27]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d108      	bne.n	80023a4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f022 0210 	bic.w	r2, r2, #16
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	e007      	b.n	80023b4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0210 	orr.w	r2, r2, #16
 80023b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	7f1b      	ldrb	r3, [r3, #28]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d108      	bne.n	80023ce <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0208 	orr.w	r2, r2, #8
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	e007      	b.n	80023de <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0208 	bic.w	r2, r2, #8
 80023dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7f5b      	ldrb	r3, [r3, #29]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d108      	bne.n	80023f8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0204 	orr.w	r2, r2, #4
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	e007      	b.n	8002408 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0204 	bic.w	r2, r2, #4
 8002406:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	431a      	orrs	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	ea42 0103 	orr.w	r1, r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	1e5a      	subs	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2200      	movs	r2, #0
 8002432:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3710      	adds	r7, #16
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
	...

08002448 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800245e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d003      	beq.n	800246e <HAL_CAN_ConfigFilter+0x26>
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	2b02      	cmp	r3, #2
 800246a:	f040 80be 	bne.w	80025ea <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800246e:	4b65      	ldr	r3, [pc, #404]	; (8002604 <HAL_CAN_ConfigFilter+0x1bc>)
 8002470:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002478:	f043 0201 	orr.w	r2, r3, #1
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002488:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	431a      	orrs	r2, r3
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f003 031f 	and.w	r3, r3, #31
 80024ae:	2201      	movs	r2, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	43db      	mvns	r3, r3
 80024c0:	401a      	ands	r2, r3
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d123      	bne.n	8002518 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	43db      	mvns	r3, r3
 80024da:	401a      	ands	r2, r3
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024f2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	3248      	adds	r2, #72	; 0x48
 80024f8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800250c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800250e:	6979      	ldr	r1, [r7, #20]
 8002510:	3348      	adds	r3, #72	; 0x48
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	440b      	add	r3, r1
 8002516:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d122      	bne.n	8002566 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002520:	697b      	ldr	r3, [r7, #20]
 8002522:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	431a      	orrs	r2, r3
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002540:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	3248      	adds	r2, #72	; 0x48
 8002546:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800255a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800255c:	6979      	ldr	r1, [r7, #20]
 800255e:	3348      	adds	r3, #72	; 0x48
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	440b      	add	r3, r1
 8002564:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	43db      	mvns	r3, r3
 8002578:	401a      	ands	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002580:	e007      	b.n	8002592 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	431a      	orrs	r2, r3
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	401a      	ands	r2, r3
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80025ac:	e007      	b.n	80025be <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	431a      	orrs	r2, r3
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d107      	bne.n	80025d6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025dc:	f023 0201 	bic.w	r2, r3, #1
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80025e6:	2300      	movs	r3, #0
 80025e8:	e006      	b.n	80025f8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
  }
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	371c      	adds	r7, #28
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	40006400 	.word	0x40006400

08002608 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b01      	cmp	r3, #1
 800261a:	d12e      	bne.n	800267a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2202      	movs	r2, #2
 8002620:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0201 	bic.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002634:	f7ff fddc 	bl	80021f0 <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800263a:	e012      	b.n	8002662 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800263c:	f7ff fdd8 	bl	80021f0 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b0a      	cmp	r3, #10
 8002648:	d90b      	bls.n	8002662 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2205      	movs	r2, #5
 800265a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e012      	b.n	8002688 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1e5      	bne.n	800263c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	e006      	b.n	8002688 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
  }
}
 8002688:	4618      	mov	r0, r3
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80026ae:	7ffb      	ldrb	r3, [r7, #31]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d003      	beq.n	80026bc <HAL_CAN_AddTxMessage+0x2c>
 80026b4:	7ffb      	ldrb	r3, [r7, #31]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	f040 80b8 	bne.w	800282c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10a      	bne.n	80026dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d105      	bne.n	80026dc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 80a0 	beq.w	800281c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	0e1b      	lsrs	r3, r3, #24
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d907      	bls.n	80026fc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e09e      	b.n	800283a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80026fc:	2201      	movs	r2, #1
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	409a      	lsls	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10d      	bne.n	800272a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002718:	68f9      	ldr	r1, [r7, #12]
 800271a:	6809      	ldr	r1, [r1, #0]
 800271c:	431a      	orrs	r2, r3
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3318      	adds	r3, #24
 8002722:	011b      	lsls	r3, r3, #4
 8002724:	440b      	add	r3, r1
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	e00f      	b.n	800274a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002734:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800273a:	68f9      	ldr	r1, [r7, #12]
 800273c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800273e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3318      	adds	r3, #24
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	440b      	add	r3, r1
 8002748:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3318      	adds	r3, #24
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	440b      	add	r3, r1
 800275a:	3304      	adds	r3, #4
 800275c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	7d1b      	ldrb	r3, [r3, #20]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d111      	bne.n	800278a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3318      	adds	r3, #24
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	4413      	add	r3, r2
 8002772:	3304      	adds	r3, #4
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	6811      	ldr	r1, [r2, #0]
 800277a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	3318      	adds	r3, #24
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	440b      	add	r3, r1
 8002786:	3304      	adds	r3, #4
 8002788:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3307      	adds	r3, #7
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	061a      	lsls	r2, r3, #24
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	3306      	adds	r3, #6
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	041b      	lsls	r3, r3, #16
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3305      	adds	r3, #5
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	021b      	lsls	r3, r3, #8
 80027a4:	4313      	orrs	r3, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	3204      	adds	r2, #4
 80027aa:	7812      	ldrb	r2, [r2, #0]
 80027ac:	4610      	mov	r0, r2
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	6811      	ldr	r1, [r2, #0]
 80027b2:	ea43 0200 	orr.w	r2, r3, r0
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	440b      	add	r3, r1
 80027bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80027c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	3303      	adds	r3, #3
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	061a      	lsls	r2, r3, #24
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3302      	adds	r3, #2
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	041b      	lsls	r3, r3, #16
 80027d2:	431a      	orrs	r2, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3301      	adds	r3, #1
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	021b      	lsls	r3, r3, #8
 80027dc:	4313      	orrs	r3, r2
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	7812      	ldrb	r2, [r2, #0]
 80027e2:	4610      	mov	r0, r2
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	6811      	ldr	r1, [r2, #0]
 80027e8:	ea43 0200 	orr.w	r2, r3, r0
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	440b      	add	r3, r1
 80027f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80027f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	3318      	adds	r3, #24
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	4413      	add	r3, r2
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	6811      	ldr	r1, [r2, #0]
 800280a:	f043 0201 	orr.w	r2, r3, #1
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	3318      	adds	r3, #24
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	440b      	add	r3, r1
 8002816:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	e00e      	b.n	800283a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e006      	b.n	800283a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	3724      	adds	r7, #36	; 0x24
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800284e:	2300      	movs	r3, #0
 8002850:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002858:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800285a:	7afb      	ldrb	r3, [r7, #11]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d002      	beq.n	8002866 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002860:	7afb      	ldrb	r3, [r7, #11]
 8002862:	2b02      	cmp	r3, #2
 8002864:	d11d      	bne.n	80028a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	3301      	adds	r3, #1
 8002878:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d002      	beq.n	800288e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3301      	adds	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d002      	beq.n	80028a2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	3301      	adds	r3, #1
 80028a0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80028a2:	68fb      	ldr	r3, [r7, #12]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028c4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d003      	beq.n	80028d4 <HAL_CAN_GetRxMessage+0x24>
 80028cc:	7dfb      	ldrb	r3, [r7, #23]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	f040 80f3 	bne.w	8002aba <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10e      	bne.n	80028f8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	f003 0303 	and.w	r3, r3, #3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d116      	bne.n	8002916 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0e7      	b.n	8002ac8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	2b00      	cmp	r3, #0
 8002904:	d107      	bne.n	8002916 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e0d8      	b.n	8002ac8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	331b      	adds	r3, #27
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	4413      	add	r3, r2
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0204 	and.w	r2, r3, #4
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10c      	bne.n	800294e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	331b      	adds	r3, #27
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	4413      	add	r3, r2
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	0d5b      	lsrs	r3, r3, #21
 8002944:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	e00b      	b.n	8002966 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	331b      	adds	r3, #27
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	4413      	add	r3, r2
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	08db      	lsrs	r3, r3, #3
 800295e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	331b      	adds	r3, #27
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	4413      	add	r3, r2
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0202 	and.w	r2, r3, #2
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	331b      	adds	r3, #27
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	4413      	add	r3, r2
 8002988:	3304      	adds	r3, #4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 020f 	and.w	r2, r3, #15
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	331b      	adds	r3, #27
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	4413      	add	r3, r2
 80029a0:	3304      	adds	r3, #4
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	0a1b      	lsrs	r3, r3, #8
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	331b      	adds	r3, #27
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	4413      	add	r3, r2
 80029b8:	3304      	adds	r3, #4
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	0c1b      	lsrs	r3, r3, #16
 80029be:	b29a      	uxth	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	011b      	lsls	r3, r3, #4
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	0a1a      	lsrs	r2, r3, #8
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	3301      	adds	r3, #1
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	011b      	lsls	r3, r3, #4
 80029fc:	4413      	add	r3, r2
 80029fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0c1a      	lsrs	r2, r3, #16
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	3302      	adds	r3, #2
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	0e1a      	lsrs	r2, r3, #24
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	3303      	adds	r3, #3
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	3304      	adds	r3, #4
 8002a3c:	b2d2      	uxtb	r2, r2
 8002a3e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	0a1a      	lsrs	r2, r3, #8
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	3305      	adds	r3, #5
 8002a56:	b2d2      	uxtb	r2, r2
 8002a58:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	0c1a      	lsrs	r2, r3, #16
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	3306      	adds	r3, #6
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	4413      	add	r3, r2
 8002a7e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	0e1a      	lsrs	r2, r3, #24
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	3307      	adds	r3, #7
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d108      	bne.n	8002aa6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68da      	ldr	r2, [r3, #12]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0220 	orr.w	r2, r2, #32
 8002aa2:	60da      	str	r2, [r3, #12]
 8002aa4:	e007      	b.n	8002ab6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f042 0220 	orr.w	r2, r2, #32
 8002ab4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e006      	b.n	8002ac8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
  }
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	371c      	adds	r7, #28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b085      	sub	sp, #20
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ae6:	7bfb      	ldrb	r3, [r7, #15]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d002      	beq.n	8002af2 <HAL_CAN_ActivateNotification+0x1e>
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d109      	bne.n	8002b06 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	6959      	ldr	r1, [r3, #20]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e006      	b.n	8002b14 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
  }
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	; 0x28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b5c:	6a3b      	ldr	r3, [r7, #32]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d07c      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d023      	beq.n	8002bb8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2201      	movs	r2, #1
 8002b76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f983 	bl	8002e8e <HAL_CAN_TxMailbox0CompleteCallback>
 8002b88:	e016      	b.n	8002bb8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d004      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9c:	e00c      	b.n	8002bb8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	f003 0308 	and.w	r3, r3, #8
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d004      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
 8002bb0:	e002      	b.n	8002bb8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 f989 	bl	8002eca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d024      	beq.n	8002c0c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002bcc:	69bb      	ldr	r3, [r7, #24]
 8002bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d003      	beq.n	8002bde <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 f963 	bl	8002ea2 <HAL_CAN_TxMailbox1CompleteCallback>
 8002bdc:	e016      	b.n	8002c0c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d004      	beq.n	8002bf2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf0:	e00c      	b.n	8002c0c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d004      	beq.n	8002c06 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c02:	627b      	str	r3, [r7, #36]	; 0x24
 8002c04:	e002      	b.n	8002c0c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 f969 	bl	8002ede <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d024      	beq.n	8002c60 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f943 	bl	8002eb6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002c30:	e016      	b.n	8002c60 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d004      	beq.n	8002c46 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
 8002c44:	e00c      	b.n	8002c60 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d004      	beq.n	8002c5a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c56:	627b      	str	r3, [r7, #36]	; 0x24
 8002c58:	e002      	b.n	8002c60 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 f949 	bl	8002ef2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c60:	6a3b      	ldr	r3, [r7, #32]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00c      	beq.n	8002c84 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2210      	movs	r2, #16
 8002c82:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	f003 0304 	and.w	r3, r3, #4
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d006      	beq.n	8002ca6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2208      	movs	r2, #8
 8002c9e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f93a 	bl	8002f1a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	f003 0302 	and.w	r3, r3, #2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d009      	beq.n	8002cc4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f921 	bl	8002f06 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00c      	beq.n	8002ce8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d007      	beq.n	8002ce8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	f003 0320 	and.w	r3, r3, #32
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d006      	beq.n	8002d0a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2208      	movs	r2, #8
 8002d02:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f91c 	bl	8002f42 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d009      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f903 	bl	8002f2e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00b      	beq.n	8002d4a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d006      	beq.n	8002d4a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2210      	movs	r2, #16
 8002d42:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f906 	bl	8002f56 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00b      	beq.n	8002d6c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d006      	beq.n	8002d6c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2208      	movs	r2, #8
 8002d64:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 f8ff 	bl	8002f6a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d07b      	beq.n	8002e6e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f003 0304 	and.w	r3, r3, #4
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d072      	beq.n	8002e66 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	f043 0301 	orr.w	r3, r3, #1
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	f043 0302 	orr.w	r3, r3, #2
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	f043 0304 	orr.w	r3, r3, #4
 8002dd2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d043      	beq.n	8002e66 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d03e      	beq.n	8002e66 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dee:	2b60      	cmp	r3, #96	; 0x60
 8002df0:	d02b      	beq.n	8002e4a <HAL_CAN_IRQHandler+0x32a>
 8002df2:	2b60      	cmp	r3, #96	; 0x60
 8002df4:	d82e      	bhi.n	8002e54 <HAL_CAN_IRQHandler+0x334>
 8002df6:	2b50      	cmp	r3, #80	; 0x50
 8002df8:	d022      	beq.n	8002e40 <HAL_CAN_IRQHandler+0x320>
 8002dfa:	2b50      	cmp	r3, #80	; 0x50
 8002dfc:	d82a      	bhi.n	8002e54 <HAL_CAN_IRQHandler+0x334>
 8002dfe:	2b40      	cmp	r3, #64	; 0x40
 8002e00:	d019      	beq.n	8002e36 <HAL_CAN_IRQHandler+0x316>
 8002e02:	2b40      	cmp	r3, #64	; 0x40
 8002e04:	d826      	bhi.n	8002e54 <HAL_CAN_IRQHandler+0x334>
 8002e06:	2b30      	cmp	r3, #48	; 0x30
 8002e08:	d010      	beq.n	8002e2c <HAL_CAN_IRQHandler+0x30c>
 8002e0a:	2b30      	cmp	r3, #48	; 0x30
 8002e0c:	d822      	bhi.n	8002e54 <HAL_CAN_IRQHandler+0x334>
 8002e0e:	2b10      	cmp	r3, #16
 8002e10:	d002      	beq.n	8002e18 <HAL_CAN_IRQHandler+0x2f8>
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d005      	beq.n	8002e22 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002e16:	e01d      	b.n	8002e54 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	f043 0308 	orr.w	r3, r3, #8
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e20:	e019      	b.n	8002e56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e24:	f043 0310 	orr.w	r3, r3, #16
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e2a:	e014      	b.n	8002e56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	f043 0320 	orr.w	r3, r3, #32
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e34:	e00f      	b.n	8002e56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e3e:	e00a      	b.n	8002e56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e48:	e005      	b.n	8002e56 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e52:	e000      	b.n	8002e56 <HAL_CAN_IRQHandler+0x336>
            break;
 8002e54:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	699a      	ldr	r2, [r3, #24]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e64:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f87c 	bl	8002f7e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e86:	bf00      	nop
 8002e88:	3728      	adds	r7, #40	; 0x28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	b083      	sub	sp, #12
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr

08002f1a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f1a:	b480      	push	{r7}
 8002f1c:	b083      	sub	sp, #12
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f22:	bf00      	nop
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b083      	sub	sp, #12
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fa4:	4b0c      	ldr	r3, [pc, #48]	; (8002fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fc6:	4a04      	ldr	r2, [pc, #16]	; (8002fd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	60d3      	str	r3, [r2, #12]
}
 8002fcc:	bf00      	nop
 8002fce:	3714      	adds	r7, #20
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fe0:	4b04      	ldr	r3, [pc, #16]	; (8002ff4 <__NVIC_GetPriorityGrouping+0x18>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	0a1b      	lsrs	r3, r3, #8
 8002fe6:	f003 0307 	and.w	r3, r3, #7
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	e000ed00 	.word	0xe000ed00

08002ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003006:	2b00      	cmp	r3, #0
 8003008:	db0b      	blt.n	8003022 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	f003 021f 	and.w	r2, r3, #31
 8003010:	4907      	ldr	r1, [pc, #28]	; (8003030 <__NVIC_EnableIRQ+0x38>)
 8003012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	2001      	movs	r0, #1
 800301a:	fa00 f202 	lsl.w	r2, r0, r2
 800301e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	e000e100 	.word	0xe000e100

08003034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	6039      	str	r1, [r7, #0]
 800303e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003044:	2b00      	cmp	r3, #0
 8003046:	db0a      	blt.n	800305e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	b2da      	uxtb	r2, r3
 800304c:	490c      	ldr	r1, [pc, #48]	; (8003080 <__NVIC_SetPriority+0x4c>)
 800304e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003052:	0112      	lsls	r2, r2, #4
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	440b      	add	r3, r1
 8003058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800305c:	e00a      	b.n	8003074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	b2da      	uxtb	r2, r3
 8003062:	4908      	ldr	r1, [pc, #32]	; (8003084 <__NVIC_SetPriority+0x50>)
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	3b04      	subs	r3, #4
 800306c:	0112      	lsls	r2, r2, #4
 800306e:	b2d2      	uxtb	r2, r2
 8003070:	440b      	add	r3, r1
 8003072:	761a      	strb	r2, [r3, #24]
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	e000e100 	.word	0xe000e100
 8003084:	e000ed00 	.word	0xe000ed00

08003088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003088:	b480      	push	{r7}
 800308a:	b089      	sub	sp, #36	; 0x24
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f1c3 0307 	rsb	r3, r3, #7
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	bf28      	it	cs
 80030a6:	2304      	movcs	r3, #4
 80030a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3304      	adds	r3, #4
 80030ae:	2b06      	cmp	r3, #6
 80030b0:	d902      	bls.n	80030b8 <NVIC_EncodePriority+0x30>
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3b03      	subs	r3, #3
 80030b6:	e000      	b.n	80030ba <NVIC_EncodePriority+0x32>
 80030b8:	2300      	movs	r3, #0
 80030ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030bc:	f04f 32ff 	mov.w	r2, #4294967295
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	fa02 f303 	lsl.w	r3, r2, r3
 80030c6:	43da      	mvns	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	401a      	ands	r2, r3
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d0:	f04f 31ff 	mov.w	r1, #4294967295
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	fa01 f303 	lsl.w	r3, r1, r3
 80030da:	43d9      	mvns	r1, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e0:	4313      	orrs	r3, r2
         );
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3724      	adds	r7, #36	; 0x24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003100:	d301      	bcc.n	8003106 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003102:	2301      	movs	r3, #1
 8003104:	e00f      	b.n	8003126 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003106:	4a0a      	ldr	r2, [pc, #40]	; (8003130 <SysTick_Config+0x40>)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3b01      	subs	r3, #1
 800310c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800310e:	210f      	movs	r1, #15
 8003110:	f04f 30ff 	mov.w	r0, #4294967295
 8003114:	f7ff ff8e 	bl	8003034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003118:	4b05      	ldr	r3, [pc, #20]	; (8003130 <SysTick_Config+0x40>)
 800311a:	2200      	movs	r2, #0
 800311c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800311e:	4b04      	ldr	r3, [pc, #16]	; (8003130 <SysTick_Config+0x40>)
 8003120:	2207      	movs	r2, #7
 8003122:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	e000e010 	.word	0xe000e010

08003134 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff ff29 	bl	8002f94 <__NVIC_SetPriorityGrouping>
}
 8003142:	bf00      	nop
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800314a:	b580      	push	{r7, lr}
 800314c:	b086      	sub	sp, #24
 800314e:	af00      	add	r7, sp, #0
 8003150:	4603      	mov	r3, r0
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800315c:	f7ff ff3e 	bl	8002fdc <__NVIC_GetPriorityGrouping>
 8003160:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68b9      	ldr	r1, [r7, #8]
 8003166:	6978      	ldr	r0, [r7, #20]
 8003168:	f7ff ff8e 	bl	8003088 <NVIC_EncodePriority>
 800316c:	4602      	mov	r2, r0
 800316e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003172:	4611      	mov	r1, r2
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff5d 	bl	8003034 <__NVIC_SetPriority>
}
 800317a:	bf00      	nop
 800317c:	3718      	adds	r7, #24
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	4603      	mov	r3, r0
 800318a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800318c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff31 	bl	8002ff8 <__NVIC_EnableIRQ>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b082      	sub	sp, #8
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ffa2 	bl	80030f0 <SysTick_Config>
 80031ac:	4603      	mov	r3, r0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b089      	sub	sp, #36	; 0x24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
 80031d2:	e16b      	b.n	80034ac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031d4:	2201      	movs	r2, #1
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4013      	ands	r3, r2
 80031e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	f040 815a 	bne.w	80034a6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d00b      	beq.n	8003212 <HAL_GPIO_Init+0x5a>
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d007      	beq.n	8003212 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003206:	2b11      	cmp	r3, #17
 8003208:	d003      	beq.n	8003212 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b12      	cmp	r3, #18
 8003210:	d130      	bne.n	8003274 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	2203      	movs	r2, #3
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	68da      	ldr	r2, [r3, #12]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	fa02 f303 	lsl.w	r3, r2, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003248:	2201      	movs	r2, #1
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 0201 	and.w	r2, r3, #1
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4313      	orrs	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	2203      	movs	r2, #3
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d003      	beq.n	80032b4 <HAL_GPIO_Init+0xfc>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b12      	cmp	r3, #18
 80032b2:	d123      	bne.n	80032fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	08da      	lsrs	r2, r3, #3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3208      	adds	r2, #8
 80032bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	f003 0307 	and.w	r3, r3, #7
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	220f      	movs	r2, #15
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	43db      	mvns	r3, r3
 80032d2:	69ba      	ldr	r2, [r7, #24]
 80032d4:	4013      	ands	r3, r2
 80032d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	691a      	ldr	r2, [r3, #16]
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	08da      	lsrs	r2, r3, #3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	3208      	adds	r2, #8
 80032f6:	69b9      	ldr	r1, [r7, #24]
 80032f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	2203      	movs	r2, #3
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0203 	and.w	r2, r3, #3
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	fa02 f303 	lsl.w	r3, r2, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003338:	2b00      	cmp	r3, #0
 800333a:	f000 80b4 	beq.w	80034a6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	4b60      	ldr	r3, [pc, #384]	; (80034c4 <HAL_GPIO_Init+0x30c>)
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	4a5f      	ldr	r2, [pc, #380]	; (80034c4 <HAL_GPIO_Init+0x30c>)
 8003348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800334c:	6453      	str	r3, [r2, #68]	; 0x44
 800334e:	4b5d      	ldr	r3, [pc, #372]	; (80034c4 <HAL_GPIO_Init+0x30c>)
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800335a:	4a5b      	ldr	r2, [pc, #364]	; (80034c8 <HAL_GPIO_Init+0x310>)
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	3302      	adds	r3, #2
 8003362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f003 0303 	and.w	r3, r3, #3
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	220f      	movs	r2, #15
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43db      	mvns	r3, r3
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	4013      	ands	r3, r2
 800337c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a52      	ldr	r2, [pc, #328]	; (80034cc <HAL_GPIO_Init+0x314>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d02b      	beq.n	80033de <HAL_GPIO_Init+0x226>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a51      	ldr	r2, [pc, #324]	; (80034d0 <HAL_GPIO_Init+0x318>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d025      	beq.n	80033da <HAL_GPIO_Init+0x222>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a50      	ldr	r2, [pc, #320]	; (80034d4 <HAL_GPIO_Init+0x31c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01f      	beq.n	80033d6 <HAL_GPIO_Init+0x21e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a4f      	ldr	r2, [pc, #316]	; (80034d8 <HAL_GPIO_Init+0x320>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d019      	beq.n	80033d2 <HAL_GPIO_Init+0x21a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a4e      	ldr	r2, [pc, #312]	; (80034dc <HAL_GPIO_Init+0x324>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_GPIO_Init+0x216>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a4d      	ldr	r2, [pc, #308]	; (80034e0 <HAL_GPIO_Init+0x328>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00d      	beq.n	80033ca <HAL_GPIO_Init+0x212>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a4c      	ldr	r2, [pc, #304]	; (80034e4 <HAL_GPIO_Init+0x32c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d007      	beq.n	80033c6 <HAL_GPIO_Init+0x20e>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a4b      	ldr	r2, [pc, #300]	; (80034e8 <HAL_GPIO_Init+0x330>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d101      	bne.n	80033c2 <HAL_GPIO_Init+0x20a>
 80033be:	2307      	movs	r3, #7
 80033c0:	e00e      	b.n	80033e0 <HAL_GPIO_Init+0x228>
 80033c2:	2308      	movs	r3, #8
 80033c4:	e00c      	b.n	80033e0 <HAL_GPIO_Init+0x228>
 80033c6:	2306      	movs	r3, #6
 80033c8:	e00a      	b.n	80033e0 <HAL_GPIO_Init+0x228>
 80033ca:	2305      	movs	r3, #5
 80033cc:	e008      	b.n	80033e0 <HAL_GPIO_Init+0x228>
 80033ce:	2304      	movs	r3, #4
 80033d0:	e006      	b.n	80033e0 <HAL_GPIO_Init+0x228>
 80033d2:	2303      	movs	r3, #3
 80033d4:	e004      	b.n	80033e0 <HAL_GPIO_Init+0x228>
 80033d6:	2302      	movs	r3, #2
 80033d8:	e002      	b.n	80033e0 <HAL_GPIO_Init+0x228>
 80033da:	2301      	movs	r3, #1
 80033dc:	e000      	b.n	80033e0 <HAL_GPIO_Init+0x228>
 80033de:	2300      	movs	r3, #0
 80033e0:	69fa      	ldr	r2, [r7, #28]
 80033e2:	f002 0203 	and.w	r2, r2, #3
 80033e6:	0092      	lsls	r2, r2, #2
 80033e8:	4093      	lsls	r3, r2
 80033ea:	69ba      	ldr	r2, [r7, #24]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f0:	4935      	ldr	r1, [pc, #212]	; (80034c8 <HAL_GPIO_Init+0x310>)
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	3302      	adds	r3, #2
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033fe:	4b3b      	ldr	r3, [pc, #236]	; (80034ec <HAL_GPIO_Init+0x334>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	43db      	mvns	r3, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4013      	ands	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	4313      	orrs	r3, r2
 8003420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003422:	4a32      	ldr	r2, [pc, #200]	; (80034ec <HAL_GPIO_Init+0x334>)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003428:	4b30      	ldr	r3, [pc, #192]	; (80034ec <HAL_GPIO_Init+0x334>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800344c:	4a27      	ldr	r2, [pc, #156]	; (80034ec <HAL_GPIO_Init+0x334>)
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003452:	4b26      	ldr	r3, [pc, #152]	; (80034ec <HAL_GPIO_Init+0x334>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	43db      	mvns	r3, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4013      	ands	r3, r2
 8003460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003476:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <HAL_GPIO_Init+0x334>)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800347c:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <HAL_GPIO_Init+0x334>)
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	43db      	mvns	r3, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4013      	ands	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034a0:	4a12      	ldr	r2, [pc, #72]	; (80034ec <HAL_GPIO_Init+0x334>)
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	3301      	adds	r3, #1
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	2b0f      	cmp	r3, #15
 80034b0:	f67f ae90 	bls.w	80031d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	3724      	adds	r7, #36	; 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800
 80034c8:	40013800 	.word	0x40013800
 80034cc:	40020000 	.word	0x40020000
 80034d0:	40020400 	.word	0x40020400
 80034d4:	40020800 	.word	0x40020800
 80034d8:	40020c00 	.word	0x40020c00
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40021400 	.word	0x40021400
 80034e4:	40021800 	.word	0x40021800
 80034e8:	40021c00 	.word	0x40021c00
 80034ec:	40013c00 	.word	0x40013c00

080034f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	887b      	ldrh	r3, [r7, #2]
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
 800350c:	e001      	b.n	8003512 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003512:	7bfb      	ldrb	r3, [r7, #15]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	460b      	mov	r3, r1
 800352a:	807b      	strh	r3, [r7, #2]
 800352c:	4613      	mov	r3, r2
 800352e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003530:	787b      	ldrb	r3, [r7, #1]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003536:	887a      	ldrh	r2, [r7, #2]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800353c:	e003      	b.n	8003546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800353e:	887b      	ldrh	r3, [r7, #2]
 8003540:	041a      	lsls	r2, r3, #16
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	619a      	str	r2, [r3, #24]
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
 800355a:	460b      	mov	r3, r1
 800355c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695a      	ldr	r2, [r3, #20]
 8003562:	887b      	ldrh	r3, [r7, #2]
 8003564:	401a      	ands	r2, r3
 8003566:	887b      	ldrh	r3, [r7, #2]
 8003568:	429a      	cmp	r2, r3
 800356a:	d104      	bne.n	8003576 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800356c:	887b      	ldrh	r3, [r7, #2]
 800356e:	041a      	lsls	r2, r3, #16
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003574:	e002      	b.n	800357c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003576:	887a      	ldrh	r2, [r7, #2]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	619a      	str	r2, [r3, #24]
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b082      	sub	sp, #8
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003592:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	4013      	ands	r3, r2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d006      	beq.n	80035ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800359e:	4a05      	ldr	r2, [pc, #20]	; (80035b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035a0:	88fb      	ldrh	r3, [r7, #6]
 80035a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035a4:	88fb      	ldrh	r3, [r7, #6]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fd ff04 	bl	80013b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80035ac:	bf00      	nop
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40013c00 	.word	0x40013c00

080035b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80035b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ba:	b08f      	sub	sp, #60	; 0x3c
 80035bc:	af0a      	add	r7, sp, #40	; 0x28
 80035be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e10f      	b.n	80037ea <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d106      	bne.n	80035ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f005 f9ed 	bl	80089c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2203      	movs	r2, #3
 80035ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d102      	bne.n	8003604 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f002 f8ee 	bl	80057ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	603b      	str	r3, [r7, #0]
 8003614:	687e      	ldr	r6, [r7, #4]
 8003616:	466d      	mov	r5, sp
 8003618:	f106 0410 	add.w	r4, r6, #16
 800361c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800361e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003620:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003622:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003624:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003628:	e885 0003 	stmia.w	r5, {r0, r1}
 800362c:	1d33      	adds	r3, r6, #4
 800362e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003630:	6838      	ldr	r0, [r7, #0]
 8003632:	f001 ffc5 	bl	80055c0 <USB_CoreInit>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e0d0      	b.n	80037ea <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f002 f8dc 	bl	800580c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003654:	2300      	movs	r3, #0
 8003656:	73fb      	strb	r3, [r7, #15]
 8003658:	e04a      	b.n	80036f0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	333d      	adds	r3, #61	; 0x3d
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800366e:	7bfa      	ldrb	r2, [r7, #15]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	333c      	adds	r3, #60	; 0x3c
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003682:	7bfa      	ldrb	r2, [r7, #15]
 8003684:	7bfb      	ldrb	r3, [r7, #15]
 8003686:	b298      	uxth	r0, r3
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3342      	adds	r3, #66	; 0x42
 8003696:	4602      	mov	r2, r0
 8003698:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	333f      	adds	r3, #63	; 0x3f
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036ae:	7bfa      	ldrb	r2, [r7, #15]
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	4613      	mov	r3, r2
 80036b4:	00db      	lsls	r3, r3, #3
 80036b6:	1a9b      	subs	r3, r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	3344      	adds	r3, #68	; 0x44
 80036be:	2200      	movs	r2, #0
 80036c0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036c2:	7bfa      	ldrb	r2, [r7, #15]
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	00db      	lsls	r3, r3, #3
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	3348      	adds	r3, #72	; 0x48
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036d6:	7bfa      	ldrb	r2, [r7, #15]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	3350      	adds	r3, #80	; 0x50
 80036e6:	2200      	movs	r2, #0
 80036e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ea:	7bfb      	ldrb	r3, [r7, #15]
 80036ec:	3301      	adds	r3, #1
 80036ee:	73fb      	strb	r3, [r7, #15]
 80036f0:	7bfa      	ldrb	r2, [r7, #15]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d3af      	bcc.n	800365a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	e044      	b.n	800378a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003700:	7bfa      	ldrb	r2, [r7, #15]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003716:	7bfa      	ldrb	r2, [r7, #15]
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	00db      	lsls	r3, r3, #3
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003728:	7bfa      	ldrb	r2, [r7, #15]
 800372a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800372c:	7bfa      	ldrb	r2, [r7, #15]
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	1a9b      	subs	r3, r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	440b      	add	r3, r1
 800373a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800373e:	2200      	movs	r2, #0
 8003740:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	4613      	mov	r3, r2
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	1a9b      	subs	r3, r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	440b      	add	r3, r1
 8003750:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003758:	7bfa      	ldrb	r2, [r7, #15]
 800375a:	6879      	ldr	r1, [r7, #4]
 800375c:	4613      	mov	r3, r2
 800375e:	00db      	lsls	r3, r3, #3
 8003760:	1a9b      	subs	r3, r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800376a:	2200      	movs	r2, #0
 800376c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4613      	mov	r3, r2
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	1a9b      	subs	r3, r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	3301      	adds	r3, #1
 8003788:	73fb      	strb	r3, [r7, #15]
 800378a:	7bfa      	ldrb	r2, [r7, #15]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	429a      	cmp	r2, r3
 8003792:	d3b5      	bcc.n	8003700 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	687e      	ldr	r6, [r7, #4]
 800379c:	466d      	mov	r5, sp
 800379e:	f106 0410 	add.w	r4, r6, #16
 80037a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80037b2:	1d33      	adds	r3, r6, #4
 80037b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037b6:	6838      	ldr	r0, [r7, #0]
 80037b8:	f002 f852 	bl	8005860 <USB_DevInit>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2202      	movs	r2, #2
 80037c6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e00d      	b.n	80037ea <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 f891 	bl	800690a <USB_DevDisconnect>

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037f2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b084      	sub	sp, #16
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_PCD_Start+0x1c>
 800380a:	2302      	movs	r3, #2
 800380c:	e020      	b.n	8003850 <HAL_PCD_Start+0x5e>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	2b01      	cmp	r3, #1
 800381c:	d109      	bne.n	8003832 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003822:	2b01      	cmp	r3, #1
 8003824:	d005      	beq.n	8003832 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4618      	mov	r0, r3
 8003838:	f003 f84f 	bl	80068da <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f001 ffc1 	bl	80057c8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3710      	adds	r7, #16
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003858:	b590      	push	{r4, r7, lr}
 800385a:	b08d      	sub	sp, #52	; 0x34
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f003 f8f6 	bl	8006a60 <USB_GetMode>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	f040 839d 	bne.w	8003fb6 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4618      	mov	r0, r3
 8003882:	f003 f85a 	bl	800693a <USB_ReadInterrupts>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8393 	beq.w	8003fb4 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f003 f851 	bl	800693a <USB_ReadInterrupts>
 8003898:	4603      	mov	r3, r0
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d107      	bne.n	80038b2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f002 0202 	and.w	r2, r2, #2
 80038b0:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f003 f83f 	bl	800693a <USB_ReadInterrupts>
 80038bc:	4603      	mov	r3, r0
 80038be:	f003 0310 	and.w	r3, r3, #16
 80038c2:	2b10      	cmp	r3, #16
 80038c4:	d161      	bne.n	800398a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699a      	ldr	r2, [r3, #24]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0210 	bic.w	r2, r2, #16
 80038d4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f003 020f 	and.w	r2, r3, #15
 80038e2:	4613      	mov	r3, r2
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	4413      	add	r3, r2
 80038f2:	3304      	adds	r3, #4
 80038f4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	0c5b      	lsrs	r3, r3, #17
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d124      	bne.n	800394c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003902:	69ba      	ldr	r2, [r7, #24]
 8003904:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d035      	beq.n	800397a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003918:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800391c:	b29b      	uxth	r3, r3
 800391e:	461a      	mov	r2, r3
 8003920:	6a38      	ldr	r0, [r7, #32]
 8003922:	f002 feb7 	bl	8006694 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	091b      	lsrs	r3, r3, #4
 800392e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003932:	441a      	add	r2, r3
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	699a      	ldr	r2, [r3, #24]
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003944:	441a      	add	r2, r3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	619a      	str	r2, [r3, #24]
 800394a:	e016      	b.n	800397a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	0c5b      	lsrs	r3, r3, #17
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	2b06      	cmp	r3, #6
 8003956:	d110      	bne.n	800397a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800395e:	2208      	movs	r2, #8
 8003960:	4619      	mov	r1, r3
 8003962:	6a38      	ldr	r0, [r7, #32]
 8003964:	f002 fe96 	bl	8006694 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	699a      	ldr	r2, [r3, #24]
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	091b      	lsrs	r3, r3, #4
 8003970:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003974:	441a      	add	r2, r3
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	699a      	ldr	r2, [r3, #24]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f042 0210 	orr.w	r2, r2, #16
 8003988:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f002 ffd3 	bl	800693a <USB_ReadInterrupts>
 8003994:	4603      	mov	r3, r0
 8003996:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800399a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800399e:	d16e      	bne.n	8003a7e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f002 ffd9 	bl	8006960 <USB_ReadDevAllOutEpInterrupt>
 80039ae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80039b0:	e062      	b.n	8003a78 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d057      	beq.n	8003a6c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f002 fffe 	bl	80069c8 <USB_ReadDevOutEPInterrupt>
 80039cc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00c      	beq.n	80039f2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80039d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e4:	461a      	mov	r2, r3
 80039e6:	2301      	movs	r3, #1
 80039e8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80039ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fdb1 	bl	8004554 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00c      	beq.n	8003a16 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f000 feab 	bl	800476c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2310      	movs	r3, #16
 8003a30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f003 0320 	and.w	r3, r3, #32
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a48:	461a      	mov	r2, r3
 8003a4a:	2320      	movs	r3, #32
 8003a4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d009      	beq.n	8003a6c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a64:	461a      	mov	r2, r3
 8003a66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	3301      	adds	r3, #1
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a74:	085b      	lsrs	r3, r3, #1
 8003a76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d199      	bne.n	80039b2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f002 ff59 	bl	800693a <USB_ReadInterrupts>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a92:	f040 80c0 	bne.w	8003c16 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f002 ff7a 	bl	8006994 <USB_ReadDevAllInEpInterrupt>
 8003aa0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003aa6:	e0b2      	b.n	8003c0e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 80a7 	beq.w	8003c02 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	4611      	mov	r1, r2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f002 ffa0 	bl	8006a04 <USB_ReadDevInEPInterrupt>
 8003ac4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d057      	beq.n	8003b80 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad2:	f003 030f 	and.w	r3, r3, #15
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	69f9      	ldr	r1, [r7, #28]
 8003aec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003af0:	4013      	ands	r3, r2
 8003af2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b00:	461a      	mov	r2, r3
 8003b02:	2301      	movs	r3, #1
 8003b04:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d132      	bne.n	8003b74 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b0e:	6879      	ldr	r1, [r7, #4]
 8003b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b12:	4613      	mov	r3, r2
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	3348      	adds	r3, #72	; 0x48
 8003b1e:	6819      	ldr	r1, [r3, #0]
 8003b20:	6878      	ldr	r0, [r7, #4]
 8003b22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b24:	4613      	mov	r3, r2
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4403      	add	r3, r0
 8003b2e:	3344      	adds	r3, #68	; 0x44
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4419      	add	r1, r3
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b38:	4613      	mov	r3, r2
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4403      	add	r3, r0
 8003b42:	3348      	adds	r3, #72	; 0x48
 8003b44:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d113      	bne.n	8003b74 <HAL_PCD_IRQHandler+0x31c>
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b50:	4613      	mov	r3, r2
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	3350      	adds	r3, #80	; 0x50
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d108      	bne.n	8003b74 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2101      	movs	r1, #1
 8003b70:	f002 ffa8 	bl	8006ac4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	4619      	mov	r1, r3
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f004 ff9f 	bl	8008abe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b96:	461a      	mov	r2, r3
 8003b98:	2308      	movs	r3, #8
 8003b9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bce:	461a      	mov	r2, r3
 8003bd0:	2340      	movs	r3, #64	; 0x40
 8003bd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bea:	461a      	mov	r2, r3
 8003bec:	2302      	movs	r3, #2
 8003bee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f000 fc1b 	bl	8004438 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	3301      	adds	r3, #1
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c0a:	085b      	lsrs	r3, r3, #1
 8003c0c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f47f af49 	bne.w	8003aa8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f002 fe8d 	bl	800693a <USB_ReadInterrupts>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c2a:	d122      	bne.n	8003c72 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c3a:	f023 0301 	bic.w	r3, r3, #1
 8003c3e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d108      	bne.n	8003c5c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c52:	2100      	movs	r1, #0
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fe27 	bl	80048a8 <HAL_PCDEx_LPM_Callback>
 8003c5a:	e002      	b.n	8003c62 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f004 ffa5 	bl	8008bac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	695a      	ldr	r2, [r3, #20]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f002 fe5f 	bl	800693a <USB_ReadInterrupts>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c86:	d112      	bne.n	8003cae <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d102      	bne.n	8003c9e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f004 ff61 	bl	8008b60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695a      	ldr	r2, [r3, #20]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003cac:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f002 fe41 	bl	800693a <USB_ReadInterrupts>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cc2:	f040 80c7 	bne.w	8003e54 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	69fa      	ldr	r2, [r7, #28]
 8003cd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cd4:	f023 0301 	bic.w	r3, r3, #1
 8003cd8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2110      	movs	r1, #16
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f001 ff21 	bl	8005b28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cea:	e056      	b.n	8003d9a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cfe:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d02:	015a      	lsls	r2, r3, #5
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	4413      	add	r3, r2
 8003d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d10:	0151      	lsls	r1, r2, #5
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	440a      	add	r2, r1
 8003d16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d1e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	015a      	lsls	r2, r3, #5
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	4413      	add	r3, r2
 8003d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d30:	0151      	lsls	r1, r2, #5
 8003d32:	69fa      	ldr	r2, [r7, #28]
 8003d34:	440a      	add	r2, r1
 8003d36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d3e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4c:	461a      	mov	r2, r3
 8003d4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d52:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d56:	015a      	lsls	r2, r3, #5
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d64:	0151      	lsls	r1, r2, #5
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	440a      	add	r2, r1
 8003d6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d84:	0151      	lsls	r1, r2, #5
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	440a      	add	r2, r1
 8003d8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d92:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d96:	3301      	adds	r3, #1
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d3a3      	bcc.n	8003cec <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003daa:	69db      	ldr	r3, [r3, #28]
 8003dac:	69fa      	ldr	r2, [r7, #28]
 8003dae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003db6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d016      	beq.n	8003dee <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dd0:	f043 030b 	orr.w	r3, r3, #11
 8003dd4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de0:	69fa      	ldr	r2, [r7, #28]
 8003de2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003de6:	f043 030b 	orr.w	r3, r3, #11
 8003dea:	6453      	str	r3, [r2, #68]	; 0x44
 8003dec:	e015      	b.n	8003e1a <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e00:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003e04:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	69fa      	ldr	r2, [r7, #28]
 8003e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e14:	f043 030b 	orr.w	r3, r3, #11
 8003e18:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69fa      	ldr	r2, [r7, #28]
 8003e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e28:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e2c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f002 fe40 	bl	8006ac4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695a      	ldr	r2, [r3, #20]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f002 fd6e 	bl	800693a <USB_ReadInterrupts>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e68:	d124      	bne.n	8003eb4 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f002 fe04 	bl	8006a7c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f001 feb6 	bl	8005bea <USB_GetDevSpeed>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	461a      	mov	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681c      	ldr	r4, [r3, #0]
 8003e8a:	f001 f94f 	bl	800512c <HAL_RCC_GetHCLKFreq>
 8003e8e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	461a      	mov	r2, r3
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f001 fbf3 	bl	8005684 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f004 fe35 	bl	8008b0e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695a      	ldr	r2, [r3, #20]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003eb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f002 fd3e 	bl	800693a <USB_ReadInterrupts>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d10a      	bne.n	8003ede <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f004 fe12 	bl	8008af2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f002 0208 	and.w	r2, r2, #8
 8003edc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f002 fd29 	bl	800693a <USB_ReadInterrupts>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ef2:	d10f      	bne.n	8003f14 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	4619      	mov	r1, r3
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f004 fe74 	bl	8008bec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695a      	ldr	r2, [r3, #20]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f002 fd0e 	bl	800693a <USB_ReadInterrupts>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f28:	d10f      	bne.n	8003f4a <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	4619      	mov	r1, r3
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f004 fe47 	bl	8008bc8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f002 fcf3 	bl	800693a <USB_ReadInterrupts>
 8003f54:	4603      	mov	r3, r0
 8003f56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f5e:	d10a      	bne.n	8003f76 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f004 fe55 	bl	8008c10 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f002 fcdd 	bl	800693a <USB_ReadInterrupts>
 8003f80:	4603      	mov	r3, r0
 8003f82:	f003 0304 	and.w	r3, r3, #4
 8003f86:	2b04      	cmp	r3, #4
 8003f88:	d115      	bne.n	8003fb6 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f004 fe45 	bl	8008c2c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6859      	ldr	r1, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	e000      	b.n	8003fb6 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003fb4:	bf00      	nop
    }
  }
}
 8003fb6:	3734      	adds	r7, #52	; 0x34
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd90      	pop	{r4, r7, pc}

08003fbc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_PCD_SetAddress+0x1a>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	e013      	b.n	8003ffe <HAL_PCD_SetAddress+0x42>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	78fa      	ldrb	r2, [r7, #3]
 8003fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	4611      	mov	r1, r2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f002 fc4d 	bl	800688e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b084      	sub	sp, #16
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
 800400e:	4608      	mov	r0, r1
 8004010:	4611      	mov	r1, r2
 8004012:	461a      	mov	r2, r3
 8004014:	4603      	mov	r3, r0
 8004016:	70fb      	strb	r3, [r7, #3]
 8004018:	460b      	mov	r3, r1
 800401a:	803b      	strh	r3, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004024:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004028:	2b00      	cmp	r3, #0
 800402a:	da0f      	bge.n	800404c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800402c:	78fb      	ldrb	r3, [r7, #3]
 800402e:	f003 020f 	and.w	r2, r3, #15
 8004032:	4613      	mov	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	3338      	adds	r3, #56	; 0x38
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	4413      	add	r3, r2
 8004040:	3304      	adds	r3, #4
 8004042:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2201      	movs	r2, #1
 8004048:	705a      	strb	r2, [r3, #1]
 800404a:	e00f      	b.n	800406c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	f003 020f 	and.w	r2, r3, #15
 8004052:	4613      	mov	r3, r2
 8004054:	00db      	lsls	r3, r3, #3
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	4413      	add	r3, r2
 8004062:	3304      	adds	r3, #4
 8004064:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	b2da      	uxtb	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004078:	883a      	ldrh	r2, [r7, #0]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	78ba      	ldrb	r2, [r7, #2]
 8004082:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	785b      	ldrb	r3, [r3, #1]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d004      	beq.n	8004096 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004096:	78bb      	ldrb	r3, [r7, #2]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d102      	bne.n	80040a2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2200      	movs	r2, #0
 80040a0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_PCD_EP_Open+0xaa>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e00e      	b.n	80040ce <HAL_PCD_EP_Open+0xc8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68f9      	ldr	r1, [r7, #12]
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 fdb8 	bl	8005c34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80040cc:	7afb      	ldrb	r3, [r7, #11]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	460b      	mov	r3, r1
 80040e0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	da0f      	bge.n	800410a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ea:	78fb      	ldrb	r3, [r7, #3]
 80040ec:	f003 020f 	and.w	r2, r3, #15
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	1a9b      	subs	r3, r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	3338      	adds	r3, #56	; 0x38
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	3304      	adds	r3, #4
 8004100:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	705a      	strb	r2, [r3, #1]
 8004108:	e00f      	b.n	800412a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	f003 020f 	and.w	r2, r3, #15
 8004110:	4613      	mov	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	1a9b      	subs	r3, r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	4413      	add	r3, r2
 8004120:	3304      	adds	r3, #4
 8004122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800412a:	78fb      	ldrb	r3, [r7, #3]
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	b2da      	uxtb	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800413c:	2b01      	cmp	r3, #1
 800413e:	d101      	bne.n	8004144 <HAL_PCD_EP_Close+0x6e>
 8004140:	2302      	movs	r3, #2
 8004142:	e00e      	b.n	8004162 <HAL_PCD_EP_Close+0x8c>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68f9      	ldr	r1, [r7, #12]
 8004152:	4618      	mov	r0, r3
 8004154:	f001 fdf6 	bl	8005d44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}

0800416a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800416a:	b580      	push	{r7, lr}
 800416c:	b086      	sub	sp, #24
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	607a      	str	r2, [r7, #4]
 8004174:	603b      	str	r3, [r7, #0]
 8004176:	460b      	mov	r3, r1
 8004178:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800417a:	7afb      	ldrb	r3, [r7, #11]
 800417c:	f003 020f 	and.w	r2, r3, #15
 8004180:	4613      	mov	r3, r2
 8004182:	00db      	lsls	r3, r3, #3
 8004184:	1a9b      	subs	r3, r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4413      	add	r3, r2
 8004190:	3304      	adds	r3, #4
 8004192:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2200      	movs	r2, #0
 80041a4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2200      	movs	r2, #0
 80041aa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ac:	7afb      	ldrb	r3, [r7, #11]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d102      	bne.n	80041c6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041c6:	7afb      	ldrb	r3, [r7, #11]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d109      	bne.n	80041e4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	6979      	ldr	r1, [r7, #20]
 80041de:	f002 f8d1 	bl	8006384 <USB_EP0StartXfer>
 80041e2:	e008      	b.n	80041f6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	6979      	ldr	r1, [r7, #20]
 80041f2:	f001 fe83 	bl	8005efc <USB_EPStartXfer>
  }

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	460b      	mov	r3, r1
 800420a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	f003 020f 	and.w	r2, r3, #15
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	607a      	str	r2, [r7, #4]
 800423a:	603b      	str	r3, [r7, #0]
 800423c:	460b      	mov	r3, r1
 800423e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004240:	7afb      	ldrb	r3, [r7, #11]
 8004242:	f003 020f 	and.w	r2, r3, #15
 8004246:	4613      	mov	r3, r2
 8004248:	00db      	lsls	r3, r3, #3
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	3338      	adds	r3, #56	; 0x38
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	3304      	adds	r3, #4
 8004256:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2200      	movs	r2, #0
 8004268:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2201      	movs	r2, #1
 800426e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004270:	7afb      	ldrb	r3, [r7, #11]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	b2da      	uxtb	r2, r3
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d102      	bne.n	800428a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800428a:	7afb      	ldrb	r3, [r7, #11]
 800428c:	f003 030f 	and.w	r3, r3, #15
 8004290:	2b00      	cmp	r3, #0
 8004292:	d109      	bne.n	80042a8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6818      	ldr	r0, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	6979      	ldr	r1, [r7, #20]
 80042a2:	f002 f86f 	bl	8006384 <USB_EP0StartXfer>
 80042a6:	e008      	b.n	80042ba <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	461a      	mov	r2, r3
 80042b4:	6979      	ldr	r1, [r7, #20]
 80042b6:	f001 fe21 	bl	8005efc <USB_EPStartXfer>
  }

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	f003 020f 	and.w	r2, r3, #15
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d901      	bls.n	80042e2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e050      	b.n	8004384 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	da0f      	bge.n	800430a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ea:	78fb      	ldrb	r3, [r7, #3]
 80042ec:	f003 020f 	and.w	r2, r3, #15
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	3338      	adds	r3, #56	; 0x38
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	4413      	add	r3, r2
 80042fe:	3304      	adds	r3, #4
 8004300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	705a      	strb	r2, [r3, #1]
 8004308:	e00d      	b.n	8004326 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	4613      	mov	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	1a9b      	subs	r3, r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	4413      	add	r3, r2
 800431c:	3304      	adds	r3, #4
 800431e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	b2da      	uxtb	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800433e:	2b01      	cmp	r3, #1
 8004340:	d101      	bne.n	8004346 <HAL_PCD_EP_SetStall+0x82>
 8004342:	2302      	movs	r3, #2
 8004344:	e01e      	b.n	8004384 <HAL_PCD_EP_SetStall+0xc0>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68f9      	ldr	r1, [r7, #12]
 8004354:	4618      	mov	r0, r3
 8004356:	f002 f9c6 	bl	80066e6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10a      	bne.n	800437a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6818      	ldr	r0, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	b2d9      	uxtb	r1, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004374:	461a      	mov	r2, r3
 8004376:	f002 fba5 	bl	8006ac4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	f003 020f 	and.w	r2, r3, #15
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d901      	bls.n	80043aa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e042      	b.n	8004430 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	da0f      	bge.n	80043d2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	f003 020f 	and.w	r2, r3, #15
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	3338      	adds	r3, #56	; 0x38
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	4413      	add	r3, r2
 80043c6:	3304      	adds	r3, #4
 80043c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	705a      	strb	r2, [r3, #1]
 80043d0:	e00f      	b.n	80043f2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043d2:	78fb      	ldrb	r3, [r7, #3]
 80043d4:	f003 020f 	and.w	r2, r3, #15
 80043d8:	4613      	mov	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	4413      	add	r3, r2
 80043e8:	3304      	adds	r3, #4
 80043ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043f8:	78fb      	ldrb	r3, [r7, #3]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	b2da      	uxtb	r2, r3
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_PCD_EP_ClrStall+0x86>
 800440e:	2302      	movs	r3, #2
 8004410:	e00e      	b.n	8004430 <HAL_PCD_EP_ClrStall+0xa4>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68f9      	ldr	r1, [r7, #12]
 8004420:	4618      	mov	r0, r3
 8004422:	f002 f9ce 	bl	80067c2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	; 0x28
 800443c:	af02      	add	r7, sp, #8
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	4613      	mov	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	3338      	adds	r3, #56	; 0x38
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	4413      	add	r3, r2
 800445c:	3304      	adds	r3, #4
 800445e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	699a      	ldr	r2, [r3, #24]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	429a      	cmp	r2, r3
 800446a:	d901      	bls.n	8004470 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e06c      	b.n	800454a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	69fa      	ldr	r2, [r7, #28]
 8004482:	429a      	cmp	r2, r3
 8004484:	d902      	bls.n	800448c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	3303      	adds	r3, #3
 8004490:	089b      	lsrs	r3, r3, #2
 8004492:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004494:	e02b      	b.n	80044ee <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	69fa      	ldr	r2, [r7, #28]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d902      	bls.n	80044b2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	3303      	adds	r3, #3
 80044b6:	089b      	lsrs	r3, r3, #2
 80044b8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	68d9      	ldr	r1, [r3, #12]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	4603      	mov	r3, r0
 80044d0:	6978      	ldr	r0, [r7, #20]
 80044d2:	f002 f8aa 	bl	800662a <USB_WritePacket>

    ep->xfer_buff  += len;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	68da      	ldr	r2, [r3, #12]
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	441a      	add	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	441a      	add	r2, r3
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fa:	699b      	ldr	r3, [r3, #24]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	429a      	cmp	r2, r3
 8004502:	d809      	bhi.n	8004518 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	699a      	ldr	r2, [r3, #24]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800450c:	429a      	cmp	r2, r3
 800450e:	d203      	bcs.n	8004518 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d1be      	bne.n	8004496 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	695a      	ldr	r2, [r3, #20]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	429a      	cmp	r2, r3
 8004522:	d811      	bhi.n	8004548 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	2201      	movs	r2, #1
 800452c:	fa02 f303 	lsl.w	r3, r2, r3
 8004530:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	43db      	mvns	r3, r3
 800453e:	6939      	ldr	r1, [r7, #16]
 8004540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004544:	4013      	ands	r3, r2
 8004546:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b086      	sub	sp, #24
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	333c      	adds	r3, #60	; 0x3c
 800456c:	3304      	adds	r3, #4
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	2b01      	cmp	r3, #1
 8004588:	f040 80a0 	bne.w	80046cc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d015      	beq.n	80045c2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	4a72      	ldr	r2, [pc, #456]	; (8004764 <PCD_EP_OutXfrComplete_int+0x210>)
 800459a:	4293      	cmp	r3, r2
 800459c:	f240 80dd 	bls.w	800475a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	f000 80d7 	beq.w	800475a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b8:	461a      	mov	r2, r3
 80045ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045be:	6093      	str	r3, [r2, #8]
 80045c0:	e0cb      	b.n	800475a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d009      	beq.n	80045e0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	015a      	lsls	r2, r3, #5
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	4413      	add	r3, r2
 80045d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d8:	461a      	mov	r2, r3
 80045da:	2320      	movs	r3, #32
 80045dc:	6093      	str	r3, [r2, #8]
 80045de:	e0bc      	b.n	800475a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f040 80b7 	bne.w	800475a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	4a5d      	ldr	r2, [pc, #372]	; (8004764 <PCD_EP_OutXfrComplete_int+0x210>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d90f      	bls.n	8004614 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460a:	461a      	mov	r2, r3
 800460c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004610:	6093      	str	r3, [r2, #8]
 8004612:	e0a2      	b.n	800475a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004626:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	0159      	lsls	r1, r3, #5
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	440b      	add	r3, r1
 8004630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800463a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	4613      	mov	r3, r2
 8004642:	00db      	lsls	r3, r3, #3
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4403      	add	r3, r0
 800464a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800464e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004650:	6879      	ldr	r1, [r7, #4]
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	4613      	mov	r3, r2
 8004656:	00db      	lsls	r3, r3, #3
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004662:	6819      	ldr	r1, [r3, #0]
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4403      	add	r3, r0
 8004672:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4419      	add	r1, r3
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	4613      	mov	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4403      	add	r3, r0
 8004688:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800468c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d114      	bne.n	80046be <PCD_EP_OutXfrComplete_int+0x16a>
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	4613      	mov	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	1a9b      	subs	r3, r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d108      	bne.n	80046be <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80046b6:	461a      	mov	r2, r3
 80046b8:	2101      	movs	r1, #1
 80046ba:	f002 fa03 	bl	8006ac4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	4619      	mov	r1, r3
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f004 f9df 	bl	8008a88 <HAL_PCD_DataOutStageCallback>
 80046ca:	e046      	b.n	800475a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4a26      	ldr	r2, [pc, #152]	; (8004768 <PCD_EP_OutXfrComplete_int+0x214>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d124      	bne.n	800471e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	015a      	lsls	r2, r3, #5
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	4413      	add	r3, r2
 80046e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ea:	461a      	mov	r2, r3
 80046ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046f0:	6093      	str	r3, [r2, #8]
 80046f2:	e032      	b.n	800475a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470a:	461a      	mov	r2, r3
 800470c:	2320      	movs	r3, #32
 800470e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f004 f9b6 	bl	8008a88 <HAL_PCD_DataOutStageCallback>
 800471c:	e01d      	b.n	800475a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d114      	bne.n	800474e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	1a9b      	subs	r3, r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d108      	bne.n	800474e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004746:	461a      	mov	r2, r3
 8004748:	2100      	movs	r1, #0
 800474a:	f002 f9bb 	bl	8006ac4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	4619      	mov	r1, r3
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f004 f997 	bl	8008a88 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3718      	adds	r7, #24
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	4f54300a 	.word	0x4f54300a
 8004768:	4f54310a 	.word	0x4f54310a

0800476c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b086      	sub	sp, #24
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	333c      	adds	r3, #60	; 0x3c
 8004784:	3304      	adds	r3, #4
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	4a15      	ldr	r2, [pc, #84]	; (80047f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d90e      	bls.n	80047c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d009      	beq.n	80047c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b8:	461a      	mov	r2, r3
 80047ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f004 f94f 	bl	8008a64 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d90c      	bls.n	80047e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d108      	bne.n	80047e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6818      	ldr	r0, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047e0:	461a      	mov	r2, r3
 80047e2:	2101      	movs	r1, #1
 80047e4:	f002 f96e 	bl	8006ac4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3718      	adds	r7, #24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	4f54300a 	.word	0x4f54300a

080047f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	460b      	mov	r3, r1
 8004802:	70fb      	strb	r3, [r7, #3]
 8004804:	4613      	mov	r3, r2
 8004806:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004810:	78fb      	ldrb	r3, [r7, #3]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d107      	bne.n	8004826 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004816:	883b      	ldrh	r3, [r7, #0]
 8004818:	0419      	lsls	r1, r3, #16
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	430a      	orrs	r2, r1
 8004822:	629a      	str	r2, [r3, #40]	; 0x28
 8004824:	e028      	b.n	8004878 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	4413      	add	r3, r2
 8004832:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004834:	2300      	movs	r3, #0
 8004836:	73fb      	strb	r3, [r7, #15]
 8004838:	e00d      	b.n	8004856 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	3340      	adds	r3, #64	; 0x40
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	0c1b      	lsrs	r3, r3, #16
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	4413      	add	r3, r2
 800484e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004850:	7bfb      	ldrb	r3, [r7, #15]
 8004852:	3301      	adds	r3, #1
 8004854:	73fb      	strb	r3, [r7, #15]
 8004856:	7bfa      	ldrb	r2, [r7, #15]
 8004858:	78fb      	ldrb	r3, [r7, #3]
 800485a:	3b01      	subs	r3, #1
 800485c:	429a      	cmp	r2, r3
 800485e:	d3ec      	bcc.n	800483a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004860:	883b      	ldrh	r3, [r7, #0]
 8004862:	0418      	lsls	r0, r3, #16
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6819      	ldr	r1, [r3, #0]
 8004868:	78fb      	ldrb	r3, [r7, #3]
 800486a:	3b01      	subs	r3, #1
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	4302      	orrs	r2, r0
 8004870:	3340      	adds	r3, #64	; 0x40
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	440b      	add	r3, r1
 8004876:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	460b      	mov	r3, r1
 8004890:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	887a      	ldrh	r2, [r7, #2]
 8004898:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e25b      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d075      	beq.n	80049ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048de:	4ba3      	ldr	r3, [pc, #652]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d00c      	beq.n	8004904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ea:	4ba0      	ldr	r3, [pc, #640]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d112      	bne.n	800491c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f6:	4b9d      	ldr	r3, [pc, #628]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004902:	d10b      	bne.n	800491c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004904:	4b99      	ldr	r3, [pc, #612]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d05b      	beq.n	80049c8 <HAL_RCC_OscConfig+0x108>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d157      	bne.n	80049c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e236      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004924:	d106      	bne.n	8004934 <HAL_RCC_OscConfig+0x74>
 8004926:	4b91      	ldr	r3, [pc, #580]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a90      	ldr	r2, [pc, #576]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e01d      	b.n	8004970 <HAL_RCC_OscConfig+0xb0>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800493c:	d10c      	bne.n	8004958 <HAL_RCC_OscConfig+0x98>
 800493e:	4b8b      	ldr	r3, [pc, #556]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a8a      	ldr	r2, [pc, #552]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	4b88      	ldr	r3, [pc, #544]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a87      	ldr	r2, [pc, #540]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e00b      	b.n	8004970 <HAL_RCC_OscConfig+0xb0>
 8004958:	4b84      	ldr	r3, [pc, #528]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a83      	ldr	r2, [pc, #524]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 800495e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	4b81      	ldr	r3, [pc, #516]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a80      	ldr	r2, [pc, #512]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 800496a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800496e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d013      	beq.n	80049a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004978:	f7fd fc3a 	bl	80021f0 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004980:	f7fd fc36 	bl	80021f0 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	; 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e1fb      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004992:	4b76      	ldr	r3, [pc, #472]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0xc0>
 800499e:	e014      	b.n	80049ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7fd fc26 	bl	80021f0 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049a8:	f7fd fc22 	bl	80021f0 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	; 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e1e7      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ba:	4b6c      	ldr	r3, [pc, #432]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0xe8>
 80049c6:	e000      	b.n	80049ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d063      	beq.n	8004a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049d6:	4b65      	ldr	r3, [pc, #404]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00b      	beq.n	80049fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049e2:	4b62      	ldr	r3, [pc, #392]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d11c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ee:	4b5f      	ldr	r3, [pc, #380]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d116      	bne.n	8004a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fa:	4b5c      	ldr	r3, [pc, #368]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_RCC_OscConfig+0x152>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e1bb      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a12:	4b56      	ldr	r3, [pc, #344]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4952      	ldr	r1, [pc, #328]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a26:	e03a      	b.n	8004a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d020      	beq.n	8004a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a30:	4b4f      	ldr	r3, [pc, #316]	; (8004b70 <HAL_RCC_OscConfig+0x2b0>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a36:	f7fd fbdb 	bl	80021f0 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a3e:	f7fd fbd7 	bl	80021f0 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e19c      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a50:	4b46      	ldr	r3, [pc, #280]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5c:	4b43      	ldr	r3, [pc, #268]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4940      	ldr	r1, [pc, #256]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	600b      	str	r3, [r1, #0]
 8004a70:	e015      	b.n	8004a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a72:	4b3f      	ldr	r3, [pc, #252]	; (8004b70 <HAL_RCC_OscConfig+0x2b0>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fd fbba 	bl	80021f0 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a80:	f7fd fbb6 	bl	80021f0 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e17b      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a92:	4b36      	ldr	r3, [pc, #216]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d030      	beq.n	8004b0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d016      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ab2:	4b30      	ldr	r3, [pc, #192]	; (8004b74 <HAL_RCC_OscConfig+0x2b4>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab8:	f7fd fb9a 	bl	80021f0 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ac0:	f7fd fb96 	bl	80021f0 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e15b      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad2:	4b26      	ldr	r3, [pc, #152]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x200>
 8004ade:	e015      	b.n	8004b0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae0:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <HAL_RCC_OscConfig+0x2b4>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae6:	f7fd fb83 	bl	80021f0 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aee:	f7fd fb7f 	bl	80021f0 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e144      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b00:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1f0      	bne.n	8004aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0304 	and.w	r3, r3, #4
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80a0 	beq.w	8004c5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1e:	4b13      	ldr	r3, [pc, #76]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	4a0e      	ldr	r2, [pc, #56]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b38:	6413      	str	r3, [r2, #64]	; 0x40
 8004b3a:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <HAL_RCC_OscConfig+0x2ac>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b42:	60bb      	str	r3, [r7, #8]
 8004b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b46:	2301      	movs	r3, #1
 8004b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <HAL_RCC_OscConfig+0x2b8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d121      	bne.n	8004b9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b56:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <HAL_RCC_OscConfig+0x2b8>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a07      	ldr	r2, [pc, #28]	; (8004b78 <HAL_RCC_OscConfig+0x2b8>)
 8004b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b62:	f7fd fb45 	bl	80021f0 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b68:	e011      	b.n	8004b8e <HAL_RCC_OscConfig+0x2ce>
 8004b6a:	bf00      	nop
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	42470000 	.word	0x42470000
 8004b74:	42470e80 	.word	0x42470e80
 8004b78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7c:	f7fd fb38 	bl	80021f0 <HAL_GetTick>
 8004b80:	4602      	mov	r2, r0
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d901      	bls.n	8004b8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	e0fd      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b8e:	4b81      	ldr	r3, [pc, #516]	; (8004d94 <HAL_RCC_OscConfig+0x4d4>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d0f0      	beq.n	8004b7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d106      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x2f0>
 8004ba2:	4b7d      	ldr	r3, [pc, #500]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	4a7c      	ldr	r2, [pc, #496]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004ba8:	f043 0301 	orr.w	r3, r3, #1
 8004bac:	6713      	str	r3, [r2, #112]	; 0x70
 8004bae:	e01c      	b.n	8004bea <HAL_RCC_OscConfig+0x32a>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2b05      	cmp	r3, #5
 8004bb6:	d10c      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x312>
 8004bb8:	4b77      	ldr	r3, [pc, #476]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbc:	4a76      	ldr	r2, [pc, #472]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004bbe:	f043 0304 	orr.w	r3, r3, #4
 8004bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc4:	4b74      	ldr	r3, [pc, #464]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc8:	4a73      	ldr	r2, [pc, #460]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd0:	e00b      	b.n	8004bea <HAL_RCC_OscConfig+0x32a>
 8004bd2:	4b71      	ldr	r3, [pc, #452]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd6:	4a70      	ldr	r2, [pc, #448]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bde:	4b6e      	ldr	r3, [pc, #440]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	4a6d      	ldr	r2, [pc, #436]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004be4:	f023 0304 	bic.w	r3, r3, #4
 8004be8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d015      	beq.n	8004c1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf2:	f7fd fafd 	bl	80021f0 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfa:	f7fd faf9 	bl	80021f0 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e0bc      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c10:	4b61      	ldr	r3, [pc, #388]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0ee      	beq.n	8004bfa <HAL_RCC_OscConfig+0x33a>
 8004c1c:	e014      	b.n	8004c48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c1e:	f7fd fae7 	bl	80021f0 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c24:	e00a      	b.n	8004c3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c26:	f7fd fae3 	bl	80021f0 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e0a6      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c3c:	4b56      	ldr	r3, [pc, #344]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1ee      	bne.n	8004c26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c48:	7dfb      	ldrb	r3, [r7, #23]
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d105      	bne.n	8004c5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c4e:	4b52      	ldr	r3, [pc, #328]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c52:	4a51      	ldr	r2, [pc, #324]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 8092 	beq.w	8004d88 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c64:	4b4c      	ldr	r3, [pc, #304]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 030c 	and.w	r3, r3, #12
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d05c      	beq.n	8004d2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d141      	bne.n	8004cfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c78:	4b48      	ldr	r3, [pc, #288]	; (8004d9c <HAL_RCC_OscConfig+0x4dc>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c7e:	f7fd fab7 	bl	80021f0 <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c86:	f7fd fab3 	bl	80021f0 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e078      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c98:	4b3f      	ldr	r3, [pc, #252]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1f0      	bne.n	8004c86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	69da      	ldr	r2, [r3, #28]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a1b      	ldr	r3, [r3, #32]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	019b      	lsls	r3, r3, #6
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	041b      	lsls	r3, r3, #16
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc6:	061b      	lsls	r3, r3, #24
 8004cc8:	4933      	ldr	r1, [pc, #204]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cce:	4b33      	ldr	r3, [pc, #204]	; (8004d9c <HAL_RCC_OscConfig+0x4dc>)
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd4:	f7fd fa8c 	bl	80021f0 <HAL_GetTick>
 8004cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cda:	e008      	b.n	8004cee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cdc:	f7fd fa88 	bl	80021f0 <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d901      	bls.n	8004cee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e04d      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cee:	4b2a      	ldr	r3, [pc, #168]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d0f0      	beq.n	8004cdc <HAL_RCC_OscConfig+0x41c>
 8004cfa:	e045      	b.n	8004d88 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfc:	4b27      	ldr	r3, [pc, #156]	; (8004d9c <HAL_RCC_OscConfig+0x4dc>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d02:	f7fd fa75 	bl	80021f0 <HAL_GetTick>
 8004d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d0a:	f7fd fa71 	bl	80021f0 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	693b      	ldr	r3, [r7, #16]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e036      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1c:	4b1e      	ldr	r3, [pc, #120]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f0      	bne.n	8004d0a <HAL_RCC_OscConfig+0x44a>
 8004d28:	e02e      	b.n	8004d88 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e029      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d36:	4b18      	ldr	r3, [pc, #96]	; (8004d98 <HAL_RCC_OscConfig+0x4d8>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d11c      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d115      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d5e:	4013      	ands	r3, r2
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d10d      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d106      	bne.n	8004d84 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d001      	beq.n	8004d88 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e000      	b.n	8004d8a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3718      	adds	r7, #24
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40007000 	.word	0x40007000
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	42470060 	.word	0x42470060

08004da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0cc      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004db4:	4b68      	ldr	r3, [pc, #416]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 030f 	and.w	r3, r3, #15
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d90c      	bls.n	8004ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc2:	4b65      	ldr	r3, [pc, #404]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dca:	4b63      	ldr	r3, [pc, #396]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d001      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0b8      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d020      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df4:	4b59      	ldr	r3, [pc, #356]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4a58      	ldr	r2, [pc, #352]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e0c:	4b53      	ldr	r3, [pc, #332]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4a52      	ldr	r2, [pc, #328]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e18:	4b50      	ldr	r3, [pc, #320]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	494d      	ldr	r1, [pc, #308]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d044      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d107      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3e:	4b47      	ldr	r3, [pc, #284]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d119      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e07f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d003      	beq.n	8004e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d107      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5e:	4b3f      	ldr	r3, [pc, #252]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e06f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6e:	4b3b      	ldr	r3, [pc, #236]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e067      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e7e:	4b37      	ldr	r3, [pc, #220]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f023 0203 	bic.w	r2, r3, #3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4934      	ldr	r1, [pc, #208]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e90:	f7fd f9ae 	bl	80021f0 <HAL_GetTick>
 8004e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e96:	e00a      	b.n	8004eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e98:	f7fd f9aa 	bl	80021f0 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e04f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eae:	4b2b      	ldr	r3, [pc, #172]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 020c 	and.w	r2, r3, #12
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d1eb      	bne.n	8004e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d20c      	bcs.n	8004ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ece:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed6:	4b20      	ldr	r3, [pc, #128]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 030f 	and.w	r3, r3, #15
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d001      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e032      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef4:	4b19      	ldr	r3, [pc, #100]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4916      	ldr	r1, [pc, #88]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f12:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	490e      	ldr	r1, [pc, #56]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f26:	f000 f821 	bl	8004f6c <HAL_RCC_GetSysClockFreq>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	490a      	ldr	r1, [pc, #40]	; (8004f60 <HAL_RCC_ClockConfig+0x1c0>)
 8004f38:	5ccb      	ldrb	r3, [r1, r3]
 8004f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3e:	4a09      	ldr	r2, [pc, #36]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f42:	4b09      	ldr	r3, [pc, #36]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fd f90e 	bl	8002168 <HAL_InitTick>

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40023c00 	.word	0x40023c00
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	0800a470 	.word	0x0800a470
 8004f64:	20000000 	.word	0x20000000
 8004f68:	20000004 	.word	0x20000004

08004f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	607b      	str	r3, [r7, #4]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f84:	4b67      	ldr	r3, [pc, #412]	; (8005124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 030c 	and.w	r3, r3, #12
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d00d      	beq.n	8004fac <HAL_RCC_GetSysClockFreq+0x40>
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	f200 80bd 	bhi.w	8005110 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d003      	beq.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f9e:	e0b7      	b.n	8005110 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fa0:	4b61      	ldr	r3, [pc, #388]	; (8005128 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004fa2:	60bb      	str	r3, [r7, #8]
       break;
 8004fa4:	e0b7      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fa6:	4b60      	ldr	r3, [pc, #384]	; (8005128 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004fa8:	60bb      	str	r3, [r7, #8]
      break;
 8004faa:	e0b4      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fac:	4b5d      	ldr	r3, [pc, #372]	; (8005124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fb4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fb6:	4b5b      	ldr	r3, [pc, #364]	; (8005124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d04d      	beq.n	800505e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc2:	4b58      	ldr	r3, [pc, #352]	; (8005124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	099b      	lsrs	r3, r3, #6
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fd2:	f04f 0100 	mov.w	r1, #0
 8004fd6:	ea02 0800 	and.w	r8, r2, r0
 8004fda:	ea03 0901 	and.w	r9, r3, r1
 8004fde:	4640      	mov	r0, r8
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	f04f 0200 	mov.w	r2, #0
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	014b      	lsls	r3, r1, #5
 8004fec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ff0:	0142      	lsls	r2, r0, #5
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	ebb0 0008 	subs.w	r0, r0, r8
 8004ffa:	eb61 0109 	sbc.w	r1, r1, r9
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	018b      	lsls	r3, r1, #6
 8005008:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800500c:	0182      	lsls	r2, r0, #6
 800500e:	1a12      	subs	r2, r2, r0
 8005010:	eb63 0301 	sbc.w	r3, r3, r1
 8005014:	f04f 0000 	mov.w	r0, #0
 8005018:	f04f 0100 	mov.w	r1, #0
 800501c:	00d9      	lsls	r1, r3, #3
 800501e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005022:	00d0      	lsls	r0, r2, #3
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	eb12 0208 	adds.w	r2, r2, r8
 800502c:	eb43 0309 	adc.w	r3, r3, r9
 8005030:	f04f 0000 	mov.w	r0, #0
 8005034:	f04f 0100 	mov.w	r1, #0
 8005038:	0299      	lsls	r1, r3, #10
 800503a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800503e:	0290      	lsls	r0, r2, #10
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4610      	mov	r0, r2
 8005046:	4619      	mov	r1, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	461a      	mov	r2, r3
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	f7fb f90e 	bl	8000270 <__aeabi_uldivmod>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4613      	mov	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	e04a      	b.n	80050f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800505e:	4b31      	ldr	r3, [pc, #196]	; (8005124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	099b      	lsrs	r3, r3, #6
 8005064:	461a      	mov	r2, r3
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800506e:	f04f 0100 	mov.w	r1, #0
 8005072:	ea02 0400 	and.w	r4, r2, r0
 8005076:	ea03 0501 	and.w	r5, r3, r1
 800507a:	4620      	mov	r0, r4
 800507c:	4629      	mov	r1, r5
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	014b      	lsls	r3, r1, #5
 8005088:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800508c:	0142      	lsls	r2, r0, #5
 800508e:	4610      	mov	r0, r2
 8005090:	4619      	mov	r1, r3
 8005092:	1b00      	subs	r0, r0, r4
 8005094:	eb61 0105 	sbc.w	r1, r1, r5
 8005098:	f04f 0200 	mov.w	r2, #0
 800509c:	f04f 0300 	mov.w	r3, #0
 80050a0:	018b      	lsls	r3, r1, #6
 80050a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80050a6:	0182      	lsls	r2, r0, #6
 80050a8:	1a12      	subs	r2, r2, r0
 80050aa:	eb63 0301 	sbc.w	r3, r3, r1
 80050ae:	f04f 0000 	mov.w	r0, #0
 80050b2:	f04f 0100 	mov.w	r1, #0
 80050b6:	00d9      	lsls	r1, r3, #3
 80050b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050bc:	00d0      	lsls	r0, r2, #3
 80050be:	4602      	mov	r2, r0
 80050c0:	460b      	mov	r3, r1
 80050c2:	1912      	adds	r2, r2, r4
 80050c4:	eb45 0303 	adc.w	r3, r5, r3
 80050c8:	f04f 0000 	mov.w	r0, #0
 80050cc:	f04f 0100 	mov.w	r1, #0
 80050d0:	0299      	lsls	r1, r3, #10
 80050d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80050d6:	0290      	lsls	r0, r2, #10
 80050d8:	4602      	mov	r2, r0
 80050da:	460b      	mov	r3, r1
 80050dc:	4610      	mov	r0, r2
 80050de:	4619      	mov	r1, r3
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f04f 0300 	mov.w	r3, #0
 80050e8:	f7fb f8c2 	bl	8000270 <__aeabi_uldivmod>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4613      	mov	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050f4:	4b0b      	ldr	r3, [pc, #44]	; (8005124 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	0c1b      	lsrs	r3, r3, #16
 80050fa:	f003 0303 	and.w	r3, r3, #3
 80050fe:	3301      	adds	r3, #1
 8005100:	005b      	lsls	r3, r3, #1
 8005102:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	fbb2 f3f3 	udiv	r3, r2, r3
 800510c:	60bb      	str	r3, [r7, #8]
      break;
 800510e:	e002      	b.n	8005116 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005110:	4b05      	ldr	r3, [pc, #20]	; (8005128 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005112:	60bb      	str	r3, [r7, #8]
      break;
 8005114:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005116:	68bb      	ldr	r3, [r7, #8]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800
 8005128:	00f42400 	.word	0x00f42400

0800512c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005130:	4b03      	ldr	r3, [pc, #12]	; (8005140 <HAL_RCC_GetHCLKFreq+0x14>)
 8005132:	681b      	ldr	r3, [r3, #0]
}
 8005134:	4618      	mov	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000000 	.word	0x20000000

08005144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e01d      	b.n	8005192 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fc ff88 	bl	8002080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3304      	adds	r3, #4
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f000 f968 	bl	8005458 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800519a:	b480      	push	{r7}
 800519c:	b085      	sub	sp, #20
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68da      	ldr	r2, [r3, #12]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f042 0201 	orr.w	r2, r2, #1
 80051b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2b06      	cmp	r3, #6
 80051c2:	d007      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0201 	orr.w	r2, r2, #1
 80051d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3714      	adds	r7, #20
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d122      	bne.n	800523e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b02      	cmp	r3, #2
 8005204:	d11b      	bne.n	800523e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f06f 0202 	mvn.w	r2, #2
 800520e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f8f8 	bl	800541a <HAL_TIM_IC_CaptureCallback>
 800522a:	e005      	b.n	8005238 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f8ea 	bl	8005406 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f8fb 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b04      	cmp	r3, #4
 800524a:	d122      	bne.n	8005292 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b04      	cmp	r3, #4
 8005258:	d11b      	bne.n	8005292 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f06f 0204 	mvn.w	r2, #4
 8005262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f8ce 	bl	800541a <HAL_TIM_IC_CaptureCallback>
 800527e:	e005      	b.n	800528c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f8c0 	bl	8005406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f8d1 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b08      	cmp	r3, #8
 800529e:	d122      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d11b      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f06f 0208 	mvn.w	r2, #8
 80052b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2204      	movs	r2, #4
 80052bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f8a4 	bl	800541a <HAL_TIM_IC_CaptureCallback>
 80052d2:	e005      	b.n	80052e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 f896 	bl	8005406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f8a7 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d122      	bne.n	800533a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d11b      	bne.n	800533a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f06f 0210 	mvn.w	r2, #16
 800530a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2208      	movs	r2, #8
 8005310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f87a 	bl	800541a <HAL_TIM_IC_CaptureCallback>
 8005326:	e005      	b.n	8005334 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f86c 	bl	8005406 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f87d 	bl	800542e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b01      	cmp	r3, #1
 8005346:	d10e      	bne.n	8005366 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b01      	cmp	r3, #1
 8005354:	d107      	bne.n	8005366 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f06f 0201 	mvn.w	r2, #1
 800535e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f846 	bl	80053f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005370:	2b80      	cmp	r3, #128	; 0x80
 8005372:	d10e      	bne.n	8005392 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537e:	2b80      	cmp	r3, #128	; 0x80
 8005380:	d107      	bne.n	8005392 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800538a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 f90d 	bl	80055ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	d10e      	bne.n	80053be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053aa:	2b40      	cmp	r3, #64	; 0x40
 80053ac:	d107      	bne.n	80053be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f842 	bl	8005442 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d10e      	bne.n	80053ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d107      	bne.n	80053ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f06f 0220 	mvn.w	r2, #32
 80053e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 f8d7 	bl	8005598 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ea:	bf00      	nop
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f2:	b480      	push	{r7}
 80053f4:	b083      	sub	sp, #12
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053fa:	bf00      	nop
 80053fc:	370c      	adds	r7, #12
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr

08005406 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005406:	b480      	push	{r7}
 8005408:	b083      	sub	sp, #12
 800540a:	af00      	add	r7, sp, #0
 800540c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800540e:	bf00      	nop
 8005410:	370c      	adds	r7, #12
 8005412:	46bd      	mov	sp, r7
 8005414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005418:	4770      	bx	lr

0800541a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005458:	b480      	push	{r7}
 800545a:	b085      	sub	sp, #20
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a40      	ldr	r2, [pc, #256]	; (800556c <TIM_Base_SetConfig+0x114>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d013      	beq.n	8005498 <TIM_Base_SetConfig+0x40>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005476:	d00f      	beq.n	8005498 <TIM_Base_SetConfig+0x40>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a3d      	ldr	r2, [pc, #244]	; (8005570 <TIM_Base_SetConfig+0x118>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d00b      	beq.n	8005498 <TIM_Base_SetConfig+0x40>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a3c      	ldr	r2, [pc, #240]	; (8005574 <TIM_Base_SetConfig+0x11c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d007      	beq.n	8005498 <TIM_Base_SetConfig+0x40>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a3b      	ldr	r2, [pc, #236]	; (8005578 <TIM_Base_SetConfig+0x120>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d003      	beq.n	8005498 <TIM_Base_SetConfig+0x40>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a3a      	ldr	r2, [pc, #232]	; (800557c <TIM_Base_SetConfig+0x124>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d108      	bne.n	80054aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800549e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a2f      	ldr	r2, [pc, #188]	; (800556c <TIM_Base_SetConfig+0x114>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d02b      	beq.n	800550a <TIM_Base_SetConfig+0xb2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b8:	d027      	beq.n	800550a <TIM_Base_SetConfig+0xb2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a2c      	ldr	r2, [pc, #176]	; (8005570 <TIM_Base_SetConfig+0x118>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d023      	beq.n	800550a <TIM_Base_SetConfig+0xb2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a2b      	ldr	r2, [pc, #172]	; (8005574 <TIM_Base_SetConfig+0x11c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d01f      	beq.n	800550a <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a2a      	ldr	r2, [pc, #168]	; (8005578 <TIM_Base_SetConfig+0x120>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d01b      	beq.n	800550a <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a29      	ldr	r2, [pc, #164]	; (800557c <TIM_Base_SetConfig+0x124>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d017      	beq.n	800550a <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a28      	ldr	r2, [pc, #160]	; (8005580 <TIM_Base_SetConfig+0x128>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d013      	beq.n	800550a <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a27      	ldr	r2, [pc, #156]	; (8005584 <TIM_Base_SetConfig+0x12c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d00f      	beq.n	800550a <TIM_Base_SetConfig+0xb2>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a26      	ldr	r2, [pc, #152]	; (8005588 <TIM_Base_SetConfig+0x130>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d00b      	beq.n	800550a <TIM_Base_SetConfig+0xb2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	4a25      	ldr	r2, [pc, #148]	; (800558c <TIM_Base_SetConfig+0x134>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d007      	beq.n	800550a <TIM_Base_SetConfig+0xb2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a24      	ldr	r2, [pc, #144]	; (8005590 <TIM_Base_SetConfig+0x138>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d003      	beq.n	800550a <TIM_Base_SetConfig+0xb2>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a23      	ldr	r2, [pc, #140]	; (8005594 <TIM_Base_SetConfig+0x13c>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d108      	bne.n	800551c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4313      	orrs	r3, r2
 800551a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a0a      	ldr	r2, [pc, #40]	; (800556c <TIM_Base_SetConfig+0x114>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d003      	beq.n	8005550 <TIM_Base_SetConfig+0xf8>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a0c      	ldr	r2, [pc, #48]	; (800557c <TIM_Base_SetConfig+0x124>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d103      	bne.n	8005558 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	691a      	ldr	r2, [r3, #16]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	615a      	str	r2, [r3, #20]
}
 800555e:	bf00      	nop
 8005560:	3714      	adds	r7, #20
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40010000 	.word	0x40010000
 8005570:	40000400 	.word	0x40000400
 8005574:	40000800 	.word	0x40000800
 8005578:	40000c00 	.word	0x40000c00
 800557c:	40010400 	.word	0x40010400
 8005580:	40014000 	.word	0x40014000
 8005584:	40014400 	.word	0x40014400
 8005588:	40014800 	.word	0x40014800
 800558c:	40001800 	.word	0x40001800
 8005590:	40001c00 	.word	0x40001c00
 8005594:	40002000 	.word	0x40002000

08005598 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055c0:	b084      	sub	sp, #16
 80055c2:	b580      	push	{r7, lr}
 80055c4:	b084      	sub	sp, #16
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
 80055ca:	f107 001c 	add.w	r0, r7, #28
 80055ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d122      	bne.n	800561e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005602:	2b01      	cmp	r3, #1
 8005604:	d105      	bne.n	8005612 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f001 fab4 	bl	8006b80 <USB_CoreReset>
 8005618:	4603      	mov	r3, r0
 800561a:	73fb      	strb	r3, [r7, #15]
 800561c:	e01a      	b.n	8005654 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68db      	ldr	r3, [r3, #12]
 8005622:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f001 faa8 	bl	8006b80 <USB_CoreReset>
 8005630:	4603      	mov	r3, r0
 8005632:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d106      	bne.n	8005648 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	639a      	str	r2, [r3, #56]	; 0x38
 8005646:	e005      	b.n	8005654 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005656:	2b01      	cmp	r3, #1
 8005658:	d10b      	bne.n	8005672 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f043 0206 	orr.w	r2, r3, #6
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f043 0220 	orr.w	r2, r3, #32
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005672:	7bfb      	ldrb	r3, [r7, #15]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800567e:	b004      	add	sp, #16
 8005680:	4770      	bx	lr
	...

08005684 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	4613      	mov	r3, r2
 8005690:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	2b02      	cmp	r3, #2
 8005696:	d165      	bne.n	8005764 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4a41      	ldr	r2, [pc, #260]	; (80057a0 <USB_SetTurnaroundTime+0x11c>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d906      	bls.n	80056ae <USB_SetTurnaroundTime+0x2a>
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4a40      	ldr	r2, [pc, #256]	; (80057a4 <USB_SetTurnaroundTime+0x120>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d202      	bcs.n	80056ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80056a8:	230f      	movs	r3, #15
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	e062      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	4a3c      	ldr	r2, [pc, #240]	; (80057a4 <USB_SetTurnaroundTime+0x120>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d306      	bcc.n	80056c4 <USB_SetTurnaroundTime+0x40>
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	4a3b      	ldr	r2, [pc, #236]	; (80057a8 <USB_SetTurnaroundTime+0x124>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d202      	bcs.n	80056c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80056be:	230e      	movs	r3, #14
 80056c0:	617b      	str	r3, [r7, #20]
 80056c2:	e057      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	4a38      	ldr	r2, [pc, #224]	; (80057a8 <USB_SetTurnaroundTime+0x124>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d306      	bcc.n	80056da <USB_SetTurnaroundTime+0x56>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4a37      	ldr	r2, [pc, #220]	; (80057ac <USB_SetTurnaroundTime+0x128>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d202      	bcs.n	80056da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80056d4:	230d      	movs	r3, #13
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e04c      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4a33      	ldr	r2, [pc, #204]	; (80057ac <USB_SetTurnaroundTime+0x128>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d306      	bcc.n	80056f0 <USB_SetTurnaroundTime+0x6c>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4a32      	ldr	r2, [pc, #200]	; (80057b0 <USB_SetTurnaroundTime+0x12c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d802      	bhi.n	80056f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80056ea:	230c      	movs	r3, #12
 80056ec:	617b      	str	r3, [r7, #20]
 80056ee:	e041      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	4a2f      	ldr	r2, [pc, #188]	; (80057b0 <USB_SetTurnaroundTime+0x12c>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d906      	bls.n	8005706 <USB_SetTurnaroundTime+0x82>
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4a2e      	ldr	r2, [pc, #184]	; (80057b4 <USB_SetTurnaroundTime+0x130>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d802      	bhi.n	8005706 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005700:	230b      	movs	r3, #11
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	e036      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	4a2a      	ldr	r2, [pc, #168]	; (80057b4 <USB_SetTurnaroundTime+0x130>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d906      	bls.n	800571c <USB_SetTurnaroundTime+0x98>
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4a29      	ldr	r2, [pc, #164]	; (80057b8 <USB_SetTurnaroundTime+0x134>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d802      	bhi.n	800571c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005716:	230a      	movs	r3, #10
 8005718:	617b      	str	r3, [r7, #20]
 800571a:	e02b      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	4a26      	ldr	r2, [pc, #152]	; (80057b8 <USB_SetTurnaroundTime+0x134>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d906      	bls.n	8005732 <USB_SetTurnaroundTime+0xae>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4a25      	ldr	r2, [pc, #148]	; (80057bc <USB_SetTurnaroundTime+0x138>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d202      	bcs.n	8005732 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800572c:	2309      	movs	r3, #9
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	e020      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	4a21      	ldr	r2, [pc, #132]	; (80057bc <USB_SetTurnaroundTime+0x138>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d306      	bcc.n	8005748 <USB_SetTurnaroundTime+0xc4>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4a20      	ldr	r2, [pc, #128]	; (80057c0 <USB_SetTurnaroundTime+0x13c>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d802      	bhi.n	8005748 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005742:	2308      	movs	r3, #8
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	e015      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4a1d      	ldr	r2, [pc, #116]	; (80057c0 <USB_SetTurnaroundTime+0x13c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d906      	bls.n	800575e <USB_SetTurnaroundTime+0xda>
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4a1c      	ldr	r2, [pc, #112]	; (80057c4 <USB_SetTurnaroundTime+0x140>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d202      	bcs.n	800575e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005758:	2307      	movs	r3, #7
 800575a:	617b      	str	r3, [r7, #20]
 800575c:	e00a      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800575e:	2306      	movs	r3, #6
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	e007      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d102      	bne.n	8005770 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800576a:	2309      	movs	r3, #9
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	e001      	b.n	8005774 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005770:	2309      	movs	r3, #9
 8005772:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	68da      	ldr	r2, [r3, #12]
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	029b      	lsls	r3, r3, #10
 8005788:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800578c:	431a      	orrs	r2, r3
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr
 80057a0:	00d8acbf 	.word	0x00d8acbf
 80057a4:	00e4e1c0 	.word	0x00e4e1c0
 80057a8:	00f42400 	.word	0x00f42400
 80057ac:	01067380 	.word	0x01067380
 80057b0:	011a499f 	.word	0x011a499f
 80057b4:	01312cff 	.word	0x01312cff
 80057b8:	014ca43f 	.word	0x014ca43f
 80057bc:	016e3600 	.word	0x016e3600
 80057c0:	01a6ab1f 	.word	0x01a6ab1f
 80057c4:	01e84800 	.word	0x01e84800

080057c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f043 0201 	orr.w	r2, r3, #1
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	370c      	adds	r7, #12
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b083      	sub	sp, #12
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f023 0201 	bic.w	r2, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d106      	bne.n	8005838 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	60da      	str	r2, [r3, #12]
 8005836:	e00b      	b.n	8005850 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d106      	bne.n	800584c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	60da      	str	r2, [r3, #12]
 800584a:	e001      	b.n	8005850 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e003      	b.n	8005858 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005850:	2032      	movs	r0, #50	; 0x32
 8005852:	f7fc fcd9 	bl	8002208 <HAL_Delay>

  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005860:	b084      	sub	sp, #16
 8005862:	b580      	push	{r7, lr}
 8005864:	b086      	sub	sp, #24
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800586e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800587a:	2300      	movs	r3, #0
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	e009      	b.n	8005894 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	3340      	adds	r3, #64	; 0x40
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4413      	add	r3, r2
 800588a:	2200      	movs	r2, #0
 800588c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	3301      	adds	r3, #1
 8005892:	613b      	str	r3, [r7, #16]
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	2b0e      	cmp	r3, #14
 8005898:	d9f2      	bls.n	8005880 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800589a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d11c      	bne.n	80058da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ae:	f043 0302 	orr.w	r3, r3, #2
 80058b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	639a      	str	r2, [r3, #56]	; 0x38
 80058d8:	e00b      	b.n	80058f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058f8:	461a      	mov	r2, r3
 80058fa:	2300      	movs	r3, #0
 80058fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005904:	4619      	mov	r1, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590c:	461a      	mov	r2, r3
 800590e:	680b      	ldr	r3, [r1, #0]
 8005910:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005914:	2b01      	cmp	r3, #1
 8005916:	d10c      	bne.n	8005932 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	2b00      	cmp	r3, #0
 800591c:	d104      	bne.n	8005928 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800591e:	2100      	movs	r1, #0
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f949 	bl	8005bb8 <USB_SetDevSpeed>
 8005926:	e008      	b.n	800593a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005928:	2101      	movs	r1, #1
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f944 	bl	8005bb8 <USB_SetDevSpeed>
 8005930:	e003      	b.n	800593a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005932:	2103      	movs	r1, #3
 8005934:	6878      	ldr	r0, [r7, #4]
 8005936:	f000 f93f 	bl	8005bb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800593a:	2110      	movs	r1, #16
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 f8f3 	bl	8005b28 <USB_FlushTxFifo>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f911 	bl	8005b74 <USB_FlushRxFifo>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005962:	461a      	mov	r2, r3
 8005964:	2300      	movs	r3, #0
 8005966:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	461a      	mov	r2, r3
 8005970:	2300      	movs	r3, #0
 8005972:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597a:	461a      	mov	r2, r3
 800597c:	2300      	movs	r3, #0
 800597e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005980:	2300      	movs	r3, #0
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	e043      	b.n	8005a0e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800599c:	d118      	bne.n	80059d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10a      	bne.n	80059ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	015a      	lsls	r2, r3, #5
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	4413      	add	r3, r2
 80059ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b0:	461a      	mov	r2, r3
 80059b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	e013      	b.n	80059e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	015a      	lsls	r2, r3, #5
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	4413      	add	r3, r2
 80059c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c6:	461a      	mov	r2, r3
 80059c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	e008      	b.n	80059e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059dc:	461a      	mov	r2, r3
 80059de:	2300      	movs	r3, #0
 80059e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	461a      	mov	r2, r3
 80059f0:	2300      	movs	r3, #0
 80059f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a00:	461a      	mov	r2, r3
 8005a02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	693a      	ldr	r2, [r7, #16]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d3b7      	bcc.n	8005986 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a16:	2300      	movs	r3, #0
 8005a18:	613b      	str	r3, [r7, #16]
 8005a1a:	e043      	b.n	8005aa4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a32:	d118      	bne.n	8005a66 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10a      	bne.n	8005a50 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	461a      	mov	r2, r3
 8005a48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	e013      	b.n	8005a78 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a62:	6013      	str	r3, [r2, #0]
 8005a64:	e008      	b.n	8005a78 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a72:	461a      	mov	r2, r3
 8005a74:	2300      	movs	r3, #0
 8005a76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a84:	461a      	mov	r2, r3
 8005a86:	2300      	movs	r3, #0
 8005a88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	015a      	lsls	r2, r3, #5
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4413      	add	r3, r2
 8005a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a96:	461a      	mov	r2, r3
 8005a98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	613b      	str	r3, [r7, #16]
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d3b7      	bcc.n	8005a1c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005abe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005acc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d105      	bne.n	8005ae0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	f043 0210 	orr.w	r2, r3, #16
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	699a      	ldr	r2, [r3, #24]
 8005ae4:	4b0f      	ldr	r3, [pc, #60]	; (8005b24 <USB_DevInit+0x2c4>)
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d005      	beq.n	8005afe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	f043 0208 	orr.w	r2, r3, #8
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d107      	bne.n	8005b14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b0c:	f043 0304 	orr.w	r3, r3, #4
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3718      	adds	r7, #24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b20:	b004      	add	sp, #16
 8005b22:	4770      	bx	lr
 8005b24:	803c3800 	.word	0x803c3800

08005b28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005b32:	2300      	movs	r3, #0
 8005b34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	019b      	lsls	r3, r3, #6
 8005b3a:	f043 0220 	orr.w	r2, r3, #32
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3301      	adds	r3, #1
 8005b46:	60fb      	str	r3, [r7, #12]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4a09      	ldr	r2, [pc, #36]	; (8005b70 <USB_FlushTxFifo+0x48>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d901      	bls.n	8005b54 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e006      	b.n	8005b62 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f003 0320 	and.w	r3, r3, #32
 8005b5c:	2b20      	cmp	r3, #32
 8005b5e:	d0f0      	beq.n	8005b42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	00030d40 	.word	0x00030d40

08005b74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2210      	movs	r2, #16
 8005b84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	4a09      	ldr	r2, [pc, #36]	; (8005bb4 <USB_FlushRxFifo+0x40>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d901      	bls.n	8005b98 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e006      	b.n	8005ba6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	f003 0310 	and.w	r3, r3, #16
 8005ba0:	2b10      	cmp	r3, #16
 8005ba2:	d0f0      	beq.n	8005b86 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	00030d40 	.word	0x00030d40

08005bb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	78fb      	ldrb	r3, [r7, #3]
 8005bd2:	68f9      	ldr	r1, [r7, #12]
 8005bd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b087      	sub	sp, #28
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f003 0306 	and.w	r3, r3, #6
 8005c02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d102      	bne.n	8005c10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	75fb      	strb	r3, [r7, #23]
 8005c0e:	e00a      	b.n	8005c26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d002      	beq.n	8005c1c <USB_GetDevSpeed+0x32>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b06      	cmp	r3, #6
 8005c1a:	d102      	bne.n	8005c22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c1c:	2302      	movs	r3, #2
 8005c1e:	75fb      	strb	r3, [r7, #23]
 8005c20:	e001      	b.n	8005c26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c22:	230f      	movs	r3, #15
 8005c24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	371c      	adds	r7, #28
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b085      	sub	sp, #20
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d13a      	bne.n	8005cc6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c56:	69da      	ldr	r2, [r3, #28]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	2101      	movs	r1, #1
 8005c62:	fa01 f303 	lsl.w	r3, r1, r3
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	68f9      	ldr	r1, [r7, #12]
 8005c6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	015a      	lsls	r2, r3, #5
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4413      	add	r3, r2
 8005c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d155      	bne.n	8005d34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	015a      	lsls	r2, r3, #5
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4413      	add	r3, r2
 8005c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	78db      	ldrb	r3, [r3, #3]
 8005ca2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ca4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	059b      	lsls	r3, r3, #22
 8005caa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005cac:	4313      	orrs	r3, r2
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	0151      	lsls	r1, r2, #5
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	440a      	add	r2, r1
 8005cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	e036      	b.n	8005d34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ccc:	69da      	ldr	r2, [r3, #28]
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cdc:	041b      	lsls	r3, r3, #16
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	015a      	lsls	r2, r3, #5
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	4413      	add	r3, r2
 8005cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d11a      	bne.n	8005d34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	78db      	ldrb	r3, [r3, #3]
 8005d18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d1a:	430b      	orrs	r3, r1
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	0151      	lsls	r1, r2, #5
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	440a      	add	r2, r1
 8005d26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
	...

08005d44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	785b      	ldrb	r3, [r3, #1]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d161      	bne.n	8005e24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	015a      	lsls	r2, r3, #5
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d76:	d11f      	bne.n	8005db8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	0151      	lsls	r1, r2, #5
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	440a      	add	r2, r1
 8005d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	0151      	lsls	r1, r2, #5
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	440a      	add	r2, r1
 8005dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005db2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005db6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	2101      	movs	r1, #1
 8005dca:	fa01 f303 	lsl.w	r3, r1, r3
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	68f9      	ldr	r1, [r7, #12]
 8005dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dd8:	4013      	ands	r3, r2
 8005dda:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	f003 030f 	and.w	r3, r3, #15
 8005dec:	2101      	movs	r1, #1
 8005dee:	fa01 f303 	lsl.w	r3, r1, r3
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	43db      	mvns	r3, r3
 8005df6:	68f9      	ldr	r1, [r7, #12]
 8005df8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	0159      	lsls	r1, r3, #5
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	440b      	add	r3, r1
 8005e16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	4b35      	ldr	r3, [pc, #212]	; (8005ef4 <USB_DeactivateEndpoint+0x1b0>)
 8005e1e:	4013      	ands	r3, r2
 8005e20:	600b      	str	r3, [r1, #0]
 8005e22:	e060      	b.n	8005ee6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e3a:	d11f      	bne.n	8005e7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68ba      	ldr	r2, [r7, #8]
 8005e4c:	0151      	lsls	r1, r2, #5
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	440a      	add	r2, r1
 8005e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	0151      	lsls	r1, r2, #5
 8005e6e:	68fa      	ldr	r2, [r7, #12]
 8005e70:	440a      	add	r2, r1
 8005e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	2101      	movs	r1, #1
 8005e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e92:	041b      	lsls	r3, r3, #16
 8005e94:	43db      	mvns	r3, r3
 8005e96:	68f9      	ldr	r1, [r7, #12]
 8005e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea6:	69da      	ldr	r2, [r3, #28]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	f003 030f 	and.w	r3, r3, #15
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005eb6:	041b      	lsls	r3, r3, #16
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	68f9      	ldr	r1, [r7, #12]
 8005ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	0159      	lsls	r1, r3, #5
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	440b      	add	r3, r1
 8005eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ede:	4619      	mov	r1, r3
 8005ee0:	4b05      	ldr	r3, [pc, #20]	; (8005ef8 <USB_DeactivateEndpoint+0x1b4>)
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	ec337800 	.word	0xec337800
 8005ef8:	eff37800 	.word	0xeff37800

08005efc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08a      	sub	sp, #40	; 0x28
 8005f00:	af02      	add	r7, sp, #8
 8005f02:	60f8      	str	r0, [r7, #12]
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	4613      	mov	r3, r2
 8005f08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	785b      	ldrb	r3, [r3, #1]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	f040 815c 	bne.w	80061d6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d132      	bne.n	8005f8c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	0151      	lsls	r1, r2, #5
 8005f38:	69fa      	ldr	r2, [r7, #28]
 8005f3a:	440a      	add	r2, r1
 8005f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	69ba      	ldr	r2, [r7, #24]
 8005f5a:	0151      	lsls	r1, r2, #5
 8005f5c:	69fa      	ldr	r2, [r7, #28]
 8005f5e:	440a      	add	r2, r1
 8005f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	0151      	lsls	r1, r2, #5
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	440a      	add	r2, r1
 8005f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f84:	0cdb      	lsrs	r3, r3, #19
 8005f86:	04db      	lsls	r3, r3, #19
 8005f88:	6113      	str	r3, [r2, #16]
 8005f8a:	e074      	b.n	8006076 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	69ba      	ldr	r2, [r7, #24]
 8005f9c:	0151      	lsls	r1, r2, #5
 8005f9e:	69fa      	ldr	r2, [r7, #28]
 8005fa0:	440a      	add	r2, r1
 8005fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fa6:	0cdb      	lsrs	r3, r3, #19
 8005fa8:	04db      	lsls	r3, r3, #19
 8005faa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005fac:	69bb      	ldr	r3, [r7, #24]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	015a      	lsls	r2, r3, #5
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	4413      	add	r3, r2
 8005fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	6959      	ldr	r1, [r3, #20]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	440b      	add	r3, r1
 8005fe8:	1e59      	subs	r1, r3, #1
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ff2:	04d9      	lsls	r1, r3, #19
 8005ff4:	4b9d      	ldr	r3, [pc, #628]	; (800626c <USB_EPStartXfer+0x370>)
 8005ff6:	400b      	ands	r3, r1
 8005ff8:	69b9      	ldr	r1, [r7, #24]
 8005ffa:	0148      	lsls	r0, r1, #5
 8005ffc:	69f9      	ldr	r1, [r7, #28]
 8005ffe:	4401      	add	r1, r0
 8006000:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006004:	4313      	orrs	r3, r2
 8006006:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	015a      	lsls	r2, r3, #5
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	4413      	add	r3, r2
 8006010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006014:	691a      	ldr	r2, [r3, #16]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800601e:	69b9      	ldr	r1, [r7, #24]
 8006020:	0148      	lsls	r0, r1, #5
 8006022:	69f9      	ldr	r1, [r7, #28]
 8006024:	4401      	add	r1, r0
 8006026:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800602a:	4313      	orrs	r3, r2
 800602c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	78db      	ldrb	r3, [r3, #3]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d11f      	bne.n	8006076 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	69fa      	ldr	r2, [r7, #28]
 800604a:	440a      	add	r2, r1
 800604c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006050:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006054:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	015a      	lsls	r2, r3, #5
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	4413      	add	r3, r2
 800605e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	0151      	lsls	r1, r2, #5
 8006068:	69fa      	ldr	r2, [r7, #28]
 800606a:	440a      	add	r2, r1
 800606c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006070:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006074:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006076:	79fb      	ldrb	r3, [r7, #7]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d14b      	bne.n	8006114 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d009      	beq.n	8006098 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006090:	461a      	mov	r2, r3
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	78db      	ldrb	r3, [r3, #3]
 800609c:	2b01      	cmp	r3, #1
 800609e:	d128      	bne.n	80060f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d110      	bne.n	80060d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	015a      	lsls	r2, r3, #5
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	4413      	add	r3, r2
 80060b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	0151      	lsls	r1, r2, #5
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	440a      	add	r2, r1
 80060c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060ce:	6013      	str	r3, [r2, #0]
 80060d0:	e00f      	b.n	80060f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	015a      	lsls	r2, r3, #5
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	4413      	add	r3, r2
 80060da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	69ba      	ldr	r2, [r7, #24]
 80060e2:	0151      	lsls	r1, r2, #5
 80060e4:	69fa      	ldr	r2, [r7, #28]
 80060e6:	440a      	add	r2, r1
 80060e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	015a      	lsls	r2, r3, #5
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	4413      	add	r3, r2
 80060fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	0151      	lsls	r1, r2, #5
 8006104:	69fa      	ldr	r2, [r7, #28]
 8006106:	440a      	add	r2, r1
 8006108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800610c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	e12f      	b.n	8006374 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	0151      	lsls	r1, r2, #5
 8006126:	69fa      	ldr	r2, [r7, #28]
 8006128:	440a      	add	r2, r1
 800612a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800612e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006132:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	78db      	ldrb	r3, [r3, #3]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d015      	beq.n	8006168 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	695b      	ldr	r3, [r3, #20]
 8006140:	2b00      	cmp	r3, #0
 8006142:	f000 8117 	beq.w	8006374 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	f003 030f 	and.w	r3, r3, #15
 8006156:	2101      	movs	r1, #1
 8006158:	fa01 f303 	lsl.w	r3, r1, r3
 800615c:	69f9      	ldr	r1, [r7, #28]
 800615e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006162:	4313      	orrs	r3, r2
 8006164:	634b      	str	r3, [r1, #52]	; 0x34
 8006166:	e105      	b.n	8006374 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006174:	2b00      	cmp	r3, #0
 8006176:	d110      	bne.n	800619a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69ba      	ldr	r2, [r7, #24]
 8006188:	0151      	lsls	r1, r2, #5
 800618a:	69fa      	ldr	r2, [r7, #28]
 800618c:	440a      	add	r2, r1
 800618e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	e00f      	b.n	80061ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	69ba      	ldr	r2, [r7, #24]
 80061aa:	0151      	lsls	r1, r2, #5
 80061ac:	69fa      	ldr	r2, [r7, #28]
 80061ae:	440a      	add	r2, r1
 80061b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	68d9      	ldr	r1, [r3, #12]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	781a      	ldrb	r2, [r3, #0]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	b298      	uxth	r0, r3
 80061c8:	79fb      	ldrb	r3, [r7, #7]
 80061ca:	9300      	str	r3, [sp, #0]
 80061cc:	4603      	mov	r3, r0
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 fa2b 	bl	800662a <USB_WritePacket>
 80061d4:	e0ce      	b.n	8006374 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f0:	0cdb      	lsrs	r3, r3, #19
 80061f2:	04db      	lsls	r3, r3, #19
 80061f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	0151      	lsls	r1, r2, #5
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	440a      	add	r2, r1
 800620c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006210:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006214:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006218:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d126      	bne.n	8006270 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006238:	69b9      	ldr	r1, [r7, #24]
 800623a:	0148      	lsls	r0, r1, #5
 800623c:	69f9      	ldr	r1, [r7, #28]
 800623e:	4401      	add	r1, r0
 8006240:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006244:	4313      	orrs	r3, r2
 8006246:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	69ba      	ldr	r2, [r7, #24]
 8006258:	0151      	lsls	r1, r2, #5
 800625a:	69fa      	ldr	r2, [r7, #28]
 800625c:	440a      	add	r2, r1
 800625e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006262:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006266:	6113      	str	r3, [r2, #16]
 8006268:	e036      	b.n	80062d8 <USB_EPStartXfer+0x3dc>
 800626a:	bf00      	nop
 800626c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	695a      	ldr	r2, [r3, #20]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	4413      	add	r3, r2
 800627a:	1e5a      	subs	r2, r3, #1
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	fbb2 f3f3 	udiv	r3, r2, r3
 8006284:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	015a      	lsls	r2, r3, #5
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	4413      	add	r3, r2
 800628e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006292:	691a      	ldr	r2, [r3, #16]
 8006294:	8afb      	ldrh	r3, [r7, #22]
 8006296:	04d9      	lsls	r1, r3, #19
 8006298:	4b39      	ldr	r3, [pc, #228]	; (8006380 <USB_EPStartXfer+0x484>)
 800629a:	400b      	ands	r3, r1
 800629c:	69b9      	ldr	r1, [r7, #24]
 800629e:	0148      	lsls	r0, r1, #5
 80062a0:	69f9      	ldr	r1, [r7, #28]
 80062a2:	4401      	add	r1, r0
 80062a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062a8:	4313      	orrs	r3, r2
 80062aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b8:	691a      	ldr	r2, [r3, #16]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	8af9      	ldrh	r1, [r7, #22]
 80062c0:	fb01 f303 	mul.w	r3, r1, r3
 80062c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062c8:	69b9      	ldr	r1, [r7, #24]
 80062ca:	0148      	lsls	r0, r1, #5
 80062cc:	69f9      	ldr	r1, [r7, #28]
 80062ce:	4401      	add	r1, r0
 80062d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062d4:	4313      	orrs	r3, r2
 80062d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d10d      	bne.n	80062fa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d009      	beq.n	80062fa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	68d9      	ldr	r1, [r3, #12]
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	015a      	lsls	r2, r3, #5
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	4413      	add	r3, r2
 80062f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062f6:	460a      	mov	r2, r1
 80062f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	78db      	ldrb	r3, [r3, #3]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d128      	bne.n	8006354 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630e:	2b00      	cmp	r3, #0
 8006310:	d110      	bne.n	8006334 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	69ba      	ldr	r2, [r7, #24]
 8006322:	0151      	lsls	r1, r2, #5
 8006324:	69fa      	ldr	r2, [r7, #28]
 8006326:	440a      	add	r2, r1
 8006328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800632c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006330:	6013      	str	r3, [r2, #0]
 8006332:	e00f      	b.n	8006354 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	440a      	add	r2, r1
 800634a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800634e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006352:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	69fa      	ldr	r2, [r7, #28]
 8006368:	440a      	add	r2, r1
 800636a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800636e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006372:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3720      	adds	r7, #32
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	1ff80000 	.word	0x1ff80000

08006384 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	4613      	mov	r3, r2
 8006390:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	781b      	ldrb	r3, [r3, #0]
 800639a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	785b      	ldrb	r3, [r3, #1]
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	f040 80cd 	bne.w	8006540 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d132      	bne.n	8006414 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	0151      	lsls	r1, r2, #5
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	440a      	add	r2, r1
 80063c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	0151      	lsls	r1, r2, #5
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	440a      	add	r2, r1
 80063e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	0151      	lsls	r1, r2, #5
 8006404:	697a      	ldr	r2, [r7, #20]
 8006406:	440a      	add	r2, r1
 8006408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640c:	0cdb      	lsrs	r3, r3, #19
 800640e:	04db      	lsls	r3, r3, #19
 8006410:	6113      	str	r3, [r2, #16]
 8006412:	e04e      	b.n	80064b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	0151      	lsls	r1, r2, #5
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	440a      	add	r2, r1
 800642a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800642e:	0cdb      	lsrs	r3, r3, #19
 8006430:	04db      	lsls	r3, r3, #19
 8006432:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	0151      	lsls	r1, r2, #5
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	440a      	add	r2, r1
 800644a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800644e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006452:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006456:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	695a      	ldr	r2, [r3, #20]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	429a      	cmp	r2, r3
 8006462:	d903      	bls.n	800646c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	693a      	ldr	r2, [r7, #16]
 800647c:	0151      	lsls	r1, r2, #5
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	440a      	add	r2, r1
 8006482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006486:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800648a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	015a      	lsls	r2, r3, #5
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	4413      	add	r3, r2
 8006494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006498:	691a      	ldr	r2, [r3, #16]
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064a2:	6939      	ldr	r1, [r7, #16]
 80064a4:	0148      	lsls	r0, r1, #5
 80064a6:	6979      	ldr	r1, [r7, #20]
 80064a8:	4401      	add	r1, r0
 80064aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80064ae:	4313      	orrs	r3, r2
 80064b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d11e      	bne.n	80064f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d009      	beq.n	80064d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064cc:	461a      	mov	r2, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	0151      	lsls	r1, r2, #5
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	440a      	add	r2, r1
 80064ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	e092      	b.n	800661c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	015a      	lsls	r2, r3, #5
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	4413      	add	r3, r2
 80064fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	0151      	lsls	r1, r2, #5
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	440a      	add	r2, r1
 800650c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006510:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006514:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d07e      	beq.n	800661c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006524:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	f003 030f 	and.w	r3, r3, #15
 800652e:	2101      	movs	r1, #1
 8006530:	fa01 f303 	lsl.w	r3, r1, r3
 8006534:	6979      	ldr	r1, [r7, #20]
 8006536:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800653a:	4313      	orrs	r3, r2
 800653c:	634b      	str	r3, [r1, #52]	; 0x34
 800653e:	e06d      	b.n	800661c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	015a      	lsls	r2, r3, #5
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	4413      	add	r3, r2
 8006548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	0151      	lsls	r1, r2, #5
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	440a      	add	r2, r1
 8006556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800655a:	0cdb      	lsrs	r3, r3, #19
 800655c:	04db      	lsls	r3, r3, #19
 800655e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	440a      	add	r2, r1
 8006576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800657a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800657e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006582:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d003      	beq.n	8006594 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	0151      	lsls	r1, r2, #5
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	440a      	add	r2, r1
 80065aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c0:	691a      	ldr	r2, [r3, #16]
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ca:	6939      	ldr	r1, [r7, #16]
 80065cc:	0148      	lsls	r0, r1, #5
 80065ce:	6979      	ldr	r1, [r7, #20]
 80065d0:	4401      	add	r1, r0
 80065d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065d6:	4313      	orrs	r3, r2
 80065d8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d10d      	bne.n	80065fc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d009      	beq.n	80065fc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	68d9      	ldr	r1, [r3, #12]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f8:	460a      	mov	r2, r1
 80065fa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	0151      	lsls	r1, r2, #5
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	440a      	add	r2, r1
 8006612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006616:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800661a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	371c      	adds	r7, #28
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800662a:	b480      	push	{r7}
 800662c:	b089      	sub	sp, #36	; 0x24
 800662e:	af00      	add	r7, sp, #0
 8006630:	60f8      	str	r0, [r7, #12]
 8006632:	60b9      	str	r1, [r7, #8]
 8006634:	4611      	mov	r1, r2
 8006636:	461a      	mov	r2, r3
 8006638:	460b      	mov	r3, r1
 800663a:	71fb      	strb	r3, [r7, #7]
 800663c:	4613      	mov	r3, r2
 800663e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006648:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800664c:	2b00      	cmp	r3, #0
 800664e:	d11a      	bne.n	8006686 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006650:	88bb      	ldrh	r3, [r7, #4]
 8006652:	3303      	adds	r3, #3
 8006654:	089b      	lsrs	r3, r3, #2
 8006656:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006658:	2300      	movs	r3, #0
 800665a:	61bb      	str	r3, [r7, #24]
 800665c:	e00f      	b.n	800667e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	031a      	lsls	r2, r3, #12
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	4413      	add	r3, r2
 8006666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800666a:	461a      	mov	r2, r3
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	3304      	adds	r3, #4
 8006676:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	3301      	adds	r3, #1
 800667c:	61bb      	str	r3, [r7, #24]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	429a      	cmp	r2, r3
 8006684:	d3eb      	bcc.n	800665e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3724      	adds	r7, #36	; 0x24
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006694:	b480      	push	{r7}
 8006696:	b089      	sub	sp, #36	; 0x24
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	4613      	mov	r3, r2
 80066a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80066aa:	88fb      	ldrh	r3, [r7, #6]
 80066ac:	3303      	adds	r3, #3
 80066ae:	089b      	lsrs	r3, r3, #2
 80066b0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80066b2:	2300      	movs	r3, #0
 80066b4:	61bb      	str	r3, [r7, #24]
 80066b6:	e00b      	b.n	80066d0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	3304      	adds	r3, #4
 80066c8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	3301      	adds	r3, #1
 80066ce:	61bb      	str	r3, [r7, #24]
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d3ef      	bcc.n	80066b8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80066d8:	69fb      	ldr	r3, [r7, #28]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3724      	adds	r7, #36	; 0x24
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	785b      	ldrb	r3, [r3, #1]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d12c      	bne.n	800675c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	db12      	blt.n	800673a <USB_EPSetStall+0x54>
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00f      	beq.n	800673a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	015a      	lsls	r2, r3, #5
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	4413      	add	r3, r2
 8006722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68ba      	ldr	r2, [r7, #8]
 800672a:	0151      	lsls	r1, r2, #5
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	440a      	add	r2, r1
 8006730:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006734:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006738:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68ba      	ldr	r2, [r7, #8]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	440a      	add	r2, r1
 8006750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006754:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006758:	6013      	str	r3, [r2, #0]
 800675a:	e02b      	b.n	80067b4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	db12      	blt.n	8006794 <USB_EPSetStall+0xae>
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00f      	beq.n	8006794 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	0151      	lsls	r1, r2, #5
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	440a      	add	r2, r1
 800678a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800678e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006792:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	0151      	lsls	r1, r2, #5
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	440a      	add	r2, r1
 80067aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3714      	adds	r7, #20
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr

080067c2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067c2:	b480      	push	{r7}
 80067c4:	b085      	sub	sp, #20
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
 80067ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	785b      	ldrb	r3, [r3, #1]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d128      	bne.n	8006830 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68ba      	ldr	r2, [r7, #8]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	68fa      	ldr	r2, [r7, #12]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067fc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	78db      	ldrb	r3, [r3, #3]
 8006802:	2b03      	cmp	r3, #3
 8006804:	d003      	beq.n	800680e <USB_EPClearStall+0x4c>
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	78db      	ldrb	r3, [r3, #3]
 800680a:	2b02      	cmp	r3, #2
 800680c:	d138      	bne.n	8006880 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	0151      	lsls	r1, r2, #5
 8006820:	68fa      	ldr	r2, [r7, #12]
 8006822:	440a      	add	r2, r1
 8006824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800682c:	6013      	str	r3, [r2, #0]
 800682e:	e027      	b.n	8006880 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	440a      	add	r2, r1
 8006846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800684a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800684e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	78db      	ldrb	r3, [r3, #3]
 8006854:	2b03      	cmp	r3, #3
 8006856:	d003      	beq.n	8006860 <USB_EPClearStall+0x9e>
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	78db      	ldrb	r3, [r3, #3]
 800685c:	2b02      	cmp	r3, #2
 800685e:	d10f      	bne.n	8006880 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	0151      	lsls	r1, r2, #5
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	440a      	add	r2, r1
 8006876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800687a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800687e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800688e:	b480      	push	{r7}
 8006890:	b085      	sub	sp, #20
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	460b      	mov	r3, r1
 8006898:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068ac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80068b0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	011b      	lsls	r3, r3, #4
 80068be:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80068c2:	68f9      	ldr	r1, [r7, #12]
 80068c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068c8:	4313      	orrs	r3, r2
 80068ca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3714      	adds	r7, #20
 80068d2:	46bd      	mov	sp, r7
 80068d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d8:	4770      	bx	lr

080068da <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068f4:	f023 0302 	bic.w	r3, r3, #2
 80068f8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80068fa:	2003      	movs	r0, #3
 80068fc:	f7fb fc84 	bl	8002208 <HAL_Delay>

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800690a:	b580      	push	{r7, lr}
 800690c:	b084      	sub	sp, #16
 800690e:	af00      	add	r7, sp, #0
 8006910:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006924:	f043 0302 	orr.w	r3, r3, #2
 8006928:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800692a:	2003      	movs	r0, #3
 800692c:	f7fb fc6c 	bl	8002208 <HAL_Delay>

  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800693a:	b480      	push	{r7}
 800693c:	b085      	sub	sp, #20
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	695b      	ldr	r3, [r3, #20]
 8006946:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	699b      	ldr	r3, [r3, #24]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4013      	ands	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006952:	68fb      	ldr	r3, [r7, #12]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006972:	699b      	ldr	r3, [r3, #24]
 8006974:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	68ba      	ldr	r2, [r7, #8]
 8006980:	4013      	ands	r3, r2
 8006982:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	0c1b      	lsrs	r3, r3, #16
}
 8006988:	4618      	mov	r0, r3
 800698a:	3714      	adds	r7, #20
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	4013      	ands	r3, r2
 80069b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	b29b      	uxth	r3, r3
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3714      	adds	r7, #20
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	460b      	mov	r3, r1
 80069d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80069d8:	78fb      	ldrb	r3, [r7, #3]
 80069da:	015a      	lsls	r2, r3, #5
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	4013      	ands	r3, r2
 80069f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069f6:	68bb      	ldr	r3, [r7, #8]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b087      	sub	sp, #28
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a26:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	f003 030f 	and.w	r3, r3, #15
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	fa22 f303 	lsr.w	r3, r2, r3
 8006a34:	01db      	lsls	r3, r3, #7
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a3e:	78fb      	ldrb	r3, [r7, #3]
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4013      	ands	r3, r2
 8006a50:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a52:	68bb      	ldr	r3, [r7, #8]
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	371c      	adds	r7, #28
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b083      	sub	sp, #12
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	f003 0301 	and.w	r3, r3, #1
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a96:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a9a:	f023 0307 	bic.w	r3, r3, #7
 8006a9e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
	...

08006ac4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b087      	sub	sp, #28
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	460b      	mov	r3, r1
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	333c      	adds	r3, #60	; 0x3c
 8006ada:	3304      	adds	r3, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	4a26      	ldr	r2, [pc, #152]	; (8006b7c <USB_EP0_OutStart+0xb8>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d90a      	bls.n	8006afe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006af4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006af8:	d101      	bne.n	8006afe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	e037      	b.n	8006b6e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b04:	461a      	mov	r2, r3
 8006b06:	2300      	movs	r3, #0
 8006b08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b18:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b2c:	f043 0318 	orr.w	r3, r3, #24
 8006b30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b40:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006b44:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006b46:	7afb      	ldrb	r3, [r7, #11]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d10f      	bne.n	8006b6c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b52:	461a      	mov	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b66:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006b6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	4f54300a 	.word	0x4f54300a

08006b80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006b88:	2300      	movs	r3, #0
 8006b8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	3301      	adds	r3, #1
 8006b90:	60fb      	str	r3, [r7, #12]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4a13      	ldr	r2, [pc, #76]	; (8006be4 <USB_CoreReset+0x64>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d901      	bls.n	8006b9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e01b      	b.n	8006bd6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	daf2      	bge.n	8006b8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	f043 0201 	orr.w	r2, r3, #1
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4a09      	ldr	r2, [pc, #36]	; (8006be4 <USB_CoreReset+0x64>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d901      	bls.n	8006bc8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e006      	b.n	8006bd6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d0f0      	beq.n	8006bb6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3714      	adds	r7, #20
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	00030d40 	.word	0x00030d40

08006be8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bf4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006bf8:	f002 fa0c 	bl	8009014 <malloc>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d105      	bne.n	8006c12 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e066      	b.n	8006ce0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	7c1b      	ldrb	r3, [r3, #16]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d119      	bne.n	8006c56 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c26:	2202      	movs	r2, #2
 8006c28:	2181      	movs	r1, #129	; 0x81
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f002 f879 	bl	8008d22 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f002 f86f 	bl	8008d22 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2210      	movs	r2, #16
 8006c50:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006c54:	e016      	b.n	8006c84 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c56:	2340      	movs	r3, #64	; 0x40
 8006c58:	2202      	movs	r2, #2
 8006c5a:	2181      	movs	r1, #129	; 0x81
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f002 f860 	bl	8008d22 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c68:	2340      	movs	r3, #64	; 0x40
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	2101      	movs	r1, #1
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f002 f857 	bl	8008d22 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2210      	movs	r2, #16
 8006c80:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c84:	2308      	movs	r3, #8
 8006c86:	2203      	movs	r2, #3
 8006c88:	2182      	movs	r1, #130	; 0x82
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f002 f849 	bl	8008d22 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	7c1b      	ldrb	r3, [r3, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d109      	bne.n	8006cce <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f002 f91a 	bl	8008f00 <USBD_LL_PrepareReceive>
 8006ccc:	e007      	b.n	8006cde <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cd4:	2340      	movs	r3, #64	; 0x40
 8006cd6:	2101      	movs	r1, #1
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f002 f911 	bl	8008f00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006cf8:	2181      	movs	r1, #129	; 0x81
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f002 f837 	bl	8008d6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006d06:	2101      	movs	r1, #1
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f002 f830 	bl	8008d6e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006d16:	2182      	movs	r1, #130	; 0x82
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f002 f828 	bl	8008d6e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d00e      	beq.n	8006d56 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f002 f96b 	bl	8009024 <free>
    pdev->pClassData = NULL;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3710      	adds	r7, #16
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d70:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d76:	2300      	movs	r3, #0
 8006d78:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d03a      	beq.n	8006e00 <USBD_CDC_Setup+0xa0>
 8006d8a:	2b20      	cmp	r3, #32
 8006d8c:	f040 8097 	bne.w	8006ebe <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	88db      	ldrh	r3, [r3, #6]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d029      	beq.n	8006dec <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	b25b      	sxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	da11      	bge.n	8006dc6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006dae:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006db0:	683a      	ldr	r2, [r7, #0]
 8006db2:	88d2      	ldrh	r2, [r2, #6]
 8006db4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006db6:	6939      	ldr	r1, [r7, #16]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	88db      	ldrh	r3, [r3, #6]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f001 fac6 	bl	8008350 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006dc4:	e082      	b.n	8006ecc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	785a      	ldrb	r2, [r3, #1]
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	88db      	ldrh	r3, [r3, #6]
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006ddc:	6939      	ldr	r1, [r7, #16]
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	88db      	ldrh	r3, [r3, #6]
 8006de2:	461a      	mov	r2, r3
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 fadf 	bl	80083a8 <USBD_CtlPrepareRx>
    break;
 8006dea:	e06f      	b.n	8006ecc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	7850      	ldrb	r0, [r2, #1]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	6839      	ldr	r1, [r7, #0]
 8006dfc:	4798      	blx	r3
    break;
 8006dfe:	e065      	b.n	8006ecc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	785b      	ldrb	r3, [r3, #1]
 8006e04:	2b0b      	cmp	r3, #11
 8006e06:	d84f      	bhi.n	8006ea8 <USBD_CDC_Setup+0x148>
 8006e08:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <USBD_CDC_Setup+0xb0>)
 8006e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e0e:	bf00      	nop
 8006e10:	08006e41 	.word	0x08006e41
 8006e14:	08006eb7 	.word	0x08006eb7
 8006e18:	08006ea9 	.word	0x08006ea9
 8006e1c:	08006ea9 	.word	0x08006ea9
 8006e20:	08006ea9 	.word	0x08006ea9
 8006e24:	08006ea9 	.word	0x08006ea9
 8006e28:	08006ea9 	.word	0x08006ea9
 8006e2c:	08006ea9 	.word	0x08006ea9
 8006e30:	08006ea9 	.word	0x08006ea9
 8006e34:	08006ea9 	.word	0x08006ea9
 8006e38:	08006e69 	.word	0x08006e69
 8006e3c:	08006e91 	.word	0x08006e91
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d107      	bne.n	8006e5a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e4a:	f107 030c 	add.w	r3, r7, #12
 8006e4e:	2202      	movs	r2, #2
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f001 fa7c 	bl	8008350 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006e58:	e030      	b.n	8006ebc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 fa06 	bl	800826e <USBD_CtlError>
        ret = USBD_FAIL;
 8006e62:	2303      	movs	r3, #3
 8006e64:	75fb      	strb	r3, [r7, #23]
      break;
 8006e66:	e029      	b.n	8006ebc <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d107      	bne.n	8006e82 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e72:	f107 030f 	add.w	r3, r7, #15
 8006e76:	2201      	movs	r2, #1
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f001 fa68 	bl	8008350 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006e80:	e01c      	b.n	8006ebc <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 f9f2 	bl	800826e <USBD_CtlError>
        ret = USBD_FAIL;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e8e:	e015      	b.n	8006ebc <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e96:	2b03      	cmp	r3, #3
 8006e98:	d00f      	beq.n	8006eba <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f001 f9e6 	bl	800826e <USBD_CtlError>
        ret = USBD_FAIL;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006ea6:	e008      	b.n	8006eba <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 f9df 	bl	800826e <USBD_CtlError>
      ret = USBD_FAIL;
 8006eb0:	2303      	movs	r3, #3
 8006eb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb4:	e002      	b.n	8006ebc <USBD_CDC_Setup+0x15c>
      break;
 8006eb6:	bf00      	nop
 8006eb8:	e008      	b.n	8006ecc <USBD_CDC_Setup+0x16c>
      break;
 8006eba:	bf00      	nop
    }
    break;
 8006ebc:	e006      	b.n	8006ecc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 f9d4 	bl	800826e <USBD_CtlError>
    ret = USBD_FAIL;
 8006ec6:	2303      	movs	r3, #3
 8006ec8:	75fb      	strb	r3, [r7, #23]
    break;
 8006eca:	bf00      	nop
  }

  return (uint8_t)ret;
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop

08006ed8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006eea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e049      	b.n	8006f8e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f02:	78fa      	ldrb	r2, [r7, #3]
 8006f04:	6879      	ldr	r1, [r7, #4]
 8006f06:	4613      	mov	r3, r2
 8006f08:	009b      	lsls	r3, r3, #2
 8006f0a:	4413      	add	r3, r2
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	440b      	add	r3, r1
 8006f10:	3318      	adds	r3, #24
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d029      	beq.n	8006f6c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006f18:	78fa      	ldrb	r2, [r7, #3]
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	3318      	adds	r3, #24
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	78f9      	ldrb	r1, [r7, #3]
 8006f2c:	68f8      	ldr	r0, [r7, #12]
 8006f2e:	460b      	mov	r3, r1
 8006f30:	00db      	lsls	r3, r3, #3
 8006f32:	1a5b      	subs	r3, r3, r1
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4403      	add	r3, r0
 8006f38:	3344      	adds	r3, #68	; 0x44
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f40:	fb03 f301 	mul.w	r3, r3, r1
 8006f44:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d110      	bne.n	8006f6c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006f4a:	78fa      	ldrb	r2, [r7, #3]
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	3318      	adds	r3, #24
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f5e:	78f9      	ldrb	r1, [r7, #3]
 8006f60:	2300      	movs	r3, #0
 8006f62:	2200      	movs	r2, #0
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 ffaa 	bl	8008ebe <USBD_LL_Transmit>
 8006f6a:	e00f      	b.n	8006f8c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	68ba      	ldr	r2, [r7, #8]
 8006f7e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f88:	78fa      	ldrb	r2, [r7, #3]
 8006f8a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006f8c:	2300      	movs	r3, #0
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
 8006f9e:	460b      	mov	r3, r1
 8006fa0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fa8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e015      	b.n	8006fe4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 ffc0 	bl	8008f42 <USBD_LL_GetRxDataSize>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fde:	4611      	mov	r1, r2
 8006fe0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ffa:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d015      	beq.n	8007032 <USBD_CDC_EP0_RxReady+0x46>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800700c:	2bff      	cmp	r3, #255	; 0xff
 800700e:	d010      	beq.n	8007032 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	68fa      	ldr	r2, [r7, #12]
 800701a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800701e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007026:	b292      	uxth	r2, r2
 8007028:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	22ff      	movs	r2, #255	; 0xff
 800702e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2243      	movs	r2, #67	; 0x43
 8007048:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800704a:	4b03      	ldr	r3, [pc, #12]	; (8007058 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800704c:	4618      	mov	r0, r3
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	20000094 	.word	0x20000094

0800705c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2243      	movs	r2, #67	; 0x43
 8007068:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800706a:	4b03      	ldr	r3, [pc, #12]	; (8007078 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800706c:	4618      	mov	r0, r3
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	20000050 	.word	0x20000050

0800707c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2243      	movs	r2, #67	; 0x43
 8007088:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800708a:	4b03      	ldr	r3, [pc, #12]	; (8007098 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800708c:	4618      	mov	r0, r3
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr
 8007098:	200000d8 	.word	0x200000d8

0800709c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	220a      	movs	r2, #10
 80070a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80070aa:	4b03      	ldr	r3, [pc, #12]	; (80070b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	2000000c 	.word	0x2000000c

080070bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e004      	b.n	80070da <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	683a      	ldr	r2, [r7, #0]
 80070d4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b087      	sub	sp, #28
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	60b9      	str	r1, [r7, #8]
 80070f0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070f8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007128:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	683a      	ldr	r2, [r7, #0]
 800712e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800714e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007150:	2301      	movs	r3, #1
 8007152:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800715e:	2303      	movs	r3, #3
 8007160:	e01a      	b.n	8007198 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007168:	2b00      	cmp	r3, #0
 800716a:	d114      	bne.n	8007196 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	2201      	movs	r2, #1
 8007170:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800718a:	2181      	movs	r1, #129	; 0x81
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f001 fe96 	bl	8008ebe <USBD_LL_Transmit>

    ret = USBD_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007196:	7bfb      	ldrb	r3, [r7, #15]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e016      	b.n	80071ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	7c1b      	ldrb	r3, [r3, #16]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d109      	bne.n	80071da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071d0:	2101      	movs	r1, #1
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 fe94 	bl	8008f00 <USBD_LL_PrepareReceive>
 80071d8:	e007      	b.n	80071ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071e0:	2340      	movs	r3, #64	; 0x40
 80071e2:	2101      	movs	r1, #1
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f001 fe8b 	bl	8008f00 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	4613      	mov	r3, r2
 8007200:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 8007208:	481a      	ldr	r0, [pc, #104]	; (8007274 <USBD_Init+0x80>)
 800720a:	f001 ffd3 	bl	80091b4 <iprintf>
 800720e:	481a      	ldr	r0, [pc, #104]	; (8007278 <USBD_Init+0x84>)
 8007210:	f001 ffd0 	bl	80091b4 <iprintf>
 8007214:	200a      	movs	r0, #10
 8007216:	f001 ffe5 	bl	80091e4 <putchar>
#endif
    return USBD_FAIL;
 800721a:	2303      	movs	r3, #3
 800721c:	e025      	b.n	800726a <USBD_Init+0x76>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2200      	movs	r2, #0
 800722c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007236:	2b00      	cmp	r3, #0
 8007238:	d003      	beq.n	8007242 <USBD_Init+0x4e>
  {
    pdev->pConfDesc = NULL;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <USBD_Init+0x5c>
  {
    pdev->pDesc = pdesc;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	79fa      	ldrb	r2, [r7, #7]
 800725c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f001 fcf2 	bl	8008c48 <USBD_LL_Init>
 8007264:	4603      	mov	r3, r0
 8007266:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007268:	7dfb      	ldrb	r3, [r7, #23]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	0800a394 	.word	0x0800a394
 8007278:	0800a39c 	.word	0x0800a39c

0800727c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10a      	bne.n	80072a6 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8007290:	480f      	ldr	r0, [pc, #60]	; (80072d0 <USBD_RegisterClass+0x54>)
 8007292:	f001 ff8f 	bl	80091b4 <iprintf>
 8007296:	480f      	ldr	r0, [pc, #60]	; (80072d4 <USBD_RegisterClass+0x58>)
 8007298:	f001 ff8c 	bl	80091b4 <iprintf>
 800729c:	200a      	movs	r0, #10
 800729e:	f001 ffa1 	bl	80091e4 <putchar>
#endif
    return USBD_FAIL;
 80072a2:	2303      	movs	r3, #3
 80072a4:	e010      	b.n	80072c8 <USBD_RegisterClass+0x4c>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b6:	f107 020e 	add.w	r2, r7, #14
 80072ba:	4610      	mov	r0, r2
 80072bc:	4798      	blx	r3
 80072be:	4602      	mov	r2, r0
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80072c6:	2300      	movs	r3, #0
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3710      	adds	r7, #16
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	0800a394 	.word	0x0800a394
 80072d4:	0800a3b4 	.word	0x0800a3b4

080072d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 fd03 	bl	8008cec <USBD_LL_Start>
 80072e6:	4603      	mov	r3, r0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b084      	sub	sp, #16
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	460b      	mov	r3, r1
 8007310:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007312:	2303      	movs	r3, #3
 8007314:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731c:	2b00      	cmp	r3, #0
 800731e:	d009      	beq.n	8007334 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	78fa      	ldrb	r2, [r7, #3]
 800732a:	4611      	mov	r1, r2
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	4798      	blx	r3
 8007330:	4603      	mov	r3, r0
 8007332:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007334:	7bfb      	ldrb	r3, [r7, #15]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	460b      	mov	r3, r1
 8007348:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007350:	2b00      	cmp	r3, #0
 8007352:	d007      	beq.n	8007364 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	78fa      	ldrb	r2, [r7, #3]
 800735e:	4611      	mov	r1, r2
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	4798      	blx	r3
  }

  return USBD_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
 8007376:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800737e:	6839      	ldr	r1, [r7, #0]
 8007380:	4618      	mov	r0, r3
 8007382:	f000 ff3a 	bl	80081fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007394:	461a      	mov	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073a2:	f003 031f 	and.w	r3, r3, #31
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d01a      	beq.n	80073e0 <USBD_LL_SetupStage+0x72>
 80073aa:	2b02      	cmp	r3, #2
 80073ac:	d822      	bhi.n	80073f4 <USBD_LL_SetupStage+0x86>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <USBD_LL_SetupStage+0x4a>
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d00a      	beq.n	80073cc <USBD_LL_SetupStage+0x5e>
 80073b6:	e01d      	b.n	80073f4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073be:	4619      	mov	r1, r3
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fa17 	bl	80077f4 <USBD_StdDevReq>
 80073c6:	4603      	mov	r3, r0
 80073c8:	73fb      	strb	r3, [r7, #15]
      break;
 80073ca:	e020      	b.n	800740e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073d2:	4619      	mov	r1, r3
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fa7b 	bl	80078d0 <USBD_StdItfReq>
 80073da:	4603      	mov	r3, r0
 80073dc:	73fb      	strb	r3, [r7, #15]
      break;
 80073de:	e016      	b.n	800740e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fab9 	bl	8007960 <USBD_StdEPReq>
 80073ee:	4603      	mov	r3, r0
 80073f0:	73fb      	strb	r3, [r7, #15]
      break;
 80073f2:	e00c      	b.n	800740e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073fa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f001 fcd2 	bl	8008dac <USBD_LL_StallEP>
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]
      break;
 800740c:	bf00      	nop
  }

  return ret;
 800740e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	460b      	mov	r3, r1
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007426:	7afb      	ldrb	r3, [r7, #11]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d137      	bne.n	800749c <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007432:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800743a:	2b03      	cmp	r3, #3
 800743c:	d14a      	bne.n	80074d4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	429a      	cmp	r2, r3
 8007448:	d913      	bls.n	8007472 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	689a      	ldr	r2, [r3, #8]
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	1ad2      	subs	r2, r2, r3
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	68da      	ldr	r2, [r3, #12]
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	4293      	cmp	r3, r2
 8007462:	bf28      	it	cs
 8007464:	4613      	movcs	r3, r2
 8007466:	461a      	mov	r2, r3
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 ffb9 	bl	80083e2 <USBD_CtlContinueRx>
 8007470:	e030      	b.n	80074d4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00a      	beq.n	8007494 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007484:	2b03      	cmp	r3, #3
 8007486:	d105      	bne.n	8007494 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f000 ffb5 	bl	8008404 <USBD_CtlSendStatus>
 800749a:	e01b      	b.n	80074d4 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d013      	beq.n	80074d0 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d10e      	bne.n	80074d0 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	7afa      	ldrb	r2, [r7, #11]
 80074bc:	4611      	mov	r1, r2
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	4798      	blx	r3
 80074c2:	4603      	mov	r3, r0
 80074c4:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80074c6:	7dfb      	ldrb	r3, [r7, #23]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d003      	beq.n	80074d4 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
 80074ce:	e002      	b.n	80074d6 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e000      	b.n	80074d6 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3718      	adds	r7, #24
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074de:	b580      	push	{r7, lr}
 80074e0:	b086      	sub	sp, #24
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	460b      	mov	r3, r1
 80074e8:	607a      	str	r2, [r7, #4]
 80074ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80074ec:	7afb      	ldrb	r3, [r7, #11]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d16a      	bne.n	80075c8 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3314      	adds	r3, #20
 80074f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074fe:	2b02      	cmp	r3, #2
 8007500:	d155      	bne.n	80075ae <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	689a      	ldr	r2, [r3, #8]
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	429a      	cmp	r2, r3
 800750c:	d914      	bls.n	8007538 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	689a      	ldr	r2, [r3, #8]
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	1ad2      	subs	r2, r2, r3
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	461a      	mov	r2, r3
 8007522:	6879      	ldr	r1, [r7, #4]
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f000 ff2e 	bl	8008386 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800752a:	2300      	movs	r3, #0
 800752c:	2200      	movs	r2, #0
 800752e:	2100      	movs	r1, #0
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f001 fce5 	bl	8008f00 <USBD_LL_PrepareReceive>
 8007536:	e03a      	b.n	80075ae <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	68da      	ldr	r2, [r3, #12]
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	429a      	cmp	r2, r3
 8007542:	d11c      	bne.n	800757e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800754c:	429a      	cmp	r2, r3
 800754e:	d316      	bcc.n	800757e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800755a:	429a      	cmp	r2, r3
 800755c:	d20f      	bcs.n	800757e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800755e:	2200      	movs	r2, #0
 8007560:	2100      	movs	r1, #0
 8007562:	68f8      	ldr	r0, [r7, #12]
 8007564:	f000 ff0f 	bl	8008386 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007570:	2300      	movs	r3, #0
 8007572:	2200      	movs	r2, #0
 8007574:	2100      	movs	r1, #0
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f001 fcc2 	bl	8008f00 <USBD_LL_PrepareReceive>
 800757c:	e017      	b.n	80075ae <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00a      	beq.n	80075a0 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007590:	2b03      	cmp	r3, #3
 8007592:	d105      	bne.n	80075a0 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80075a0:	2180      	movs	r1, #128	; 0x80
 80075a2:	68f8      	ldr	r0, [r7, #12]
 80075a4:	f001 fc02 	bl	8008dac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 ff3e 	bl	800842a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d123      	bne.n	8007600 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f7ff fe99 	bl	80072f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075c6:	e01b      	b.n	8007600 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d013      	beq.n	80075fc <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80075da:	2b03      	cmp	r3, #3
 80075dc:	d10e      	bne.n	80075fc <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	7afa      	ldrb	r2, [r7, #11]
 80075e8:	4611      	mov	r1, r2
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	4798      	blx	r3
 80075ee:	4603      	mov	r3, r0
 80075f0:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80075f2:	7dfb      	ldrb	r3, [r7, #23]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80075f8:	7dfb      	ldrb	r3, [r7, #23]
 80075fa:	e002      	b.n	8007602 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e000      	b.n	8007602 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b082      	sub	sp, #8
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007636:	2b00      	cmp	r3, #0
 8007638:	d009      	beq.n	800764e <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	6852      	ldr	r2, [r2, #4]
 8007646:	b2d2      	uxtb	r2, r2
 8007648:	4611      	mov	r1, r2
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800764e:	2340      	movs	r3, #64	; 0x40
 8007650:	2200      	movs	r2, #0
 8007652:	2100      	movs	r1, #0
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f001 fb64 	bl	8008d22 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2240      	movs	r2, #64	; 0x40
 8007666:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800766a:	2340      	movs	r3, #64	; 0x40
 800766c:	2200      	movs	r2, #0
 800766e:	2180      	movs	r1, #128	; 0x80
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f001 fb56 	bl	8008d22 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2201      	movs	r2, #1
 800767a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2240      	movs	r2, #64	; 0x40
 8007680:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	78fa      	ldrb	r2, [r7, #3]
 800769c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2204      	movs	r2, #4
 80076c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	370c      	adds	r7, #12
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr

080076d6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076d6:	b480      	push	{r7}
 80076d8:	b083      	sub	sp, #12
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	d105      	bne.n	80076f4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	370c      	adds	r7, #12
 80076fa:	46bd      	mov	sp, r7
 80076fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007700:	4770      	bx	lr

08007702 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b082      	sub	sp, #8
 8007706:	af00      	add	r7, sp, #0
 8007708:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007710:	2b03      	cmp	r3, #3
 8007712:	d10b      	bne.n	800772c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800771a:	69db      	ldr	r3, [r3, #28]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d005      	beq.n	800772c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007726:	69db      	ldr	r3, [r3, #28]
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007736:	b480      	push	{r7}
 8007738:	b083      	sub	sp, #12
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	460b      	mov	r3, r1
 8007740:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007796:	2b00      	cmp	r3, #0
 8007798:	d009      	beq.n	80077ae <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	6852      	ldr	r2, [r2, #4]
 80077a6:	b2d2      	uxtb	r2, r2
 80077a8:	4611      	mov	r1, r2
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	4798      	blx	r3
  }

  return USBD_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	3301      	adds	r3, #1
 80077ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077d6:	8a3b      	ldrh	r3, [r7, #16]
 80077d8:	021b      	lsls	r3, r3, #8
 80077da:	b21a      	sxth	r2, r3
 80077dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	b21b      	sxth	r3, r3
 80077e4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077e6:	89fb      	ldrh	r3, [r7, #14]
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	371c      	adds	r7, #28
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800780a:	2b40      	cmp	r3, #64	; 0x40
 800780c:	d005      	beq.n	800781a <USBD_StdDevReq+0x26>
 800780e:	2b40      	cmp	r3, #64	; 0x40
 8007810:	d853      	bhi.n	80078ba <USBD_StdDevReq+0xc6>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d00b      	beq.n	800782e <USBD_StdDevReq+0x3a>
 8007816:	2b20      	cmp	r3, #32
 8007818:	d14f      	bne.n	80078ba <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	4798      	blx	r3
 8007828:	4603      	mov	r3, r0
 800782a:	73fb      	strb	r3, [r7, #15]
    break;
 800782c:	e04a      	b.n	80078c4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	785b      	ldrb	r3, [r3, #1]
 8007832:	2b09      	cmp	r3, #9
 8007834:	d83b      	bhi.n	80078ae <USBD_StdDevReq+0xba>
 8007836:	a201      	add	r2, pc, #4	; (adr r2, 800783c <USBD_StdDevReq+0x48>)
 8007838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800783c:	08007891 	.word	0x08007891
 8007840:	080078a5 	.word	0x080078a5
 8007844:	080078af 	.word	0x080078af
 8007848:	0800789b 	.word	0x0800789b
 800784c:	080078af 	.word	0x080078af
 8007850:	0800786f 	.word	0x0800786f
 8007854:	08007865 	.word	0x08007865
 8007858:	080078af 	.word	0x080078af
 800785c:	08007887 	.word	0x08007887
 8007860:	08007879 	.word	0x08007879
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007864:	6839      	ldr	r1, [r7, #0]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 f9d8 	bl	8007c1c <USBD_GetDescriptor>
      break;
 800786c:	e024      	b.n	80078b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fb3d 	bl	8007ef0 <USBD_SetAddress>
      break;
 8007876:	e01f      	b.n	80078b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 fb7c 	bl	8007f78 <USBD_SetConfig>
 8007880:	4603      	mov	r3, r0
 8007882:	73fb      	strb	r3, [r7, #15]
      break;
 8007884:	e018      	b.n	80078b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007886:	6839      	ldr	r1, [r7, #0]
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 fc19 	bl	80080c0 <USBD_GetConfig>
      break;
 800788e:	e013      	b.n	80078b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007890:	6839      	ldr	r1, [r7, #0]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fc49 	bl	800812a <USBD_GetStatus>
      break;
 8007898:	e00e      	b.n	80078b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800789a:	6839      	ldr	r1, [r7, #0]
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fc77 	bl	8008190 <USBD_SetFeature>
      break;
 80078a2:	e009      	b.n	80078b8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80078a4:	6839      	ldr	r1, [r7, #0]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fc86 	bl	80081b8 <USBD_ClrFeature>
      break;
 80078ac:	e004      	b.n	80078b8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fcdc 	bl	800826e <USBD_CtlError>
      break;
 80078b6:	bf00      	nop
    }
    break;
 80078b8:	e004      	b.n	80078c4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f000 fcd6 	bl	800826e <USBD_CtlError>
    break;
 80078c2:	bf00      	nop
  }

  return ret;
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
 80078ce:	bf00      	nop

080078d0 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078e6:	2b40      	cmp	r3, #64	; 0x40
 80078e8:	d005      	beq.n	80078f6 <USBD_StdItfReq+0x26>
 80078ea:	2b40      	cmp	r3, #64	; 0x40
 80078ec:	d82e      	bhi.n	800794c <USBD_StdItfReq+0x7c>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <USBD_StdItfReq+0x26>
 80078f2:	2b20      	cmp	r3, #32
 80078f4:	d12a      	bne.n	800794c <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fc:	3b01      	subs	r3, #1
 80078fe:	2b02      	cmp	r3, #2
 8007900:	d81d      	bhi.n	800793e <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	889b      	ldrh	r3, [r3, #4]
 8007906:	b2db      	uxtb	r3, r3
 8007908:	2b01      	cmp	r3, #1
 800790a:	d813      	bhi.n	8007934 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
 800791a:	4603      	mov	r3, r0
 800791c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	88db      	ldrh	r3, [r3, #6]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d110      	bne.n	8007948 <USBD_StdItfReq+0x78>
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10d      	bne.n	8007948 <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fd69 	bl	8008404 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007932:	e009      	b.n	8007948 <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fc99 	bl	800826e <USBD_CtlError>
      break;
 800793c:	e004      	b.n	8007948 <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fc94 	bl	800826e <USBD_CtlError>
      break;
 8007946:	e000      	b.n	800794a <USBD_StdItfReq+0x7a>
      break;
 8007948:	bf00      	nop
    }
    break;
 800794a:	e004      	b.n	8007956 <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fc8d 	bl	800826e <USBD_CtlError>
    break;
 8007954:	bf00      	nop
  }

  return ret;
 8007956:	7bfb      	ldrb	r3, [r7, #15]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	889b      	ldrh	r3, [r3, #4]
 8007972:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800797c:	2b40      	cmp	r3, #64	; 0x40
 800797e:	d007      	beq.n	8007990 <USBD_StdEPReq+0x30>
 8007980:	2b40      	cmp	r3, #64	; 0x40
 8007982:	f200 8140 	bhi.w	8007c06 <USBD_StdEPReq+0x2a6>
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00c      	beq.n	80079a4 <USBD_StdEPReq+0x44>
 800798a:	2b20      	cmp	r3, #32
 800798c:	f040 813b 	bne.w	8007c06 <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	6839      	ldr	r1, [r7, #0]
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3
 800799e:	4603      	mov	r3, r0
 80079a0:	73fb      	strb	r3, [r7, #15]
    break;
 80079a2:	e135      	b.n	8007c10 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	785b      	ldrb	r3, [r3, #1]
 80079a8:	2b03      	cmp	r3, #3
 80079aa:	d007      	beq.n	80079bc <USBD_StdEPReq+0x5c>
 80079ac:	2b03      	cmp	r3, #3
 80079ae:	f300 8124 	bgt.w	8007bfa <USBD_StdEPReq+0x29a>
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d07b      	beq.n	8007aae <USBD_StdEPReq+0x14e>
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d03b      	beq.n	8007a32 <USBD_StdEPReq+0xd2>
 80079ba:	e11e      	b.n	8007bfa <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d002      	beq.n	80079cc <USBD_StdEPReq+0x6c>
 80079c6:	2b03      	cmp	r3, #3
 80079c8:	d016      	beq.n	80079f8 <USBD_StdEPReq+0x98>
 80079ca:	e02c      	b.n	8007a26 <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00d      	beq.n	80079ee <USBD_StdEPReq+0x8e>
 80079d2:	7bbb      	ldrb	r3, [r7, #14]
 80079d4:	2b80      	cmp	r3, #128	; 0x80
 80079d6:	d00a      	beq.n	80079ee <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 f9e5 	bl	8008dac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079e2:	2180      	movs	r1, #128	; 0x80
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 f9e1 	bl	8008dac <USBD_LL_StallEP>
 80079ea:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80079ec:	e020      	b.n	8007a30 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fc3c 	bl	800826e <USBD_CtlError>
        break;
 80079f6:	e01b      	b.n	8007a30 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	885b      	ldrh	r3, [r3, #2]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10e      	bne.n	8007a1e <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a00:	7bbb      	ldrb	r3, [r7, #14]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00b      	beq.n	8007a1e <USBD_StdEPReq+0xbe>
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	2b80      	cmp	r3, #128	; 0x80
 8007a0a:	d008      	beq.n	8007a1e <USBD_StdEPReq+0xbe>
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	88db      	ldrh	r3, [r3, #6]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d104      	bne.n	8007a1e <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
 8007a16:	4619      	mov	r1, r3
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f001 f9c7 	bl	8008dac <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fcf0 	bl	8008404 <USBD_CtlSendStatus>

        break;
 8007a24:	e004      	b.n	8007a30 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8007a26:	6839      	ldr	r1, [r7, #0]
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fc20 	bl	800826e <USBD_CtlError>
        break;
 8007a2e:	bf00      	nop
      }
      break;
 8007a30:	e0e8      	b.n	8007c04 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d002      	beq.n	8007a42 <USBD_StdEPReq+0xe2>
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d016      	beq.n	8007a6e <USBD_StdEPReq+0x10e>
 8007a40:	e02e      	b.n	8007aa0 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00d      	beq.n	8007a64 <USBD_StdEPReq+0x104>
 8007a48:	7bbb      	ldrb	r3, [r7, #14]
 8007a4a:	2b80      	cmp	r3, #128	; 0x80
 8007a4c:	d00a      	beq.n	8007a64 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a4e:	7bbb      	ldrb	r3, [r7, #14]
 8007a50:	4619      	mov	r1, r3
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f001 f9aa 	bl	8008dac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a58:	2180      	movs	r1, #128	; 0x80
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f001 f9a6 	bl	8008dac <USBD_LL_StallEP>
 8007a60:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007a62:	e023      	b.n	8007aac <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 fc01 	bl	800826e <USBD_CtlError>
        break;
 8007a6c:	e01e      	b.n	8007aac <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	885b      	ldrh	r3, [r3, #2]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d119      	bne.n	8007aaa <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007a76:	7bbb      	ldrb	r3, [r7, #14]
 8007a78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a80:	7bbb      	ldrb	r3, [r7, #14]
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f001 f9b0 	bl	8008dea <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 fcba 	bl	8008404 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	6839      	ldr	r1, [r7, #0]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	4798      	blx	r3
        }
        break;
 8007a9e:	e004      	b.n	8007aaa <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007aa0:	6839      	ldr	r1, [r7, #0]
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 fbe3 	bl	800826e <USBD_CtlError>
        break;
 8007aa8:	e000      	b.n	8007aac <USBD_StdEPReq+0x14c>
        break;
 8007aaa:	bf00      	nop
      }
      break;
 8007aac:	e0aa      	b.n	8007c04 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab4:	2b02      	cmp	r3, #2
 8007ab6:	d002      	beq.n	8007abe <USBD_StdEPReq+0x15e>
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d032      	beq.n	8007b22 <USBD_StdEPReq+0x1c2>
 8007abc:	e097      	b.n	8007bee <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d007      	beq.n	8007ad4 <USBD_StdEPReq+0x174>
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	2b80      	cmp	r3, #128	; 0x80
 8007ac8:	d004      	beq.n	8007ad4 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8007aca:	6839      	ldr	r1, [r7, #0]
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fbce 	bl	800826e <USBD_CtlError>
          break;
 8007ad2:	e091      	b.n	8007bf8 <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	da0b      	bge.n	8007af4 <USBD_StdEPReq+0x194>
 8007adc:	7bbb      	ldrb	r3, [r7, #14]
 8007ade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	4413      	add	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	3310      	adds	r3, #16
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	4413      	add	r3, r2
 8007af0:	3304      	adds	r3, #4
 8007af2:	e00b      	b.n	8007b0c <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007af4:	7bbb      	ldrb	r3, [r7, #14]
 8007af6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007afa:	4613      	mov	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	4413      	add	r3, r2
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	2200      	movs	r2, #0
 8007b12:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2202      	movs	r2, #2
 8007b18:	4619      	mov	r1, r3
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fc18 	bl	8008350 <USBD_CtlSendData>
        break;
 8007b20:	e06a      	b.n	8007bf8 <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007b22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	da11      	bge.n	8007b4e <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b2a:	7bbb      	ldrb	r3, [r7, #14]
 8007b2c:	f003 020f 	and.w	r2, r3, #15
 8007b30:	6879      	ldr	r1, [r7, #4]
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	440b      	add	r3, r1
 8007b3c:	3324      	adds	r3, #36	; 0x24
 8007b3e:	881b      	ldrh	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d117      	bne.n	8007b74 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 fb91 	bl	800826e <USBD_CtlError>
            break;
 8007b4c:	e054      	b.n	8007bf8 <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	f003 020f 	and.w	r2, r3, #15
 8007b54:	6879      	ldr	r1, [r7, #4]
 8007b56:	4613      	mov	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	4413      	add	r3, r2
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	440b      	add	r3, r1
 8007b60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b64:	881b      	ldrh	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d104      	bne.n	8007b74 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fb7e 	bl	800826e <USBD_CtlError>
            break;
 8007b72:	e041      	b.n	8007bf8 <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	da0b      	bge.n	8007b94 <USBD_StdEPReq+0x234>
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	3310      	adds	r3, #16
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	4413      	add	r3, r2
 8007b90:	3304      	adds	r3, #4
 8007b92:	e00b      	b.n	8007bac <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007b94:	7bbb      	ldrb	r3, [r7, #14]
 8007b96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	4413      	add	r3, r2
 8007baa:	3304      	adds	r3, #4
 8007bac:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007bae:	7bbb      	ldrb	r3, [r7, #14]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d002      	beq.n	8007bba <USBD_StdEPReq+0x25a>
 8007bb4:	7bbb      	ldrb	r3, [r7, #14]
 8007bb6:	2b80      	cmp	r3, #128	; 0x80
 8007bb8:	d103      	bne.n	8007bc2 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	601a      	str	r2, [r3, #0]
 8007bc0:	e00e      	b.n	8007be0 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007bc2:	7bbb      	ldrb	r3, [r7, #14]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 f92e 	bl	8008e28 <USBD_LL_IsStallEP>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	601a      	str	r2, [r3, #0]
 8007bd8:	e002      	b.n	8007be0 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2202      	movs	r2, #2
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fbb2 	bl	8008350 <USBD_CtlSendData>
          break;
 8007bec:	e004      	b.n	8007bf8 <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fb3c 	bl	800826e <USBD_CtlError>
        break;
 8007bf6:	bf00      	nop
      }
      break;
 8007bf8:	e004      	b.n	8007c04 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8007bfa:	6839      	ldr	r1, [r7, #0]
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	f000 fb36 	bl	800826e <USBD_CtlError>
      break;
 8007c02:	bf00      	nop
    }
    break;
 8007c04:	e004      	b.n	8007c10 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8007c06:	6839      	ldr	r1, [r7, #0]
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 fb30 	bl	800826e <USBD_CtlError>
    break;
 8007c0e:	bf00      	nop
  }

  return ret;
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c26:	2300      	movs	r3, #0
 8007c28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	885b      	ldrh	r3, [r3, #2]
 8007c36:	0a1b      	lsrs	r3, r3, #8
 8007c38:	b29b      	uxth	r3, r3
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	2b06      	cmp	r3, #6
 8007c3e:	f200 8128 	bhi.w	8007e92 <USBD_GetDescriptor+0x276>
 8007c42:	a201      	add	r2, pc, #4	; (adr r2, 8007c48 <USBD_GetDescriptor+0x2c>)
 8007c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c48:	08007c65 	.word	0x08007c65
 8007c4c:	08007c7d 	.word	0x08007c7d
 8007c50:	08007cbd 	.word	0x08007cbd
 8007c54:	08007e93 	.word	0x08007e93
 8007c58:	08007e93 	.word	0x08007e93
 8007c5c:	08007e33 	.word	0x08007e33
 8007c60:	08007e5f 	.word	0x08007e5f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	7c12      	ldrb	r2, [r2, #16]
 8007c70:	f107 0108 	add.w	r1, r7, #8
 8007c74:	4610      	mov	r0, r2
 8007c76:	4798      	blx	r3
 8007c78:	60f8      	str	r0, [r7, #12]
    break;
 8007c7a:	e112      	b.n	8007ea2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	7c1b      	ldrb	r3, [r3, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10d      	bne.n	8007ca0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c8c:	f107 0208 	add.w	r2, r7, #8
 8007c90:	4610      	mov	r0, r2
 8007c92:	4798      	blx	r3
 8007c94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007c9e:	e100      	b.n	8007ea2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	f107 0208 	add.w	r2, r7, #8
 8007cac:	4610      	mov	r0, r2
 8007cae:	4798      	blx	r3
 8007cb0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	3301      	adds	r3, #1
 8007cb6:	2202      	movs	r2, #2
 8007cb8:	701a      	strb	r2, [r3, #0]
    break;
 8007cba:	e0f2      	b.n	8007ea2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	885b      	ldrh	r3, [r3, #2]
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b05      	cmp	r3, #5
 8007cc4:	f200 80ac 	bhi.w	8007e20 <USBD_GetDescriptor+0x204>
 8007cc8:	a201      	add	r2, pc, #4	; (adr r2, 8007cd0 <USBD_GetDescriptor+0xb4>)
 8007cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cce:	bf00      	nop
 8007cd0:	08007ce9 	.word	0x08007ce9
 8007cd4:	08007d1d 	.word	0x08007d1d
 8007cd8:	08007d51 	.word	0x08007d51
 8007cdc:	08007d85 	.word	0x08007d85
 8007ce0:	08007db9 	.word	0x08007db9
 8007ce4:	08007ded 	.word	0x08007ded
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00b      	beq.n	8007d0c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	7c12      	ldrb	r2, [r2, #16]
 8007d00:	f107 0108 	add.w	r1, r7, #8
 8007d04:	4610      	mov	r0, r2
 8007d06:	4798      	blx	r3
 8007d08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d0a:	e091      	b.n	8007e30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 faad 	bl	800826e <USBD_CtlError>
        err++;
 8007d14:	7afb      	ldrb	r3, [r7, #11]
 8007d16:	3301      	adds	r3, #1
 8007d18:	72fb      	strb	r3, [r7, #11]
      break;
 8007d1a:	e089      	b.n	8007e30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00b      	beq.n	8007d40 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	7c12      	ldrb	r2, [r2, #16]
 8007d34:	f107 0108 	add.w	r1, r7, #8
 8007d38:	4610      	mov	r0, r2
 8007d3a:	4798      	blx	r3
 8007d3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d3e:	e077      	b.n	8007e30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fa93 	bl	800826e <USBD_CtlError>
        err++;
 8007d48:	7afb      	ldrb	r3, [r7, #11]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	72fb      	strb	r3, [r7, #11]
      break;
 8007d4e:	e06f      	b.n	8007e30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	687a      	ldr	r2, [r7, #4]
 8007d66:	7c12      	ldrb	r2, [r2, #16]
 8007d68:	f107 0108 	add.w	r1, r7, #8
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4798      	blx	r3
 8007d70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d72:	e05d      	b.n	8007e30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d74:	6839      	ldr	r1, [r7, #0]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa79 	bl	800826e <USBD_CtlError>
        err++;
 8007d7c:	7afb      	ldrb	r3, [r7, #11]
 8007d7e:	3301      	adds	r3, #1
 8007d80:	72fb      	strb	r3, [r7, #11]
      break;
 8007d82:	e055      	b.n	8007e30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d00b      	beq.n	8007da8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d96:	691b      	ldr	r3, [r3, #16]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	7c12      	ldrb	r2, [r2, #16]
 8007d9c:	f107 0108 	add.w	r1, r7, #8
 8007da0:	4610      	mov	r0, r2
 8007da2:	4798      	blx	r3
 8007da4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007da6:	e043      	b.n	8007e30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007da8:	6839      	ldr	r1, [r7, #0]
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fa5f 	bl	800826e <USBD_CtlError>
        err++;
 8007db0:	7afb      	ldrb	r3, [r7, #11]
 8007db2:	3301      	adds	r3, #1
 8007db4:	72fb      	strb	r3, [r7, #11]
      break;
 8007db6:	e03b      	b.n	8007e30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dbe:	695b      	ldr	r3, [r3, #20]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d00b      	beq.n	8007ddc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	7c12      	ldrb	r2, [r2, #16]
 8007dd0:	f107 0108 	add.w	r1, r7, #8
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4798      	blx	r3
 8007dd8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dda:	e029      	b.n	8007e30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 fa45 	bl	800826e <USBD_CtlError>
        err++;
 8007de4:	7afb      	ldrb	r3, [r7, #11]
 8007de6:	3301      	adds	r3, #1
 8007de8:	72fb      	strb	r3, [r7, #11]
      break;
 8007dea:	e021      	b.n	8007e30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00b      	beq.n	8007e10 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfe:	699b      	ldr	r3, [r3, #24]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	7c12      	ldrb	r2, [r2, #16]
 8007e04:	f107 0108 	add.w	r1, r7, #8
 8007e08:	4610      	mov	r0, r2
 8007e0a:	4798      	blx	r3
 8007e0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e0e:	e00f      	b.n	8007e30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 fa2b 	bl	800826e <USBD_CtlError>
        err++;
 8007e18:	7afb      	ldrb	r3, [r7, #11]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	72fb      	strb	r3, [r7, #11]
      break;
 8007e1e:	e007      	b.n	8007e30 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007e20:	6839      	ldr	r1, [r7, #0]
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 fa23 	bl	800826e <USBD_CtlError>
      err++;
 8007e28:	7afb      	ldrb	r3, [r7, #11]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007e2e:	bf00      	nop
    }
    break;
 8007e30:	e037      	b.n	8007ea2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	7c1b      	ldrb	r3, [r3, #16]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d109      	bne.n	8007e4e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e42:	f107 0208 	add.w	r2, r7, #8
 8007e46:	4610      	mov	r0, r2
 8007e48:	4798      	blx	r3
 8007e4a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007e4c:	e029      	b.n	8007ea2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007e4e:	6839      	ldr	r1, [r7, #0]
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 fa0c 	bl	800826e <USBD_CtlError>
      err++;
 8007e56:	7afb      	ldrb	r3, [r7, #11]
 8007e58:	3301      	adds	r3, #1
 8007e5a:	72fb      	strb	r3, [r7, #11]
    break;
 8007e5c:	e021      	b.n	8007ea2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	7c1b      	ldrb	r3, [r3, #16]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10d      	bne.n	8007e82 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6e:	f107 0208 	add.w	r2, r7, #8
 8007e72:	4610      	mov	r0, r2
 8007e74:	4798      	blx	r3
 8007e76:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	2207      	movs	r2, #7
 8007e7e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007e80:	e00f      	b.n	8007ea2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f000 f9f2 	bl	800826e <USBD_CtlError>
      err++;
 8007e8a:	7afb      	ldrb	r3, [r7, #11]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	72fb      	strb	r3, [r7, #11]
    break;
 8007e90:	e007      	b.n	8007ea2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007e92:	6839      	ldr	r1, [r7, #0]
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f9ea 	bl	800826e <USBD_CtlError>
    err++;
 8007e9a:	7afb      	ldrb	r3, [r7, #11]
 8007e9c:	3301      	adds	r3, #1
 8007e9e:	72fb      	strb	r3, [r7, #11]
    break;
 8007ea0:	bf00      	nop
  }

  if (err != 0U)
 8007ea2:	7afb      	ldrb	r3, [r7, #11]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d11e      	bne.n	8007ee6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	88db      	ldrh	r3, [r3, #6]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d016      	beq.n	8007ede <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007eb0:	893b      	ldrh	r3, [r7, #8]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00e      	beq.n	8007ed4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	88da      	ldrh	r2, [r3, #6]
 8007eba:	893b      	ldrh	r3, [r7, #8]
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	bf28      	it	cs
 8007ec0:	4613      	movcs	r3, r2
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007ec6:	893b      	ldrh	r3, [r7, #8]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	68f9      	ldr	r1, [r7, #12]
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 fa3f 	bl	8008350 <USBD_CtlSendData>
 8007ed2:	e009      	b.n	8007ee8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 f9c9 	bl	800826e <USBD_CtlError>
 8007edc:	e004      	b.n	8007ee8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	f000 fa90 	bl	8008404 <USBD_CtlSendStatus>
 8007ee4:	e000      	b.n	8007ee8 <USBD_GetDescriptor+0x2cc>
    return;
 8007ee6:	bf00      	nop
    }
  }
}
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop

08007ef0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	889b      	ldrh	r3, [r3, #4]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d130      	bne.n	8007f64 <USBD_SetAddress+0x74>
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	88db      	ldrh	r3, [r3, #6]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d12c      	bne.n	8007f64 <USBD_SetAddress+0x74>
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	885b      	ldrh	r3, [r3, #2]
 8007f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8007f10:	d828      	bhi.n	8007f64 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	885b      	ldrh	r3, [r3, #2]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f1c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d104      	bne.n	8007f32 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f28:	6839      	ldr	r1, [r7, #0]
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f99f 	bl	800826e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f30:	e01d      	b.n	8007f6e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	7bfa      	ldrb	r2, [r7, #15]
 8007f36:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f000 ff9e 	bl	8008e80 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f44:	6878      	ldr	r0, [r7, #4]
 8007f46:	f000 fa5d 	bl	8008404 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f4a:	7bfb      	ldrb	r3, [r7, #15]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d004      	beq.n	8007f5a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f58:	e009      	b.n	8007f6e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f62:	e004      	b.n	8007f6e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f981 	bl	800826e <USBD_CtlError>
  }
}
 8007f6c:	bf00      	nop
 8007f6e:	bf00      	nop
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
	...

08007f78 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	885b      	ldrh	r3, [r3, #2]
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	4b4b      	ldr	r3, [pc, #300]	; (80080bc <USBD_SetConfig+0x144>)
 8007f8e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f90:	4b4a      	ldr	r3, [pc, #296]	; (80080bc <USBD_SetConfig+0x144>)
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d905      	bls.n	8007fa4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f98:	6839      	ldr	r1, [r7, #0]
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f967 	bl	800826e <USBD_CtlError>
    return USBD_FAIL;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e087      	b.n	80080b4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d002      	beq.n	8007fb4 <USBD_SetConfig+0x3c>
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d025      	beq.n	8007ffe <USBD_SetConfig+0x86>
 8007fb2:	e071      	b.n	8008098 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007fb4:	4b41      	ldr	r3, [pc, #260]	; (80080bc <USBD_SetConfig+0x144>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d01c      	beq.n	8007ff6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007fbc:	4b3f      	ldr	r3, [pc, #252]	; (80080bc <USBD_SetConfig+0x144>)
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fc6:	4b3d      	ldr	r3, [pc, #244]	; (80080bc <USBD_SetConfig+0x144>)
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f7ff f99a 	bl	8007306 <USBD_SetClassConfig>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d004      	beq.n	8007fe6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007fdc:	6839      	ldr	r1, [r7, #0]
 8007fde:	6878      	ldr	r0, [r7, #4]
 8007fe0:	f000 f945 	bl	800826e <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007fe4:	e065      	b.n	80080b2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fa0c 	bl	8008404 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2203      	movs	r2, #3
 8007ff0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007ff4:	e05d      	b.n	80080b2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fa04 	bl	8008404 <USBD_CtlSendStatus>
    break;
 8007ffc:	e059      	b.n	80080b2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007ffe:	4b2f      	ldr	r3, [pc, #188]	; (80080bc <USBD_SetConfig+0x144>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d112      	bne.n	800802c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2202      	movs	r2, #2
 800800a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800800e:	4b2b      	ldr	r3, [pc, #172]	; (80080bc <USBD_SetConfig+0x144>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008018:	4b28      	ldr	r3, [pc, #160]	; (80080bc <USBD_SetConfig+0x144>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff f98d 	bl	800733e <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 f9ed 	bl	8008404 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800802a:	e042      	b.n	80080b2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800802c:	4b23      	ldr	r3, [pc, #140]	; (80080bc <USBD_SetConfig+0x144>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	461a      	mov	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	429a      	cmp	r2, r3
 8008038:	d02a      	beq.n	8008090 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	b2db      	uxtb	r3, r3
 8008040:	4619      	mov	r1, r3
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f7ff f97b 	bl	800733e <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008048:	4b1c      	ldr	r3, [pc, #112]	; (80080bc <USBD_SetConfig+0x144>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	461a      	mov	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008052:	4b1a      	ldr	r3, [pc, #104]	; (80080bc <USBD_SetConfig+0x144>)
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	4619      	mov	r1, r3
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f7ff f954 	bl	8007306 <USBD_SetClassConfig>
 800805e:	4603      	mov	r3, r0
 8008060:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008062:	7bfb      	ldrb	r3, [r7, #15]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00f      	beq.n	8008088 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f000 f8ff 	bl	800826e <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	b2db      	uxtb	r3, r3
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff f960 	bl	800733e <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008086:	e014      	b.n	80080b2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f9bb 	bl	8008404 <USBD_CtlSendStatus>
    break;
 800808e:	e010      	b.n	80080b2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f9b7 	bl	8008404 <USBD_CtlSendStatus>
    break;
 8008096:	e00c      	b.n	80080b2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 f8e7 	bl	800826e <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080a0:	4b06      	ldr	r3, [pc, #24]	; (80080bc <USBD_SetConfig+0x144>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7ff f949 	bl	800733e <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80080ac:	2303      	movs	r3, #3
 80080ae:	73fb      	strb	r3, [r7, #15]
    break;
 80080b0:	bf00      	nop
  }

  return ret;
 80080b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	20000210 	.word	0x20000210

080080c0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	88db      	ldrh	r3, [r3, #6]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d004      	beq.n	80080dc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f8ca 	bl	800826e <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80080da:	e022      	b.n	8008122 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	dc02      	bgt.n	80080ec <USBD_GetConfig+0x2c>
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	dc03      	bgt.n	80080f2 <USBD_GetConfig+0x32>
 80080ea:	e015      	b.n	8008118 <USBD_GetConfig+0x58>
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d00b      	beq.n	8008108 <USBD_GetConfig+0x48>
 80080f0:	e012      	b.n	8008118 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3308      	adds	r3, #8
 80080fc:	2201      	movs	r2, #1
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f000 f925 	bl	8008350 <USBD_CtlSendData>
      break;
 8008106:	e00c      	b.n	8008122 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	3304      	adds	r3, #4
 800810c:	2201      	movs	r2, #1
 800810e:	4619      	mov	r1, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f91d 	bl	8008350 <USBD_CtlSendData>
      break;
 8008116:	e004      	b.n	8008122 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f8a7 	bl	800826e <USBD_CtlError>
      break;
 8008120:	bf00      	nop
}
 8008122:	bf00      	nop
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b082      	sub	sp, #8
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800813a:	3b01      	subs	r3, #1
 800813c:	2b02      	cmp	r3, #2
 800813e:	d81e      	bhi.n	800817e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	88db      	ldrh	r3, [r3, #6]
 8008144:	2b02      	cmp	r3, #2
 8008146:	d004      	beq.n	8008152 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008148:	6839      	ldr	r1, [r7, #0]
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 f88f 	bl	800826e <USBD_CtlError>
      break;
 8008150:	e01a      	b.n	8008188 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800815e:	2b00      	cmp	r3, #0
 8008160:	d005      	beq.n	800816e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	f043 0202 	orr.w	r2, r3, #2
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	330c      	adds	r3, #12
 8008172:	2202      	movs	r2, #2
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f8ea 	bl	8008350 <USBD_CtlSendData>
    break;
 800817c:	e004      	b.n	8008188 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 f874 	bl	800826e <USBD_CtlError>
    break;
 8008186:	bf00      	nop
  }
}
 8008188:	bf00      	nop
 800818a:	3708      	adds	r7, #8
 800818c:	46bd      	mov	sp, r7
 800818e:	bd80      	pop	{r7, pc}

08008190 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	885b      	ldrh	r3, [r3, #2]
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d106      	bne.n	80081b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f92a 	bl	8008404 <USBD_CtlSendStatus>
  }
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c8:	3b01      	subs	r3, #1
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d80b      	bhi.n	80081e6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	885b      	ldrh	r3, [r3, #2]
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d10c      	bne.n	80081f0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f000 f910 	bl	8008404 <USBD_CtlSendStatus>
      }
      break;
 80081e4:	e004      	b.n	80081f0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80081e6:	6839      	ldr	r1, [r7, #0]
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f840 	bl	800826e <USBD_CtlError>
      break;
 80081ee:	e000      	b.n	80081f2 <USBD_ClrFeature+0x3a>
      break;
 80081f0:	bf00      	nop
  }
}
 80081f2:	bf00      	nop
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b084      	sub	sp, #16
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	781a      	ldrb	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	3301      	adds	r3, #1
 8008214:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	781a      	ldrb	r2, [r3, #0]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	3301      	adds	r3, #1
 8008222:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7ff fac7 	bl	80077b8 <SWAPBYTE>
 800822a:	4603      	mov	r3, r0
 800822c:	461a      	mov	r2, r3
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	3301      	adds	r3, #1
 8008236:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3301      	adds	r3, #1
 800823c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f7ff faba 	bl	80077b8 <SWAPBYTE>
 8008244:	4603      	mov	r3, r0
 8008246:	461a      	mov	r2, r3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3301      	adds	r3, #1
 8008250:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3301      	adds	r3, #1
 8008256:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f7ff faad 	bl	80077b8 <SWAPBYTE>
 800825e:	4603      	mov	r3, r0
 8008260:	461a      	mov	r2, r3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	80da      	strh	r2, [r3, #6]
}
 8008266:	bf00      	nop
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008278:	2180      	movs	r1, #128	; 0x80
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f000 fd96 	bl	8008dac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008280:	2100      	movs	r1, #0
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 fd92 	bl	8008dac <USBD_LL_StallEP>
}
 8008288:	bf00      	nop
 800828a:	3708      	adds	r7, #8
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800829c:	2300      	movs	r3, #0
 800829e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d036      	beq.n	8008314 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80082aa:	6938      	ldr	r0, [r7, #16]
 80082ac:	f000 f836 	bl	800831c <USBD_GetLen>
 80082b0:	4603      	mov	r3, r0
 80082b2:	3301      	adds	r3, #1
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	b29a      	uxth	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80082be:	7dfb      	ldrb	r3, [r7, #23]
 80082c0:	68ba      	ldr	r2, [r7, #8]
 80082c2:	4413      	add	r3, r2
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	7812      	ldrb	r2, [r2, #0]
 80082c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	3301      	adds	r3, #1
 80082ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082d0:	7dfb      	ldrb	r3, [r7, #23]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	4413      	add	r3, r2
 80082d6:	2203      	movs	r2, #3
 80082d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	3301      	adds	r3, #1
 80082de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082e0:	e013      	b.n	800830a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	4413      	add	r3, r2
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	7812      	ldrb	r2, [r2, #0]
 80082ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	3301      	adds	r3, #1
 80082f2:	613b      	str	r3, [r7, #16]
    idx++;
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
 80082f6:	3301      	adds	r3, #1
 80082f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
 80082fc:	68ba      	ldr	r2, [r7, #8]
 80082fe:	4413      	add	r3, r2
 8008300:	2200      	movs	r2, #0
 8008302:	701a      	strb	r2, [r3, #0]
    idx++;
 8008304:	7dfb      	ldrb	r3, [r7, #23]
 8008306:	3301      	adds	r3, #1
 8008308:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800830a:	693b      	ldr	r3, [r7, #16]
 800830c:	781b      	ldrb	r3, [r3, #0]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e7      	bne.n	80082e2 <USBD_GetString+0x52>
 8008312:	e000      	b.n	8008316 <USBD_GetString+0x86>
    return;
 8008314:	bf00      	nop
  }
}
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008324:	2300      	movs	r3, #0
 8008326:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800832c:	e005      	b.n	800833a <USBD_GetLen+0x1e>
  {
    len++;
 800832e:	7bfb      	ldrb	r3, [r7, #15]
 8008330:	3301      	adds	r3, #1
 8008332:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	3301      	adds	r3, #1
 8008338:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1f5      	bne.n	800832e <USBD_GetLen+0x12>
  }

  return len;
 8008342:	7bfb      	ldrb	r3, [r7, #15]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2202      	movs	r2, #2
 8008360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	68ba      	ldr	r2, [r7, #8]
 8008374:	2100      	movs	r1, #0
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f000 fda1 	bl	8008ebe <USBD_LL_Transmit>

  return USBD_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	60b9      	str	r1, [r7, #8]
 8008390:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	2100      	movs	r1, #0
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f000 fd90 	bl	8008ebe <USBD_LL_Transmit>

  return USBD_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3710      	adds	r7, #16
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2203      	movs	r2, #3
 80083b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	2100      	movs	r1, #0
 80083d2:	68f8      	ldr	r0, [r7, #12]
 80083d4:	f000 fd94 	bl	8008f00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3710      	adds	r7, #16
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}

080083e2 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b084      	sub	sp, #16
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	68ba      	ldr	r2, [r7, #8]
 80083f2:	2100      	movs	r1, #0
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f000 fd83 	bl	8008f00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2204      	movs	r2, #4
 8008410:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008414:	2300      	movs	r3, #0
 8008416:	2200      	movs	r2, #0
 8008418:	2100      	movs	r1, #0
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fd4f 	bl	8008ebe <USBD_LL_Transmit>

  return USBD_OK;
 8008420:	2300      	movs	r3, #0
}
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}

0800842a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800842a:	b580      	push	{r7, lr}
 800842c:	b082      	sub	sp, #8
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2205      	movs	r2, #5
 8008436:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800843a:	2300      	movs	r3, #0
 800843c:	2200      	movs	r2, #0
 800843e:	2100      	movs	r1, #0
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 fd5d 	bl	8008f00 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8008454:	2201      	movs	r2, #1
 8008456:	4912      	ldr	r1, [pc, #72]	; (80084a0 <MX_USB_DEVICE_Init+0x50>)
 8008458:	4812      	ldr	r0, [pc, #72]	; (80084a4 <MX_USB_DEVICE_Init+0x54>)
 800845a:	f7fe fecb 	bl	80071f4 <USBD_Init>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d001      	beq.n	8008468 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008464:	f7f9 fbd0 	bl	8001c08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8008468:	490f      	ldr	r1, [pc, #60]	; (80084a8 <MX_USB_DEVICE_Init+0x58>)
 800846a:	480e      	ldr	r0, [pc, #56]	; (80084a4 <MX_USB_DEVICE_Init+0x54>)
 800846c:	f7fe ff06 	bl	800727c <USBD_RegisterClass>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d001      	beq.n	800847a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008476:	f7f9 fbc7 	bl	8001c08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800847a:	490c      	ldr	r1, [pc, #48]	; (80084ac <MX_USB_DEVICE_Init+0x5c>)
 800847c:	4809      	ldr	r0, [pc, #36]	; (80084a4 <MX_USB_DEVICE_Init+0x54>)
 800847e:	f7fe fe1d 	bl	80070bc <USBD_CDC_RegisterInterface>
 8008482:	4603      	mov	r3, r0
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008488:	f7f9 fbbe 	bl	8001c08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800848c:	4805      	ldr	r0, [pc, #20]	; (80084a4 <MX_USB_DEVICE_Init+0x54>)
 800848e:	f7fe ff23 	bl	80072d8 <USBD_Start>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008498:	f7f9 fbb6 	bl	8001c08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800849c:	bf00      	nop
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20000138 	.word	0x20000138
 80084a4:	200004b4 	.word	0x200004b4
 80084a8:	20000018 	.word	0x20000018
 80084ac:	20000124 	.word	0x20000124

080084b0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80084b4:	2200      	movs	r2, #0
 80084b6:	4905      	ldr	r1, [pc, #20]	; (80084cc <CDC_Init_HS+0x1c>)
 80084b8:	4805      	ldr	r0, [pc, #20]	; (80084d0 <CDC_Init_HS+0x20>)
 80084ba:	f7fe fe14 	bl	80070e6 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80084be:	4905      	ldr	r1, [pc, #20]	; (80084d4 <CDC_Init_HS+0x24>)
 80084c0:	4803      	ldr	r0, [pc, #12]	; (80084d0 <CDC_Init_HS+0x20>)
 80084c2:	f7fe fe29 	bl	8007118 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80084c6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	200007e8 	.word	0x200007e8
 80084d0:	200004b4 	.word	0x200004b4
 80084d4:	20000784 	.word	0x20000784

080084d8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80084d8:	b480      	push	{r7}
 80084da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
	return (USBD_OK);
 80084dc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80084de:	4618      	mov	r0, r3
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4603      	mov	r3, r0
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	71fb      	strb	r3, [r7, #7]
 80084f4:	4613      	mov	r3, r2
 80084f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
	switch (cmd) {
 80084f8:	79fb      	ldrb	r3, [r7, #7]
 80084fa:	2b23      	cmp	r3, #35	; 0x23
 80084fc:	d85c      	bhi.n	80085b8 <CDC_Control_HS+0xd0>
 80084fe:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <CDC_Control_HS+0x1c>)
 8008500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008504:	080085b9 	.word	0x080085b9
 8008508:	080085b9 	.word	0x080085b9
 800850c:	080085b9 	.word	0x080085b9
 8008510:	080085b9 	.word	0x080085b9
 8008514:	080085b9 	.word	0x080085b9
 8008518:	080085b9 	.word	0x080085b9
 800851c:	080085b9 	.word	0x080085b9
 8008520:	080085b9 	.word	0x080085b9
 8008524:	080085b9 	.word	0x080085b9
 8008528:	080085b9 	.word	0x080085b9
 800852c:	080085b9 	.word	0x080085b9
 8008530:	080085b9 	.word	0x080085b9
 8008534:	080085b9 	.word	0x080085b9
 8008538:	080085b9 	.word	0x080085b9
 800853c:	080085b9 	.word	0x080085b9
 8008540:	080085b9 	.word	0x080085b9
 8008544:	080085b9 	.word	0x080085b9
 8008548:	080085b9 	.word	0x080085b9
 800854c:	080085b9 	.word	0x080085b9
 8008550:	080085b9 	.word	0x080085b9
 8008554:	080085b9 	.word	0x080085b9
 8008558:	080085b9 	.word	0x080085b9
 800855c:	080085b9 	.word	0x080085b9
 8008560:	080085b9 	.word	0x080085b9
 8008564:	080085b9 	.word	0x080085b9
 8008568:	080085b9 	.word	0x080085b9
 800856c:	080085b9 	.word	0x080085b9
 8008570:	080085b9 	.word	0x080085b9
 8008574:	080085b9 	.word	0x080085b9
 8008578:	080085b9 	.word	0x080085b9
 800857c:	080085b9 	.word	0x080085b9
 8008580:	080085b9 	.word	0x080085b9
 8008584:	08008595 	.word	0x08008595
 8008588:	080085a7 	.word	0x080085a7
 800858c:	080085b9 	.word	0x080085b9
 8008590:	080085b9 	.word	0x080085b9
		/*                                        4 - Space                            */
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/

	case CDC_SET_LINE_CODING:
		memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8008594:	4b0c      	ldr	r3, [pc, #48]	; (80085c8 <CDC_Control_HS+0xe0>)
 8008596:	683a      	ldr	r2, [r7, #0]
 8008598:	6810      	ldr	r0, [r2, #0]
 800859a:	6018      	str	r0, [r3, #0]
 800859c:	8891      	ldrh	r1, [r2, #4]
 800859e:	7992      	ldrb	r2, [r2, #6]
 80085a0:	8099      	strh	r1, [r3, #4]
 80085a2:	719a      	strb	r2, [r3, #6]
		break;
 80085a4:	e009      	b.n	80085ba <CDC_Control_HS+0xd2>

	case CDC_GET_LINE_CODING:
		memcpy(pbuf, lineCoding, sizeof(lineCoding));
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	4a07      	ldr	r2, [pc, #28]	; (80085c8 <CDC_Control_HS+0xe0>)
 80085aa:	6810      	ldr	r0, [r2, #0]
 80085ac:	6018      	str	r0, [r3, #0]
 80085ae:	8891      	ldrh	r1, [r2, #4]
 80085b0:	7992      	ldrb	r2, [r2, #6]
 80085b2:	8099      	strh	r1, [r3, #4]
 80085b4:	719a      	strb	r2, [r3, #6]
		break;
 80085b6:	e000      	b.n	80085ba <CDC_Control_HS+0xd2>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80085b8:	bf00      	nop
	}

	return (USBD_OK);
 80085ba:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80085bc:	4618      	mov	r0, r3
 80085be:	370c      	adds	r7, #12
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr
 80085c8:	2000011c 	.word	0x2000011c

080085cc <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4811      	ldr	r0, [pc, #68]	; (8008620 <CDC_Receive_HS+0x54>)
 80085da:	f7fe fd9d 	bl	8007118 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80085de:	4810      	ldr	r0, [pc, #64]	; (8008620 <CDC_Receive_HS+0x54>)
 80085e0:	f7fe fdde 	bl	80071a0 <USBD_CDC_ReceivePacket>
	strlcpy(usb_received_data, Buf, &Len + 1);
 80085e4:	463b      	mov	r3, r7
 80085e6:	3304      	adds	r3, #4
 80085e8:	461a      	mov	r2, r3
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	480d      	ldr	r0, [pc, #52]	; (8008624 <CDC_Receive_HS+0x58>)
 80085ee:	f000 fe3f 	bl	8009270 <strlcpy>

	if (usb_received_data[0] == '1') {
 80085f2:	4b0c      	ldr	r3, [pc, #48]	; (8008624 <CDC_Receive_HS+0x58>)
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	2b31      	cmp	r3, #49	; 0x31
 80085f8:	d106      	bne.n	8008608 <CDC_Receive_HS+0x3c>
		HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_SET);
 80085fa:	2201      	movs	r2, #1
 80085fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008600:	4809      	ldr	r0, [pc, #36]	; (8008628 <CDC_Receive_HS+0x5c>)
 8008602:	f7fa ff8d 	bl	8003520 <HAL_GPIO_WritePin>
 8008606:	e005      	b.n	8008614 <CDC_Receive_HS+0x48>
	} else {
		HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_RESET);
 8008608:	2200      	movs	r2, #0
 800860a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800860e:	4806      	ldr	r0, [pc, #24]	; (8008628 <CDC_Receive_HS+0x5c>)
 8008610:	f7fa ff86 	bl	8003520 <HAL_GPIO_WritePin>
	}
//	CDC_ReceiveCallback(&Buf, Len[0]);
	return (USBD_OK);
 8008614:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8008616:	4618      	mov	r0, r3
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	200004b4 	.word	0x200004b4
 8008624:	20000810 	.word	0x20000810
 8008628:	40020800 	.word	0x40020800

0800862c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	460b      	mov	r3, r1
 8008636:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
	USBD_CDC_HandleTypeDef *hcdc =
 800863c:	4b0d      	ldr	r3, [pc, #52]	; (8008674 <CDC_Transmit_HS+0x48>)
 800863e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008642:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceHS.pClassData;
	if (hcdc->TxState != 0) {
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <CDC_Transmit_HS+0x26>
		return USBD_BUSY;
 800864e:	2301      	movs	r3, #1
 8008650:	e00b      	b.n	800866a <CDC_Transmit_HS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8008652:	887b      	ldrh	r3, [r7, #2]
 8008654:	461a      	mov	r2, r3
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	4806      	ldr	r0, [pc, #24]	; (8008674 <CDC_Transmit_HS+0x48>)
 800865a:	f7fe fd44 	bl	80070e6 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800865e:	4805      	ldr	r0, [pc, #20]	; (8008674 <CDC_Transmit_HS+0x48>)
 8008660:	f7fe fd6e 	bl	8007140 <USBD_CDC_TransmitPacket>
 8008664:	4603      	mov	r3, r0
 8008666:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8008668:	7bfb      	ldrb	r3, [r7, #15]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3710      	adds	r7, #16
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	200004b4 	.word	0x200004b4

08008678 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008678:	b480      	push	{r7}
 800867a:	b087      	sub	sp, #28
 800867c:	af00      	add	r7, sp, #0
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	4613      	mov	r3, r2
 8008684:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008686:	2300      	movs	r3, #0
 8008688:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800868a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800868e:	4618      	mov	r0, r3
 8008690:	371c      	adds	r7, #28
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
	...

0800869c <UsbTransfer>:
/**
 * @brief: transfer sent or received can data frame over virtual com port
 * @param ptr_can_frame_template
 *
 **/
void UsbTransfer(CanDataFrameInit *ptr_can_frame_template) {
 800869c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800869e:	b08d      	sub	sp, #52	; 0x34
 80086a0:	af08      	add	r7, sp, #32
 80086a2:	60f8      	str	r0, [r7, #12]
//	uint8_t buffer_size = ptr_can_frame_template->rx_header.DLC * 2 + 7;
//	uint8_t usb_tx_data_buffer[buffer_size];

	message_length = sprintf(&usb_tx_data_buffer,
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	689a      	ldr	r2, [r3, #8]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	6999      	ldr	r1, [r3, #24]
			"%3X[%01X]%02X%02X%02X%02X%02X%02X%02X%02X\r\n", // 050[8]DEADBEEFFEEDDEAD
			ptr_can_frame_template->tx_header.StdId,
			ptr_can_frame_template->tx_header.DLC,
			ptr_can_frame_template->tx_data[0],
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	781b      	ldrb	r3, [r3, #0]
	message_length = sprintf(&usb_tx_data_buffer,
 80086b0:	4618      	mov	r0, r3
			ptr_can_frame_template->tx_data[1],
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	785b      	ldrb	r3, [r3, #1]
	message_length = sprintf(&usb_tx_data_buffer,
 80086b6:	461c      	mov	r4, r3
			ptr_can_frame_template->tx_data[2],
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	789b      	ldrb	r3, [r3, #2]
	message_length = sprintf(&usb_tx_data_buffer,
 80086bc:	461d      	mov	r5, r3
			ptr_can_frame_template->tx_data[3],
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	78db      	ldrb	r3, [r3, #3]
	message_length = sprintf(&usb_tx_data_buffer,
 80086c2:	461e      	mov	r6, r3
			ptr_can_frame_template->tx_data[4],
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	791b      	ldrb	r3, [r3, #4]
	message_length = sprintf(&usb_tx_data_buffer,
 80086c8:	60bb      	str	r3, [r7, #8]
			ptr_can_frame_template->tx_data[5],
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	795b      	ldrb	r3, [r3, #5]
	message_length = sprintf(&usb_tx_data_buffer,
 80086ce:	607b      	str	r3, [r7, #4]
			ptr_can_frame_template->tx_data[6],
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	799b      	ldrb	r3, [r3, #6]
	message_length = sprintf(&usb_tx_data_buffer,
 80086d4:	603b      	str	r3, [r7, #0]
			ptr_can_frame_template->tx_data[7]);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	79db      	ldrb	r3, [r3, #7]
	message_length = sprintf(&usb_tx_data_buffer,
 80086da:	9307      	str	r3, [sp, #28]
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	9306      	str	r3, [sp, #24]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	9305      	str	r3, [sp, #20]
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	9304      	str	r3, [sp, #16]
 80086e8:	9603      	str	r6, [sp, #12]
 80086ea:	9502      	str	r5, [sp, #8]
 80086ec:	9401      	str	r4, [sp, #4]
 80086ee:	9000      	str	r0, [sp, #0]
 80086f0:	460b      	mov	r3, r1
 80086f2:	4909      	ldr	r1, [pc, #36]	; (8008718 <UsbTransfer+0x7c>)
 80086f4:	4809      	ldr	r0, [pc, #36]	; (800871c <UsbTransfer+0x80>)
 80086f6:	f000 fd9b 	bl	8009230 <siprintf>
 80086fa:	4603      	mov	r3, r0
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	4b08      	ldr	r3, [pc, #32]	; (8008720 <UsbTransfer+0x84>)
 8008700:	701a      	strb	r2, [r3, #0]
	CDC_Transmit_HS(usb_tx_data_buffer, message_length);
 8008702:	4b07      	ldr	r3, [pc, #28]	; (8008720 <UsbTransfer+0x84>)
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	b29b      	uxth	r3, r3
 8008708:	4619      	mov	r1, r3
 800870a:	4804      	ldr	r0, [pc, #16]	; (800871c <UsbTransfer+0x80>)
 800870c:	f7ff ff8e 	bl	800862c <CDC_Transmit_HS>

}
 8008710:	bf00      	nop
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008718:	0800a3cc 	.word	0x0800a3cc
 800871c:	200007d0 	.word	0x200007d0
 8008720:	20000211 	.word	0x20000211

08008724 <UsbTransferDataByte>:

void UsbTransferDataByte(uint32_t nodeId, uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4,  uint8_t byte5, uint8_t byte6, uint8_t byte7){
 8008724:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008726:	b08d      	sub	sp, #52	; 0x34
 8008728:	af08      	add	r7, sp, #32
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	4608      	mov	r0, r1
 800872e:	4611      	mov	r1, r2
 8008730:	461a      	mov	r2, r3
 8008732:	4603      	mov	r3, r0
 8008734:	72fb      	strb	r3, [r7, #11]
 8008736:	460b      	mov	r3, r1
 8008738:	72bb      	strb	r3, [r7, #10]
 800873a:	4613      	mov	r3, r2
 800873c:	727b      	strb	r3, [r7, #9]
//	uint8_t buffer_size = ptr_can_frame_template->rx_header.DLC * 2 + 7;
//	uint8_t usb_tx_data_buffer[buffer_size];

	message_length = sprintf(&usb_tx_data_buffer,
 800873e:	7afb      	ldrb	r3, [r7, #11]
 8008740:	607b      	str	r3, [r7, #4]
 8008742:	7aba      	ldrb	r2, [r7, #10]
 8008744:	7a79      	ldrb	r1, [r7, #9]
 8008746:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 800874a:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
 800874e:	f897 5030 	ldrb.w	r5, [r7, #48]	; 0x30
 8008752:	f897 6034 	ldrb.w	r6, [r7, #52]	; 0x34
 8008756:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800875a:	9307      	str	r3, [sp, #28]
 800875c:	9606      	str	r6, [sp, #24]
 800875e:	9505      	str	r5, [sp, #20]
 8008760:	9404      	str	r4, [sp, #16]
 8008762:	9003      	str	r0, [sp, #12]
 8008764:	9102      	str	r1, [sp, #8]
 8008766:	9201      	str	r2, [sp, #4]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	2308      	movs	r3, #8
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	4909      	ldr	r1, [pc, #36]	; (8008798 <UsbTransferDataByte+0x74>)
 8008772:	480a      	ldr	r0, [pc, #40]	; (800879c <UsbTransferDataByte+0x78>)
 8008774:	f000 fd5c 	bl	8009230 <siprintf>
 8008778:	4603      	mov	r3, r0
 800877a:	b2da      	uxtb	r2, r3
 800877c:	4b08      	ldr	r3, [pc, #32]	; (80087a0 <UsbTransferDataByte+0x7c>)
 800877e:	701a      	strb	r2, [r3, #0]
			byte3,
			byte4,
			byte5,
			byte6,
			byte7);
	CDC_Transmit_HS(usb_tx_data_buffer, message_length);
 8008780:	4b07      	ldr	r3, [pc, #28]	; (80087a0 <UsbTransferDataByte+0x7c>)
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	b29b      	uxth	r3, r3
 8008786:	4619      	mov	r1, r3
 8008788:	4804      	ldr	r0, [pc, #16]	; (800879c <UsbTransferDataByte+0x78>)
 800878a:	f7ff ff4f 	bl	800862c <CDC_Transmit_HS>

}
 800878e:	bf00      	nop
 8008790:	3714      	adds	r7, #20
 8008792:	46bd      	mov	sp, r7
 8008794:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008796:	bf00      	nop
 8008798:	0800a3cc 	.word	0x0800a3cc
 800879c:	200007d0 	.word	0x200007d0
 80087a0:	20000211 	.word	0x20000211

080087a4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	4603      	mov	r3, r0
 80087ac:	6039      	str	r1, [r7, #0]
 80087ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	2212      	movs	r2, #18
 80087b4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80087b6:	4b03      	ldr	r3, [pc, #12]	; (80087c4 <USBD_HS_DeviceDescriptor+0x20>)
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	20000154 	.word	0x20000154

080087c8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	4603      	mov	r3, r0
 80087d0:	6039      	str	r1, [r7, #0]
 80087d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2204      	movs	r2, #4
 80087d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80087da:	4b03      	ldr	r3, [pc, #12]	; (80087e8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr
 80087e8:	20000168 	.word	0x20000168

080087ec <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	4603      	mov	r3, r0
 80087f4:	6039      	str	r1, [r7, #0]
 80087f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d105      	bne.n	800880a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	4907      	ldr	r1, [pc, #28]	; (8008820 <USBD_HS_ProductStrDescriptor+0x34>)
 8008802:	4808      	ldr	r0, [pc, #32]	; (8008824 <USBD_HS_ProductStrDescriptor+0x38>)
 8008804:	f7ff fd44 	bl	8008290 <USBD_GetString>
 8008808:	e004      	b.n	8008814 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	4904      	ldr	r1, [pc, #16]	; (8008820 <USBD_HS_ProductStrDescriptor+0x34>)
 800880e:	4805      	ldr	r0, [pc, #20]	; (8008824 <USBD_HS_ProductStrDescriptor+0x38>)
 8008810:	f7ff fd3e 	bl	8008290 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008814:	4b02      	ldr	r3, [pc, #8]	; (8008820 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8008816:	4618      	mov	r0, r3
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20000834 	.word	0x20000834
 8008824:	0800a430 	.word	0x0800a430

08008828 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	4603      	mov	r3, r0
 8008830:	6039      	str	r1, [r7, #0]
 8008832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	4904      	ldr	r1, [pc, #16]	; (8008848 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8008838:	4804      	ldr	r0, [pc, #16]	; (800884c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800883a:	f7ff fd29 	bl	8008290 <USBD_GetString>
  return USBD_StrDesc;
 800883e:	4b02      	ldr	r3, [pc, #8]	; (8008848 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	20000834 	.word	0x20000834
 800884c:	0800a440 	.word	0x0800a440

08008850 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	6039      	str	r1, [r7, #0]
 800885a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	221a      	movs	r2, #26
 8008860:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008862:	f000 f843 	bl	80088ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008866:	4b02      	ldr	r3, [pc, #8]	; (8008870 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8008868:	4618      	mov	r0, r3
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	2000016c 	.word	0x2000016c

08008874 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	4603      	mov	r3, r0
 800887c:	6039      	str	r1, [r7, #0]
 800887e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008880:	79fb      	ldrb	r3, [r7, #7]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d105      	bne.n	8008892 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008886:	683a      	ldr	r2, [r7, #0]
 8008888:	4907      	ldr	r1, [pc, #28]	; (80088a8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800888a:	4808      	ldr	r0, [pc, #32]	; (80088ac <USBD_HS_ConfigStrDescriptor+0x38>)
 800888c:	f7ff fd00 	bl	8008290 <USBD_GetString>
 8008890:	e004      	b.n	800889c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	4904      	ldr	r1, [pc, #16]	; (80088a8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8008896:	4805      	ldr	r0, [pc, #20]	; (80088ac <USBD_HS_ConfigStrDescriptor+0x38>)
 8008898:	f7ff fcfa 	bl	8008290 <USBD_GetString>
  }
  return USBD_StrDesc;
 800889c:	4b02      	ldr	r3, [pc, #8]	; (80088a8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	20000834 	.word	0x20000834
 80088ac:	0800a454 	.word	0x0800a454

080088b0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	4603      	mov	r3, r0
 80088b8:	6039      	str	r1, [r7, #0]
 80088ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088bc:	79fb      	ldrb	r3, [r7, #7]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d105      	bne.n	80088ce <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80088c2:	683a      	ldr	r2, [r7, #0]
 80088c4:	4907      	ldr	r1, [pc, #28]	; (80088e4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80088c6:	4808      	ldr	r0, [pc, #32]	; (80088e8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80088c8:	f7ff fce2 	bl	8008290 <USBD_GetString>
 80088cc:	e004      	b.n	80088d8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80088ce:	683a      	ldr	r2, [r7, #0]
 80088d0:	4904      	ldr	r1, [pc, #16]	; (80088e4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80088d2:	4805      	ldr	r0, [pc, #20]	; (80088e8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80088d4:	f7ff fcdc 	bl	8008290 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088d8:	4b02      	ldr	r3, [pc, #8]	; (80088e4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3708      	adds	r7, #8
 80088de:	46bd      	mov	sp, r7
 80088e0:	bd80      	pop	{r7, pc}
 80088e2:	bf00      	nop
 80088e4:	20000834 	.word	0x20000834
 80088e8:	0800a460 	.word	0x0800a460

080088ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088f2:	4b0f      	ldr	r3, [pc, #60]	; (8008930 <Get_SerialNum+0x44>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088f8:	4b0e      	ldr	r3, [pc, #56]	; (8008934 <Get_SerialNum+0x48>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088fe:	4b0e      	ldr	r3, [pc, #56]	; (8008938 <Get_SerialNum+0x4c>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4413      	add	r3, r2
 800890a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d009      	beq.n	8008926 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008912:	2208      	movs	r2, #8
 8008914:	4909      	ldr	r1, [pc, #36]	; (800893c <Get_SerialNum+0x50>)
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 f814 	bl	8008944 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800891c:	2204      	movs	r2, #4
 800891e:	4908      	ldr	r1, [pc, #32]	; (8008940 <Get_SerialNum+0x54>)
 8008920:	68b8      	ldr	r0, [r7, #8]
 8008922:	f000 f80f 	bl	8008944 <IntToUnicode>
  }
}
 8008926:	bf00      	nop
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	1fff7a10 	.word	0x1fff7a10
 8008934:	1fff7a14 	.word	0x1fff7a14
 8008938:	1fff7a18 	.word	0x1fff7a18
 800893c:	2000016e 	.word	0x2000016e
 8008940:	2000017e 	.word	0x2000017e

08008944 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008944:	b480      	push	{r7}
 8008946:	b087      	sub	sp, #28
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	4613      	mov	r3, r2
 8008950:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008952:	2300      	movs	r3, #0
 8008954:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008956:	2300      	movs	r3, #0
 8008958:	75fb      	strb	r3, [r7, #23]
 800895a:	e027      	b.n	80089ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	0f1b      	lsrs	r3, r3, #28
 8008960:	2b09      	cmp	r3, #9
 8008962:	d80b      	bhi.n	800897c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	0f1b      	lsrs	r3, r3, #28
 8008968:	b2da      	uxtb	r2, r3
 800896a:	7dfb      	ldrb	r3, [r7, #23]
 800896c:	005b      	lsls	r3, r3, #1
 800896e:	4619      	mov	r1, r3
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	440b      	add	r3, r1
 8008974:	3230      	adds	r2, #48	; 0x30
 8008976:	b2d2      	uxtb	r2, r2
 8008978:	701a      	strb	r2, [r3, #0]
 800897a:	e00a      	b.n	8008992 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	0f1b      	lsrs	r3, r3, #28
 8008980:	b2da      	uxtb	r2, r3
 8008982:	7dfb      	ldrb	r3, [r7, #23]
 8008984:	005b      	lsls	r3, r3, #1
 8008986:	4619      	mov	r1, r3
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	440b      	add	r3, r1
 800898c:	3237      	adds	r2, #55	; 0x37
 800898e:	b2d2      	uxtb	r2, r2
 8008990:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	011b      	lsls	r3, r3, #4
 8008996:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008998:	7dfb      	ldrb	r3, [r7, #23]
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	3301      	adds	r3, #1
 800899e:	68ba      	ldr	r2, [r7, #8]
 80089a0:	4413      	add	r3, r2
 80089a2:	2200      	movs	r2, #0
 80089a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80089a6:	7dfb      	ldrb	r3, [r7, #23]
 80089a8:	3301      	adds	r3, #1
 80089aa:	75fb      	strb	r3, [r7, #23]
 80089ac:	7dfa      	ldrb	r2, [r7, #23]
 80089ae:	79fb      	ldrb	r3, [r7, #7]
 80089b0:	429a      	cmp	r2, r3
 80089b2:	d3d3      	bcc.n	800895c <IntToUnicode+0x18>
  }
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop
 80089b8:	371c      	adds	r7, #28
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
	...

080089c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b08a      	sub	sp, #40	; 0x28
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089cc:	f107 0314 	add.w	r3, r7, #20
 80089d0:	2200      	movs	r2, #0
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	605a      	str	r2, [r3, #4]
 80089d6:	609a      	str	r2, [r3, #8]
 80089d8:	60da      	str	r2, [r3, #12]
 80089da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a1d      	ldr	r2, [pc, #116]	; (8008a58 <HAL_PCD_MspInit+0x94>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d134      	bne.n	8008a50 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80089e6:	2300      	movs	r3, #0
 80089e8:	613b      	str	r3, [r7, #16]
 80089ea:	4b1c      	ldr	r3, [pc, #112]	; (8008a5c <HAL_PCD_MspInit+0x98>)
 80089ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ee:	4a1b      	ldr	r2, [pc, #108]	; (8008a5c <HAL_PCD_MspInit+0x98>)
 80089f0:	f043 0302 	orr.w	r3, r3, #2
 80089f4:	6313      	str	r3, [r2, #48]	; 0x30
 80089f6:	4b19      	ldr	r3, [pc, #100]	; (8008a5c <HAL_PCD_MspInit+0x98>)
 80089f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089fa:	f003 0302 	and.w	r3, r3, #2
 80089fe:	613b      	str	r3, [r7, #16]
 8008a00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8008a02:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8008a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a08:	2302      	movs	r3, #2
 8008a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a10:	2303      	movs	r3, #3
 8008a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8008a14:	230c      	movs	r3, #12
 8008a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a18:	f107 0314 	add.w	r3, r7, #20
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	4810      	ldr	r0, [pc, #64]	; (8008a60 <HAL_PCD_MspInit+0x9c>)
 8008a20:	f7fa fbca 	bl	80031b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008a24:	2300      	movs	r3, #0
 8008a26:	60fb      	str	r3, [r7, #12]
 8008a28:	4b0c      	ldr	r3, [pc, #48]	; (8008a5c <HAL_PCD_MspInit+0x98>)
 8008a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2c:	4a0b      	ldr	r2, [pc, #44]	; (8008a5c <HAL_PCD_MspInit+0x98>)
 8008a2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a32:	6313      	str	r3, [r2, #48]	; 0x30
 8008a34:	4b09      	ldr	r3, [pc, #36]	; (8008a5c <HAL_PCD_MspInit+0x98>)
 8008a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a3c:	60fb      	str	r3, [r7, #12]
 8008a3e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008a40:	2200      	movs	r2, #0
 8008a42:	2100      	movs	r1, #0
 8008a44:	204d      	movs	r0, #77	; 0x4d
 8008a46:	f7fa fb80 	bl	800314a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008a4a:	204d      	movs	r0, #77	; 0x4d
 8008a4c:	f7fa fb99 	bl	8003182 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8008a50:	bf00      	nop
 8008a52:	3728      	adds	r7, #40	; 0x28
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	40040000 	.word	0x40040000
 8008a5c:	40023800 	.word	0x40023800
 8008a60:	40020400 	.word	0x40020400

08008a64 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008a78:	4619      	mov	r1, r3
 8008a7a:	4610      	mov	r0, r2
 8008a7c:	f7fe fc77 	bl	800736e <USBD_LL_SetupStage>
}
 8008a80:	bf00      	nop
 8008a82:	3708      	adds	r7, #8
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	460b      	mov	r3, r1
 8008a92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008a9a:	78fa      	ldrb	r2, [r7, #3]
 8008a9c:	6879      	ldr	r1, [r7, #4]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	1a9b      	subs	r3, r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	440b      	add	r3, r1
 8008aa8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	78fb      	ldrb	r3, [r7, #3]
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	f7fe fcb1 	bl	8007418 <USBD_LL_DataOutStage>
}
 8008ab6:	bf00      	nop
 8008ab8:	3708      	adds	r7, #8
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b082      	sub	sp, #8
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008ad0:	78fa      	ldrb	r2, [r7, #3]
 8008ad2:	6879      	ldr	r1, [r7, #4]
 8008ad4:	4613      	mov	r3, r2
 8008ad6:	00db      	lsls	r3, r3, #3
 8008ad8:	1a9b      	subs	r3, r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	440b      	add	r3, r1
 8008ade:	3348      	adds	r3, #72	; 0x48
 8008ae0:	681a      	ldr	r2, [r3, #0]
 8008ae2:	78fb      	ldrb	r3, [r7, #3]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	f7fe fcfa 	bl	80074de <USBD_LL_DataInStage>
}
 8008aea:	bf00      	nop
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b082      	sub	sp, #8
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b00:	4618      	mov	r0, r3
 8008b02:	f7fe fdfe 	bl	8007702 <USBD_LL_SOF>
}
 8008b06:	bf00      	nop
 8008b08:	3708      	adds	r7, #8
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b16:	2301      	movs	r3, #1
 8008b18:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d102      	bne.n	8008b28 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008b22:	2300      	movs	r3, #0
 8008b24:	73fb      	strb	r3, [r7, #15]
 8008b26:	e008      	b.n	8008b3a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	2b02      	cmp	r3, #2
 8008b2e:	d102      	bne.n	8008b36 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008b30:	2301      	movs	r3, #1
 8008b32:	73fb      	strb	r3, [r7, #15]
 8008b34:	e001      	b.n	8008b3a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008b36:	f7f9 f867 	bl	8001c08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b40:	7bfa      	ldrb	r2, [r7, #15]
 8008b42:	4611      	mov	r1, r2
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe fda1 	bl	800768c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fe fd5a 	bl	800760a <USBD_LL_Reset>
}
 8008b56:	bf00      	nop
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe fd9c 	bl	80076ac <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	6812      	ldr	r2, [r2, #0]
 8008b82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b86:	f043 0301 	orr.w	r3, r3, #1
 8008b8a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d005      	beq.n	8008ba0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b94:	4b04      	ldr	r3, [pc, #16]	; (8008ba8 <HAL_PCD_SuspendCallback+0x48>)
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	4a03      	ldr	r2, [pc, #12]	; (8008ba8 <HAL_PCD_SuspendCallback+0x48>)
 8008b9a:	f043 0306 	orr.w	r3, r3, #6
 8008b9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	e000ed00 	.word	0xe000ed00

08008bac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7fe fd8b 	bl	80076d6 <USBD_LL_Resume>
}
 8008bc0:	bf00      	nop
 8008bc2:	3708      	adds	r7, #8
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008bda:	78fa      	ldrb	r2, [r7, #3]
 8008bdc:	4611      	mov	r1, r2
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fe fdb6 	bl	8007750 <USBD_LL_IsoOUTIncomplete>
}
 8008be4:	bf00      	nop
 8008be6:	3708      	adds	r7, #8
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}

08008bec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	460b      	mov	r3, r1
 8008bf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008bfe:	78fa      	ldrb	r2, [r7, #3]
 8008c00:	4611      	mov	r1, r2
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fe fd97 	bl	8007736 <USBD_LL_IsoINIncomplete>
}
 8008c08:	bf00      	nop
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7fe fda3 	bl	800776a <USBD_LL_DevConnected>
}
 8008c24:	bf00      	nop
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fe fda0 	bl	8007780 <USBD_LL_DevDisconnected>
}
 8008c40:	bf00      	nop
 8008c42:	3708      	adds	r7, #8
 8008c44:	46bd      	mov	sp, r7
 8008c46:	bd80      	pop	{r7, pc}

08008c48 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b082      	sub	sp, #8
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d140      	bne.n	8008cda <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8008c58:	4a22      	ldr	r2, [pc, #136]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	4a20      	ldr	r2, [pc, #128]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008c64:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008c68:	4b1e      	ldr	r3, [pc, #120]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008c6a:	4a1f      	ldr	r2, [pc, #124]	; (8008ce8 <USBD_LL_Init+0xa0>)
 8008c6c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8008c6e:	4b1d      	ldr	r3, [pc, #116]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008c70:	2206      	movs	r2, #6
 8008c72:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8008c74:	4b1b      	ldr	r3, [pc, #108]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008c76:	2202      	movs	r2, #2
 8008c78:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8008c7a:	4b1a      	ldr	r3, [pc, #104]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008c80:	4b18      	ldr	r3, [pc, #96]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008c82:	2202      	movs	r2, #2
 8008c84:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8008c86:	4b17      	ldr	r3, [pc, #92]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008c8c:	4b15      	ldr	r3, [pc, #84]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008c8e:	2200      	movs	r2, #0
 8008c90:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8008c92:	4b14      	ldr	r3, [pc, #80]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008c94:	2200      	movs	r2, #0
 8008c96:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8008c98:	4b12      	ldr	r3, [pc, #72]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8008c9e:	4b11      	ldr	r3, [pc, #68]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008ca4:	4b0f      	ldr	r3, [pc, #60]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8008caa:	480e      	ldr	r0, [pc, #56]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008cac:	f7fa fc84 	bl	80035b8 <HAL_PCD_Init>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d001      	beq.n	8008cba <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8008cb6:	f7f8 ffa7 	bl	8001c08 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8008cba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008cbe:	4809      	ldr	r0, [pc, #36]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008cc0:	f7fb fde1 	bl	8004886 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8008cc4:	2280      	movs	r2, #128	; 0x80
 8008cc6:	2100      	movs	r1, #0
 8008cc8:	4806      	ldr	r0, [pc, #24]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008cca:	f7fb fd95 	bl	80047f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8008cce:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8008cd2:	2101      	movs	r1, #1
 8008cd4:	4803      	ldr	r0, [pc, #12]	; (8008ce4 <USBD_LL_Init+0x9c>)
 8008cd6:	f7fb fd8f 	bl	80047f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	20000a34 	.word	0x20000a34
 8008ce8:	40040000 	.word	0x40040000

08008cec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b084      	sub	sp, #16
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d02:	4618      	mov	r0, r3
 8008d04:	f7fa fd75 	bl	80037f2 <HAL_PCD_Start>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d0c:	7bfb      	ldrb	r3, [r7, #15]
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f000 f92a 	bl	8008f68 <USBD_Get_USB_Status>
 8008d14:	4603      	mov	r3, r0
 8008d16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	4608      	mov	r0, r1
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	461a      	mov	r2, r3
 8008d30:	4603      	mov	r3, r0
 8008d32:	70fb      	strb	r3, [r7, #3]
 8008d34:	460b      	mov	r3, r1
 8008d36:	70bb      	strb	r3, [r7, #2]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d40:	2300      	movs	r3, #0
 8008d42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d4a:	78bb      	ldrb	r3, [r7, #2]
 8008d4c:	883a      	ldrh	r2, [r7, #0]
 8008d4e:	78f9      	ldrb	r1, [r7, #3]
 8008d50:	f7fb f959 	bl	8004006 <HAL_PCD_EP_Open>
 8008d54:	4603      	mov	r3, r0
 8008d56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	f000 f904 	bl	8008f68 <USBD_Get_USB_Status>
 8008d60:	4603      	mov	r3, r0
 8008d62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3710      	adds	r7, #16
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}

08008d6e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d6e:	b580      	push	{r7, lr}
 8008d70:	b084      	sub	sp, #16
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6078      	str	r0, [r7, #4]
 8008d76:	460b      	mov	r3, r1
 8008d78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d88:	78fa      	ldrb	r2, [r7, #3]
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7fb f9a2 	bl	80040d6 <HAL_PCD_EP_Close>
 8008d92:	4603      	mov	r3, r0
 8008d94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d96:	7bfb      	ldrb	r3, [r7, #15]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 f8e5 	bl	8008f68 <USBD_Get_USB_Status>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	460b      	mov	r3, r1
 8008db6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008dc6:	78fa      	ldrb	r2, [r7, #3]
 8008dc8:	4611      	mov	r1, r2
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fb fa7a 	bl	80042c4 <HAL_PCD_EP_SetStall>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f000 f8c6 	bl	8008f68 <USBD_Get_USB_Status>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	460b      	mov	r3, r1
 8008df4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e04:	78fa      	ldrb	r2, [r7, #3]
 8008e06:	4611      	mov	r1, r2
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7fb fabf 	bl	800438c <HAL_PCD_EP_ClrStall>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e12:	7bfb      	ldrb	r3, [r7, #15]
 8008e14:	4618      	mov	r0, r3
 8008e16:	f000 f8a7 	bl	8008f68 <USBD_Get_USB_Status>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	da0b      	bge.n	8008e5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e44:	78fb      	ldrb	r3, [r7, #3]
 8008e46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e4a:	68f9      	ldr	r1, [r7, #12]
 8008e4c:	4613      	mov	r3, r2
 8008e4e:	00db      	lsls	r3, r3, #3
 8008e50:	1a9b      	subs	r3, r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	440b      	add	r3, r1
 8008e56:	333e      	adds	r3, #62	; 0x3e
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	e00b      	b.n	8008e74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e5c:	78fb      	ldrb	r3, [r7, #3]
 8008e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e62:	68f9      	ldr	r1, [r7, #12]
 8008e64:	4613      	mov	r3, r2
 8008e66:	00db      	lsls	r3, r3, #3
 8008e68:	1a9b      	subs	r3, r3, r2
 8008e6a:	009b      	lsls	r3, r3, #2
 8008e6c:	440b      	add	r3, r1
 8008e6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008e72:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3714      	adds	r7, #20
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7e:	4770      	bx	lr

08008e80 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e9a:	78fa      	ldrb	r2, [r7, #3]
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f7fb f88c 	bl	8003fbc <HAL_PCD_SetAddress>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ea8:	7bfb      	ldrb	r3, [r7, #15]
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f000 f85c 	bl	8008f68 <USBD_Get_USB_Status>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3710      	adds	r7, #16
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ebe:	b580      	push	{r7, lr}
 8008ec0:	b086      	sub	sp, #24
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	60f8      	str	r0, [r7, #12]
 8008ec6:	607a      	str	r2, [r7, #4]
 8008ec8:	603b      	str	r3, [r7, #0]
 8008eca:	460b      	mov	r3, r1
 8008ecc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008edc:	7af9      	ldrb	r1, [r7, #11]
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	f7fb f9a5 	bl	8004230 <HAL_PCD_EP_Transmit>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008eea:	7dfb      	ldrb	r3, [r7, #23]
 8008eec:	4618      	mov	r0, r3
 8008eee:	f000 f83b 	bl	8008f68 <USBD_Get_USB_Status>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008ef6:	7dbb      	ldrb	r3, [r7, #22]
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3718      	adds	r7, #24
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	607a      	str	r2, [r7, #4]
 8008f0a:	603b      	str	r3, [r7, #0]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f14:	2300      	movs	r3, #0
 8008f16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f1e:	7af9      	ldrb	r1, [r7, #11]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	f7fb f921 	bl	800416a <HAL_PCD_EP_Receive>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f2c:	7dfb      	ldrb	r3, [r7, #23]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 f81a 	bl	8008f68 <USBD_Get_USB_Status>
 8008f34:	4603      	mov	r3, r0
 8008f36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f38:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3718      	adds	r7, #24
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b082      	sub	sp, #8
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
 8008f4a:	460b      	mov	r3, r1
 8008f4c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f54:	78fa      	ldrb	r2, [r7, #3]
 8008f56:	4611      	mov	r1, r2
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7fb f951 	bl	8004200 <HAL_PCD_EP_GetRxCount>
 8008f5e:	4603      	mov	r3, r0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3708      	adds	r7, #8
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	4603      	mov	r3, r0
 8008f70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f72:	2300      	movs	r3, #0
 8008f74:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f76:	79fb      	ldrb	r3, [r7, #7]
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d817      	bhi.n	8008fac <USBD_Get_USB_Status+0x44>
 8008f7c:	a201      	add	r2, pc, #4	; (adr r2, 8008f84 <USBD_Get_USB_Status+0x1c>)
 8008f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f82:	bf00      	nop
 8008f84:	08008f95 	.word	0x08008f95
 8008f88:	08008f9b 	.word	0x08008f9b
 8008f8c:	08008fa1 	.word	0x08008fa1
 8008f90:	08008fa7 	.word	0x08008fa7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
    break;
 8008f98:	e00b      	b.n	8008fb2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f9e:	e008      	b.n	8008fb2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fa4:	e005      	b.n	8008fb2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fa6:	2303      	movs	r3, #3
 8008fa8:	73fb      	strb	r3, [r7, #15]
    break;
 8008faa:	e002      	b.n	8008fb2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008fac:	2303      	movs	r3, #3
 8008fae:	73fb      	strb	r3, [r7, #15]
    break;
 8008fb0:	bf00      	nop
  }
  return usb_status;
 8008fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <__errno>:
 8008fc0:	4b01      	ldr	r3, [pc, #4]	; (8008fc8 <__errno+0x8>)
 8008fc2:	6818      	ldr	r0, [r3, #0]
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	20000188 	.word	0x20000188

08008fcc <__libc_init_array>:
 8008fcc:	b570      	push	{r4, r5, r6, lr}
 8008fce:	4d0d      	ldr	r5, [pc, #52]	; (8009004 <__libc_init_array+0x38>)
 8008fd0:	4c0d      	ldr	r4, [pc, #52]	; (8009008 <__libc_init_array+0x3c>)
 8008fd2:	1b64      	subs	r4, r4, r5
 8008fd4:	10a4      	asrs	r4, r4, #2
 8008fd6:	2600      	movs	r6, #0
 8008fd8:	42a6      	cmp	r6, r4
 8008fda:	d109      	bne.n	8008ff0 <__libc_init_array+0x24>
 8008fdc:	4d0b      	ldr	r5, [pc, #44]	; (800900c <__libc_init_array+0x40>)
 8008fde:	4c0c      	ldr	r4, [pc, #48]	; (8009010 <__libc_init_array+0x44>)
 8008fe0:	f001 f9cc 	bl	800a37c <_init>
 8008fe4:	1b64      	subs	r4, r4, r5
 8008fe6:	10a4      	asrs	r4, r4, #2
 8008fe8:	2600      	movs	r6, #0
 8008fea:	42a6      	cmp	r6, r4
 8008fec:	d105      	bne.n	8008ffa <__libc_init_array+0x2e>
 8008fee:	bd70      	pop	{r4, r5, r6, pc}
 8008ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ff4:	4798      	blx	r3
 8008ff6:	3601      	adds	r6, #1
 8008ff8:	e7ee      	b.n	8008fd8 <__libc_init_array+0xc>
 8008ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ffe:	4798      	blx	r3
 8009000:	3601      	adds	r6, #1
 8009002:	e7f2      	b.n	8008fea <__libc_init_array+0x1e>
 8009004:	0800a520 	.word	0x0800a520
 8009008:	0800a520 	.word	0x0800a520
 800900c:	0800a520 	.word	0x0800a520
 8009010:	0800a524 	.word	0x0800a524

08009014 <malloc>:
 8009014:	4b02      	ldr	r3, [pc, #8]	; (8009020 <malloc+0xc>)
 8009016:	4601      	mov	r1, r0
 8009018:	6818      	ldr	r0, [r3, #0]
 800901a:	f000 b871 	b.w	8009100 <_malloc_r>
 800901e:	bf00      	nop
 8009020:	20000188 	.word	0x20000188

08009024 <free>:
 8009024:	4b02      	ldr	r3, [pc, #8]	; (8009030 <free+0xc>)
 8009026:	4601      	mov	r1, r0
 8009028:	6818      	ldr	r0, [r3, #0]
 800902a:	f000 b819 	b.w	8009060 <_free_r>
 800902e:	bf00      	nop
 8009030:	20000188 	.word	0x20000188

08009034 <memcpy>:
 8009034:	440a      	add	r2, r1
 8009036:	4291      	cmp	r1, r2
 8009038:	f100 33ff 	add.w	r3, r0, #4294967295
 800903c:	d100      	bne.n	8009040 <memcpy+0xc>
 800903e:	4770      	bx	lr
 8009040:	b510      	push	{r4, lr}
 8009042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800904a:	4291      	cmp	r1, r2
 800904c:	d1f9      	bne.n	8009042 <memcpy+0xe>
 800904e:	bd10      	pop	{r4, pc}

08009050 <memset>:
 8009050:	4402      	add	r2, r0
 8009052:	4603      	mov	r3, r0
 8009054:	4293      	cmp	r3, r2
 8009056:	d100      	bne.n	800905a <memset+0xa>
 8009058:	4770      	bx	lr
 800905a:	f803 1b01 	strb.w	r1, [r3], #1
 800905e:	e7f9      	b.n	8009054 <memset+0x4>

08009060 <_free_r>:
 8009060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009062:	2900      	cmp	r1, #0
 8009064:	d048      	beq.n	80090f8 <_free_r+0x98>
 8009066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800906a:	9001      	str	r0, [sp, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	f1a1 0404 	sub.w	r4, r1, #4
 8009072:	bfb8      	it	lt
 8009074:	18e4      	addlt	r4, r4, r3
 8009076:	f000 fa09 	bl	800948c <__malloc_lock>
 800907a:	4a20      	ldr	r2, [pc, #128]	; (80090fc <_free_r+0x9c>)
 800907c:	9801      	ldr	r0, [sp, #4]
 800907e:	6813      	ldr	r3, [r2, #0]
 8009080:	4615      	mov	r5, r2
 8009082:	b933      	cbnz	r3, 8009092 <_free_r+0x32>
 8009084:	6063      	str	r3, [r4, #4]
 8009086:	6014      	str	r4, [r2, #0]
 8009088:	b003      	add	sp, #12
 800908a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800908e:	f000 ba03 	b.w	8009498 <__malloc_unlock>
 8009092:	42a3      	cmp	r3, r4
 8009094:	d90b      	bls.n	80090ae <_free_r+0x4e>
 8009096:	6821      	ldr	r1, [r4, #0]
 8009098:	1862      	adds	r2, r4, r1
 800909a:	4293      	cmp	r3, r2
 800909c:	bf04      	itt	eq
 800909e:	681a      	ldreq	r2, [r3, #0]
 80090a0:	685b      	ldreq	r3, [r3, #4]
 80090a2:	6063      	str	r3, [r4, #4]
 80090a4:	bf04      	itt	eq
 80090a6:	1852      	addeq	r2, r2, r1
 80090a8:	6022      	streq	r2, [r4, #0]
 80090aa:	602c      	str	r4, [r5, #0]
 80090ac:	e7ec      	b.n	8009088 <_free_r+0x28>
 80090ae:	461a      	mov	r2, r3
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	b10b      	cbz	r3, 80090b8 <_free_r+0x58>
 80090b4:	42a3      	cmp	r3, r4
 80090b6:	d9fa      	bls.n	80090ae <_free_r+0x4e>
 80090b8:	6811      	ldr	r1, [r2, #0]
 80090ba:	1855      	adds	r5, r2, r1
 80090bc:	42a5      	cmp	r5, r4
 80090be:	d10b      	bne.n	80090d8 <_free_r+0x78>
 80090c0:	6824      	ldr	r4, [r4, #0]
 80090c2:	4421      	add	r1, r4
 80090c4:	1854      	adds	r4, r2, r1
 80090c6:	42a3      	cmp	r3, r4
 80090c8:	6011      	str	r1, [r2, #0]
 80090ca:	d1dd      	bne.n	8009088 <_free_r+0x28>
 80090cc:	681c      	ldr	r4, [r3, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	6053      	str	r3, [r2, #4]
 80090d2:	4421      	add	r1, r4
 80090d4:	6011      	str	r1, [r2, #0]
 80090d6:	e7d7      	b.n	8009088 <_free_r+0x28>
 80090d8:	d902      	bls.n	80090e0 <_free_r+0x80>
 80090da:	230c      	movs	r3, #12
 80090dc:	6003      	str	r3, [r0, #0]
 80090de:	e7d3      	b.n	8009088 <_free_r+0x28>
 80090e0:	6825      	ldr	r5, [r4, #0]
 80090e2:	1961      	adds	r1, r4, r5
 80090e4:	428b      	cmp	r3, r1
 80090e6:	bf04      	itt	eq
 80090e8:	6819      	ldreq	r1, [r3, #0]
 80090ea:	685b      	ldreq	r3, [r3, #4]
 80090ec:	6063      	str	r3, [r4, #4]
 80090ee:	bf04      	itt	eq
 80090f0:	1949      	addeq	r1, r1, r5
 80090f2:	6021      	streq	r1, [r4, #0]
 80090f4:	6054      	str	r4, [r2, #4]
 80090f6:	e7c7      	b.n	8009088 <_free_r+0x28>
 80090f8:	b003      	add	sp, #12
 80090fa:	bd30      	pop	{r4, r5, pc}
 80090fc:	20000214 	.word	0x20000214

08009100 <_malloc_r>:
 8009100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009102:	1ccd      	adds	r5, r1, #3
 8009104:	f025 0503 	bic.w	r5, r5, #3
 8009108:	3508      	adds	r5, #8
 800910a:	2d0c      	cmp	r5, #12
 800910c:	bf38      	it	cc
 800910e:	250c      	movcc	r5, #12
 8009110:	2d00      	cmp	r5, #0
 8009112:	4606      	mov	r6, r0
 8009114:	db01      	blt.n	800911a <_malloc_r+0x1a>
 8009116:	42a9      	cmp	r1, r5
 8009118:	d903      	bls.n	8009122 <_malloc_r+0x22>
 800911a:	230c      	movs	r3, #12
 800911c:	6033      	str	r3, [r6, #0]
 800911e:	2000      	movs	r0, #0
 8009120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009122:	f000 f9b3 	bl	800948c <__malloc_lock>
 8009126:	4921      	ldr	r1, [pc, #132]	; (80091ac <_malloc_r+0xac>)
 8009128:	680a      	ldr	r2, [r1, #0]
 800912a:	4614      	mov	r4, r2
 800912c:	b99c      	cbnz	r4, 8009156 <_malloc_r+0x56>
 800912e:	4f20      	ldr	r7, [pc, #128]	; (80091b0 <_malloc_r+0xb0>)
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	b923      	cbnz	r3, 800913e <_malloc_r+0x3e>
 8009134:	4621      	mov	r1, r4
 8009136:	4630      	mov	r0, r6
 8009138:	f000 f86a 	bl	8009210 <_sbrk_r>
 800913c:	6038      	str	r0, [r7, #0]
 800913e:	4629      	mov	r1, r5
 8009140:	4630      	mov	r0, r6
 8009142:	f000 f865 	bl	8009210 <_sbrk_r>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	d123      	bne.n	8009192 <_malloc_r+0x92>
 800914a:	230c      	movs	r3, #12
 800914c:	6033      	str	r3, [r6, #0]
 800914e:	4630      	mov	r0, r6
 8009150:	f000 f9a2 	bl	8009498 <__malloc_unlock>
 8009154:	e7e3      	b.n	800911e <_malloc_r+0x1e>
 8009156:	6823      	ldr	r3, [r4, #0]
 8009158:	1b5b      	subs	r3, r3, r5
 800915a:	d417      	bmi.n	800918c <_malloc_r+0x8c>
 800915c:	2b0b      	cmp	r3, #11
 800915e:	d903      	bls.n	8009168 <_malloc_r+0x68>
 8009160:	6023      	str	r3, [r4, #0]
 8009162:	441c      	add	r4, r3
 8009164:	6025      	str	r5, [r4, #0]
 8009166:	e004      	b.n	8009172 <_malloc_r+0x72>
 8009168:	6863      	ldr	r3, [r4, #4]
 800916a:	42a2      	cmp	r2, r4
 800916c:	bf0c      	ite	eq
 800916e:	600b      	streq	r3, [r1, #0]
 8009170:	6053      	strne	r3, [r2, #4]
 8009172:	4630      	mov	r0, r6
 8009174:	f000 f990 	bl	8009498 <__malloc_unlock>
 8009178:	f104 000b 	add.w	r0, r4, #11
 800917c:	1d23      	adds	r3, r4, #4
 800917e:	f020 0007 	bic.w	r0, r0, #7
 8009182:	1ac2      	subs	r2, r0, r3
 8009184:	d0cc      	beq.n	8009120 <_malloc_r+0x20>
 8009186:	1a1b      	subs	r3, r3, r0
 8009188:	50a3      	str	r3, [r4, r2]
 800918a:	e7c9      	b.n	8009120 <_malloc_r+0x20>
 800918c:	4622      	mov	r2, r4
 800918e:	6864      	ldr	r4, [r4, #4]
 8009190:	e7cc      	b.n	800912c <_malloc_r+0x2c>
 8009192:	1cc4      	adds	r4, r0, #3
 8009194:	f024 0403 	bic.w	r4, r4, #3
 8009198:	42a0      	cmp	r0, r4
 800919a:	d0e3      	beq.n	8009164 <_malloc_r+0x64>
 800919c:	1a21      	subs	r1, r4, r0
 800919e:	4630      	mov	r0, r6
 80091a0:	f000 f836 	bl	8009210 <_sbrk_r>
 80091a4:	3001      	adds	r0, #1
 80091a6:	d1dd      	bne.n	8009164 <_malloc_r+0x64>
 80091a8:	e7cf      	b.n	800914a <_malloc_r+0x4a>
 80091aa:	bf00      	nop
 80091ac:	20000214 	.word	0x20000214
 80091b0:	20000218 	.word	0x20000218

080091b4 <iprintf>:
 80091b4:	b40f      	push	{r0, r1, r2, r3}
 80091b6:	4b0a      	ldr	r3, [pc, #40]	; (80091e0 <iprintf+0x2c>)
 80091b8:	b513      	push	{r0, r1, r4, lr}
 80091ba:	681c      	ldr	r4, [r3, #0]
 80091bc:	b124      	cbz	r4, 80091c8 <iprintf+0x14>
 80091be:	69a3      	ldr	r3, [r4, #24]
 80091c0:	b913      	cbnz	r3, 80091c8 <iprintf+0x14>
 80091c2:	4620      	mov	r0, r4
 80091c4:	f000 f8c2 	bl	800934c <__sinit>
 80091c8:	ab05      	add	r3, sp, #20
 80091ca:	9a04      	ldr	r2, [sp, #16]
 80091cc:	68a1      	ldr	r1, [r4, #8]
 80091ce:	9301      	str	r3, [sp, #4]
 80091d0:	4620      	mov	r0, r4
 80091d2:	f000 faed 	bl	80097b0 <_vfiprintf_r>
 80091d6:	b002      	add	sp, #8
 80091d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091dc:	b004      	add	sp, #16
 80091de:	4770      	bx	lr
 80091e0:	20000188 	.word	0x20000188

080091e4 <putchar>:
 80091e4:	4b09      	ldr	r3, [pc, #36]	; (800920c <putchar+0x28>)
 80091e6:	b513      	push	{r0, r1, r4, lr}
 80091e8:	681c      	ldr	r4, [r3, #0]
 80091ea:	4601      	mov	r1, r0
 80091ec:	b134      	cbz	r4, 80091fc <putchar+0x18>
 80091ee:	69a3      	ldr	r3, [r4, #24]
 80091f0:	b923      	cbnz	r3, 80091fc <putchar+0x18>
 80091f2:	9001      	str	r0, [sp, #4]
 80091f4:	4620      	mov	r0, r4
 80091f6:	f000 f8a9 	bl	800934c <__sinit>
 80091fa:	9901      	ldr	r1, [sp, #4]
 80091fc:	68a2      	ldr	r2, [r4, #8]
 80091fe:	4620      	mov	r0, r4
 8009200:	b002      	add	sp, #8
 8009202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009206:	f000 bd97 	b.w	8009d38 <_putc_r>
 800920a:	bf00      	nop
 800920c:	20000188 	.word	0x20000188

08009210 <_sbrk_r>:
 8009210:	b538      	push	{r3, r4, r5, lr}
 8009212:	4d06      	ldr	r5, [pc, #24]	; (800922c <_sbrk_r+0x1c>)
 8009214:	2300      	movs	r3, #0
 8009216:	4604      	mov	r4, r0
 8009218:	4608      	mov	r0, r1
 800921a:	602b      	str	r3, [r5, #0]
 800921c:	f7f8 fec0 	bl	8001fa0 <_sbrk>
 8009220:	1c43      	adds	r3, r0, #1
 8009222:	d102      	bne.n	800922a <_sbrk_r+0x1a>
 8009224:	682b      	ldr	r3, [r5, #0]
 8009226:	b103      	cbz	r3, 800922a <_sbrk_r+0x1a>
 8009228:	6023      	str	r3, [r4, #0]
 800922a:	bd38      	pop	{r3, r4, r5, pc}
 800922c:	20000e48 	.word	0x20000e48

08009230 <siprintf>:
 8009230:	b40e      	push	{r1, r2, r3}
 8009232:	b500      	push	{lr}
 8009234:	b09c      	sub	sp, #112	; 0x70
 8009236:	ab1d      	add	r3, sp, #116	; 0x74
 8009238:	9002      	str	r0, [sp, #8]
 800923a:	9006      	str	r0, [sp, #24]
 800923c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009240:	4809      	ldr	r0, [pc, #36]	; (8009268 <siprintf+0x38>)
 8009242:	9107      	str	r1, [sp, #28]
 8009244:	9104      	str	r1, [sp, #16]
 8009246:	4909      	ldr	r1, [pc, #36]	; (800926c <siprintf+0x3c>)
 8009248:	f853 2b04 	ldr.w	r2, [r3], #4
 800924c:	9105      	str	r1, [sp, #20]
 800924e:	6800      	ldr	r0, [r0, #0]
 8009250:	9301      	str	r3, [sp, #4]
 8009252:	a902      	add	r1, sp, #8
 8009254:	f000 f982 	bl	800955c <_svfiprintf_r>
 8009258:	9b02      	ldr	r3, [sp, #8]
 800925a:	2200      	movs	r2, #0
 800925c:	701a      	strb	r2, [r3, #0]
 800925e:	b01c      	add	sp, #112	; 0x70
 8009260:	f85d eb04 	ldr.w	lr, [sp], #4
 8009264:	b003      	add	sp, #12
 8009266:	4770      	bx	lr
 8009268:	20000188 	.word	0x20000188
 800926c:	ffff0208 	.word	0xffff0208

08009270 <strlcpy>:
 8009270:	b510      	push	{r4, lr}
 8009272:	460b      	mov	r3, r1
 8009274:	b162      	cbz	r2, 8009290 <strlcpy+0x20>
 8009276:	3a01      	subs	r2, #1
 8009278:	d008      	beq.n	800928c <strlcpy+0x1c>
 800927a:	f813 4b01 	ldrb.w	r4, [r3], #1
 800927e:	f800 4b01 	strb.w	r4, [r0], #1
 8009282:	2c00      	cmp	r4, #0
 8009284:	d1f7      	bne.n	8009276 <strlcpy+0x6>
 8009286:	1a58      	subs	r0, r3, r1
 8009288:	3801      	subs	r0, #1
 800928a:	bd10      	pop	{r4, pc}
 800928c:	2200      	movs	r2, #0
 800928e:	7002      	strb	r2, [r0, #0]
 8009290:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009294:	2a00      	cmp	r2, #0
 8009296:	d1fb      	bne.n	8009290 <strlcpy+0x20>
 8009298:	e7f5      	b.n	8009286 <strlcpy+0x16>
	...

0800929c <std>:
 800929c:	2300      	movs	r3, #0
 800929e:	b510      	push	{r4, lr}
 80092a0:	4604      	mov	r4, r0
 80092a2:	e9c0 3300 	strd	r3, r3, [r0]
 80092a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092aa:	6083      	str	r3, [r0, #8]
 80092ac:	8181      	strh	r1, [r0, #12]
 80092ae:	6643      	str	r3, [r0, #100]	; 0x64
 80092b0:	81c2      	strh	r2, [r0, #14]
 80092b2:	6183      	str	r3, [r0, #24]
 80092b4:	4619      	mov	r1, r3
 80092b6:	2208      	movs	r2, #8
 80092b8:	305c      	adds	r0, #92	; 0x5c
 80092ba:	f7ff fec9 	bl	8009050 <memset>
 80092be:	4b05      	ldr	r3, [pc, #20]	; (80092d4 <std+0x38>)
 80092c0:	6263      	str	r3, [r4, #36]	; 0x24
 80092c2:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <std+0x3c>)
 80092c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80092c6:	4b05      	ldr	r3, [pc, #20]	; (80092dc <std+0x40>)
 80092c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092ca:	4b05      	ldr	r3, [pc, #20]	; (80092e0 <std+0x44>)
 80092cc:	6224      	str	r4, [r4, #32]
 80092ce:	6323      	str	r3, [r4, #48]	; 0x30
 80092d0:	bd10      	pop	{r4, pc}
 80092d2:	bf00      	nop
 80092d4:	08009dc9 	.word	0x08009dc9
 80092d8:	08009deb 	.word	0x08009deb
 80092dc:	08009e23 	.word	0x08009e23
 80092e0:	08009e47 	.word	0x08009e47

080092e4 <_cleanup_r>:
 80092e4:	4901      	ldr	r1, [pc, #4]	; (80092ec <_cleanup_r+0x8>)
 80092e6:	f000 b8af 	b.w	8009448 <_fwalk_reent>
 80092ea:	bf00      	nop
 80092ec:	0800a121 	.word	0x0800a121

080092f0 <__sfmoreglue>:
 80092f0:	b570      	push	{r4, r5, r6, lr}
 80092f2:	1e4a      	subs	r2, r1, #1
 80092f4:	2568      	movs	r5, #104	; 0x68
 80092f6:	4355      	muls	r5, r2
 80092f8:	460e      	mov	r6, r1
 80092fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80092fe:	f7ff feff 	bl	8009100 <_malloc_r>
 8009302:	4604      	mov	r4, r0
 8009304:	b140      	cbz	r0, 8009318 <__sfmoreglue+0x28>
 8009306:	2100      	movs	r1, #0
 8009308:	e9c0 1600 	strd	r1, r6, [r0]
 800930c:	300c      	adds	r0, #12
 800930e:	60a0      	str	r0, [r4, #8]
 8009310:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009314:	f7ff fe9c 	bl	8009050 <memset>
 8009318:	4620      	mov	r0, r4
 800931a:	bd70      	pop	{r4, r5, r6, pc}

0800931c <__sfp_lock_acquire>:
 800931c:	4801      	ldr	r0, [pc, #4]	; (8009324 <__sfp_lock_acquire+0x8>)
 800931e:	f000 b8b3 	b.w	8009488 <__retarget_lock_acquire_recursive>
 8009322:	bf00      	nop
 8009324:	20000e44 	.word	0x20000e44

08009328 <__sfp_lock_release>:
 8009328:	4801      	ldr	r0, [pc, #4]	; (8009330 <__sfp_lock_release+0x8>)
 800932a:	f000 b8ae 	b.w	800948a <__retarget_lock_release_recursive>
 800932e:	bf00      	nop
 8009330:	20000e44 	.word	0x20000e44

08009334 <__sinit_lock_acquire>:
 8009334:	4801      	ldr	r0, [pc, #4]	; (800933c <__sinit_lock_acquire+0x8>)
 8009336:	f000 b8a7 	b.w	8009488 <__retarget_lock_acquire_recursive>
 800933a:	bf00      	nop
 800933c:	20000e3f 	.word	0x20000e3f

08009340 <__sinit_lock_release>:
 8009340:	4801      	ldr	r0, [pc, #4]	; (8009348 <__sinit_lock_release+0x8>)
 8009342:	f000 b8a2 	b.w	800948a <__retarget_lock_release_recursive>
 8009346:	bf00      	nop
 8009348:	20000e3f 	.word	0x20000e3f

0800934c <__sinit>:
 800934c:	b510      	push	{r4, lr}
 800934e:	4604      	mov	r4, r0
 8009350:	f7ff fff0 	bl	8009334 <__sinit_lock_acquire>
 8009354:	69a3      	ldr	r3, [r4, #24]
 8009356:	b11b      	cbz	r3, 8009360 <__sinit+0x14>
 8009358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800935c:	f7ff bff0 	b.w	8009340 <__sinit_lock_release>
 8009360:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009364:	6523      	str	r3, [r4, #80]	; 0x50
 8009366:	4b13      	ldr	r3, [pc, #76]	; (80093b4 <__sinit+0x68>)
 8009368:	4a13      	ldr	r2, [pc, #76]	; (80093b8 <__sinit+0x6c>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	62a2      	str	r2, [r4, #40]	; 0x28
 800936e:	42a3      	cmp	r3, r4
 8009370:	bf04      	itt	eq
 8009372:	2301      	moveq	r3, #1
 8009374:	61a3      	streq	r3, [r4, #24]
 8009376:	4620      	mov	r0, r4
 8009378:	f000 f820 	bl	80093bc <__sfp>
 800937c:	6060      	str	r0, [r4, #4]
 800937e:	4620      	mov	r0, r4
 8009380:	f000 f81c 	bl	80093bc <__sfp>
 8009384:	60a0      	str	r0, [r4, #8]
 8009386:	4620      	mov	r0, r4
 8009388:	f000 f818 	bl	80093bc <__sfp>
 800938c:	2200      	movs	r2, #0
 800938e:	60e0      	str	r0, [r4, #12]
 8009390:	2104      	movs	r1, #4
 8009392:	6860      	ldr	r0, [r4, #4]
 8009394:	f7ff ff82 	bl	800929c <std>
 8009398:	68a0      	ldr	r0, [r4, #8]
 800939a:	2201      	movs	r2, #1
 800939c:	2109      	movs	r1, #9
 800939e:	f7ff ff7d 	bl	800929c <std>
 80093a2:	68e0      	ldr	r0, [r4, #12]
 80093a4:	2202      	movs	r2, #2
 80093a6:	2112      	movs	r1, #18
 80093a8:	f7ff ff78 	bl	800929c <std>
 80093ac:	2301      	movs	r3, #1
 80093ae:	61a3      	str	r3, [r4, #24]
 80093b0:	e7d2      	b.n	8009358 <__sinit+0xc>
 80093b2:	bf00      	nop
 80093b4:	0800a480 	.word	0x0800a480
 80093b8:	080092e5 	.word	0x080092e5

080093bc <__sfp>:
 80093bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093be:	4607      	mov	r7, r0
 80093c0:	f7ff ffac 	bl	800931c <__sfp_lock_acquire>
 80093c4:	4b1e      	ldr	r3, [pc, #120]	; (8009440 <__sfp+0x84>)
 80093c6:	681e      	ldr	r6, [r3, #0]
 80093c8:	69b3      	ldr	r3, [r6, #24]
 80093ca:	b913      	cbnz	r3, 80093d2 <__sfp+0x16>
 80093cc:	4630      	mov	r0, r6
 80093ce:	f7ff ffbd 	bl	800934c <__sinit>
 80093d2:	3648      	adds	r6, #72	; 0x48
 80093d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093d8:	3b01      	subs	r3, #1
 80093da:	d503      	bpl.n	80093e4 <__sfp+0x28>
 80093dc:	6833      	ldr	r3, [r6, #0]
 80093de:	b30b      	cbz	r3, 8009424 <__sfp+0x68>
 80093e0:	6836      	ldr	r6, [r6, #0]
 80093e2:	e7f7      	b.n	80093d4 <__sfp+0x18>
 80093e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093e8:	b9d5      	cbnz	r5, 8009420 <__sfp+0x64>
 80093ea:	4b16      	ldr	r3, [pc, #88]	; (8009444 <__sfp+0x88>)
 80093ec:	60e3      	str	r3, [r4, #12]
 80093ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093f2:	6665      	str	r5, [r4, #100]	; 0x64
 80093f4:	f000 f847 	bl	8009486 <__retarget_lock_init_recursive>
 80093f8:	f7ff ff96 	bl	8009328 <__sfp_lock_release>
 80093fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009400:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009404:	6025      	str	r5, [r4, #0]
 8009406:	61a5      	str	r5, [r4, #24]
 8009408:	2208      	movs	r2, #8
 800940a:	4629      	mov	r1, r5
 800940c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009410:	f7ff fe1e 	bl	8009050 <memset>
 8009414:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009418:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800941c:	4620      	mov	r0, r4
 800941e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009420:	3468      	adds	r4, #104	; 0x68
 8009422:	e7d9      	b.n	80093d8 <__sfp+0x1c>
 8009424:	2104      	movs	r1, #4
 8009426:	4638      	mov	r0, r7
 8009428:	f7ff ff62 	bl	80092f0 <__sfmoreglue>
 800942c:	4604      	mov	r4, r0
 800942e:	6030      	str	r0, [r6, #0]
 8009430:	2800      	cmp	r0, #0
 8009432:	d1d5      	bne.n	80093e0 <__sfp+0x24>
 8009434:	f7ff ff78 	bl	8009328 <__sfp_lock_release>
 8009438:	230c      	movs	r3, #12
 800943a:	603b      	str	r3, [r7, #0]
 800943c:	e7ee      	b.n	800941c <__sfp+0x60>
 800943e:	bf00      	nop
 8009440:	0800a480 	.word	0x0800a480
 8009444:	ffff0001 	.word	0xffff0001

08009448 <_fwalk_reent>:
 8009448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800944c:	4606      	mov	r6, r0
 800944e:	4688      	mov	r8, r1
 8009450:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009454:	2700      	movs	r7, #0
 8009456:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800945a:	f1b9 0901 	subs.w	r9, r9, #1
 800945e:	d505      	bpl.n	800946c <_fwalk_reent+0x24>
 8009460:	6824      	ldr	r4, [r4, #0]
 8009462:	2c00      	cmp	r4, #0
 8009464:	d1f7      	bne.n	8009456 <_fwalk_reent+0xe>
 8009466:	4638      	mov	r0, r7
 8009468:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800946c:	89ab      	ldrh	r3, [r5, #12]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d907      	bls.n	8009482 <_fwalk_reent+0x3a>
 8009472:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009476:	3301      	adds	r3, #1
 8009478:	d003      	beq.n	8009482 <_fwalk_reent+0x3a>
 800947a:	4629      	mov	r1, r5
 800947c:	4630      	mov	r0, r6
 800947e:	47c0      	blx	r8
 8009480:	4307      	orrs	r7, r0
 8009482:	3568      	adds	r5, #104	; 0x68
 8009484:	e7e9      	b.n	800945a <_fwalk_reent+0x12>

08009486 <__retarget_lock_init_recursive>:
 8009486:	4770      	bx	lr

08009488 <__retarget_lock_acquire_recursive>:
 8009488:	4770      	bx	lr

0800948a <__retarget_lock_release_recursive>:
 800948a:	4770      	bx	lr

0800948c <__malloc_lock>:
 800948c:	4801      	ldr	r0, [pc, #4]	; (8009494 <__malloc_lock+0x8>)
 800948e:	f7ff bffb 	b.w	8009488 <__retarget_lock_acquire_recursive>
 8009492:	bf00      	nop
 8009494:	20000e40 	.word	0x20000e40

08009498 <__malloc_unlock>:
 8009498:	4801      	ldr	r0, [pc, #4]	; (80094a0 <__malloc_unlock+0x8>)
 800949a:	f7ff bff6 	b.w	800948a <__retarget_lock_release_recursive>
 800949e:	bf00      	nop
 80094a0:	20000e40 	.word	0x20000e40

080094a4 <__ssputs_r>:
 80094a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a8:	688e      	ldr	r6, [r1, #8]
 80094aa:	429e      	cmp	r6, r3
 80094ac:	4682      	mov	sl, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	4690      	mov	r8, r2
 80094b2:	461f      	mov	r7, r3
 80094b4:	d838      	bhi.n	8009528 <__ssputs_r+0x84>
 80094b6:	898a      	ldrh	r2, [r1, #12]
 80094b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094bc:	d032      	beq.n	8009524 <__ssputs_r+0x80>
 80094be:	6825      	ldr	r5, [r4, #0]
 80094c0:	6909      	ldr	r1, [r1, #16]
 80094c2:	eba5 0901 	sub.w	r9, r5, r1
 80094c6:	6965      	ldr	r5, [r4, #20]
 80094c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094d0:	3301      	adds	r3, #1
 80094d2:	444b      	add	r3, r9
 80094d4:	106d      	asrs	r5, r5, #1
 80094d6:	429d      	cmp	r5, r3
 80094d8:	bf38      	it	cc
 80094da:	461d      	movcc	r5, r3
 80094dc:	0553      	lsls	r3, r2, #21
 80094de:	d531      	bpl.n	8009544 <__ssputs_r+0xa0>
 80094e0:	4629      	mov	r1, r5
 80094e2:	f7ff fe0d 	bl	8009100 <_malloc_r>
 80094e6:	4606      	mov	r6, r0
 80094e8:	b950      	cbnz	r0, 8009500 <__ssputs_r+0x5c>
 80094ea:	230c      	movs	r3, #12
 80094ec:	f8ca 3000 	str.w	r3, [sl]
 80094f0:	89a3      	ldrh	r3, [r4, #12]
 80094f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094f6:	81a3      	strh	r3, [r4, #12]
 80094f8:	f04f 30ff 	mov.w	r0, #4294967295
 80094fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009500:	6921      	ldr	r1, [r4, #16]
 8009502:	464a      	mov	r2, r9
 8009504:	f7ff fd96 	bl	8009034 <memcpy>
 8009508:	89a3      	ldrh	r3, [r4, #12]
 800950a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800950e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009512:	81a3      	strh	r3, [r4, #12]
 8009514:	6126      	str	r6, [r4, #16]
 8009516:	6165      	str	r5, [r4, #20]
 8009518:	444e      	add	r6, r9
 800951a:	eba5 0509 	sub.w	r5, r5, r9
 800951e:	6026      	str	r6, [r4, #0]
 8009520:	60a5      	str	r5, [r4, #8]
 8009522:	463e      	mov	r6, r7
 8009524:	42be      	cmp	r6, r7
 8009526:	d900      	bls.n	800952a <__ssputs_r+0x86>
 8009528:	463e      	mov	r6, r7
 800952a:	4632      	mov	r2, r6
 800952c:	6820      	ldr	r0, [r4, #0]
 800952e:	4641      	mov	r1, r8
 8009530:	f000 fea8 	bl	800a284 <memmove>
 8009534:	68a3      	ldr	r3, [r4, #8]
 8009536:	6822      	ldr	r2, [r4, #0]
 8009538:	1b9b      	subs	r3, r3, r6
 800953a:	4432      	add	r2, r6
 800953c:	60a3      	str	r3, [r4, #8]
 800953e:	6022      	str	r2, [r4, #0]
 8009540:	2000      	movs	r0, #0
 8009542:	e7db      	b.n	80094fc <__ssputs_r+0x58>
 8009544:	462a      	mov	r2, r5
 8009546:	f000 feb7 	bl	800a2b8 <_realloc_r>
 800954a:	4606      	mov	r6, r0
 800954c:	2800      	cmp	r0, #0
 800954e:	d1e1      	bne.n	8009514 <__ssputs_r+0x70>
 8009550:	6921      	ldr	r1, [r4, #16]
 8009552:	4650      	mov	r0, sl
 8009554:	f7ff fd84 	bl	8009060 <_free_r>
 8009558:	e7c7      	b.n	80094ea <__ssputs_r+0x46>
	...

0800955c <_svfiprintf_r>:
 800955c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009560:	4698      	mov	r8, r3
 8009562:	898b      	ldrh	r3, [r1, #12]
 8009564:	061b      	lsls	r3, r3, #24
 8009566:	b09d      	sub	sp, #116	; 0x74
 8009568:	4607      	mov	r7, r0
 800956a:	460d      	mov	r5, r1
 800956c:	4614      	mov	r4, r2
 800956e:	d50e      	bpl.n	800958e <_svfiprintf_r+0x32>
 8009570:	690b      	ldr	r3, [r1, #16]
 8009572:	b963      	cbnz	r3, 800958e <_svfiprintf_r+0x32>
 8009574:	2140      	movs	r1, #64	; 0x40
 8009576:	f7ff fdc3 	bl	8009100 <_malloc_r>
 800957a:	6028      	str	r0, [r5, #0]
 800957c:	6128      	str	r0, [r5, #16]
 800957e:	b920      	cbnz	r0, 800958a <_svfiprintf_r+0x2e>
 8009580:	230c      	movs	r3, #12
 8009582:	603b      	str	r3, [r7, #0]
 8009584:	f04f 30ff 	mov.w	r0, #4294967295
 8009588:	e0d1      	b.n	800972e <_svfiprintf_r+0x1d2>
 800958a:	2340      	movs	r3, #64	; 0x40
 800958c:	616b      	str	r3, [r5, #20]
 800958e:	2300      	movs	r3, #0
 8009590:	9309      	str	r3, [sp, #36]	; 0x24
 8009592:	2320      	movs	r3, #32
 8009594:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009598:	f8cd 800c 	str.w	r8, [sp, #12]
 800959c:	2330      	movs	r3, #48	; 0x30
 800959e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009748 <_svfiprintf_r+0x1ec>
 80095a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095a6:	f04f 0901 	mov.w	r9, #1
 80095aa:	4623      	mov	r3, r4
 80095ac:	469a      	mov	sl, r3
 80095ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095b2:	b10a      	cbz	r2, 80095b8 <_svfiprintf_r+0x5c>
 80095b4:	2a25      	cmp	r2, #37	; 0x25
 80095b6:	d1f9      	bne.n	80095ac <_svfiprintf_r+0x50>
 80095b8:	ebba 0b04 	subs.w	fp, sl, r4
 80095bc:	d00b      	beq.n	80095d6 <_svfiprintf_r+0x7a>
 80095be:	465b      	mov	r3, fp
 80095c0:	4622      	mov	r2, r4
 80095c2:	4629      	mov	r1, r5
 80095c4:	4638      	mov	r0, r7
 80095c6:	f7ff ff6d 	bl	80094a4 <__ssputs_r>
 80095ca:	3001      	adds	r0, #1
 80095cc:	f000 80aa 	beq.w	8009724 <_svfiprintf_r+0x1c8>
 80095d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095d2:	445a      	add	r2, fp
 80095d4:	9209      	str	r2, [sp, #36]	; 0x24
 80095d6:	f89a 3000 	ldrb.w	r3, [sl]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	f000 80a2 	beq.w	8009724 <_svfiprintf_r+0x1c8>
 80095e0:	2300      	movs	r3, #0
 80095e2:	f04f 32ff 	mov.w	r2, #4294967295
 80095e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ea:	f10a 0a01 	add.w	sl, sl, #1
 80095ee:	9304      	str	r3, [sp, #16]
 80095f0:	9307      	str	r3, [sp, #28]
 80095f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095f6:	931a      	str	r3, [sp, #104]	; 0x68
 80095f8:	4654      	mov	r4, sl
 80095fa:	2205      	movs	r2, #5
 80095fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009600:	4851      	ldr	r0, [pc, #324]	; (8009748 <_svfiprintf_r+0x1ec>)
 8009602:	f7f6 fde5 	bl	80001d0 <memchr>
 8009606:	9a04      	ldr	r2, [sp, #16]
 8009608:	b9d8      	cbnz	r0, 8009642 <_svfiprintf_r+0xe6>
 800960a:	06d0      	lsls	r0, r2, #27
 800960c:	bf44      	itt	mi
 800960e:	2320      	movmi	r3, #32
 8009610:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009614:	0711      	lsls	r1, r2, #28
 8009616:	bf44      	itt	mi
 8009618:	232b      	movmi	r3, #43	; 0x2b
 800961a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800961e:	f89a 3000 	ldrb.w	r3, [sl]
 8009622:	2b2a      	cmp	r3, #42	; 0x2a
 8009624:	d015      	beq.n	8009652 <_svfiprintf_r+0xf6>
 8009626:	9a07      	ldr	r2, [sp, #28]
 8009628:	4654      	mov	r4, sl
 800962a:	2000      	movs	r0, #0
 800962c:	f04f 0c0a 	mov.w	ip, #10
 8009630:	4621      	mov	r1, r4
 8009632:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009636:	3b30      	subs	r3, #48	; 0x30
 8009638:	2b09      	cmp	r3, #9
 800963a:	d94e      	bls.n	80096da <_svfiprintf_r+0x17e>
 800963c:	b1b0      	cbz	r0, 800966c <_svfiprintf_r+0x110>
 800963e:	9207      	str	r2, [sp, #28]
 8009640:	e014      	b.n	800966c <_svfiprintf_r+0x110>
 8009642:	eba0 0308 	sub.w	r3, r0, r8
 8009646:	fa09 f303 	lsl.w	r3, r9, r3
 800964a:	4313      	orrs	r3, r2
 800964c:	9304      	str	r3, [sp, #16]
 800964e:	46a2      	mov	sl, r4
 8009650:	e7d2      	b.n	80095f8 <_svfiprintf_r+0x9c>
 8009652:	9b03      	ldr	r3, [sp, #12]
 8009654:	1d19      	adds	r1, r3, #4
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	9103      	str	r1, [sp, #12]
 800965a:	2b00      	cmp	r3, #0
 800965c:	bfbb      	ittet	lt
 800965e:	425b      	neglt	r3, r3
 8009660:	f042 0202 	orrlt.w	r2, r2, #2
 8009664:	9307      	strge	r3, [sp, #28]
 8009666:	9307      	strlt	r3, [sp, #28]
 8009668:	bfb8      	it	lt
 800966a:	9204      	strlt	r2, [sp, #16]
 800966c:	7823      	ldrb	r3, [r4, #0]
 800966e:	2b2e      	cmp	r3, #46	; 0x2e
 8009670:	d10c      	bne.n	800968c <_svfiprintf_r+0x130>
 8009672:	7863      	ldrb	r3, [r4, #1]
 8009674:	2b2a      	cmp	r3, #42	; 0x2a
 8009676:	d135      	bne.n	80096e4 <_svfiprintf_r+0x188>
 8009678:	9b03      	ldr	r3, [sp, #12]
 800967a:	1d1a      	adds	r2, r3, #4
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	9203      	str	r2, [sp, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	bfb8      	it	lt
 8009684:	f04f 33ff 	movlt.w	r3, #4294967295
 8009688:	3402      	adds	r4, #2
 800968a:	9305      	str	r3, [sp, #20]
 800968c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009758 <_svfiprintf_r+0x1fc>
 8009690:	7821      	ldrb	r1, [r4, #0]
 8009692:	2203      	movs	r2, #3
 8009694:	4650      	mov	r0, sl
 8009696:	f7f6 fd9b 	bl	80001d0 <memchr>
 800969a:	b140      	cbz	r0, 80096ae <_svfiprintf_r+0x152>
 800969c:	2340      	movs	r3, #64	; 0x40
 800969e:	eba0 000a 	sub.w	r0, r0, sl
 80096a2:	fa03 f000 	lsl.w	r0, r3, r0
 80096a6:	9b04      	ldr	r3, [sp, #16]
 80096a8:	4303      	orrs	r3, r0
 80096aa:	3401      	adds	r4, #1
 80096ac:	9304      	str	r3, [sp, #16]
 80096ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096b2:	4826      	ldr	r0, [pc, #152]	; (800974c <_svfiprintf_r+0x1f0>)
 80096b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096b8:	2206      	movs	r2, #6
 80096ba:	f7f6 fd89 	bl	80001d0 <memchr>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d038      	beq.n	8009734 <_svfiprintf_r+0x1d8>
 80096c2:	4b23      	ldr	r3, [pc, #140]	; (8009750 <_svfiprintf_r+0x1f4>)
 80096c4:	bb1b      	cbnz	r3, 800970e <_svfiprintf_r+0x1b2>
 80096c6:	9b03      	ldr	r3, [sp, #12]
 80096c8:	3307      	adds	r3, #7
 80096ca:	f023 0307 	bic.w	r3, r3, #7
 80096ce:	3308      	adds	r3, #8
 80096d0:	9303      	str	r3, [sp, #12]
 80096d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096d4:	4433      	add	r3, r6
 80096d6:	9309      	str	r3, [sp, #36]	; 0x24
 80096d8:	e767      	b.n	80095aa <_svfiprintf_r+0x4e>
 80096da:	fb0c 3202 	mla	r2, ip, r2, r3
 80096de:	460c      	mov	r4, r1
 80096e0:	2001      	movs	r0, #1
 80096e2:	e7a5      	b.n	8009630 <_svfiprintf_r+0xd4>
 80096e4:	2300      	movs	r3, #0
 80096e6:	3401      	adds	r4, #1
 80096e8:	9305      	str	r3, [sp, #20]
 80096ea:	4619      	mov	r1, r3
 80096ec:	f04f 0c0a 	mov.w	ip, #10
 80096f0:	4620      	mov	r0, r4
 80096f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096f6:	3a30      	subs	r2, #48	; 0x30
 80096f8:	2a09      	cmp	r2, #9
 80096fa:	d903      	bls.n	8009704 <_svfiprintf_r+0x1a8>
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d0c5      	beq.n	800968c <_svfiprintf_r+0x130>
 8009700:	9105      	str	r1, [sp, #20]
 8009702:	e7c3      	b.n	800968c <_svfiprintf_r+0x130>
 8009704:	fb0c 2101 	mla	r1, ip, r1, r2
 8009708:	4604      	mov	r4, r0
 800970a:	2301      	movs	r3, #1
 800970c:	e7f0      	b.n	80096f0 <_svfiprintf_r+0x194>
 800970e:	ab03      	add	r3, sp, #12
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	462a      	mov	r2, r5
 8009714:	4b0f      	ldr	r3, [pc, #60]	; (8009754 <_svfiprintf_r+0x1f8>)
 8009716:	a904      	add	r1, sp, #16
 8009718:	4638      	mov	r0, r7
 800971a:	f3af 8000 	nop.w
 800971e:	1c42      	adds	r2, r0, #1
 8009720:	4606      	mov	r6, r0
 8009722:	d1d6      	bne.n	80096d2 <_svfiprintf_r+0x176>
 8009724:	89ab      	ldrh	r3, [r5, #12]
 8009726:	065b      	lsls	r3, r3, #25
 8009728:	f53f af2c 	bmi.w	8009584 <_svfiprintf_r+0x28>
 800972c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800972e:	b01d      	add	sp, #116	; 0x74
 8009730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009734:	ab03      	add	r3, sp, #12
 8009736:	9300      	str	r3, [sp, #0]
 8009738:	462a      	mov	r2, r5
 800973a:	4b06      	ldr	r3, [pc, #24]	; (8009754 <_svfiprintf_r+0x1f8>)
 800973c:	a904      	add	r1, sp, #16
 800973e:	4638      	mov	r0, r7
 8009740:	f000 f9d4 	bl	8009aec <_printf_i>
 8009744:	e7eb      	b.n	800971e <_svfiprintf_r+0x1c2>
 8009746:	bf00      	nop
 8009748:	0800a4e4 	.word	0x0800a4e4
 800974c:	0800a4ee 	.word	0x0800a4ee
 8009750:	00000000 	.word	0x00000000
 8009754:	080094a5 	.word	0x080094a5
 8009758:	0800a4ea 	.word	0x0800a4ea

0800975c <__sfputc_r>:
 800975c:	6893      	ldr	r3, [r2, #8]
 800975e:	3b01      	subs	r3, #1
 8009760:	2b00      	cmp	r3, #0
 8009762:	b410      	push	{r4}
 8009764:	6093      	str	r3, [r2, #8]
 8009766:	da08      	bge.n	800977a <__sfputc_r+0x1e>
 8009768:	6994      	ldr	r4, [r2, #24]
 800976a:	42a3      	cmp	r3, r4
 800976c:	db01      	blt.n	8009772 <__sfputc_r+0x16>
 800976e:	290a      	cmp	r1, #10
 8009770:	d103      	bne.n	800977a <__sfputc_r+0x1e>
 8009772:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009776:	f000 bb6b 	b.w	8009e50 <__swbuf_r>
 800977a:	6813      	ldr	r3, [r2, #0]
 800977c:	1c58      	adds	r0, r3, #1
 800977e:	6010      	str	r0, [r2, #0]
 8009780:	7019      	strb	r1, [r3, #0]
 8009782:	4608      	mov	r0, r1
 8009784:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009788:	4770      	bx	lr

0800978a <__sfputs_r>:
 800978a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978c:	4606      	mov	r6, r0
 800978e:	460f      	mov	r7, r1
 8009790:	4614      	mov	r4, r2
 8009792:	18d5      	adds	r5, r2, r3
 8009794:	42ac      	cmp	r4, r5
 8009796:	d101      	bne.n	800979c <__sfputs_r+0x12>
 8009798:	2000      	movs	r0, #0
 800979a:	e007      	b.n	80097ac <__sfputs_r+0x22>
 800979c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a0:	463a      	mov	r2, r7
 80097a2:	4630      	mov	r0, r6
 80097a4:	f7ff ffda 	bl	800975c <__sfputc_r>
 80097a8:	1c43      	adds	r3, r0, #1
 80097aa:	d1f3      	bne.n	8009794 <__sfputs_r+0xa>
 80097ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097b0 <_vfiprintf_r>:
 80097b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	460d      	mov	r5, r1
 80097b6:	b09d      	sub	sp, #116	; 0x74
 80097b8:	4614      	mov	r4, r2
 80097ba:	4698      	mov	r8, r3
 80097bc:	4606      	mov	r6, r0
 80097be:	b118      	cbz	r0, 80097c8 <_vfiprintf_r+0x18>
 80097c0:	6983      	ldr	r3, [r0, #24]
 80097c2:	b90b      	cbnz	r3, 80097c8 <_vfiprintf_r+0x18>
 80097c4:	f7ff fdc2 	bl	800934c <__sinit>
 80097c8:	4b89      	ldr	r3, [pc, #548]	; (80099f0 <_vfiprintf_r+0x240>)
 80097ca:	429d      	cmp	r5, r3
 80097cc:	d11b      	bne.n	8009806 <_vfiprintf_r+0x56>
 80097ce:	6875      	ldr	r5, [r6, #4]
 80097d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097d2:	07d9      	lsls	r1, r3, #31
 80097d4:	d405      	bmi.n	80097e2 <_vfiprintf_r+0x32>
 80097d6:	89ab      	ldrh	r3, [r5, #12]
 80097d8:	059a      	lsls	r2, r3, #22
 80097da:	d402      	bmi.n	80097e2 <_vfiprintf_r+0x32>
 80097dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097de:	f7ff fe53 	bl	8009488 <__retarget_lock_acquire_recursive>
 80097e2:	89ab      	ldrh	r3, [r5, #12]
 80097e4:	071b      	lsls	r3, r3, #28
 80097e6:	d501      	bpl.n	80097ec <_vfiprintf_r+0x3c>
 80097e8:	692b      	ldr	r3, [r5, #16]
 80097ea:	b9eb      	cbnz	r3, 8009828 <_vfiprintf_r+0x78>
 80097ec:	4629      	mov	r1, r5
 80097ee:	4630      	mov	r0, r6
 80097f0:	f000 fb92 	bl	8009f18 <__swsetup_r>
 80097f4:	b1c0      	cbz	r0, 8009828 <_vfiprintf_r+0x78>
 80097f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097f8:	07dc      	lsls	r4, r3, #31
 80097fa:	d50e      	bpl.n	800981a <_vfiprintf_r+0x6a>
 80097fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009800:	b01d      	add	sp, #116	; 0x74
 8009802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009806:	4b7b      	ldr	r3, [pc, #492]	; (80099f4 <_vfiprintf_r+0x244>)
 8009808:	429d      	cmp	r5, r3
 800980a:	d101      	bne.n	8009810 <_vfiprintf_r+0x60>
 800980c:	68b5      	ldr	r5, [r6, #8]
 800980e:	e7df      	b.n	80097d0 <_vfiprintf_r+0x20>
 8009810:	4b79      	ldr	r3, [pc, #484]	; (80099f8 <_vfiprintf_r+0x248>)
 8009812:	429d      	cmp	r5, r3
 8009814:	bf08      	it	eq
 8009816:	68f5      	ldreq	r5, [r6, #12]
 8009818:	e7da      	b.n	80097d0 <_vfiprintf_r+0x20>
 800981a:	89ab      	ldrh	r3, [r5, #12]
 800981c:	0598      	lsls	r0, r3, #22
 800981e:	d4ed      	bmi.n	80097fc <_vfiprintf_r+0x4c>
 8009820:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009822:	f7ff fe32 	bl	800948a <__retarget_lock_release_recursive>
 8009826:	e7e9      	b.n	80097fc <_vfiprintf_r+0x4c>
 8009828:	2300      	movs	r3, #0
 800982a:	9309      	str	r3, [sp, #36]	; 0x24
 800982c:	2320      	movs	r3, #32
 800982e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009832:	f8cd 800c 	str.w	r8, [sp, #12]
 8009836:	2330      	movs	r3, #48	; 0x30
 8009838:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80099fc <_vfiprintf_r+0x24c>
 800983c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009840:	f04f 0901 	mov.w	r9, #1
 8009844:	4623      	mov	r3, r4
 8009846:	469a      	mov	sl, r3
 8009848:	f813 2b01 	ldrb.w	r2, [r3], #1
 800984c:	b10a      	cbz	r2, 8009852 <_vfiprintf_r+0xa2>
 800984e:	2a25      	cmp	r2, #37	; 0x25
 8009850:	d1f9      	bne.n	8009846 <_vfiprintf_r+0x96>
 8009852:	ebba 0b04 	subs.w	fp, sl, r4
 8009856:	d00b      	beq.n	8009870 <_vfiprintf_r+0xc0>
 8009858:	465b      	mov	r3, fp
 800985a:	4622      	mov	r2, r4
 800985c:	4629      	mov	r1, r5
 800985e:	4630      	mov	r0, r6
 8009860:	f7ff ff93 	bl	800978a <__sfputs_r>
 8009864:	3001      	adds	r0, #1
 8009866:	f000 80aa 	beq.w	80099be <_vfiprintf_r+0x20e>
 800986a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800986c:	445a      	add	r2, fp
 800986e:	9209      	str	r2, [sp, #36]	; 0x24
 8009870:	f89a 3000 	ldrb.w	r3, [sl]
 8009874:	2b00      	cmp	r3, #0
 8009876:	f000 80a2 	beq.w	80099be <_vfiprintf_r+0x20e>
 800987a:	2300      	movs	r3, #0
 800987c:	f04f 32ff 	mov.w	r2, #4294967295
 8009880:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009884:	f10a 0a01 	add.w	sl, sl, #1
 8009888:	9304      	str	r3, [sp, #16]
 800988a:	9307      	str	r3, [sp, #28]
 800988c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009890:	931a      	str	r3, [sp, #104]	; 0x68
 8009892:	4654      	mov	r4, sl
 8009894:	2205      	movs	r2, #5
 8009896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800989a:	4858      	ldr	r0, [pc, #352]	; (80099fc <_vfiprintf_r+0x24c>)
 800989c:	f7f6 fc98 	bl	80001d0 <memchr>
 80098a0:	9a04      	ldr	r2, [sp, #16]
 80098a2:	b9d8      	cbnz	r0, 80098dc <_vfiprintf_r+0x12c>
 80098a4:	06d1      	lsls	r1, r2, #27
 80098a6:	bf44      	itt	mi
 80098a8:	2320      	movmi	r3, #32
 80098aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098ae:	0713      	lsls	r3, r2, #28
 80098b0:	bf44      	itt	mi
 80098b2:	232b      	movmi	r3, #43	; 0x2b
 80098b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098b8:	f89a 3000 	ldrb.w	r3, [sl]
 80098bc:	2b2a      	cmp	r3, #42	; 0x2a
 80098be:	d015      	beq.n	80098ec <_vfiprintf_r+0x13c>
 80098c0:	9a07      	ldr	r2, [sp, #28]
 80098c2:	4654      	mov	r4, sl
 80098c4:	2000      	movs	r0, #0
 80098c6:	f04f 0c0a 	mov.w	ip, #10
 80098ca:	4621      	mov	r1, r4
 80098cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098d0:	3b30      	subs	r3, #48	; 0x30
 80098d2:	2b09      	cmp	r3, #9
 80098d4:	d94e      	bls.n	8009974 <_vfiprintf_r+0x1c4>
 80098d6:	b1b0      	cbz	r0, 8009906 <_vfiprintf_r+0x156>
 80098d8:	9207      	str	r2, [sp, #28]
 80098da:	e014      	b.n	8009906 <_vfiprintf_r+0x156>
 80098dc:	eba0 0308 	sub.w	r3, r0, r8
 80098e0:	fa09 f303 	lsl.w	r3, r9, r3
 80098e4:	4313      	orrs	r3, r2
 80098e6:	9304      	str	r3, [sp, #16]
 80098e8:	46a2      	mov	sl, r4
 80098ea:	e7d2      	b.n	8009892 <_vfiprintf_r+0xe2>
 80098ec:	9b03      	ldr	r3, [sp, #12]
 80098ee:	1d19      	adds	r1, r3, #4
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	9103      	str	r1, [sp, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	bfbb      	ittet	lt
 80098f8:	425b      	neglt	r3, r3
 80098fa:	f042 0202 	orrlt.w	r2, r2, #2
 80098fe:	9307      	strge	r3, [sp, #28]
 8009900:	9307      	strlt	r3, [sp, #28]
 8009902:	bfb8      	it	lt
 8009904:	9204      	strlt	r2, [sp, #16]
 8009906:	7823      	ldrb	r3, [r4, #0]
 8009908:	2b2e      	cmp	r3, #46	; 0x2e
 800990a:	d10c      	bne.n	8009926 <_vfiprintf_r+0x176>
 800990c:	7863      	ldrb	r3, [r4, #1]
 800990e:	2b2a      	cmp	r3, #42	; 0x2a
 8009910:	d135      	bne.n	800997e <_vfiprintf_r+0x1ce>
 8009912:	9b03      	ldr	r3, [sp, #12]
 8009914:	1d1a      	adds	r2, r3, #4
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	9203      	str	r2, [sp, #12]
 800991a:	2b00      	cmp	r3, #0
 800991c:	bfb8      	it	lt
 800991e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009922:	3402      	adds	r4, #2
 8009924:	9305      	str	r3, [sp, #20]
 8009926:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a0c <_vfiprintf_r+0x25c>
 800992a:	7821      	ldrb	r1, [r4, #0]
 800992c:	2203      	movs	r2, #3
 800992e:	4650      	mov	r0, sl
 8009930:	f7f6 fc4e 	bl	80001d0 <memchr>
 8009934:	b140      	cbz	r0, 8009948 <_vfiprintf_r+0x198>
 8009936:	2340      	movs	r3, #64	; 0x40
 8009938:	eba0 000a 	sub.w	r0, r0, sl
 800993c:	fa03 f000 	lsl.w	r0, r3, r0
 8009940:	9b04      	ldr	r3, [sp, #16]
 8009942:	4303      	orrs	r3, r0
 8009944:	3401      	adds	r4, #1
 8009946:	9304      	str	r3, [sp, #16]
 8009948:	f814 1b01 	ldrb.w	r1, [r4], #1
 800994c:	482c      	ldr	r0, [pc, #176]	; (8009a00 <_vfiprintf_r+0x250>)
 800994e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009952:	2206      	movs	r2, #6
 8009954:	f7f6 fc3c 	bl	80001d0 <memchr>
 8009958:	2800      	cmp	r0, #0
 800995a:	d03f      	beq.n	80099dc <_vfiprintf_r+0x22c>
 800995c:	4b29      	ldr	r3, [pc, #164]	; (8009a04 <_vfiprintf_r+0x254>)
 800995e:	bb1b      	cbnz	r3, 80099a8 <_vfiprintf_r+0x1f8>
 8009960:	9b03      	ldr	r3, [sp, #12]
 8009962:	3307      	adds	r3, #7
 8009964:	f023 0307 	bic.w	r3, r3, #7
 8009968:	3308      	adds	r3, #8
 800996a:	9303      	str	r3, [sp, #12]
 800996c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800996e:	443b      	add	r3, r7
 8009970:	9309      	str	r3, [sp, #36]	; 0x24
 8009972:	e767      	b.n	8009844 <_vfiprintf_r+0x94>
 8009974:	fb0c 3202 	mla	r2, ip, r2, r3
 8009978:	460c      	mov	r4, r1
 800997a:	2001      	movs	r0, #1
 800997c:	e7a5      	b.n	80098ca <_vfiprintf_r+0x11a>
 800997e:	2300      	movs	r3, #0
 8009980:	3401      	adds	r4, #1
 8009982:	9305      	str	r3, [sp, #20]
 8009984:	4619      	mov	r1, r3
 8009986:	f04f 0c0a 	mov.w	ip, #10
 800998a:	4620      	mov	r0, r4
 800998c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009990:	3a30      	subs	r2, #48	; 0x30
 8009992:	2a09      	cmp	r2, #9
 8009994:	d903      	bls.n	800999e <_vfiprintf_r+0x1ee>
 8009996:	2b00      	cmp	r3, #0
 8009998:	d0c5      	beq.n	8009926 <_vfiprintf_r+0x176>
 800999a:	9105      	str	r1, [sp, #20]
 800999c:	e7c3      	b.n	8009926 <_vfiprintf_r+0x176>
 800999e:	fb0c 2101 	mla	r1, ip, r1, r2
 80099a2:	4604      	mov	r4, r0
 80099a4:	2301      	movs	r3, #1
 80099a6:	e7f0      	b.n	800998a <_vfiprintf_r+0x1da>
 80099a8:	ab03      	add	r3, sp, #12
 80099aa:	9300      	str	r3, [sp, #0]
 80099ac:	462a      	mov	r2, r5
 80099ae:	4b16      	ldr	r3, [pc, #88]	; (8009a08 <_vfiprintf_r+0x258>)
 80099b0:	a904      	add	r1, sp, #16
 80099b2:	4630      	mov	r0, r6
 80099b4:	f3af 8000 	nop.w
 80099b8:	4607      	mov	r7, r0
 80099ba:	1c78      	adds	r0, r7, #1
 80099bc:	d1d6      	bne.n	800996c <_vfiprintf_r+0x1bc>
 80099be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099c0:	07d9      	lsls	r1, r3, #31
 80099c2:	d405      	bmi.n	80099d0 <_vfiprintf_r+0x220>
 80099c4:	89ab      	ldrh	r3, [r5, #12]
 80099c6:	059a      	lsls	r2, r3, #22
 80099c8:	d402      	bmi.n	80099d0 <_vfiprintf_r+0x220>
 80099ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099cc:	f7ff fd5d 	bl	800948a <__retarget_lock_release_recursive>
 80099d0:	89ab      	ldrh	r3, [r5, #12]
 80099d2:	065b      	lsls	r3, r3, #25
 80099d4:	f53f af12 	bmi.w	80097fc <_vfiprintf_r+0x4c>
 80099d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099da:	e711      	b.n	8009800 <_vfiprintf_r+0x50>
 80099dc:	ab03      	add	r3, sp, #12
 80099de:	9300      	str	r3, [sp, #0]
 80099e0:	462a      	mov	r2, r5
 80099e2:	4b09      	ldr	r3, [pc, #36]	; (8009a08 <_vfiprintf_r+0x258>)
 80099e4:	a904      	add	r1, sp, #16
 80099e6:	4630      	mov	r0, r6
 80099e8:	f000 f880 	bl	8009aec <_printf_i>
 80099ec:	e7e4      	b.n	80099b8 <_vfiprintf_r+0x208>
 80099ee:	bf00      	nop
 80099f0:	0800a4a4 	.word	0x0800a4a4
 80099f4:	0800a4c4 	.word	0x0800a4c4
 80099f8:	0800a484 	.word	0x0800a484
 80099fc:	0800a4e4 	.word	0x0800a4e4
 8009a00:	0800a4ee 	.word	0x0800a4ee
 8009a04:	00000000 	.word	0x00000000
 8009a08:	0800978b 	.word	0x0800978b
 8009a0c:	0800a4ea 	.word	0x0800a4ea

08009a10 <_printf_common>:
 8009a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a14:	4616      	mov	r6, r2
 8009a16:	4699      	mov	r9, r3
 8009a18:	688a      	ldr	r2, [r1, #8]
 8009a1a:	690b      	ldr	r3, [r1, #16]
 8009a1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a20:	4293      	cmp	r3, r2
 8009a22:	bfb8      	it	lt
 8009a24:	4613      	movlt	r3, r2
 8009a26:	6033      	str	r3, [r6, #0]
 8009a28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	460c      	mov	r4, r1
 8009a30:	b10a      	cbz	r2, 8009a36 <_printf_common+0x26>
 8009a32:	3301      	adds	r3, #1
 8009a34:	6033      	str	r3, [r6, #0]
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	0699      	lsls	r1, r3, #26
 8009a3a:	bf42      	ittt	mi
 8009a3c:	6833      	ldrmi	r3, [r6, #0]
 8009a3e:	3302      	addmi	r3, #2
 8009a40:	6033      	strmi	r3, [r6, #0]
 8009a42:	6825      	ldr	r5, [r4, #0]
 8009a44:	f015 0506 	ands.w	r5, r5, #6
 8009a48:	d106      	bne.n	8009a58 <_printf_common+0x48>
 8009a4a:	f104 0a19 	add.w	sl, r4, #25
 8009a4e:	68e3      	ldr	r3, [r4, #12]
 8009a50:	6832      	ldr	r2, [r6, #0]
 8009a52:	1a9b      	subs	r3, r3, r2
 8009a54:	42ab      	cmp	r3, r5
 8009a56:	dc26      	bgt.n	8009aa6 <_printf_common+0x96>
 8009a58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a5c:	1e13      	subs	r3, r2, #0
 8009a5e:	6822      	ldr	r2, [r4, #0]
 8009a60:	bf18      	it	ne
 8009a62:	2301      	movne	r3, #1
 8009a64:	0692      	lsls	r2, r2, #26
 8009a66:	d42b      	bmi.n	8009ac0 <_printf_common+0xb0>
 8009a68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	4638      	mov	r0, r7
 8009a70:	47c0      	blx	r8
 8009a72:	3001      	adds	r0, #1
 8009a74:	d01e      	beq.n	8009ab4 <_printf_common+0xa4>
 8009a76:	6823      	ldr	r3, [r4, #0]
 8009a78:	68e5      	ldr	r5, [r4, #12]
 8009a7a:	6832      	ldr	r2, [r6, #0]
 8009a7c:	f003 0306 	and.w	r3, r3, #6
 8009a80:	2b04      	cmp	r3, #4
 8009a82:	bf08      	it	eq
 8009a84:	1aad      	subeq	r5, r5, r2
 8009a86:	68a3      	ldr	r3, [r4, #8]
 8009a88:	6922      	ldr	r2, [r4, #16]
 8009a8a:	bf0c      	ite	eq
 8009a8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a90:	2500      	movne	r5, #0
 8009a92:	4293      	cmp	r3, r2
 8009a94:	bfc4      	itt	gt
 8009a96:	1a9b      	subgt	r3, r3, r2
 8009a98:	18ed      	addgt	r5, r5, r3
 8009a9a:	2600      	movs	r6, #0
 8009a9c:	341a      	adds	r4, #26
 8009a9e:	42b5      	cmp	r5, r6
 8009aa0:	d11a      	bne.n	8009ad8 <_printf_common+0xc8>
 8009aa2:	2000      	movs	r0, #0
 8009aa4:	e008      	b.n	8009ab8 <_printf_common+0xa8>
 8009aa6:	2301      	movs	r3, #1
 8009aa8:	4652      	mov	r2, sl
 8009aaa:	4649      	mov	r1, r9
 8009aac:	4638      	mov	r0, r7
 8009aae:	47c0      	blx	r8
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	d103      	bne.n	8009abc <_printf_common+0xac>
 8009ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009abc:	3501      	adds	r5, #1
 8009abe:	e7c6      	b.n	8009a4e <_printf_common+0x3e>
 8009ac0:	18e1      	adds	r1, r4, r3
 8009ac2:	1c5a      	adds	r2, r3, #1
 8009ac4:	2030      	movs	r0, #48	; 0x30
 8009ac6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aca:	4422      	add	r2, r4
 8009acc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ad0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ad4:	3302      	adds	r3, #2
 8009ad6:	e7c7      	b.n	8009a68 <_printf_common+0x58>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	4622      	mov	r2, r4
 8009adc:	4649      	mov	r1, r9
 8009ade:	4638      	mov	r0, r7
 8009ae0:	47c0      	blx	r8
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	d0e6      	beq.n	8009ab4 <_printf_common+0xa4>
 8009ae6:	3601      	adds	r6, #1
 8009ae8:	e7d9      	b.n	8009a9e <_printf_common+0x8e>
	...

08009aec <_printf_i>:
 8009aec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009af0:	460c      	mov	r4, r1
 8009af2:	4691      	mov	r9, r2
 8009af4:	7e27      	ldrb	r7, [r4, #24]
 8009af6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009af8:	2f78      	cmp	r7, #120	; 0x78
 8009afa:	4680      	mov	r8, r0
 8009afc:	469a      	mov	sl, r3
 8009afe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b02:	d807      	bhi.n	8009b14 <_printf_i+0x28>
 8009b04:	2f62      	cmp	r7, #98	; 0x62
 8009b06:	d80a      	bhi.n	8009b1e <_printf_i+0x32>
 8009b08:	2f00      	cmp	r7, #0
 8009b0a:	f000 80d8 	beq.w	8009cbe <_printf_i+0x1d2>
 8009b0e:	2f58      	cmp	r7, #88	; 0x58
 8009b10:	f000 80a3 	beq.w	8009c5a <_printf_i+0x16e>
 8009b14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b1c:	e03a      	b.n	8009b94 <_printf_i+0xa8>
 8009b1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b22:	2b15      	cmp	r3, #21
 8009b24:	d8f6      	bhi.n	8009b14 <_printf_i+0x28>
 8009b26:	a001      	add	r0, pc, #4	; (adr r0, 8009b2c <_printf_i+0x40>)
 8009b28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b2c:	08009b85 	.word	0x08009b85
 8009b30:	08009b99 	.word	0x08009b99
 8009b34:	08009b15 	.word	0x08009b15
 8009b38:	08009b15 	.word	0x08009b15
 8009b3c:	08009b15 	.word	0x08009b15
 8009b40:	08009b15 	.word	0x08009b15
 8009b44:	08009b99 	.word	0x08009b99
 8009b48:	08009b15 	.word	0x08009b15
 8009b4c:	08009b15 	.word	0x08009b15
 8009b50:	08009b15 	.word	0x08009b15
 8009b54:	08009b15 	.word	0x08009b15
 8009b58:	08009ca5 	.word	0x08009ca5
 8009b5c:	08009bc9 	.word	0x08009bc9
 8009b60:	08009c87 	.word	0x08009c87
 8009b64:	08009b15 	.word	0x08009b15
 8009b68:	08009b15 	.word	0x08009b15
 8009b6c:	08009cc7 	.word	0x08009cc7
 8009b70:	08009b15 	.word	0x08009b15
 8009b74:	08009bc9 	.word	0x08009bc9
 8009b78:	08009b15 	.word	0x08009b15
 8009b7c:	08009b15 	.word	0x08009b15
 8009b80:	08009c8f 	.word	0x08009c8f
 8009b84:	680b      	ldr	r3, [r1, #0]
 8009b86:	1d1a      	adds	r2, r3, #4
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	600a      	str	r2, [r1, #0]
 8009b8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b94:	2301      	movs	r3, #1
 8009b96:	e0a3      	b.n	8009ce0 <_printf_i+0x1f4>
 8009b98:	6825      	ldr	r5, [r4, #0]
 8009b9a:	6808      	ldr	r0, [r1, #0]
 8009b9c:	062e      	lsls	r6, r5, #24
 8009b9e:	f100 0304 	add.w	r3, r0, #4
 8009ba2:	d50a      	bpl.n	8009bba <_printf_i+0xce>
 8009ba4:	6805      	ldr	r5, [r0, #0]
 8009ba6:	600b      	str	r3, [r1, #0]
 8009ba8:	2d00      	cmp	r5, #0
 8009baa:	da03      	bge.n	8009bb4 <_printf_i+0xc8>
 8009bac:	232d      	movs	r3, #45	; 0x2d
 8009bae:	426d      	negs	r5, r5
 8009bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bb4:	485e      	ldr	r0, [pc, #376]	; (8009d30 <_printf_i+0x244>)
 8009bb6:	230a      	movs	r3, #10
 8009bb8:	e019      	b.n	8009bee <_printf_i+0x102>
 8009bba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009bbe:	6805      	ldr	r5, [r0, #0]
 8009bc0:	600b      	str	r3, [r1, #0]
 8009bc2:	bf18      	it	ne
 8009bc4:	b22d      	sxthne	r5, r5
 8009bc6:	e7ef      	b.n	8009ba8 <_printf_i+0xbc>
 8009bc8:	680b      	ldr	r3, [r1, #0]
 8009bca:	6825      	ldr	r5, [r4, #0]
 8009bcc:	1d18      	adds	r0, r3, #4
 8009bce:	6008      	str	r0, [r1, #0]
 8009bd0:	0628      	lsls	r0, r5, #24
 8009bd2:	d501      	bpl.n	8009bd8 <_printf_i+0xec>
 8009bd4:	681d      	ldr	r5, [r3, #0]
 8009bd6:	e002      	b.n	8009bde <_printf_i+0xf2>
 8009bd8:	0669      	lsls	r1, r5, #25
 8009bda:	d5fb      	bpl.n	8009bd4 <_printf_i+0xe8>
 8009bdc:	881d      	ldrh	r5, [r3, #0]
 8009bde:	4854      	ldr	r0, [pc, #336]	; (8009d30 <_printf_i+0x244>)
 8009be0:	2f6f      	cmp	r7, #111	; 0x6f
 8009be2:	bf0c      	ite	eq
 8009be4:	2308      	moveq	r3, #8
 8009be6:	230a      	movne	r3, #10
 8009be8:	2100      	movs	r1, #0
 8009bea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bee:	6866      	ldr	r6, [r4, #4]
 8009bf0:	60a6      	str	r6, [r4, #8]
 8009bf2:	2e00      	cmp	r6, #0
 8009bf4:	bfa2      	ittt	ge
 8009bf6:	6821      	ldrge	r1, [r4, #0]
 8009bf8:	f021 0104 	bicge.w	r1, r1, #4
 8009bfc:	6021      	strge	r1, [r4, #0]
 8009bfe:	b90d      	cbnz	r5, 8009c04 <_printf_i+0x118>
 8009c00:	2e00      	cmp	r6, #0
 8009c02:	d04d      	beq.n	8009ca0 <_printf_i+0x1b4>
 8009c04:	4616      	mov	r6, r2
 8009c06:	fbb5 f1f3 	udiv	r1, r5, r3
 8009c0a:	fb03 5711 	mls	r7, r3, r1, r5
 8009c0e:	5dc7      	ldrb	r7, [r0, r7]
 8009c10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009c14:	462f      	mov	r7, r5
 8009c16:	42bb      	cmp	r3, r7
 8009c18:	460d      	mov	r5, r1
 8009c1a:	d9f4      	bls.n	8009c06 <_printf_i+0x11a>
 8009c1c:	2b08      	cmp	r3, #8
 8009c1e:	d10b      	bne.n	8009c38 <_printf_i+0x14c>
 8009c20:	6823      	ldr	r3, [r4, #0]
 8009c22:	07df      	lsls	r7, r3, #31
 8009c24:	d508      	bpl.n	8009c38 <_printf_i+0x14c>
 8009c26:	6923      	ldr	r3, [r4, #16]
 8009c28:	6861      	ldr	r1, [r4, #4]
 8009c2a:	4299      	cmp	r1, r3
 8009c2c:	bfde      	ittt	le
 8009c2e:	2330      	movle	r3, #48	; 0x30
 8009c30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c38:	1b92      	subs	r2, r2, r6
 8009c3a:	6122      	str	r2, [r4, #16]
 8009c3c:	f8cd a000 	str.w	sl, [sp]
 8009c40:	464b      	mov	r3, r9
 8009c42:	aa03      	add	r2, sp, #12
 8009c44:	4621      	mov	r1, r4
 8009c46:	4640      	mov	r0, r8
 8009c48:	f7ff fee2 	bl	8009a10 <_printf_common>
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	d14c      	bne.n	8009cea <_printf_i+0x1fe>
 8009c50:	f04f 30ff 	mov.w	r0, #4294967295
 8009c54:	b004      	add	sp, #16
 8009c56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c5a:	4835      	ldr	r0, [pc, #212]	; (8009d30 <_printf_i+0x244>)
 8009c5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c60:	6823      	ldr	r3, [r4, #0]
 8009c62:	680e      	ldr	r6, [r1, #0]
 8009c64:	061f      	lsls	r7, r3, #24
 8009c66:	f856 5b04 	ldr.w	r5, [r6], #4
 8009c6a:	600e      	str	r6, [r1, #0]
 8009c6c:	d514      	bpl.n	8009c98 <_printf_i+0x1ac>
 8009c6e:	07d9      	lsls	r1, r3, #31
 8009c70:	bf44      	itt	mi
 8009c72:	f043 0320 	orrmi.w	r3, r3, #32
 8009c76:	6023      	strmi	r3, [r4, #0]
 8009c78:	b91d      	cbnz	r5, 8009c82 <_printf_i+0x196>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	f023 0320 	bic.w	r3, r3, #32
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	2310      	movs	r3, #16
 8009c84:	e7b0      	b.n	8009be8 <_printf_i+0xfc>
 8009c86:	6823      	ldr	r3, [r4, #0]
 8009c88:	f043 0320 	orr.w	r3, r3, #32
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	2378      	movs	r3, #120	; 0x78
 8009c90:	4828      	ldr	r0, [pc, #160]	; (8009d34 <_printf_i+0x248>)
 8009c92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c96:	e7e3      	b.n	8009c60 <_printf_i+0x174>
 8009c98:	065e      	lsls	r6, r3, #25
 8009c9a:	bf48      	it	mi
 8009c9c:	b2ad      	uxthmi	r5, r5
 8009c9e:	e7e6      	b.n	8009c6e <_printf_i+0x182>
 8009ca0:	4616      	mov	r6, r2
 8009ca2:	e7bb      	b.n	8009c1c <_printf_i+0x130>
 8009ca4:	680b      	ldr	r3, [r1, #0]
 8009ca6:	6826      	ldr	r6, [r4, #0]
 8009ca8:	6960      	ldr	r0, [r4, #20]
 8009caa:	1d1d      	adds	r5, r3, #4
 8009cac:	600d      	str	r5, [r1, #0]
 8009cae:	0635      	lsls	r5, r6, #24
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	d501      	bpl.n	8009cb8 <_printf_i+0x1cc>
 8009cb4:	6018      	str	r0, [r3, #0]
 8009cb6:	e002      	b.n	8009cbe <_printf_i+0x1d2>
 8009cb8:	0671      	lsls	r1, r6, #25
 8009cba:	d5fb      	bpl.n	8009cb4 <_printf_i+0x1c8>
 8009cbc:	8018      	strh	r0, [r3, #0]
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	6123      	str	r3, [r4, #16]
 8009cc2:	4616      	mov	r6, r2
 8009cc4:	e7ba      	b.n	8009c3c <_printf_i+0x150>
 8009cc6:	680b      	ldr	r3, [r1, #0]
 8009cc8:	1d1a      	adds	r2, r3, #4
 8009cca:	600a      	str	r2, [r1, #0]
 8009ccc:	681e      	ldr	r6, [r3, #0]
 8009cce:	6862      	ldr	r2, [r4, #4]
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f7f6 fa7c 	bl	80001d0 <memchr>
 8009cd8:	b108      	cbz	r0, 8009cde <_printf_i+0x1f2>
 8009cda:	1b80      	subs	r0, r0, r6
 8009cdc:	6060      	str	r0, [r4, #4]
 8009cde:	6863      	ldr	r3, [r4, #4]
 8009ce0:	6123      	str	r3, [r4, #16]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ce8:	e7a8      	b.n	8009c3c <_printf_i+0x150>
 8009cea:	6923      	ldr	r3, [r4, #16]
 8009cec:	4632      	mov	r2, r6
 8009cee:	4649      	mov	r1, r9
 8009cf0:	4640      	mov	r0, r8
 8009cf2:	47d0      	blx	sl
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	d0ab      	beq.n	8009c50 <_printf_i+0x164>
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	079b      	lsls	r3, r3, #30
 8009cfc:	d413      	bmi.n	8009d26 <_printf_i+0x23a>
 8009cfe:	68e0      	ldr	r0, [r4, #12]
 8009d00:	9b03      	ldr	r3, [sp, #12]
 8009d02:	4298      	cmp	r0, r3
 8009d04:	bfb8      	it	lt
 8009d06:	4618      	movlt	r0, r3
 8009d08:	e7a4      	b.n	8009c54 <_printf_i+0x168>
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	4632      	mov	r2, r6
 8009d0e:	4649      	mov	r1, r9
 8009d10:	4640      	mov	r0, r8
 8009d12:	47d0      	blx	sl
 8009d14:	3001      	adds	r0, #1
 8009d16:	d09b      	beq.n	8009c50 <_printf_i+0x164>
 8009d18:	3501      	adds	r5, #1
 8009d1a:	68e3      	ldr	r3, [r4, #12]
 8009d1c:	9903      	ldr	r1, [sp, #12]
 8009d1e:	1a5b      	subs	r3, r3, r1
 8009d20:	42ab      	cmp	r3, r5
 8009d22:	dcf2      	bgt.n	8009d0a <_printf_i+0x21e>
 8009d24:	e7eb      	b.n	8009cfe <_printf_i+0x212>
 8009d26:	2500      	movs	r5, #0
 8009d28:	f104 0619 	add.w	r6, r4, #25
 8009d2c:	e7f5      	b.n	8009d1a <_printf_i+0x22e>
 8009d2e:	bf00      	nop
 8009d30:	0800a4f5 	.word	0x0800a4f5
 8009d34:	0800a506 	.word	0x0800a506

08009d38 <_putc_r>:
 8009d38:	b570      	push	{r4, r5, r6, lr}
 8009d3a:	460d      	mov	r5, r1
 8009d3c:	4614      	mov	r4, r2
 8009d3e:	4606      	mov	r6, r0
 8009d40:	b118      	cbz	r0, 8009d4a <_putc_r+0x12>
 8009d42:	6983      	ldr	r3, [r0, #24]
 8009d44:	b90b      	cbnz	r3, 8009d4a <_putc_r+0x12>
 8009d46:	f7ff fb01 	bl	800934c <__sinit>
 8009d4a:	4b1c      	ldr	r3, [pc, #112]	; (8009dbc <_putc_r+0x84>)
 8009d4c:	429c      	cmp	r4, r3
 8009d4e:	d124      	bne.n	8009d9a <_putc_r+0x62>
 8009d50:	6874      	ldr	r4, [r6, #4]
 8009d52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d54:	07d8      	lsls	r0, r3, #31
 8009d56:	d405      	bmi.n	8009d64 <_putc_r+0x2c>
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	0599      	lsls	r1, r3, #22
 8009d5c:	d402      	bmi.n	8009d64 <_putc_r+0x2c>
 8009d5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d60:	f7ff fb92 	bl	8009488 <__retarget_lock_acquire_recursive>
 8009d64:	68a3      	ldr	r3, [r4, #8]
 8009d66:	3b01      	subs	r3, #1
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	60a3      	str	r3, [r4, #8]
 8009d6c:	da05      	bge.n	8009d7a <_putc_r+0x42>
 8009d6e:	69a2      	ldr	r2, [r4, #24]
 8009d70:	4293      	cmp	r3, r2
 8009d72:	db1c      	blt.n	8009dae <_putc_r+0x76>
 8009d74:	b2eb      	uxtb	r3, r5
 8009d76:	2b0a      	cmp	r3, #10
 8009d78:	d019      	beq.n	8009dae <_putc_r+0x76>
 8009d7a:	6823      	ldr	r3, [r4, #0]
 8009d7c:	1c5a      	adds	r2, r3, #1
 8009d7e:	6022      	str	r2, [r4, #0]
 8009d80:	701d      	strb	r5, [r3, #0]
 8009d82:	b2ed      	uxtb	r5, r5
 8009d84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d86:	07da      	lsls	r2, r3, #31
 8009d88:	d405      	bmi.n	8009d96 <_putc_r+0x5e>
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	059b      	lsls	r3, r3, #22
 8009d8e:	d402      	bmi.n	8009d96 <_putc_r+0x5e>
 8009d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d92:	f7ff fb7a 	bl	800948a <__retarget_lock_release_recursive>
 8009d96:	4628      	mov	r0, r5
 8009d98:	bd70      	pop	{r4, r5, r6, pc}
 8009d9a:	4b09      	ldr	r3, [pc, #36]	; (8009dc0 <_putc_r+0x88>)
 8009d9c:	429c      	cmp	r4, r3
 8009d9e:	d101      	bne.n	8009da4 <_putc_r+0x6c>
 8009da0:	68b4      	ldr	r4, [r6, #8]
 8009da2:	e7d6      	b.n	8009d52 <_putc_r+0x1a>
 8009da4:	4b07      	ldr	r3, [pc, #28]	; (8009dc4 <_putc_r+0x8c>)
 8009da6:	429c      	cmp	r4, r3
 8009da8:	bf08      	it	eq
 8009daa:	68f4      	ldreq	r4, [r6, #12]
 8009dac:	e7d1      	b.n	8009d52 <_putc_r+0x1a>
 8009dae:	4629      	mov	r1, r5
 8009db0:	4622      	mov	r2, r4
 8009db2:	4630      	mov	r0, r6
 8009db4:	f000 f84c 	bl	8009e50 <__swbuf_r>
 8009db8:	4605      	mov	r5, r0
 8009dba:	e7e3      	b.n	8009d84 <_putc_r+0x4c>
 8009dbc:	0800a4a4 	.word	0x0800a4a4
 8009dc0:	0800a4c4 	.word	0x0800a4c4
 8009dc4:	0800a484 	.word	0x0800a484

08009dc8 <__sread>:
 8009dc8:	b510      	push	{r4, lr}
 8009dca:	460c      	mov	r4, r1
 8009dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd0:	f000 fa98 	bl	800a304 <_read_r>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	bfab      	itete	ge
 8009dd8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dda:	89a3      	ldrhlt	r3, [r4, #12]
 8009ddc:	181b      	addge	r3, r3, r0
 8009dde:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009de2:	bfac      	ite	ge
 8009de4:	6563      	strge	r3, [r4, #84]	; 0x54
 8009de6:	81a3      	strhlt	r3, [r4, #12]
 8009de8:	bd10      	pop	{r4, pc}

08009dea <__swrite>:
 8009dea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dee:	461f      	mov	r7, r3
 8009df0:	898b      	ldrh	r3, [r1, #12]
 8009df2:	05db      	lsls	r3, r3, #23
 8009df4:	4605      	mov	r5, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	4616      	mov	r6, r2
 8009dfa:	d505      	bpl.n	8009e08 <__swrite+0x1e>
 8009dfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e00:	2302      	movs	r3, #2
 8009e02:	2200      	movs	r2, #0
 8009e04:	f000 f9c8 	bl	800a198 <_lseek_r>
 8009e08:	89a3      	ldrh	r3, [r4, #12]
 8009e0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e12:	81a3      	strh	r3, [r4, #12]
 8009e14:	4632      	mov	r2, r6
 8009e16:	463b      	mov	r3, r7
 8009e18:	4628      	mov	r0, r5
 8009e1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e1e:	f000 b869 	b.w	8009ef4 <_write_r>

08009e22 <__sseek>:
 8009e22:	b510      	push	{r4, lr}
 8009e24:	460c      	mov	r4, r1
 8009e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e2a:	f000 f9b5 	bl	800a198 <_lseek_r>
 8009e2e:	1c43      	adds	r3, r0, #1
 8009e30:	89a3      	ldrh	r3, [r4, #12]
 8009e32:	bf15      	itete	ne
 8009e34:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e3e:	81a3      	strheq	r3, [r4, #12]
 8009e40:	bf18      	it	ne
 8009e42:	81a3      	strhne	r3, [r4, #12]
 8009e44:	bd10      	pop	{r4, pc}

08009e46 <__sclose>:
 8009e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e4a:	f000 b8d3 	b.w	8009ff4 <_close_r>
	...

08009e50 <__swbuf_r>:
 8009e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e52:	460e      	mov	r6, r1
 8009e54:	4614      	mov	r4, r2
 8009e56:	4605      	mov	r5, r0
 8009e58:	b118      	cbz	r0, 8009e62 <__swbuf_r+0x12>
 8009e5a:	6983      	ldr	r3, [r0, #24]
 8009e5c:	b90b      	cbnz	r3, 8009e62 <__swbuf_r+0x12>
 8009e5e:	f7ff fa75 	bl	800934c <__sinit>
 8009e62:	4b21      	ldr	r3, [pc, #132]	; (8009ee8 <__swbuf_r+0x98>)
 8009e64:	429c      	cmp	r4, r3
 8009e66:	d12b      	bne.n	8009ec0 <__swbuf_r+0x70>
 8009e68:	686c      	ldr	r4, [r5, #4]
 8009e6a:	69a3      	ldr	r3, [r4, #24]
 8009e6c:	60a3      	str	r3, [r4, #8]
 8009e6e:	89a3      	ldrh	r3, [r4, #12]
 8009e70:	071a      	lsls	r2, r3, #28
 8009e72:	d52f      	bpl.n	8009ed4 <__swbuf_r+0x84>
 8009e74:	6923      	ldr	r3, [r4, #16]
 8009e76:	b36b      	cbz	r3, 8009ed4 <__swbuf_r+0x84>
 8009e78:	6923      	ldr	r3, [r4, #16]
 8009e7a:	6820      	ldr	r0, [r4, #0]
 8009e7c:	1ac0      	subs	r0, r0, r3
 8009e7e:	6963      	ldr	r3, [r4, #20]
 8009e80:	b2f6      	uxtb	r6, r6
 8009e82:	4283      	cmp	r3, r0
 8009e84:	4637      	mov	r7, r6
 8009e86:	dc04      	bgt.n	8009e92 <__swbuf_r+0x42>
 8009e88:	4621      	mov	r1, r4
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	f000 f948 	bl	800a120 <_fflush_r>
 8009e90:	bb30      	cbnz	r0, 8009ee0 <__swbuf_r+0x90>
 8009e92:	68a3      	ldr	r3, [r4, #8]
 8009e94:	3b01      	subs	r3, #1
 8009e96:	60a3      	str	r3, [r4, #8]
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	6022      	str	r2, [r4, #0]
 8009e9e:	701e      	strb	r6, [r3, #0]
 8009ea0:	6963      	ldr	r3, [r4, #20]
 8009ea2:	3001      	adds	r0, #1
 8009ea4:	4283      	cmp	r3, r0
 8009ea6:	d004      	beq.n	8009eb2 <__swbuf_r+0x62>
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	07db      	lsls	r3, r3, #31
 8009eac:	d506      	bpl.n	8009ebc <__swbuf_r+0x6c>
 8009eae:	2e0a      	cmp	r6, #10
 8009eb0:	d104      	bne.n	8009ebc <__swbuf_r+0x6c>
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	f000 f933 	bl	800a120 <_fflush_r>
 8009eba:	b988      	cbnz	r0, 8009ee0 <__swbuf_r+0x90>
 8009ebc:	4638      	mov	r0, r7
 8009ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ec0:	4b0a      	ldr	r3, [pc, #40]	; (8009eec <__swbuf_r+0x9c>)
 8009ec2:	429c      	cmp	r4, r3
 8009ec4:	d101      	bne.n	8009eca <__swbuf_r+0x7a>
 8009ec6:	68ac      	ldr	r4, [r5, #8]
 8009ec8:	e7cf      	b.n	8009e6a <__swbuf_r+0x1a>
 8009eca:	4b09      	ldr	r3, [pc, #36]	; (8009ef0 <__swbuf_r+0xa0>)
 8009ecc:	429c      	cmp	r4, r3
 8009ece:	bf08      	it	eq
 8009ed0:	68ec      	ldreq	r4, [r5, #12]
 8009ed2:	e7ca      	b.n	8009e6a <__swbuf_r+0x1a>
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	4628      	mov	r0, r5
 8009ed8:	f000 f81e 	bl	8009f18 <__swsetup_r>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d0cb      	beq.n	8009e78 <__swbuf_r+0x28>
 8009ee0:	f04f 37ff 	mov.w	r7, #4294967295
 8009ee4:	e7ea      	b.n	8009ebc <__swbuf_r+0x6c>
 8009ee6:	bf00      	nop
 8009ee8:	0800a4a4 	.word	0x0800a4a4
 8009eec:	0800a4c4 	.word	0x0800a4c4
 8009ef0:	0800a484 	.word	0x0800a484

08009ef4 <_write_r>:
 8009ef4:	b538      	push	{r3, r4, r5, lr}
 8009ef6:	4d07      	ldr	r5, [pc, #28]	; (8009f14 <_write_r+0x20>)
 8009ef8:	4604      	mov	r4, r0
 8009efa:	4608      	mov	r0, r1
 8009efc:	4611      	mov	r1, r2
 8009efe:	2200      	movs	r2, #0
 8009f00:	602a      	str	r2, [r5, #0]
 8009f02:	461a      	mov	r2, r3
 8009f04:	f7f7 fffb 	bl	8001efe <_write>
 8009f08:	1c43      	adds	r3, r0, #1
 8009f0a:	d102      	bne.n	8009f12 <_write_r+0x1e>
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	b103      	cbz	r3, 8009f12 <_write_r+0x1e>
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	bd38      	pop	{r3, r4, r5, pc}
 8009f14:	20000e48 	.word	0x20000e48

08009f18 <__swsetup_r>:
 8009f18:	4b32      	ldr	r3, [pc, #200]	; (8009fe4 <__swsetup_r+0xcc>)
 8009f1a:	b570      	push	{r4, r5, r6, lr}
 8009f1c:	681d      	ldr	r5, [r3, #0]
 8009f1e:	4606      	mov	r6, r0
 8009f20:	460c      	mov	r4, r1
 8009f22:	b125      	cbz	r5, 8009f2e <__swsetup_r+0x16>
 8009f24:	69ab      	ldr	r3, [r5, #24]
 8009f26:	b913      	cbnz	r3, 8009f2e <__swsetup_r+0x16>
 8009f28:	4628      	mov	r0, r5
 8009f2a:	f7ff fa0f 	bl	800934c <__sinit>
 8009f2e:	4b2e      	ldr	r3, [pc, #184]	; (8009fe8 <__swsetup_r+0xd0>)
 8009f30:	429c      	cmp	r4, r3
 8009f32:	d10f      	bne.n	8009f54 <__swsetup_r+0x3c>
 8009f34:	686c      	ldr	r4, [r5, #4]
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f3c:	0719      	lsls	r1, r3, #28
 8009f3e:	d42c      	bmi.n	8009f9a <__swsetup_r+0x82>
 8009f40:	06dd      	lsls	r5, r3, #27
 8009f42:	d411      	bmi.n	8009f68 <__swsetup_r+0x50>
 8009f44:	2309      	movs	r3, #9
 8009f46:	6033      	str	r3, [r6, #0]
 8009f48:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f4c:	81a3      	strh	r3, [r4, #12]
 8009f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f52:	e03e      	b.n	8009fd2 <__swsetup_r+0xba>
 8009f54:	4b25      	ldr	r3, [pc, #148]	; (8009fec <__swsetup_r+0xd4>)
 8009f56:	429c      	cmp	r4, r3
 8009f58:	d101      	bne.n	8009f5e <__swsetup_r+0x46>
 8009f5a:	68ac      	ldr	r4, [r5, #8]
 8009f5c:	e7eb      	b.n	8009f36 <__swsetup_r+0x1e>
 8009f5e:	4b24      	ldr	r3, [pc, #144]	; (8009ff0 <__swsetup_r+0xd8>)
 8009f60:	429c      	cmp	r4, r3
 8009f62:	bf08      	it	eq
 8009f64:	68ec      	ldreq	r4, [r5, #12]
 8009f66:	e7e6      	b.n	8009f36 <__swsetup_r+0x1e>
 8009f68:	0758      	lsls	r0, r3, #29
 8009f6a:	d512      	bpl.n	8009f92 <__swsetup_r+0x7a>
 8009f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f6e:	b141      	cbz	r1, 8009f82 <__swsetup_r+0x6a>
 8009f70:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f74:	4299      	cmp	r1, r3
 8009f76:	d002      	beq.n	8009f7e <__swsetup_r+0x66>
 8009f78:	4630      	mov	r0, r6
 8009f7a:	f7ff f871 	bl	8009060 <_free_r>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	6363      	str	r3, [r4, #52]	; 0x34
 8009f82:	89a3      	ldrh	r3, [r4, #12]
 8009f84:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f88:	81a3      	strh	r3, [r4, #12]
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	6063      	str	r3, [r4, #4]
 8009f8e:	6923      	ldr	r3, [r4, #16]
 8009f90:	6023      	str	r3, [r4, #0]
 8009f92:	89a3      	ldrh	r3, [r4, #12]
 8009f94:	f043 0308 	orr.w	r3, r3, #8
 8009f98:	81a3      	strh	r3, [r4, #12]
 8009f9a:	6923      	ldr	r3, [r4, #16]
 8009f9c:	b94b      	cbnz	r3, 8009fb2 <__swsetup_r+0x9a>
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fa8:	d003      	beq.n	8009fb2 <__swsetup_r+0x9a>
 8009faa:	4621      	mov	r1, r4
 8009fac:	4630      	mov	r0, r6
 8009fae:	f000 f929 	bl	800a204 <__smakebuf_r>
 8009fb2:	89a0      	ldrh	r0, [r4, #12]
 8009fb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fb8:	f010 0301 	ands.w	r3, r0, #1
 8009fbc:	d00a      	beq.n	8009fd4 <__swsetup_r+0xbc>
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	60a3      	str	r3, [r4, #8]
 8009fc2:	6963      	ldr	r3, [r4, #20]
 8009fc4:	425b      	negs	r3, r3
 8009fc6:	61a3      	str	r3, [r4, #24]
 8009fc8:	6923      	ldr	r3, [r4, #16]
 8009fca:	b943      	cbnz	r3, 8009fde <__swsetup_r+0xc6>
 8009fcc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fd0:	d1ba      	bne.n	8009f48 <__swsetup_r+0x30>
 8009fd2:	bd70      	pop	{r4, r5, r6, pc}
 8009fd4:	0781      	lsls	r1, r0, #30
 8009fd6:	bf58      	it	pl
 8009fd8:	6963      	ldrpl	r3, [r4, #20]
 8009fda:	60a3      	str	r3, [r4, #8]
 8009fdc:	e7f4      	b.n	8009fc8 <__swsetup_r+0xb0>
 8009fde:	2000      	movs	r0, #0
 8009fe0:	e7f7      	b.n	8009fd2 <__swsetup_r+0xba>
 8009fe2:	bf00      	nop
 8009fe4:	20000188 	.word	0x20000188
 8009fe8:	0800a4a4 	.word	0x0800a4a4
 8009fec:	0800a4c4 	.word	0x0800a4c4
 8009ff0:	0800a484 	.word	0x0800a484

08009ff4 <_close_r>:
 8009ff4:	b538      	push	{r3, r4, r5, lr}
 8009ff6:	4d06      	ldr	r5, [pc, #24]	; (800a010 <_close_r+0x1c>)
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	4604      	mov	r4, r0
 8009ffc:	4608      	mov	r0, r1
 8009ffe:	602b      	str	r3, [r5, #0]
 800a000:	f7f7 ff99 	bl	8001f36 <_close>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	d102      	bne.n	800a00e <_close_r+0x1a>
 800a008:	682b      	ldr	r3, [r5, #0]
 800a00a:	b103      	cbz	r3, 800a00e <_close_r+0x1a>
 800a00c:	6023      	str	r3, [r4, #0]
 800a00e:	bd38      	pop	{r3, r4, r5, pc}
 800a010:	20000e48 	.word	0x20000e48

0800a014 <__sflush_r>:
 800a014:	898a      	ldrh	r2, [r1, #12]
 800a016:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a01a:	4605      	mov	r5, r0
 800a01c:	0710      	lsls	r0, r2, #28
 800a01e:	460c      	mov	r4, r1
 800a020:	d458      	bmi.n	800a0d4 <__sflush_r+0xc0>
 800a022:	684b      	ldr	r3, [r1, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	dc05      	bgt.n	800a034 <__sflush_r+0x20>
 800a028:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	dc02      	bgt.n	800a034 <__sflush_r+0x20>
 800a02e:	2000      	movs	r0, #0
 800a030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a034:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a036:	2e00      	cmp	r6, #0
 800a038:	d0f9      	beq.n	800a02e <__sflush_r+0x1a>
 800a03a:	2300      	movs	r3, #0
 800a03c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a040:	682f      	ldr	r7, [r5, #0]
 800a042:	602b      	str	r3, [r5, #0]
 800a044:	d032      	beq.n	800a0ac <__sflush_r+0x98>
 800a046:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a048:	89a3      	ldrh	r3, [r4, #12]
 800a04a:	075a      	lsls	r2, r3, #29
 800a04c:	d505      	bpl.n	800a05a <__sflush_r+0x46>
 800a04e:	6863      	ldr	r3, [r4, #4]
 800a050:	1ac0      	subs	r0, r0, r3
 800a052:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a054:	b10b      	cbz	r3, 800a05a <__sflush_r+0x46>
 800a056:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a058:	1ac0      	subs	r0, r0, r3
 800a05a:	2300      	movs	r3, #0
 800a05c:	4602      	mov	r2, r0
 800a05e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a060:	6a21      	ldr	r1, [r4, #32]
 800a062:	4628      	mov	r0, r5
 800a064:	47b0      	blx	r6
 800a066:	1c43      	adds	r3, r0, #1
 800a068:	89a3      	ldrh	r3, [r4, #12]
 800a06a:	d106      	bne.n	800a07a <__sflush_r+0x66>
 800a06c:	6829      	ldr	r1, [r5, #0]
 800a06e:	291d      	cmp	r1, #29
 800a070:	d82c      	bhi.n	800a0cc <__sflush_r+0xb8>
 800a072:	4a2a      	ldr	r2, [pc, #168]	; (800a11c <__sflush_r+0x108>)
 800a074:	40ca      	lsrs	r2, r1
 800a076:	07d6      	lsls	r6, r2, #31
 800a078:	d528      	bpl.n	800a0cc <__sflush_r+0xb8>
 800a07a:	2200      	movs	r2, #0
 800a07c:	6062      	str	r2, [r4, #4]
 800a07e:	04d9      	lsls	r1, r3, #19
 800a080:	6922      	ldr	r2, [r4, #16]
 800a082:	6022      	str	r2, [r4, #0]
 800a084:	d504      	bpl.n	800a090 <__sflush_r+0x7c>
 800a086:	1c42      	adds	r2, r0, #1
 800a088:	d101      	bne.n	800a08e <__sflush_r+0x7a>
 800a08a:	682b      	ldr	r3, [r5, #0]
 800a08c:	b903      	cbnz	r3, 800a090 <__sflush_r+0x7c>
 800a08e:	6560      	str	r0, [r4, #84]	; 0x54
 800a090:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a092:	602f      	str	r7, [r5, #0]
 800a094:	2900      	cmp	r1, #0
 800a096:	d0ca      	beq.n	800a02e <__sflush_r+0x1a>
 800a098:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a09c:	4299      	cmp	r1, r3
 800a09e:	d002      	beq.n	800a0a6 <__sflush_r+0x92>
 800a0a0:	4628      	mov	r0, r5
 800a0a2:	f7fe ffdd 	bl	8009060 <_free_r>
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	6360      	str	r0, [r4, #52]	; 0x34
 800a0aa:	e7c1      	b.n	800a030 <__sflush_r+0x1c>
 800a0ac:	6a21      	ldr	r1, [r4, #32]
 800a0ae:	2301      	movs	r3, #1
 800a0b0:	4628      	mov	r0, r5
 800a0b2:	47b0      	blx	r6
 800a0b4:	1c41      	adds	r1, r0, #1
 800a0b6:	d1c7      	bne.n	800a048 <__sflush_r+0x34>
 800a0b8:	682b      	ldr	r3, [r5, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d0c4      	beq.n	800a048 <__sflush_r+0x34>
 800a0be:	2b1d      	cmp	r3, #29
 800a0c0:	d001      	beq.n	800a0c6 <__sflush_r+0xb2>
 800a0c2:	2b16      	cmp	r3, #22
 800a0c4:	d101      	bne.n	800a0ca <__sflush_r+0xb6>
 800a0c6:	602f      	str	r7, [r5, #0]
 800a0c8:	e7b1      	b.n	800a02e <__sflush_r+0x1a>
 800a0ca:	89a3      	ldrh	r3, [r4, #12]
 800a0cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0d0:	81a3      	strh	r3, [r4, #12]
 800a0d2:	e7ad      	b.n	800a030 <__sflush_r+0x1c>
 800a0d4:	690f      	ldr	r7, [r1, #16]
 800a0d6:	2f00      	cmp	r7, #0
 800a0d8:	d0a9      	beq.n	800a02e <__sflush_r+0x1a>
 800a0da:	0793      	lsls	r3, r2, #30
 800a0dc:	680e      	ldr	r6, [r1, #0]
 800a0de:	bf08      	it	eq
 800a0e0:	694b      	ldreq	r3, [r1, #20]
 800a0e2:	600f      	str	r7, [r1, #0]
 800a0e4:	bf18      	it	ne
 800a0e6:	2300      	movne	r3, #0
 800a0e8:	eba6 0807 	sub.w	r8, r6, r7
 800a0ec:	608b      	str	r3, [r1, #8]
 800a0ee:	f1b8 0f00 	cmp.w	r8, #0
 800a0f2:	dd9c      	ble.n	800a02e <__sflush_r+0x1a>
 800a0f4:	6a21      	ldr	r1, [r4, #32]
 800a0f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0f8:	4643      	mov	r3, r8
 800a0fa:	463a      	mov	r2, r7
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	47b0      	blx	r6
 800a100:	2800      	cmp	r0, #0
 800a102:	dc06      	bgt.n	800a112 <__sflush_r+0xfe>
 800a104:	89a3      	ldrh	r3, [r4, #12]
 800a106:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a10a:	81a3      	strh	r3, [r4, #12]
 800a10c:	f04f 30ff 	mov.w	r0, #4294967295
 800a110:	e78e      	b.n	800a030 <__sflush_r+0x1c>
 800a112:	4407      	add	r7, r0
 800a114:	eba8 0800 	sub.w	r8, r8, r0
 800a118:	e7e9      	b.n	800a0ee <__sflush_r+0xda>
 800a11a:	bf00      	nop
 800a11c:	20400001 	.word	0x20400001

0800a120 <_fflush_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	690b      	ldr	r3, [r1, #16]
 800a124:	4605      	mov	r5, r0
 800a126:	460c      	mov	r4, r1
 800a128:	b913      	cbnz	r3, 800a130 <_fflush_r+0x10>
 800a12a:	2500      	movs	r5, #0
 800a12c:	4628      	mov	r0, r5
 800a12e:	bd38      	pop	{r3, r4, r5, pc}
 800a130:	b118      	cbz	r0, 800a13a <_fflush_r+0x1a>
 800a132:	6983      	ldr	r3, [r0, #24]
 800a134:	b90b      	cbnz	r3, 800a13a <_fflush_r+0x1a>
 800a136:	f7ff f909 	bl	800934c <__sinit>
 800a13a:	4b14      	ldr	r3, [pc, #80]	; (800a18c <_fflush_r+0x6c>)
 800a13c:	429c      	cmp	r4, r3
 800a13e:	d11b      	bne.n	800a178 <_fflush_r+0x58>
 800a140:	686c      	ldr	r4, [r5, #4]
 800a142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0ef      	beq.n	800a12a <_fflush_r+0xa>
 800a14a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a14c:	07d0      	lsls	r0, r2, #31
 800a14e:	d404      	bmi.n	800a15a <_fflush_r+0x3a>
 800a150:	0599      	lsls	r1, r3, #22
 800a152:	d402      	bmi.n	800a15a <_fflush_r+0x3a>
 800a154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a156:	f7ff f997 	bl	8009488 <__retarget_lock_acquire_recursive>
 800a15a:	4628      	mov	r0, r5
 800a15c:	4621      	mov	r1, r4
 800a15e:	f7ff ff59 	bl	800a014 <__sflush_r>
 800a162:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a164:	07da      	lsls	r2, r3, #31
 800a166:	4605      	mov	r5, r0
 800a168:	d4e0      	bmi.n	800a12c <_fflush_r+0xc>
 800a16a:	89a3      	ldrh	r3, [r4, #12]
 800a16c:	059b      	lsls	r3, r3, #22
 800a16e:	d4dd      	bmi.n	800a12c <_fflush_r+0xc>
 800a170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a172:	f7ff f98a 	bl	800948a <__retarget_lock_release_recursive>
 800a176:	e7d9      	b.n	800a12c <_fflush_r+0xc>
 800a178:	4b05      	ldr	r3, [pc, #20]	; (800a190 <_fflush_r+0x70>)
 800a17a:	429c      	cmp	r4, r3
 800a17c:	d101      	bne.n	800a182 <_fflush_r+0x62>
 800a17e:	68ac      	ldr	r4, [r5, #8]
 800a180:	e7df      	b.n	800a142 <_fflush_r+0x22>
 800a182:	4b04      	ldr	r3, [pc, #16]	; (800a194 <_fflush_r+0x74>)
 800a184:	429c      	cmp	r4, r3
 800a186:	bf08      	it	eq
 800a188:	68ec      	ldreq	r4, [r5, #12]
 800a18a:	e7da      	b.n	800a142 <_fflush_r+0x22>
 800a18c:	0800a4a4 	.word	0x0800a4a4
 800a190:	0800a4c4 	.word	0x0800a4c4
 800a194:	0800a484 	.word	0x0800a484

0800a198 <_lseek_r>:
 800a198:	b538      	push	{r3, r4, r5, lr}
 800a19a:	4d07      	ldr	r5, [pc, #28]	; (800a1b8 <_lseek_r+0x20>)
 800a19c:	4604      	mov	r4, r0
 800a19e:	4608      	mov	r0, r1
 800a1a0:	4611      	mov	r1, r2
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	602a      	str	r2, [r5, #0]
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	f7f7 feec 	bl	8001f84 <_lseek>
 800a1ac:	1c43      	adds	r3, r0, #1
 800a1ae:	d102      	bne.n	800a1b6 <_lseek_r+0x1e>
 800a1b0:	682b      	ldr	r3, [r5, #0]
 800a1b2:	b103      	cbz	r3, 800a1b6 <_lseek_r+0x1e>
 800a1b4:	6023      	str	r3, [r4, #0]
 800a1b6:	bd38      	pop	{r3, r4, r5, pc}
 800a1b8:	20000e48 	.word	0x20000e48

0800a1bc <__swhatbuf_r>:
 800a1bc:	b570      	push	{r4, r5, r6, lr}
 800a1be:	460e      	mov	r6, r1
 800a1c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1c4:	2900      	cmp	r1, #0
 800a1c6:	b096      	sub	sp, #88	; 0x58
 800a1c8:	4614      	mov	r4, r2
 800a1ca:	461d      	mov	r5, r3
 800a1cc:	da07      	bge.n	800a1de <__swhatbuf_r+0x22>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	602b      	str	r3, [r5, #0]
 800a1d2:	89b3      	ldrh	r3, [r6, #12]
 800a1d4:	061a      	lsls	r2, r3, #24
 800a1d6:	d410      	bmi.n	800a1fa <__swhatbuf_r+0x3e>
 800a1d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1dc:	e00e      	b.n	800a1fc <__swhatbuf_r+0x40>
 800a1de:	466a      	mov	r2, sp
 800a1e0:	f000 f8a2 	bl	800a328 <_fstat_r>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	dbf2      	blt.n	800a1ce <__swhatbuf_r+0x12>
 800a1e8:	9a01      	ldr	r2, [sp, #4]
 800a1ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1f2:	425a      	negs	r2, r3
 800a1f4:	415a      	adcs	r2, r3
 800a1f6:	602a      	str	r2, [r5, #0]
 800a1f8:	e7ee      	b.n	800a1d8 <__swhatbuf_r+0x1c>
 800a1fa:	2340      	movs	r3, #64	; 0x40
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	6023      	str	r3, [r4, #0]
 800a200:	b016      	add	sp, #88	; 0x58
 800a202:	bd70      	pop	{r4, r5, r6, pc}

0800a204 <__smakebuf_r>:
 800a204:	898b      	ldrh	r3, [r1, #12]
 800a206:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a208:	079d      	lsls	r5, r3, #30
 800a20a:	4606      	mov	r6, r0
 800a20c:	460c      	mov	r4, r1
 800a20e:	d507      	bpl.n	800a220 <__smakebuf_r+0x1c>
 800a210:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	6123      	str	r3, [r4, #16]
 800a218:	2301      	movs	r3, #1
 800a21a:	6163      	str	r3, [r4, #20]
 800a21c:	b002      	add	sp, #8
 800a21e:	bd70      	pop	{r4, r5, r6, pc}
 800a220:	ab01      	add	r3, sp, #4
 800a222:	466a      	mov	r2, sp
 800a224:	f7ff ffca 	bl	800a1bc <__swhatbuf_r>
 800a228:	9900      	ldr	r1, [sp, #0]
 800a22a:	4605      	mov	r5, r0
 800a22c:	4630      	mov	r0, r6
 800a22e:	f7fe ff67 	bl	8009100 <_malloc_r>
 800a232:	b948      	cbnz	r0, 800a248 <__smakebuf_r+0x44>
 800a234:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a238:	059a      	lsls	r2, r3, #22
 800a23a:	d4ef      	bmi.n	800a21c <__smakebuf_r+0x18>
 800a23c:	f023 0303 	bic.w	r3, r3, #3
 800a240:	f043 0302 	orr.w	r3, r3, #2
 800a244:	81a3      	strh	r3, [r4, #12]
 800a246:	e7e3      	b.n	800a210 <__smakebuf_r+0xc>
 800a248:	4b0d      	ldr	r3, [pc, #52]	; (800a280 <__smakebuf_r+0x7c>)
 800a24a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a24c:	89a3      	ldrh	r3, [r4, #12]
 800a24e:	6020      	str	r0, [r4, #0]
 800a250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a254:	81a3      	strh	r3, [r4, #12]
 800a256:	9b00      	ldr	r3, [sp, #0]
 800a258:	6163      	str	r3, [r4, #20]
 800a25a:	9b01      	ldr	r3, [sp, #4]
 800a25c:	6120      	str	r0, [r4, #16]
 800a25e:	b15b      	cbz	r3, 800a278 <__smakebuf_r+0x74>
 800a260:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a264:	4630      	mov	r0, r6
 800a266:	f000 f871 	bl	800a34c <_isatty_r>
 800a26a:	b128      	cbz	r0, 800a278 <__smakebuf_r+0x74>
 800a26c:	89a3      	ldrh	r3, [r4, #12]
 800a26e:	f023 0303 	bic.w	r3, r3, #3
 800a272:	f043 0301 	orr.w	r3, r3, #1
 800a276:	81a3      	strh	r3, [r4, #12]
 800a278:	89a0      	ldrh	r0, [r4, #12]
 800a27a:	4305      	orrs	r5, r0
 800a27c:	81a5      	strh	r5, [r4, #12]
 800a27e:	e7cd      	b.n	800a21c <__smakebuf_r+0x18>
 800a280:	080092e5 	.word	0x080092e5

0800a284 <memmove>:
 800a284:	4288      	cmp	r0, r1
 800a286:	b510      	push	{r4, lr}
 800a288:	eb01 0402 	add.w	r4, r1, r2
 800a28c:	d902      	bls.n	800a294 <memmove+0x10>
 800a28e:	4284      	cmp	r4, r0
 800a290:	4623      	mov	r3, r4
 800a292:	d807      	bhi.n	800a2a4 <memmove+0x20>
 800a294:	1e43      	subs	r3, r0, #1
 800a296:	42a1      	cmp	r1, r4
 800a298:	d008      	beq.n	800a2ac <memmove+0x28>
 800a29a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a29e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2a2:	e7f8      	b.n	800a296 <memmove+0x12>
 800a2a4:	4402      	add	r2, r0
 800a2a6:	4601      	mov	r1, r0
 800a2a8:	428a      	cmp	r2, r1
 800a2aa:	d100      	bne.n	800a2ae <memmove+0x2a>
 800a2ac:	bd10      	pop	{r4, pc}
 800a2ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2b6:	e7f7      	b.n	800a2a8 <memmove+0x24>

0800a2b8 <_realloc_r>:
 800a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ba:	4607      	mov	r7, r0
 800a2bc:	4614      	mov	r4, r2
 800a2be:	460e      	mov	r6, r1
 800a2c0:	b921      	cbnz	r1, 800a2cc <_realloc_r+0x14>
 800a2c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	f7fe bf1a 	b.w	8009100 <_malloc_r>
 800a2cc:	b922      	cbnz	r2, 800a2d8 <_realloc_r+0x20>
 800a2ce:	f7fe fec7 	bl	8009060 <_free_r>
 800a2d2:	4625      	mov	r5, r4
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2d8:	f000 f848 	bl	800a36c <_malloc_usable_size_r>
 800a2dc:	42a0      	cmp	r0, r4
 800a2de:	d20f      	bcs.n	800a300 <_realloc_r+0x48>
 800a2e0:	4621      	mov	r1, r4
 800a2e2:	4638      	mov	r0, r7
 800a2e4:	f7fe ff0c 	bl	8009100 <_malloc_r>
 800a2e8:	4605      	mov	r5, r0
 800a2ea:	2800      	cmp	r0, #0
 800a2ec:	d0f2      	beq.n	800a2d4 <_realloc_r+0x1c>
 800a2ee:	4631      	mov	r1, r6
 800a2f0:	4622      	mov	r2, r4
 800a2f2:	f7fe fe9f 	bl	8009034 <memcpy>
 800a2f6:	4631      	mov	r1, r6
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	f7fe feb1 	bl	8009060 <_free_r>
 800a2fe:	e7e9      	b.n	800a2d4 <_realloc_r+0x1c>
 800a300:	4635      	mov	r5, r6
 800a302:	e7e7      	b.n	800a2d4 <_realloc_r+0x1c>

0800a304 <_read_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	4d07      	ldr	r5, [pc, #28]	; (800a324 <_read_r+0x20>)
 800a308:	4604      	mov	r4, r0
 800a30a:	4608      	mov	r0, r1
 800a30c:	4611      	mov	r1, r2
 800a30e:	2200      	movs	r2, #0
 800a310:	602a      	str	r2, [r5, #0]
 800a312:	461a      	mov	r2, r3
 800a314:	f7f7 fdd6 	bl	8001ec4 <_read>
 800a318:	1c43      	adds	r3, r0, #1
 800a31a:	d102      	bne.n	800a322 <_read_r+0x1e>
 800a31c:	682b      	ldr	r3, [r5, #0]
 800a31e:	b103      	cbz	r3, 800a322 <_read_r+0x1e>
 800a320:	6023      	str	r3, [r4, #0]
 800a322:	bd38      	pop	{r3, r4, r5, pc}
 800a324:	20000e48 	.word	0x20000e48

0800a328 <_fstat_r>:
 800a328:	b538      	push	{r3, r4, r5, lr}
 800a32a:	4d07      	ldr	r5, [pc, #28]	; (800a348 <_fstat_r+0x20>)
 800a32c:	2300      	movs	r3, #0
 800a32e:	4604      	mov	r4, r0
 800a330:	4608      	mov	r0, r1
 800a332:	4611      	mov	r1, r2
 800a334:	602b      	str	r3, [r5, #0]
 800a336:	f7f7 fe0a 	bl	8001f4e <_fstat>
 800a33a:	1c43      	adds	r3, r0, #1
 800a33c:	d102      	bne.n	800a344 <_fstat_r+0x1c>
 800a33e:	682b      	ldr	r3, [r5, #0]
 800a340:	b103      	cbz	r3, 800a344 <_fstat_r+0x1c>
 800a342:	6023      	str	r3, [r4, #0]
 800a344:	bd38      	pop	{r3, r4, r5, pc}
 800a346:	bf00      	nop
 800a348:	20000e48 	.word	0x20000e48

0800a34c <_isatty_r>:
 800a34c:	b538      	push	{r3, r4, r5, lr}
 800a34e:	4d06      	ldr	r5, [pc, #24]	; (800a368 <_isatty_r+0x1c>)
 800a350:	2300      	movs	r3, #0
 800a352:	4604      	mov	r4, r0
 800a354:	4608      	mov	r0, r1
 800a356:	602b      	str	r3, [r5, #0]
 800a358:	f7f7 fe09 	bl	8001f6e <_isatty>
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	d102      	bne.n	800a366 <_isatty_r+0x1a>
 800a360:	682b      	ldr	r3, [r5, #0]
 800a362:	b103      	cbz	r3, 800a366 <_isatty_r+0x1a>
 800a364:	6023      	str	r3, [r4, #0]
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	20000e48 	.word	0x20000e48

0800a36c <_malloc_usable_size_r>:
 800a36c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a370:	1f18      	subs	r0, r3, #4
 800a372:	2b00      	cmp	r3, #0
 800a374:	bfbc      	itt	lt
 800a376:	580b      	ldrlt	r3, [r1, r0]
 800a378:	18c0      	addlt	r0, r0, r3
 800a37a:	4770      	bx	lr

0800a37c <_init>:
 800a37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37e:	bf00      	nop
 800a380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a382:	bc08      	pop	{r3}
 800a384:	469e      	mov	lr, r3
 800a386:	4770      	bx	lr

0800a388 <_fini>:
 800a388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a38a:	bf00      	nop
 800a38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a38e:	bc08      	pop	{r3}
 800a390:	469e      	mov	lr, r3
 800a392:	4770      	bx	lr

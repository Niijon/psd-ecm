
psd-ecm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800a378  0800a378  0001a378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4fc  0800a4fc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4fc  0800a4fc  0001a4fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a504  0800a504  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a504  0800a504  0001a504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a508  0800a508  0001a508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a50c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c60  200001ec  0800a6f8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  20000e4c  0800a6f8  00020e4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020acf  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042a0  00000000  00000000  00040ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  00044f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001240  00000000  00000000  00046398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000262d8  00000000  00000000  000475d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000177e2  00000000  00000000  0006d8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0193  00000000  00000000  00085092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155225  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf8  00000000  00000000  00155278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a360 	.word	0x0800a360

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800a360 	.word	0x0800a360

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800056c:	4b17      	ldr	r3, [pc, #92]	; (80005cc <MX_CAN1_Init+0x64>)
 800056e:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <MX_CAN1_Init+0x68>)
 8000570:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000572:	4b16      	ldr	r3, [pc, #88]	; (80005cc <MX_CAN1_Init+0x64>)
 8000574:	220a      	movs	r2, #10
 8000576:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000578:	4b14      	ldr	r3, [pc, #80]	; (80005cc <MX_CAN1_Init+0x64>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800057e:	4b13      	ldr	r3, [pc, #76]	; (80005cc <MX_CAN1_Init+0x64>)
 8000580:	2200      	movs	r2, #0
 8000582:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000584:	4b11      	ldr	r3, [pc, #68]	; (80005cc <MX_CAN1_Init+0x64>)
 8000586:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800058a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <MX_CAN1_Init+0x64>)
 800058e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000592:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000594:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <MX_CAN1_Init+0x64>)
 8000596:	2200      	movs	r2, #0
 8000598:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800059a:	4b0c      	ldr	r3, [pc, #48]	; (80005cc <MX_CAN1_Init+0x64>)
 800059c:	2200      	movs	r2, #0
 800059e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005a0:	4b0a      	ldr	r3, [pc, #40]	; (80005cc <MX_CAN1_Init+0x64>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_CAN1_Init+0x64>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005ac:	4b07      	ldr	r3, [pc, #28]	; (80005cc <MX_CAN1_Init+0x64>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_CAN1_Init+0x64>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <MX_CAN1_Init+0x64>)
 80005ba:	f001 fe3b 	bl	8002234 <HAL_CAN_Init>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005c4:	f001 fb12 	bl	8001bec <Error_Handler>
  }

}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	2000043c 	.word	0x2000043c
 80005d0:	40006400 	.word	0x40006400

080005d4 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0

  hcan2.Instance = CAN2;
 80005d8:	4b17      	ldr	r3, [pc, #92]	; (8000638 <MX_CAN2_Init+0x64>)
 80005da:	4a18      	ldr	r2, [pc, #96]	; (800063c <MX_CAN2_Init+0x68>)
 80005dc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 50;
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <MX_CAN2_Init+0x64>)
 80005e0:	2232      	movs	r2, #50	; 0x32
 80005e2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <MX_CAN2_Init+0x64>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005ea:	4b13      	ldr	r3, [pc, #76]	; (8000638 <MX_CAN2_Init+0x64>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_13TQ;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_CAN2_Init+0x64>)
 80005f2:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80005f6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	; (8000638 <MX_CAN2_Init+0x64>)
 80005fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005fe:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <MX_CAN2_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000606:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_CAN2_Init+0x64>)
 8000608:	2200      	movs	r2, #0
 800060a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <MX_CAN2_Init+0x64>)
 800060e:	2200      	movs	r2, #0
 8000610:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_CAN2_Init+0x64>)
 8000614:	2200      	movs	r2, #0
 8000616:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000618:	4b07      	ldr	r3, [pc, #28]	; (8000638 <MX_CAN2_Init+0x64>)
 800061a:	2200      	movs	r2, #0
 800061c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800061e:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_CAN2_Init+0x64>)
 8000620:	2200      	movs	r2, #0
 8000622:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000624:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_CAN2_Init+0x64>)
 8000626:	f001 fe05 	bl	8002234 <HAL_CAN_Init>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000630:	f001 fadc 	bl	8001bec <Error_Handler>
  }

}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200002f4 	.word	0x200002f4
 800063c:	40006800 	.word	0x40006800

08000640 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	; 0x30
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a5b      	ldr	r2, [pc, #364]	; (80007cc <HAL_CAN_MspInit+0x18c>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d14e      	bne.n	8000700 <HAL_CAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000662:	4b5b      	ldr	r3, [pc, #364]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	4a59      	ldr	r2, [pc, #356]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 800066a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800066c:	4b58      	ldr	r3, [pc, #352]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d10d      	bne.n	8000690 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	61bb      	str	r3, [r7, #24]
 8000678:	4b56      	ldr	r3, [pc, #344]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067c:	4a55      	ldr	r2, [pc, #340]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800067e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000682:	6413      	str	r3, [r2, #64]	; 0x40
 8000684:	4b53      	ldr	r3, [pc, #332]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800068c:	61bb      	str	r3, [r7, #24]
 800068e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
 8000694:	4b4f      	ldr	r3, [pc, #316]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000698:	4a4e      	ldr	r2, [pc, #312]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6313      	str	r3, [r2, #48]	; 0x30
 80006a0:	4b4c      	ldr	r3, [pc, #304]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 80006a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80006ac:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80006b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006ba:	2303      	movs	r3, #3
 80006bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80006be:	2309      	movs	r3, #9
 80006c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	4843      	ldr	r0, [pc, #268]	; (80007d8 <HAL_CAN_MspInit+0x198>)
 80006ca:	f002 fd67 	bl	800319c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	2013      	movs	r0, #19
 80006d4:	f002 fd2b 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80006d8:	2013      	movs	r0, #19
 80006da:	f002 fd44 	bl	8003166 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 3, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2103      	movs	r1, #3
 80006e2:	2014      	movs	r0, #20
 80006e4:	f002 fd23 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80006e8:	2014      	movs	r0, #20
 80006ea:	f002 fd3c 	bl	8003166 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 3, 0);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2103      	movs	r1, #3
 80006f2:	2015      	movs	r0, #21
 80006f4:	f002 fd1b 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80006f8:	2015      	movs	r0, #21
 80006fa:	f002 fd34 	bl	8003166 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80006fe:	e060      	b.n	80007c2 <HAL_CAN_MspInit+0x182>
  else if(canHandle->Instance==CAN2)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a35      	ldr	r2, [pc, #212]	; (80007dc <HAL_CAN_MspInit+0x19c>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d15b      	bne.n	80007c2 <HAL_CAN_MspInit+0x182>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	4b31      	ldr	r3, [pc, #196]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	4a30      	ldr	r2, [pc, #192]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000714:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000718:	6413      	str	r3, [r2, #64]	; 0x40
 800071a:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	3301      	adds	r3, #1
 800072c:	4a28      	ldr	r2, [pc, #160]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 800072e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <HAL_CAN_MspInit+0x190>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2b01      	cmp	r3, #1
 8000736:	d10d      	bne.n	8000754 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a24      	ldr	r2, [pc, #144]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	4a1d      	ldr	r2, [pc, #116]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 800075e:	f043 0302 	orr.w	r3, r3, #2
 8000762:	6313      	str	r3, [r2, #48]	; 0x30
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <HAL_CAN_MspInit+0x194>)
 8000766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000768:	f003 0302 	and.w	r3, r3, #2
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000770:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000774:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077e:	2303      	movs	r3, #3
 8000780:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000782:	2309      	movs	r3, #9
 8000784:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	4814      	ldr	r0, [pc, #80]	; (80007e0 <HAL_CAN_MspInit+0x1a0>)
 800078e:	f002 fd05 	bl	800319c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 2, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	2102      	movs	r1, #2
 8000796:	203f      	movs	r0, #63	; 0x3f
 8000798:	f002 fcc9 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800079c:	203f      	movs	r0, #63	; 0x3f
 800079e:	f002 fce2 	bl	8003166 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	2040      	movs	r0, #64	; 0x40
 80007a8:	f002 fcc1 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80007ac:	2040      	movs	r0, #64	; 0x40
 80007ae:	f002 fcda 	bl	8003166 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	2041      	movs	r0, #65	; 0x41
 80007b8:	f002 fcb9 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80007bc:	2041      	movs	r0, #65	; 0x41
 80007be:	f002 fcd2 	bl	8003166 <HAL_NVIC_EnableIRQ>
}
 80007c2:	bf00      	nop
 80007c4:	3730      	adds	r7, #48	; 0x30
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40006400 	.word	0x40006400
 80007d0:	20000208 	.word	0x20000208
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020000 	.word	0x40020000
 80007dc:	40006800 	.word	0x40006800
 80007e0:	40020400 	.word	0x40020400

080007e4 <CanInit>:
/**
 * @brief: Initialize CAN network
 * @param chosen_network
 *
 **/
void CanInit(CAN_HandleTypeDef chosen_network) {
 80007e4:	b084      	sub	sp, #16
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	f107 0c08 	add.w	ip, r7, #8
 80007ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (HAL_CAN_Start(&chosen_network) != HAL_OK) {
 80007f2:	f107 0008 	add.w	r0, r7, #8
 80007f6:	f001 fef9 	bl	80025ec <HAL_CAN_Start>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <CanInit+0x20>
		Error_Handler();
 8000800:	f001 f9f4 	bl	8001bec <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&chosen_network,
 8000804:	2103      	movs	r1, #3
 8000806:	f107 0008 	add.w	r0, r7, #8
 800080a:	f002 f955 	bl	8002ab8 <HAL_CAN_ActivateNotification>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <CanInit+0x34>
	CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK) {
		Error_Handler();
 8000814:	f001 f9ea 	bl	8001bec <Error_Handler>
	}
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000820:	b004      	add	sp, #16
 8000822:	4770      	bx	lr

08000824 <CanSaveReceivedData>:
		Error_Handler();
	}
	CanClearRxDataFrame(ptr_can_rx_frame_template);
}

CanDataFrameInit CanSaveReceivedData(CAN_HandleTypeDef chosen_network, CanDataFrameInit *ptr_can_rx_frame_template) {
 8000824:	b084      	sub	sp, #16
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	f107 0014 	add.w	r0, r7, #20
 8000832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (HAL_CAN_GetRxMessage(&chosen_network, CAN_RX_FIFO0, &ptr_can_rx_frame_template->rx_header,
 8000836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000838:	f103 0220 	add.w	r2, r3, #32
			ptr_can_rx_frame_template->rx_data) != HAL_OK) {
 800083c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800083e:	333c      	adds	r3, #60	; 0x3c
	if (HAL_CAN_GetRxMessage(&chosen_network, CAN_RX_FIFO0, &ptr_can_rx_frame_template->rx_header,
 8000840:	f107 0014 	add.w	r0, r7, #20
 8000844:	2100      	movs	r1, #0
 8000846:	f002 f825 	bl	8002894 <HAL_CAN_GetRxMessage>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <CanSaveReceivedData+0x30>
		/* Reception Error */
		Error_Handler();
 8000850:	f001 f9cc 	bl	8001bec <Error_Handler>
	}
	return *ptr_can_rx_frame_template;
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000858:	4610      	mov	r0, r2
 800085a:	4619      	mov	r1, r3
 800085c:	2344      	movs	r3, #68	; 0x44
 800085e:	461a      	mov	r2, r3
 8000860:	f008 fbda 	bl	8009018 <memcpy>
}
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800086e:	b004      	add	sp, #16
 8000870:	4770      	bx	lr
	...

08000874 <CanConfigFilter>:
 * @param can_filter_id_low: Low byte of CAN ID to be received
 * @param can_filter_mask_id_high: High byte of CAN ID mask - IDs to be received
 * @param can_filter_mask_id_low: Low byte of CAN ID mask - IDs to be received
 *
 **/
void CanConfigFilter(CAN_HandleTypeDef chosen_network, uint8_t can_filter_bank){
 8000874:	b084      	sub	sp, #16
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
 800087a:	f107 0c08 	add.w	ip, r7, #8
 800087e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	can_filter_template.FilterBank = can_filter_bank;
 8000882:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000886:	4a16      	ldr	r2, [pc, #88]	; (80008e0 <CanConfigFilter+0x6c>)
 8000888:	6153      	str	r3, [r2, #20]
	can_filter_template.FilterMode = CAN_FILTERMODE_IDMASK;
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <CanConfigFilter+0x6c>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
	can_filter_template.FilterScale = CAN_FILTERSCALE_32BIT;
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <CanConfigFilter+0x6c>)
 8000892:	2201      	movs	r2, #1
 8000894:	61da      	str	r2, [r3, #28]
	can_filter_template.FilterIdHigh = 0x0000;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <CanConfigFilter+0x6c>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
	can_filter_template.FilterIdLow = 0x0000;
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <CanConfigFilter+0x6c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
	can_filter_template.FilterMaskIdHigh = 0x0000;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <CanConfigFilter+0x6c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
	can_filter_template.FilterMaskIdLow = 0x0000;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <CanConfigFilter+0x6c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
	can_filter_template.FilterFIFOAssignment = CAN_RX_FIFO0;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <CanConfigFilter+0x6c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
	can_filter_template.FilterActivation = ENABLE;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <CanConfigFilter+0x6c>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	621a      	str	r2, [r3, #32]
	can_filter_template.SlaveStartFilterBank = 14;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <CanConfigFilter+0x6c>)
 80008bc:	220e      	movs	r2, #14
 80008be:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&chosen_network, &can_filter_template) != HAL_OK) {
 80008c0:	4907      	ldr	r1, [pc, #28]	; (80008e0 <CanConfigFilter+0x6c>)
 80008c2:	f107 0008 	add.w	r0, r7, #8
 80008c6:	f001 fdb1 	bl	800242c <HAL_CAN_ConfigFilter>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <CanConfigFilter+0x60>
		Error_Handler();
 80008d0:	f001 f98c 	bl	8001bec <Error_Handler>
	}

}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008dc:	b004      	add	sp, #16
 80008de:	4770      	bx	lr
 80008e0:	20000390 	.word	0x20000390

080008e4 <CanSendNmt>:
 * @param node_id: chosen node to receive the order
 * @param ptr_can_frame_template: pointer to a structure with basic can frame parameteres
 *
 */
void CanSendNmt(CAN_HandleTypeDef chosen_network, uint8_t state,
		uint8_t node_id, CanDataFrameInit *ptr_can_frame_template) {
 80008e4:	b084      	sub	sp, #16
 80008e6:	b580      	push	{r7, lr}
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	f107 0c08 	add.w	ip, r7, #8
 80008ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ptr_can_frame_template->tx_header.StdId = 0x000;
 80008f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008f4:	2200      	movs	r2, #0
 80008f6:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 80008f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 80008fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000900:	2200      	movs	r2, #0
 8000902:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = 2;
 8000904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000906:	2202      	movs	r2, #2
 8000908:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 800090a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800090c:	2200      	movs	r2, #0
 800090e:	771a      	strb	r2, [r3, #28]

	ptr_can_frame_template->tx_data[0] = state;
 8000910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000912:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000916:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = node_id;
 8000918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800091a:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 800091e:	705a      	strb	r2, [r3, #1]

	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000922:	f103 0108 	add.w	r1, r3, #8
			&ptr_can_frame_template->tx_header, ptr_can_frame_template->tx_data,
 8000926:	6bba      	ldr	r2, [r7, #56]	; 0x38
	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <CanSendNmt+0x78>)
 800092a:	f107 0008 	add.w	r0, r7, #8
 800092e:	f001 fea1 	bl	8002674 <HAL_CAN_AddTxMessage>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <CanSendNmt+0x58>
			&can_tx_mailbox) != HAL_OK) {
		Error_Handler();
 8000938:	f001 f958 	bl	8001bec <Error_Handler>
	}
	while (HAL_CAN_GetTxMailboxesFreeLevel(&chosen_network) != 3) {
 800093c:	bf00      	nop
 800093e:	f107 0008 	add.w	r0, r7, #8
 8000942:	f001 ff72 	bl	800282a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000946:	4603      	mov	r3, r0
 8000948:	2b03      	cmp	r3, #3
 800094a:	d1f8      	bne.n	800093e <CanSendNmt+0x5a>
	}
}
 800094c:	bf00      	nop
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000956:	b004      	add	sp, #16
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	2000021c 	.word	0x2000021c

08000960 <CanSendPdo>:
}

void CanSendPdo(CAN_HandleTypeDef chosen_network, uint32_t frame_pdo_id,
		uint8_t number_of_bytes, CanDataFrameInit *ptr_can_frame_template,
		uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3,
		uint8_t byte4, uint8_t byte5, uint8_t byte6, uint8_t byte7) {
 8000960:	b084      	sub	sp, #16
 8000962:	b580      	push	{r7, lr}
 8000964:	af00      	add	r7, sp, #0
 8000966:	f107 0c08 	add.w	ip, r7, #8
 800096a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ptr_can_frame_template->tx_header.StdId = frame_pdo_id;
 800096e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000972:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 8000974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 800097a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = number_of_bytes;
 8000980:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8000984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000986:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 8000988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800098a:	2200      	movs	r2, #0
 800098c:	771a      	strb	r2, [r3, #28]
	ptr_can_frame_template->tx_data[0] = byte0;
 800098e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000990:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000994:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = byte1;
 8000996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000998:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800099c:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = byte2;
 800099e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009a0:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80009a4:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = byte3;
 80009a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009a8:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 80009ac:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = byte4;
 80009ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009b0:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80009b4:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = byte5;
 80009b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009b8:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80009bc:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = byte6;
 80009be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009c0:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80009c4:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = byte7;
 80009c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009c8:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80009cc:	71da      	strb	r2, [r3, #7]

	if (HAL_CAN_AddTxMessage(&chosen_network,
 80009ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80009d0:	f103 0108 	add.w	r1, r3, #8
			&ptr_can_frame_template->tx_header, ptr_can_frame_template->tx_data,
 80009d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
	if (HAL_CAN_AddTxMessage(&chosen_network,
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <CanSendPdo+0xa8>)
 80009d8:	f107 0008 	add.w	r0, r7, #8
 80009dc:	f001 fe4a 	bl	8002674 <HAL_CAN_AddTxMessage>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <CanSendPdo+0x8a>
			&can_tx_mailbox) != HAL_OK) {
		Error_Handler();
 80009e6:	f001 f901 	bl	8001bec <Error_Handler>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&chosen_network) != 3) {
 80009ea:	bf00      	nop
 80009ec:	f107 0008 	add.w	r0, r7, #8
 80009f0:	f001 ff1b 	bl	800282a <HAL_CAN_GetTxMailboxesFreeLevel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b03      	cmp	r3, #3
 80009f8:	d1f8      	bne.n	80009ec <CanSendPdo+0x8c>
	}
}
 80009fa:	bf00      	nop
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a04:	b004      	add	sp, #16
 8000a06:	4770      	bx	lr
 8000a08:	2000021c 	.word	0x2000021c

08000a0c <CanSendSdo>:
 *
 **/
void CanSendSdo(CAN_HandleTypeDef chosen_network, uint32_t frame_sdo_id,
		CanDataFrameInit *ptr_can_frame_template, uint8_t number_of_bytes,
		uint8_t command_byte, uint8_t byte0, uint8_t byte1, uint8_t byte2,
		uint8_t byte3, uint8_t byte4, uint8_t byte5, uint8_t byte6) {
 8000a0c:	b084      	sub	sp, #16
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	f107 0c08 	add.w	ip, r7, #8
 8000a16:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ptr_can_frame_template->tx_header.StdId = frame_sdo_id;
 8000a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a1e:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 8000a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a22:	2200      	movs	r2, #0
 8000a24:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	2200      	movs	r2, #0
 8000a2a:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = number_of_bytes;
 8000a2c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a32:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 8000a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a36:	2200      	movs	r2, #0
 8000a38:	771a      	strb	r2, [r3, #28]
	ptr_can_frame_template->tx_data[0] = command_byte;
 8000a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a3c:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000a40:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = byte0;
 8000a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a44:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000a48:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = byte1;
 8000a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a4c:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000a50:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = byte2;
 8000a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a54:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8000a58:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = byte3;
 8000a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a5c:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000a60:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = byte4;
 8000a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a64:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000a68:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = byte5;
 8000a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a6c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8000a70:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = byte6;
 8000a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a74:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8000a78:	71da      	strb	r2, [r3, #7]

	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a7c:	f103 0108 	add.w	r1, r3, #8
			&ptr_can_frame_template->tx_header, ptr_can_frame_template->tx_data,
 8000a80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <CanSendSdo+0xa8>)
 8000a84:	f107 0008 	add.w	r0, r7, #8
 8000a88:	f001 fdf4 	bl	8002674 <HAL_CAN_AddTxMessage>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <CanSendSdo+0x8a>
			&can_tx_mailbox) != HAL_OK) {
		Error_Handler();
 8000a92:	f001 f8ab 	bl	8001bec <Error_Handler>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&chosen_network) != 3) {
 8000a96:	bf00      	nop
 8000a98:	f107 0008 	add.w	r0, r7, #8
 8000a9c:	f001 fec5 	bl	800282a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d1f8      	bne.n	8000a98 <CanSendSdo+0x8c>
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	bf00      	nop
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ab0:	b004      	add	sp, #16
 8000ab2:	4770      	bx	lr
 8000ab4:	2000021c 	.word	0x2000021c

08000ab8 <StopCanCommunication>:
			&can_frame_template);
	HAL_Delay(1);
}

void StopCanCommunication()
{
 8000ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aba:	b08b      	sub	sp, #44	; 0x2c
 8000abc:	af0a      	add	r7, sp, #40	; 0x28
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, bms.node_id,
 8000abe:	4b62      	ldr	r3, [pc, #392]	; (8000c48 <StopCanCommunication+0x190>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	4e62      	ldr	r6, [pc, #392]	; (8000c4c <StopCanCommunication+0x194>)
 8000ac4:	4a62      	ldr	r2, [pc, #392]	; (8000c50 <StopCanCommunication+0x198>)
 8000ac6:	9208      	str	r2, [sp, #32]
 8000ac8:	9307      	str	r3, [sp, #28]
 8000aca:	2302      	movs	r3, #2
 8000acc:	9306      	str	r3, [sp, #24]
 8000ace:	466d      	mov	r5, sp
 8000ad0:	f106 0410 	add.w	r4, r6, #16
 8000ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ad8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000adc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ae0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ae4:	f7ff fefe 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f001 fb7f 	bl	80021ec <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, inverter_1.node_id,
 8000aee:	4b59      	ldr	r3, [pc, #356]	; (8000c54 <StopCanCommunication+0x19c>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	4e56      	ldr	r6, [pc, #344]	; (8000c4c <StopCanCommunication+0x194>)
 8000af4:	4a56      	ldr	r2, [pc, #344]	; (8000c50 <StopCanCommunication+0x198>)
 8000af6:	9208      	str	r2, [sp, #32]
 8000af8:	9307      	str	r3, [sp, #28]
 8000afa:	2302      	movs	r3, #2
 8000afc:	9306      	str	r3, [sp, #24]
 8000afe:	466d      	mov	r5, sp
 8000b00:	f106 0410 	add.w	r4, r6, #16
 8000b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b10:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b14:	f7ff fee6 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f001 fb67 	bl	80021ec <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, inverter_2.node_id,
 8000b1e:	4b4e      	ldr	r3, [pc, #312]	; (8000c58 <StopCanCommunication+0x1a0>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4e4a      	ldr	r6, [pc, #296]	; (8000c4c <StopCanCommunication+0x194>)
 8000b24:	4a4a      	ldr	r2, [pc, #296]	; (8000c50 <StopCanCommunication+0x198>)
 8000b26:	9208      	str	r2, [sp, #32]
 8000b28:	9307      	str	r3, [sp, #28]
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	9306      	str	r3, [sp, #24]
 8000b2e:	466d      	mov	r5, sp
 8000b30:	f106 0410 	add.w	r4, r6, #16
 8000b34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b40:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b44:	f7ff fece 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f001 fb4f 	bl	80021ec <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, mppt_1.node_id,
 8000b4e:	4b43      	ldr	r3, [pc, #268]	; (8000c5c <StopCanCommunication+0x1a4>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	4e3e      	ldr	r6, [pc, #248]	; (8000c4c <StopCanCommunication+0x194>)
 8000b54:	4a3e      	ldr	r2, [pc, #248]	; (8000c50 <StopCanCommunication+0x198>)
 8000b56:	9208      	str	r2, [sp, #32]
 8000b58:	9307      	str	r3, [sp, #28]
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	9306      	str	r3, [sp, #24]
 8000b5e:	466d      	mov	r5, sp
 8000b60:	f106 0410 	add.w	r4, r6, #16
 8000b64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000b70:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b74:	f7ff feb6 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f001 fb37 	bl	80021ec <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, mppt_2.node_id,
 8000b7e:	4b38      	ldr	r3, [pc, #224]	; (8000c60 <StopCanCommunication+0x1a8>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	4e32      	ldr	r6, [pc, #200]	; (8000c4c <StopCanCommunication+0x194>)
 8000b84:	4a32      	ldr	r2, [pc, #200]	; (8000c50 <StopCanCommunication+0x198>)
 8000b86:	9208      	str	r2, [sp, #32]
 8000b88:	9307      	str	r3, [sp, #28]
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	9306      	str	r3, [sp, #24]
 8000b8e:	466d      	mov	r5, sp
 8000b90:	f106 0410 	add.w	r4, r6, #16
 8000b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000b9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ba0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ba4:	f7ff fe9e 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f001 fb1f 	bl	80021ec <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, mppt_3.node_id,
 8000bae:	4b2d      	ldr	r3, [pc, #180]	; (8000c64 <StopCanCommunication+0x1ac>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	4e26      	ldr	r6, [pc, #152]	; (8000c4c <StopCanCommunication+0x194>)
 8000bb4:	4a26      	ldr	r2, [pc, #152]	; (8000c50 <StopCanCommunication+0x198>)
 8000bb6:	9208      	str	r2, [sp, #32]
 8000bb8:	9307      	str	r3, [sp, #28]
 8000bba:	2302      	movs	r3, #2
 8000bbc:	9306      	str	r3, [sp, #24]
 8000bbe:	466d      	mov	r5, sp
 8000bc0:	f106 0410 	add.w	r4, r6, #16
 8000bc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bc8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bcc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bd0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000bd4:	f7ff fe86 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f001 fb07 	bl	80021ec <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, lights_controller.node_id,
 8000bde:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <StopCanCommunication+0x1b0>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	4e1a      	ldr	r6, [pc, #104]	; (8000c4c <StopCanCommunication+0x194>)
 8000be4:	4a1a      	ldr	r2, [pc, #104]	; (8000c50 <StopCanCommunication+0x198>)
 8000be6:	9208      	str	r2, [sp, #32]
 8000be8:	9307      	str	r3, [sp, #28]
 8000bea:	2302      	movs	r3, #2
 8000bec:	9306      	str	r3, [sp, #24]
 8000bee:	466d      	mov	r5, sp
 8000bf0:	f106 0410 	add.w	r4, r6, #16
 8000bf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000bfc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c00:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c04:	f7ff fe6e 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f001 faef 	bl	80021ec <HAL_Delay>
	CanSendNmt(CAN_HIGH_SPEED, STOPPED_STATE, dashboard.node_id,
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <StopCanCommunication+0x1b4>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	4e0e      	ldr	r6, [pc, #56]	; (8000c4c <StopCanCommunication+0x194>)
 8000c14:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <StopCanCommunication+0x198>)
 8000c16:	9208      	str	r2, [sp, #32]
 8000c18:	9307      	str	r3, [sp, #28]
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	9306      	str	r3, [sp, #24]
 8000c1e:	466d      	mov	r5, sp
 8000c20:	f106 0410 	add.w	r4, r6, #16
 8000c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c30:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000c34:	f7ff fe56 	bl	80008e4 <CanSendNmt>
			&can_frame_template);
	HAL_Delay(1);
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f001 fad7 	bl	80021ec <HAL_Delay>
}
 8000c3e:	bf00      	nop
 8000c40:	3704      	adds	r7, #4
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c46:	bf00      	nop
 8000c48:	200002d4 	.word	0x200002d4
 8000c4c:	2000043c 	.word	0x2000043c
 8000c50:	20000274 	.word	0x20000274
 8000c54:	20000354 	.word	0x20000354
 8000c58:	20000420 	.word	0x20000420
 8000c5c:	20000258 	.word	0x20000258
 8000c60:	20000404 	.word	0x20000404
 8000c64:	2000031c 	.word	0x2000031c
 8000c68:	200002b8 	.word	0x200002b8
 8000c6c:	20000338 	.word	0x20000338

08000c70 <CanClearTxDataFrame>:
 * @brief: data sent over usb is not correctly shown when structure is not cleared
 *         after every message sent. Assigning zeros has no influence on the network
 * @param ptr_can_frame_template: chosen structure which helds all the data
 *
 **/
void CanClearTxDataFrame(CanDataFrameInit *ptr_can_frame_template) {
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	ptr_can_frame_template->tx_header.StdId = 0x00;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_STD;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = 0;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	771a      	strb	r2, [r3, #28]

	ptr_can_frame_template->tx_data[0] = 0x0;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = 0x0;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = 0x0;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = 0x0;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = 0x0;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = 0x0;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = 0x0;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = 0x0;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	71da      	strb	r2, [r3, #7]
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <CanClearRxDataFrame>:


void CanClearRxDataFrame(CanDataFrameInit *ptr_can_frame_template) {
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
	ptr_can_frame_template->rx_header.StdId = 0x00;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
	ptr_can_frame_template->rx_header.ExtId = 0x00;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
	ptr_can_frame_template->rx_header.RTR = CAN_RTR_DATA;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	62da      	str	r2, [r3, #44]	; 0x2c
	ptr_can_frame_template->rx_header.IDE = CAN_ID_STD;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	629a      	str	r2, [r3, #40]	; 0x28
	ptr_can_frame_template->rx_header.DLC = 0;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	631a      	str	r2, [r3, #48]	; 0x30

	ptr_can_frame_template->rx_data[0] = 0x0;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	ptr_can_frame_template->rx_data[1] = 0x0;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2200      	movs	r2, #0
 8000d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	ptr_can_frame_template->rx_data[2] = 0x0;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	ptr_can_frame_template->rx_data[3] = 0x0;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2200      	movs	r2, #0
 8000d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	ptr_can_frame_template->rx_data[4] = 0x0;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	ptr_can_frame_template->rx_data[5] = 0x0;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	ptr_can_frame_template->rx_data[6] = 0x0;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	ptr_can_frame_template->rx_data[7] = 0x0;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2200      	movs	r2, #0
 8000d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <CanSendExtendedIdMessage>:

void CanSendExtendedIdMessage(CAN_HandleTypeDef chosen_network,
		CanDataFrameInit *ptr_can_frame_template, uint32_t FrameId, uint8_t DLC,
		uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3,
		uint8_t byte4, uint8_t byte5, uint8_t byte6, uint8_t byte7)
{
 8000d44:	b084      	sub	sp, #16
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	f107 0c08 	add.w	ip, r7, #8
 8000d4e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	ptr_can_frame_template->tx_header.ExtId = FrameId;
 8000d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d56:	60da      	str	r2, [r3, #12]
	ptr_can_frame_template->tx_header.RTR = CAN_RTR_DATA;
 8000d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
	ptr_can_frame_template->tx_header.IDE = CAN_ID_EXT;
 8000d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d60:	2204      	movs	r2, #4
 8000d62:	611a      	str	r2, [r3, #16]
	ptr_can_frame_template->tx_header.DLC = DLC;
 8000d64:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8000d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6a:	619a      	str	r2, [r3, #24]
	ptr_can_frame_template->tx_header.TransmitGlobalTime = DISABLE;
 8000d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d6e:	2200      	movs	r2, #0
 8000d70:	771a      	strb	r2, [r3, #28]
	ptr_can_frame_template->tx_data[0] = byte0;
 8000d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d74:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8000d78:	701a      	strb	r2, [r3, #0]
	ptr_can_frame_template->tx_data[1] = byte1;
 8000d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d7c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8000d80:	705a      	strb	r2, [r3, #1]
	ptr_can_frame_template->tx_data[2] = byte2;
 8000d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d84:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000d88:	709a      	strb	r2, [r3, #2]
	ptr_can_frame_template->tx_data[3] = byte3;
 8000d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8000d90:	70da      	strb	r2, [r3, #3]
	ptr_can_frame_template->tx_data[4] = byte4;
 8000d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d94:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8000d98:	711a      	strb	r2, [r3, #4]
	ptr_can_frame_template->tx_data[5] = byte5;
 8000d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d9c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8000da0:	715a      	strb	r2, [r3, #5]
	ptr_can_frame_template->tx_data[6] = byte6;
 8000da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000da4:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8000da8:	719a      	strb	r2, [r3, #6]
	ptr_can_frame_template->tx_data[7] = byte7;
 8000daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dac:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8000db0:	71da      	strb	r2, [r3, #7]

	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000db4:	f103 0108 	add.w	r1, r3, #8
		&ptr_can_frame_template->tx_header, ptr_can_frame_template->tx_data,
 8000db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
	if (HAL_CAN_AddTxMessage(&chosen_network,
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <CanSendExtendedIdMessage+0xa8>)
 8000dbc:	f107 0008 	add.w	r0, r7, #8
 8000dc0:	f001 fc58 	bl	8002674 <HAL_CAN_AddTxMessage>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <CanSendExtendedIdMessage+0x8a>
		&can_tx_mailbox) != HAL_OK) {
	Error_Handler();
 8000dca:	f000 ff0f 	bl	8001bec <Error_Handler>
	}

	while (HAL_CAN_GetTxMailboxesFreeLevel(&chosen_network) != 3) {
 8000dce:	bf00      	nop
 8000dd0:	f107 0008 	add.w	r0, r7, #8
 8000dd4:	f001 fd29 	bl	800282a <HAL_CAN_GetTxMailboxesFreeLevel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d1f8      	bne.n	8000dd0 <CanSendExtendedIdMessage+0x8c>
	}
}
 8000dde:	bf00      	nop
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000de8:	b004      	add	sp, #16
 8000dea:	4770      	bx	lr
 8000dec:	2000021c 	.word	0x2000021c

08000df0 <testMath>:

/*My math mini library BEGIN*/
void testMath(int to_test)
{
 8000df0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000df2:	b095      	sub	sp, #84	; 0x54
 8000df4:	af12      	add	r7, sp, #72	; 0x48
 8000df6:	6078      	str	r0, [r7, #4]
	if(to_test == 3000){
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d123      	bne.n	8000e4a <testMath+0x5a>
		CanSendPdo(hcan1, 0x69, 2, &can_frame_template, 6, 9, 0, 0, 0, 0, 0, 0);
 8000e02:	4e14      	ldr	r6, [pc, #80]	; (8000e54 <testMath+0x64>)
 8000e04:	2300      	movs	r3, #0
 8000e06:	9310      	str	r3, [sp, #64]	; 0x40
 8000e08:	2300      	movs	r3, #0
 8000e0a:	930f      	str	r3, [sp, #60]	; 0x3c
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	930e      	str	r3, [sp, #56]	; 0x38
 8000e10:	2300      	movs	r3, #0
 8000e12:	930d      	str	r3, [sp, #52]	; 0x34
 8000e14:	2300      	movs	r3, #0
 8000e16:	930c      	str	r3, [sp, #48]	; 0x30
 8000e18:	2300      	movs	r3, #0
 8000e1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8000e1c:	2309      	movs	r3, #9
 8000e1e:	930a      	str	r3, [sp, #40]	; 0x28
 8000e20:	2306      	movs	r3, #6
 8000e22:	9309      	str	r3, [sp, #36]	; 0x24
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <testMath+0x68>)
 8000e26:	9308      	str	r3, [sp, #32]
 8000e28:	2302      	movs	r3, #2
 8000e2a:	9307      	str	r3, [sp, #28]
 8000e2c:	2369      	movs	r3, #105	; 0x69
 8000e2e:	9306      	str	r3, [sp, #24]
 8000e30:	466d      	mov	r5, sp
 8000e32:	f106 0410 	add.w	r4, r6, #16
 8000e36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000e42:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000e46:	f7ff fd8b 	bl	8000960 <CanSendPdo>
	}
}
 8000e4a:	bf00      	nop
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2000043c 	.word	0x2000043c
 8000e58:	20000274 	.word	0x20000274

08000e5c <unParse2Bytes>:

int unParse2Bytes(uint8_t lowerByte, uint8_t higherByte)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	460a      	mov	r2, r1
 8000e66:	71fb      	strb	r3, [r7, #7]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	71bb      	strb	r3, [r7, #6]
	int cas = ((int)lowerByte + (int)higherByte * byteMaxValue);
 8000e6c:	79fa      	ldrb	r2, [r7, #7]
 8000e6e:	79bb      	ldrb	r3, [r7, #6]
 8000e70:	021b      	lsls	r3, r3, #8
 8000e72:	4413      	add	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
	return cas;
 8000e76:	68fb      	ldr	r3, [r7, #12]
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3714      	adds	r7, #20
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <ReverseManagement>:
	}
}


void ReverseManagement(CanDataFrameInit *canFrame)
{
 8000e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e86:	b095      	sub	sp, #84	; 0x54
 8000e88:	af12      	add	r7, sp, #72	; 0x48
 8000e8a:	6078      	str	r0, [r7, #4]
	if(canFrame->rx_header.StdId == 0x90)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	2b90      	cmp	r3, #144	; 0x90
 8000e92:	d15d      	bne.n	8000f50 <ReverseManagement+0xcc>
	{
		if(canFrame->rx_data[0] == 0x4)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	d125      	bne.n	8000eea <ReverseManagement+0x66>
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	; (8000f58 <ReverseManagement+0xd4>)
 8000ea0:	691b      	ldr	r3, [r3, #16]
 8000ea2:	4e2e      	ldr	r6, [pc, #184]	; (8000f5c <ReverseManagement+0xd8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	9210      	str	r2, [sp, #64]	; 0x40
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	920f      	str	r2, [sp, #60]	; 0x3c
 8000eac:	2200      	movs	r2, #0
 8000eae:	920e      	str	r2, [sp, #56]	; 0x38
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	920d      	str	r2, [sp, #52]	; 0x34
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	920c      	str	r2, [sp, #48]	; 0x30
 8000eb8:	2201      	movs	r2, #1
 8000eba:	920b      	str	r2, [sp, #44]	; 0x2c
 8000ebc:	2204      	movs	r2, #4
 8000ebe:	920a      	str	r2, [sp, #40]	; 0x28
 8000ec0:	2240      	movs	r2, #64	; 0x40
 8000ec2:	9209      	str	r2, [sp, #36]	; 0x24
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	9208      	str	r2, [sp, #32]
 8000ec8:	4a25      	ldr	r2, [pc, #148]	; (8000f60 <ReverseManagement+0xdc>)
 8000eca:	9207      	str	r2, [sp, #28]
 8000ecc:	9306      	str	r3, [sp, #24]
 8000ece:	466d      	mov	r5, sp
 8000ed0:	f106 0410 	add.w	r4, r6, #16
 8000ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ed8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000edc:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ee0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ee4:	f7ff fd92 	bl	8000a0c <CanSendSdo>
		else if(canFrame->rx_data[0] == 0x0)
		{
			error = true;
		}
	}
}
 8000ee8:	e032      	b.n	8000f50 <ReverseManagement+0xcc>
		else if (canFrame->rx_data[0] == 0x3)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d125      	bne.n	8000f40 <ReverseManagement+0xbc>
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <ReverseManagement+0xd4>)
 8000ef6:	691b      	ldr	r3, [r3, #16]
 8000ef8:	4e18      	ldr	r6, [pc, #96]	; (8000f5c <ReverseManagement+0xd8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	9210      	str	r2, [sp, #64]	; 0x40
 8000efe:	2200      	movs	r2, #0
 8000f00:	920f      	str	r2, [sp, #60]	; 0x3c
 8000f02:	2200      	movs	r2, #0
 8000f04:	920e      	str	r2, [sp, #56]	; 0x38
 8000f06:	2200      	movs	r2, #0
 8000f08:	920d      	str	r2, [sp, #52]	; 0x34
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	920c      	str	r2, [sp, #48]	; 0x30
 8000f0e:	2200      	movs	r2, #0
 8000f10:	920b      	str	r2, [sp, #44]	; 0x2c
 8000f12:	2204      	movs	r2, #4
 8000f14:	920a      	str	r2, [sp, #40]	; 0x28
 8000f16:	2240      	movs	r2, #64	; 0x40
 8000f18:	9209      	str	r2, [sp, #36]	; 0x24
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	9208      	str	r2, [sp, #32]
 8000f1e:	4a10      	ldr	r2, [pc, #64]	; (8000f60 <ReverseManagement+0xdc>)
 8000f20:	9207      	str	r2, [sp, #28]
 8000f22:	9306      	str	r3, [sp, #24]
 8000f24:	466d      	mov	r5, sp
 8000f26:	f106 0410 	add.w	r4, r6, #16
 8000f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f2e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f32:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f36:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000f3a:	f7ff fd67 	bl	8000a0c <CanSendSdo>
}
 8000f3e:	e007      	b.n	8000f50 <ReverseManagement+0xcc>
		else if(canFrame->rx_data[0] == 0x0)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <ReverseManagement+0xcc>
			error = true;
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <ReverseManagement+0xe0>)
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f58:	200002b8 	.word	0x200002b8
 8000f5c:	200002f4 	.word	0x200002f4
 8000f60:	20000274 	.word	0x20000274
 8000f64:	20000400 	.word	0x20000400

08000f68 <BMSWarningHandler>:

void BMSWarningHandler(CanDataFrameInit *canFrame)
{
 8000f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f6a:	b095      	sub	sp, #84	; 0x54
 8000f6c:	af12      	add	r7, sp, #72	; 0x48
 8000f6e:	6078      	str	r0, [r7, #4]
	if(canFrame->rx_header.StdId == 0x86)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	2b86      	cmp	r3, #134	; 0x86
 8000f76:	d144      	bne.n	8001002 <BMSWarningHandler+0x9a>
	{
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
				0x01 & canFrame->rx_data[0],
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	b2db      	uxtb	r3, r3
				(0x02 & canFrame->rx_data[0]) >> 1,
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8000f8a:	0852      	lsrs	r2, r2, #1
 8000f8c:	b2d2      	uxtb	r2, r2
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
 8000f8e:	f002 0201 	and.w	r2, r2, #1
 8000f92:	b2d2      	uxtb	r2, r2
				(0x04 & canFrame->rx_data[0]) >> 2,
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	f891 103c 	ldrb.w	r1, [r1, #60]	; 0x3c
 8000f9a:	0889      	lsrs	r1, r1, #2
 8000f9c:	b2c9      	uxtb	r1, r1
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
 8000f9e:	f001 0101 	and.w	r1, r1, #1
 8000fa2:	b2c9      	uxtb	r1, r1
				(0x08 & canFrame->rx_data[0]) >> 3,
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8000faa:	08c0      	lsrs	r0, r0, #3
 8000fac:	b2c0      	uxtb	r0, r0
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
 8000fae:	f000 0001 	and.w	r0, r0, #1
 8000fb2:	b2c0      	uxtb	r0, r0
				(0x10 & canFrame->rx_data[0]) >> 4,
 8000fb4:	687c      	ldr	r4, [r7, #4]
 8000fb6:	f894 403c 	ldrb.w	r4, [r4, #60]	; 0x3c
 8000fba:	0924      	lsrs	r4, r4, #4
 8000fbc:	b2e4      	uxtb	r4, r4
		CanSendPdo(hcan1, 0x87, 8, &can_frame_template,
 8000fbe:	f004 0401 	and.w	r4, r4, #1
 8000fc2:	b2e4      	uxtb	r4, r4
 8000fc4:	4e11      	ldr	r6, [pc, #68]	; (800100c <BMSWarningHandler+0xa4>)
 8000fc6:	2500      	movs	r5, #0
 8000fc8:	9510      	str	r5, [sp, #64]	; 0x40
 8000fca:	2500      	movs	r5, #0
 8000fcc:	950f      	str	r5, [sp, #60]	; 0x3c
 8000fce:	2500      	movs	r5, #0
 8000fd0:	950e      	str	r5, [sp, #56]	; 0x38
 8000fd2:	940d      	str	r4, [sp, #52]	; 0x34
 8000fd4:	900c      	str	r0, [sp, #48]	; 0x30
 8000fd6:	910b      	str	r1, [sp, #44]	; 0x2c
 8000fd8:	920a      	str	r2, [sp, #40]	; 0x28
 8000fda:	9309      	str	r3, [sp, #36]	; 0x24
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <BMSWarningHandler+0xa8>)
 8000fde:	9308      	str	r3, [sp, #32]
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	9307      	str	r3, [sp, #28]
 8000fe4:	2387      	movs	r3, #135	; 0x87
 8000fe6:	9306      	str	r3, [sp, #24]
 8000fe8:	466d      	mov	r5, sp
 8000fea:	f106 0410 	add.w	r4, r6, #16
 8000fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ff0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ff2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000ff6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000ffa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ffe:	f7ff fcaf 	bl	8000960 <CanSendPdo>
				0, 0, 0);
	}
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800100a:	bf00      	nop
 800100c:	2000043c 	.word	0x2000043c
 8001010:	20000274 	.word	0x20000274

08001014 <ActUponCurrentAndVoltage>:

}

/*CHARGING ACTIONS BEGIN*/
void ActUponCurrentAndVoltage(CanDataFrameInit *canFrame, int maxVoltage, int maxCurrent)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
	int voltage = unParse2Bytes(canFrame->rx_data[1], canFrame->rx_data[0]);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800102c:	4619      	mov	r1, r3
 800102e:	4610      	mov	r0, r2
 8001030:	f7ff ff14 	bl	8000e5c <unParse2Bytes>
 8001034:	6178      	str	r0, [r7, #20]
	int current = unParse2Bytes(canFrame->rx_data[3], canFrame->rx_data[2]);
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001042:	4619      	mov	r1, r3
 8001044:	4610      	mov	r0, r2
 8001046:	f7ff ff09 	bl	8000e5c <unParse2Bytes>
 800104a:	6138      	str	r0, [r7, #16]
	testMath(voltage);
 800104c:	6978      	ldr	r0, [r7, #20]
 800104e:	f7ff fecf 	bl	8000df0 <testMath>
	error = ( (voltage>maxVoltage) || (current>maxCurrent) );
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	429a      	cmp	r2, r3
 8001058:	dc03      	bgt.n	8001062 <ActUponCurrentAndVoltage+0x4e>
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	429a      	cmp	r2, r3
 8001060:	dd01      	ble.n	8001066 <ActUponCurrentAndVoltage+0x52>
 8001062:	2301      	movs	r3, #1
 8001064:	e000      	b.n	8001068 <ActUponCurrentAndVoltage+0x54>
 8001066:	2300      	movs	r3, #0
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b03      	ldr	r3, [pc, #12]	; (800107c <ActUponCurrentAndVoltage+0x68>)
 8001070:	701a      	strb	r2, [r3, #0]
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000400 	.word	0x20000400

08001080 <CatchChargingErrorOccuring>:

void CatchChargingErrorOccuring(CanDataFrameInit *canFrame)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	error = ( canFrame->rx_data[4] != 0 );
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf14      	ite	ne
 8001092:	2301      	movne	r3, #1
 8001094:	2300      	moveq	r3, #0
 8001096:	b2da      	uxtb	r2, r3
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <CatchChargingErrorOccuring+0x28>)
 800109a:	701a      	strb	r2, [r3, #0]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	20000400 	.word	0x20000400

080010ac <CatchErrorOccuring>:
/*CHARGING ACTIONS END*/

/*DRIVING ACTIONS BEGIN*/
void CatchErrorOccuring(CanDataFrameInit *canFrame)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	/* BMS Errors handling */
	if( (canFrame->rx_header.StdId == 0x85) )
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a1b      	ldr	r3, [r3, #32]
 80010b8:	2b85      	cmp	r3, #133	; 0x85
 80010ba:	d104      	bne.n	80010c6 <CatchErrorOccuring+0x1a>
	{
		error = true;
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <CatchErrorOccuring+0x24>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
		StopCanCommunication();
 80010c2:	f7ff fcf9 	bl	8000ab8 <StopCanCommunication>
	}
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000400 	.word	0x20000400

080010d4 <WarningHandler>:

void WarningHandler(CanDataFrameInit *canFrame)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	if(canFrame->rx_header.StdId == 0x55)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	2b55      	cmp	r3, #85	; 0x55
 80010e2:	d109      	bne.n	80010f8 <WarningHandler+0x24>
	{
		SendErrorFrame(canFrame->rx_data[1], canFrame->rx_data[2]);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80010f0:	4619      	mov	r1, r3
 80010f2:	4610      	mov	r0, r2
 80010f4:	f000 f804 	bl	8001100 <SendErrorFrame>
	}
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <SendErrorFrame>:

void SendErrorFrame(uint8_t highCondition, uint8_t lowCondition)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af06      	add	r7, sp, #24
 8001106:	4603      	mov	r3, r0
 8001108:	460a      	mov	r2, r1
 800110a:	71fb      	strb	r3, [r7, #7]
 800110c:	4613      	mov	r3, r2
 800110e:	71bb      	strb	r3, [r7, #6]
	if( (highCondition >= 0x01) && (lowCondition>=0xD0) )
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d013      	beq.n	800113e <SendErrorFrame+0x3e>
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	2bcf      	cmp	r3, #207	; 0xcf
 800111a:	d910      	bls.n	800113e <SendErrorFrame+0x3e>
	{
		UsbTransferDataByte(0x56, 0x01, 0x0, 0, 0, 0, 0, 0, 0);
 800111c:	2300      	movs	r3, #0
 800111e:	9304      	str	r3, [sp, #16]
 8001120:	2300      	movs	r3, #0
 8001122:	9303      	str	r3, [sp, #12]
 8001124:	2300      	movs	r3, #0
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	2300      	movs	r3, #0
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	2300      	movs	r3, #0
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2300      	movs	r3, #0
 8001132:	2200      	movs	r2, #0
 8001134:	2101      	movs	r1, #1
 8001136:	2056      	movs	r0, #86	; 0x56
 8001138:	f007 fae6 	bl	8008708 <UsbTransferDataByte>
 800113c:	e010      	b.n	8001160 <SendErrorFrame+0x60>
	}
	else
	{
		UsbTransferDataByte(0x56, 0x0, 0x0, 0, 0, 0, 0, 0, 0);
 800113e:	2300      	movs	r3, #0
 8001140:	9304      	str	r3, [sp, #16]
 8001142:	2300      	movs	r3, #0
 8001144:	9303      	str	r3, [sp, #12]
 8001146:	2300      	movs	r3, #0
 8001148:	9302      	str	r3, [sp, #8]
 800114a:	2300      	movs	r3, #0
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	2300      	movs	r3, #0
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	2300      	movs	r3, #0
 8001154:	2200      	movs	r2, #0
 8001156:	2100      	movs	r1, #0
 8001158:	2056      	movs	r0, #86	; 0x56
 800115a:	f007 fad5 	bl	8008708 <UsbTransferDataByte>
	}
}
 800115e:	bf00      	nop
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <CanopenObjectDictInit>:
  ******************************************************************************
  */

#include <canopen_object_dict.h>

void CanopenObjectDictInit() {
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
	dashboard.node_id = 0x70;
 800116c:	4b47      	ldr	r3, [pc, #284]	; (800128c <CanopenObjectDictInit+0x124>)
 800116e:	2270      	movs	r2, #112	; 0x70
 8001170:	701a      	strb	r2, [r3, #0]
	dashboard.sdo_download_id = 0x581;		// Channel with ecm
 8001172:	4b46      	ldr	r3, [pc, #280]	; (800128c <CanopenObjectDictInit+0x124>)
 8001174:	f240 5281 	movw	r2, #1409	; 0x581
 8001178:	60da      	str	r2, [r3, #12]
	dashboard.emcy_id = 0xF0;
 800117a:	4b44      	ldr	r3, [pc, #272]	; (800128c <CanopenObjectDictInit+0x124>)
 800117c:	22f0      	movs	r2, #240	; 0xf0
 800117e:	761a      	strb	r2, [r3, #24]

	inverter_1.node_id = 0x10;
 8001180:	4b43      	ldr	r3, [pc, #268]	; (8001290 <CanopenObjectDictInit+0x128>)
 8001182:	2210      	movs	r2, #16
 8001184:	701a      	strb	r2, [r3, #0]
	inverter_1.pdo_producer_id = 0x290;	// 0x290 - 0x296 Channel with ecm
 8001186:	4b42      	ldr	r3, [pc, #264]	; (8001290 <CanopenObjectDictInit+0x128>)
 8001188:	f44f 7224 	mov.w	r2, #656	; 0x290
 800118c:	615a      	str	r2, [r3, #20]
	inverter_1.emcy_id = 0x90;
 800118e:	4b40      	ldr	r3, [pc, #256]	; (8001290 <CanopenObjectDictInit+0x128>)
 8001190:	2290      	movs	r2, #144	; 0x90
 8001192:	761a      	strb	r2, [r3, #24]

	inverter_2.node_id = 0x15;
 8001194:	4b3f      	ldr	r3, [pc, #252]	; (8001294 <CanopenObjectDictInit+0x12c>)
 8001196:	2215      	movs	r2, #21
 8001198:	701a      	strb	r2, [r3, #0]
	inverter_2.pdo_producer_id = 0x395;	// 0x395 - 0x401 Channel with ecm
 800119a:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <CanopenObjectDictInit+0x12c>)
 800119c:	f240 3295 	movw	r2, #917	; 0x395
 80011a0:	615a      	str	r2, [r3, #20]
	inverter_2.emcy_id = 0x95;
 80011a2:	4b3c      	ldr	r3, [pc, #240]	; (8001294 <CanopenObjectDictInit+0x12c>)
 80011a4:	2295      	movs	r2, #149	; 0x95
 80011a6:	761a      	strb	r2, [r3, #24]

	mppt_1.node_id = 0x33;
 80011a8:	4b3b      	ldr	r3, [pc, #236]	; (8001298 <CanopenObjectDictInit+0x130>)
 80011aa:	2233      	movs	r2, #51	; 0x33
 80011ac:	701a      	strb	r2, [r3, #0]
	mppt_1.sdo_upload_id = 0x633;		// Channel with ecm
 80011ae:	4b3a      	ldr	r3, [pc, #232]	; (8001298 <CanopenObjectDictInit+0x130>)
 80011b0:	f240 6233 	movw	r2, #1587	; 0x633
 80011b4:	609a      	str	r2, [r3, #8]
	mppt_1.sdo_download_id = 0x5B3;
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <CanopenObjectDictInit+0x130>)
 80011b8:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80011bc:	60da      	str	r2, [r3, #12]
	mppt_1.emcy_id = 0xB3;
 80011be:	4b36      	ldr	r3, [pc, #216]	; (8001298 <CanopenObjectDictInit+0x130>)
 80011c0:	22b3      	movs	r2, #179	; 0xb3
 80011c2:	761a      	strb	r2, [r3, #24]
	mppt_1.index = 0xAAAB;
 80011c4:	4b34      	ldr	r3, [pc, #208]	; (8001298 <CanopenObjectDictInit+0x130>)
 80011c6:	f64a 22ab 	movw	r2, #43691	; 0xaaab
 80011ca:	805a      	strh	r2, [r3, #2]
	mppt_1.subindex_1 = 0x01;
 80011cc:	4b32      	ldr	r3, [pc, #200]	; (8001298 <CanopenObjectDictInit+0x130>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	711a      	strb	r2, [r3, #4]
	mppt_1.subindex_2 = 0x02;
 80011d2:	4b31      	ldr	r3, [pc, #196]	; (8001298 <CanopenObjectDictInit+0x130>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	715a      	strb	r2, [r3, #5]
	mppt_1.subindex_3 = 0x03;			// 0x01 - 0x03
 80011d8:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <CanopenObjectDictInit+0x130>)
 80011da:	2203      	movs	r2, #3
 80011dc:	719a      	strb	r2, [r3, #6]

	mppt_2.node_id = 0x36;
 80011de:	4b2f      	ldr	r3, [pc, #188]	; (800129c <CanopenObjectDictInit+0x134>)
 80011e0:	2236      	movs	r2, #54	; 0x36
 80011e2:	701a      	strb	r2, [r3, #0]
	mppt_2.sdo_upload_id = 0x636;		// Channel with ecm
 80011e4:	4b2d      	ldr	r3, [pc, #180]	; (800129c <CanopenObjectDictInit+0x134>)
 80011e6:	f240 6236 	movw	r2, #1590	; 0x636
 80011ea:	609a      	str	r2, [r3, #8]
	mppt_2.sdo_download_id = 0x5B6;
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <CanopenObjectDictInit+0x134>)
 80011ee:	f240 52b6 	movw	r2, #1462	; 0x5b6
 80011f2:	60da      	str	r2, [r3, #12]
	mppt_2.emcy_id = 0xB6;
 80011f4:	4b29      	ldr	r3, [pc, #164]	; (800129c <CanopenObjectDictInit+0x134>)
 80011f6:	22b6      	movs	r2, #182	; 0xb6
 80011f8:	761a      	strb	r2, [r3, #24]
	mppt_2.index = 0xAAAA;
 80011fa:	4b28      	ldr	r3, [pc, #160]	; (800129c <CanopenObjectDictInit+0x134>)
 80011fc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001200:	805a      	strh	r2, [r3, #2]
	mppt_2.subindex_1 = 0x01;
 8001202:	4b26      	ldr	r3, [pc, #152]	; (800129c <CanopenObjectDictInit+0x134>)
 8001204:	2201      	movs	r2, #1
 8001206:	711a      	strb	r2, [r3, #4]
	mppt_2.subindex_2 = 0x02;
 8001208:	4b24      	ldr	r3, [pc, #144]	; (800129c <CanopenObjectDictInit+0x134>)
 800120a:	2202      	movs	r2, #2
 800120c:	715a      	strb	r2, [r3, #5]
	mppt_2.subindex_3 = 0x03;			// 0x01 - 0x03
 800120e:	4b23      	ldr	r3, [pc, #140]	; (800129c <CanopenObjectDictInit+0x134>)
 8001210:	2203      	movs	r2, #3
 8001212:	719a      	strb	r2, [r3, #6]

	mppt_3.node_id = 0x39;
 8001214:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <CanopenObjectDictInit+0x138>)
 8001216:	2239      	movs	r2, #57	; 0x39
 8001218:	701a      	strb	r2, [r3, #0]
	mppt_3.sdo_upload_id = 0x639;		// Channel with ecm
 800121a:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <CanopenObjectDictInit+0x138>)
 800121c:	f240 6239 	movw	r2, #1593	; 0x639
 8001220:	609a      	str	r2, [r3, #8]
	mppt_3.sdo_download_id = 0x5B9;
 8001222:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <CanopenObjectDictInit+0x138>)
 8001224:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8001228:	60da      	str	r2, [r3, #12]
	mppt_3.emcy_id = 0xB9;
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <CanopenObjectDictInit+0x138>)
 800122c:	22b9      	movs	r2, #185	; 0xb9
 800122e:	761a      	strb	r2, [r3, #24]
	mppt_3.index = 0xAAAA;
 8001230:	4b1b      	ldr	r3, [pc, #108]	; (80012a0 <CanopenObjectDictInit+0x138>)
 8001232:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8001236:	805a      	strh	r2, [r3, #2]
	mppt_3.subindex_1 = 0x01;
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <CanopenObjectDictInit+0x138>)
 800123a:	2201      	movs	r2, #1
 800123c:	711a      	strb	r2, [r3, #4]
	mppt_3.subindex_2 = 0x02;
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <CanopenObjectDictInit+0x138>)
 8001240:	2202      	movs	r2, #2
 8001242:	715a      	strb	r2, [r3, #5]
	mppt_3.subindex_3 = 0x03; 			// 0x01 - 0x03
 8001244:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <CanopenObjectDictInit+0x138>)
 8001246:	2203      	movs	r2, #3
 8001248:	719a      	strb	r2, [r3, #6]

	ecm.node_id = 0x01;
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <CanopenObjectDictInit+0x13c>)
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
	ecm.sdo_upload_id = 0x581;
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <CanopenObjectDictInit+0x13c>)
 8001252:	f240 5281 	movw	r2, #1409	; 0x581
 8001256:	609a      	str	r2, [r3, #8]
	ecm.emcy_id = 0x81;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <CanopenObjectDictInit+0x13c>)
 800125a:	2281      	movs	r2, #129	; 0x81
 800125c:	761a      	strb	r2, [r3, #24]

	bms.node_id = 0x05;
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <CanopenObjectDictInit+0x140>)
 8001260:	2205      	movs	r2, #5
 8001262:	701a      	strb	r2, [r3, #0]
	bms.pdo_producer_id = 0x185;			// 0x185 - 0x196
 8001264:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <CanopenObjectDictInit+0x140>)
 8001266:	f240 1285 	movw	r2, #389	; 0x185
 800126a:	615a      	str	r2, [r3, #20]
	bms.emcy_id = 0x85;
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <CanopenObjectDictInit+0x140>)
 800126e:	2285      	movs	r2, #133	; 0x85
 8001270:	761a      	strb	r2, [r3, #24]

	lights_controller.node_id = 0x50;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <CanopenObjectDictInit+0x144>)
 8001274:	2250      	movs	r2, #80	; 0x50
 8001276:	701a      	strb	r2, [r3, #0]
	lights_controller.pdo_consumer_id = 0x581;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <CanopenObjectDictInit+0x144>)
 800127a:	f240 5281 	movw	r2, #1409	; 0x581
 800127e:	611a      	str	r2, [r3, #16]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000338 	.word	0x20000338
 8001290:	20000354 	.word	0x20000354
 8001294:	20000420 	.word	0x20000420
 8001298:	20000258 	.word	0x20000258
 800129c:	20000404 	.word	0x20000404
 80012a0:	2000031c 	.word	0x2000031c
 80012a4:	20000220 	.word	0x20000220
 80012a8:	200002d4 	.word	0x200002d4
 80012ac:	200002b8 	.word	0x200002b8

080012b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	4b79      	ldr	r3, [pc, #484]	; (80014b0 <MX_GPIO_Init+0x200>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a78      	ldr	r2, [pc, #480]	; (80014b0 <MX_GPIO_Init+0x200>)
 80012d0:	f043 0310 	orr.w	r3, r3, #16
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b76      	ldr	r3, [pc, #472]	; (80014b0 <MX_GPIO_Init+0x200>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	4b72      	ldr	r3, [pc, #456]	; (80014b0 <MX_GPIO_Init+0x200>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a71      	ldr	r2, [pc, #452]	; (80014b0 <MX_GPIO_Init+0x200>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b6f      	ldr	r3, [pc, #444]	; (80014b0 <MX_GPIO_Init+0x200>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	4b6b      	ldr	r3, [pc, #428]	; (80014b0 <MX_GPIO_Init+0x200>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a6a      	ldr	r2, [pc, #424]	; (80014b0 <MX_GPIO_Init+0x200>)
 8001308:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b68      	ldr	r3, [pc, #416]	; (80014b0 <MX_GPIO_Init+0x200>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b64      	ldr	r3, [pc, #400]	; (80014b0 <MX_GPIO_Init+0x200>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a63      	ldr	r2, [pc, #396]	; (80014b0 <MX_GPIO_Init+0x200>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b61      	ldr	r3, [pc, #388]	; (80014b0 <MX_GPIO_Init+0x200>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	4b5d      	ldr	r3, [pc, #372]	; (80014b0 <MX_GPIO_Init+0x200>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a5c      	ldr	r2, [pc, #368]	; (80014b0 <MX_GPIO_Init+0x200>)
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b5a      	ldr	r3, [pc, #360]	; (80014b0 <MX_GPIO_Init+0x200>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	60bb      	str	r3, [r7, #8]
 8001350:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	4b56      	ldr	r3, [pc, #344]	; (80014b0 <MX_GPIO_Init+0x200>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a55      	ldr	r2, [pc, #340]	; (80014b0 <MX_GPIO_Init+0x200>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b53      	ldr	r3, [pc, #332]	; (80014b0 <MX_GPIO_Init+0x200>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_D4_Pin|LED_D5_Pin|LED_D6_Pin, GPIO_PIN_RESET);
 800136e:	2200      	movs	r2, #0
 8001370:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001374:	484f      	ldr	r0, [pc, #316]	; (80014b4 <MX_GPIO_Init+0x204>)
 8001376:	f002 f8c5 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PWM1_BLACK_UPS_RELAY_Pin|PWM2_WHITE_MAIN_RELAY_Pin|PWM3_BROWN_CHARGER_RELAY_Pin|PWM4_BLUE_ENABLE_RELAYS_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001380:	484d      	ldr	r0, [pc, #308]	; (80014b8 <MX_GPIO_Init+0x208>)
 8001382:	f002 f8bf 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN1_RS_GPIO_Port, CAN1_RS_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800138c:	484b      	ldr	r0, [pc, #300]	; (80014bc <MX_GPIO_Init+0x20c>)
 800138e:	f002 f8b9 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN2_RS_GPIO_Port, CAN2_RS_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	484a      	ldr	r0, [pc, #296]	; (80014c0 <MX_GPIO_Init+0x210>)
 8001398:	f002 f8b4 	bl	8003504 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = OPTO_INPUT2_Pin|OPTO_INPUT3_Pin|OPTO_INPUT4_Pin|OPTO_INPUT5_Pin
 800139c:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80013a0:	61fb      	str	r3, [r7, #28]
                          |OPTO_INPUT6_Pin|OPTO_INPUT7_Pin|OPTO_INPUT8_Pin|OPTO_INPUT9_Pin
                          |OPTO_INPUT10_Pin|OPTO_INPUT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <MX_GPIO_Init+0x214>)
 80013a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013aa:	f107 031c 	add.w	r3, r7, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	4845      	ldr	r0, [pc, #276]	; (80014c8 <MX_GPIO_Init+0x218>)
 80013b2:	f001 fef3 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_D4_Pin|LED_D5_Pin|LED_D6_Pin;
 80013b6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80013ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	2301      	movs	r3, #1
 80013be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2300      	movs	r3, #0
 80013c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4839      	ldr	r0, [pc, #228]	; (80014b4 <MX_GPIO_Init+0x204>)
 80013d0:	f001 fee4 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = OPTO_INPUT11_Pin|OPTO_INPUT12_Pin|OPTO_INPUT13_Pin|OPTO_INPUT14_Pin
 80013d4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80013d8:	61fb      	str	r3, [r7, #28]
                          |OPTO_INPUT15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013da:	4b3c      	ldr	r3, [pc, #240]	; (80014cc <MX_GPIO_Init+0x21c>)
 80013dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	4837      	ldr	r0, [pc, #220]	; (80014c8 <MX_GPIO_Init+0x218>)
 80013ea:	f001 fed7 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = PWM1_BLACK_UPS_RELAY_Pin|PWM2_WHITE_MAIN_RELAY_Pin|PWM3_BROWN_CHARGER_RELAY_Pin|PWM4_BLUE_ENABLE_RELAYS_Pin;
 80013ee:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80013f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f4:	2301      	movs	r3, #1
 80013f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001400:	f107 031c 	add.w	r3, r7, #28
 8001404:	4619      	mov	r1, r3
 8001406:	482c      	ldr	r0, [pc, #176]	; (80014b8 <MX_GPIO_Init+0x208>)
 8001408:	f001 fec8 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN1_RS_Pin;
 800140c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001410:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001412:	2301      	movs	r3, #1
 8001414:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001416:	2302      	movs	r3, #2
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAN1_RS_GPIO_Port, &GPIO_InitStruct);
 800141e:	f107 031c 	add.w	r3, r7, #28
 8001422:	4619      	mov	r1, r3
 8001424:	4825      	ldr	r0, [pc, #148]	; (80014bc <MX_GPIO_Init+0x20c>)
 8001426:	f001 feb9 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CAN2_RS_Pin;
 800142a:	2380      	movs	r3, #128	; 0x80
 800142c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142e:	2301      	movs	r3, #1
 8001430:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001432:	2302      	movs	r3, #2
 8001434:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001436:	2300      	movs	r3, #0
 8001438:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CAN2_RS_GPIO_Port, &GPIO_InitStruct);
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	481f      	ldr	r0, [pc, #124]	; (80014c0 <MX_GPIO_Init+0x210>)
 8001442:	f001 feab 	bl	800319c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 2, 0);
 8001446:	2200      	movs	r2, #0
 8001448:	2102      	movs	r1, #2
 800144a:	2007      	movs	r0, #7
 800144c:	f001 fe6f 	bl	800312e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001450:	2007      	movs	r0, #7
 8001452:	f001 fe88 	bl	8003166 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 2, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	2102      	movs	r1, #2
 800145a:	2008      	movs	r0, #8
 800145c:	f001 fe67 	bl	800312e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001460:	2008      	movs	r0, #8
 8001462:	f001 fe80 	bl	8003166 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 2, 0);
 8001466:	2200      	movs	r2, #0
 8001468:	2102      	movs	r1, #2
 800146a:	2009      	movs	r0, #9
 800146c:	f001 fe5f 	bl	800312e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001470:	2009      	movs	r0, #9
 8001472:	f001 fe78 	bl	8003166 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2102      	movs	r1, #2
 800147a:	200a      	movs	r0, #10
 800147c:	f001 fe57 	bl	800312e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001480:	200a      	movs	r0, #10
 8001482:	f001 fe70 	bl	8003166 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2102      	movs	r1, #2
 800148a:	2017      	movs	r0, #23
 800148c:	f001 fe4f 	bl	800312e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001490:	2017      	movs	r0, #23
 8001492:	f001 fe68 	bl	8003166 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2102      	movs	r1, #2
 800149a:	2028      	movs	r0, #40	; 0x28
 800149c:	f001 fe47 	bl	800312e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014a0:	2028      	movs	r0, #40	; 0x28
 80014a2:	f001 fe60 	bl	8003166 <HAL_NVIC_EnableIRQ>

}
 80014a6:	bf00      	nop
 80014a8:	3730      	adds	r7, #48	; 0x30
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800
 80014b4:	40020800 	.word	0x40020800
 80014b8:	40020c00 	.word	0x40020c00
 80014bc:	40020000 	.word	0x40020000
 80014c0:	40020400 	.word	0x40020400
 80014c4:	10310000 	.word	0x10310000
 80014c8:	40021000 	.word	0x40021000
 80014cc:	10110000 	.word	0x10110000

080014d0 <HAL_GPIO_EXTI_Callback>:

}

/*Lights management*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d2:	b095      	sub	sp, #84	; 0x54
 80014d4:	af12      	add	r7, sp, #72	; 0x48
 80014d6:	4603      	mov	r3, r0
 80014d8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == OPTO_INPUT5_Pin)
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	2b20      	cmp	r3, #32
 80014de:	d176      	bne.n	80015ce <HAL_GPIO_EXTI_Callback+0xfe>
	{
		/* opto input 5 - Night Lights */
		if (HAL_GPIO_ReadPin(OPTO_INPUT5_GPIO_Port, OPTO_INPUT5_Pin)
 80014e0:	2120      	movs	r1, #32
 80014e2:	4898      	ldr	r0, [pc, #608]	; (8001744 <HAL_GPIO_EXTI_Callback+0x274>)
 80014e4:	f001 fff6 	bl	80034d4 <HAL_GPIO_ReadPin>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d136      	bne.n	800155c <HAL_GPIO_EXTI_Callback+0x8c>
				== GPIO_PIN_SET)
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 80014ee:	4b96      	ldr	r3, [pc, #600]	; (8001748 <HAL_GPIO_EXTI_Callback+0x278>)
 80014f0:	691b      	ldr	r3, [r3, #16]
 80014f2:	4e96      	ldr	r6, [pc, #600]	; (800174c <HAL_GPIO_EXTI_Callback+0x27c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	9210      	str	r2, [sp, #64]	; 0x40
 80014f8:	2200      	movs	r2, #0
 80014fa:	920f      	str	r2, [sp, #60]	; 0x3c
 80014fc:	2200      	movs	r2, #0
 80014fe:	920e      	str	r2, [sp, #56]	; 0x38
 8001500:	2200      	movs	r2, #0
 8001502:	920d      	str	r2, [sp, #52]	; 0x34
 8001504:	2200      	movs	r2, #0
 8001506:	920c      	str	r2, [sp, #48]	; 0x30
 8001508:	2201      	movs	r2, #1
 800150a:	920b      	str	r2, [sp, #44]	; 0x2c
 800150c:	2201      	movs	r2, #1
 800150e:	920a      	str	r2, [sp, #40]	; 0x28
 8001510:	2240      	movs	r2, #64	; 0x40
 8001512:	9209      	str	r2, [sp, #36]	; 0x24
 8001514:	2203      	movs	r2, #3
 8001516:	9208      	str	r2, [sp, #32]
 8001518:	4a8d      	ldr	r2, [pc, #564]	; (8001750 <HAL_GPIO_EXTI_Callback+0x280>)
 800151a:	9207      	str	r2, [sp, #28]
 800151c:	9306      	str	r3, [sp, #24]
 800151e:	466d      	mov	r5, sp
 8001520:	f106 0410 	add.w	r4, r6, #16
 8001524:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001526:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001528:	e894 0003 	ldmia.w	r4, {r0, r1}
 800152c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001530:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001534:	f7ff fa6a 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x01, 1, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x01, 1, 0, 0, 0, 0, 0, 0);
 8001538:	4b83      	ldr	r3, [pc, #524]	; (8001748 <HAL_GPIO_EXTI_Callback+0x278>)
 800153a:	6918      	ldr	r0, [r3, #16]
 800153c:	2300      	movs	r3, #0
 800153e:	9304      	str	r3, [sp, #16]
 8001540:	2300      	movs	r3, #0
 8001542:	9303      	str	r3, [sp, #12]
 8001544:	2300      	movs	r3, #0
 8001546:	9302      	str	r3, [sp, #8]
 8001548:	2300      	movs	r3, #0
 800154a:	9301      	str	r3, [sp, #4]
 800154c:	2300      	movs	r3, #0
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2300      	movs	r3, #0
 8001552:	2201      	movs	r2, #1
 8001554:	2101      	movs	r1, #1
 8001556:	f007 f8d7 	bl	8008708 <UsbTransferDataByte>
 800155a:	e035      	b.n	80015c8 <HAL_GPIO_EXTI_Callback+0xf8>
		}
		else
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 800155c:	4b7a      	ldr	r3, [pc, #488]	; (8001748 <HAL_GPIO_EXTI_Callback+0x278>)
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	4e7a      	ldr	r6, [pc, #488]	; (800174c <HAL_GPIO_EXTI_Callback+0x27c>)
 8001562:	2200      	movs	r2, #0
 8001564:	9210      	str	r2, [sp, #64]	; 0x40
 8001566:	2200      	movs	r2, #0
 8001568:	920f      	str	r2, [sp, #60]	; 0x3c
 800156a:	2200      	movs	r2, #0
 800156c:	920e      	str	r2, [sp, #56]	; 0x38
 800156e:	2200      	movs	r2, #0
 8001570:	920d      	str	r2, [sp, #52]	; 0x34
 8001572:	2200      	movs	r2, #0
 8001574:	920c      	str	r2, [sp, #48]	; 0x30
 8001576:	2200      	movs	r2, #0
 8001578:	920b      	str	r2, [sp, #44]	; 0x2c
 800157a:	2201      	movs	r2, #1
 800157c:	920a      	str	r2, [sp, #40]	; 0x28
 800157e:	2240      	movs	r2, #64	; 0x40
 8001580:	9209      	str	r2, [sp, #36]	; 0x24
 8001582:	2203      	movs	r2, #3
 8001584:	9208      	str	r2, [sp, #32]
 8001586:	4a72      	ldr	r2, [pc, #456]	; (8001750 <HAL_GPIO_EXTI_Callback+0x280>)
 8001588:	9207      	str	r2, [sp, #28]
 800158a:	9306      	str	r3, [sp, #24]
 800158c:	466d      	mov	r5, sp
 800158e:	f106 0410 	add.w	r4, r6, #16
 8001592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001596:	e894 0003 	ldmia.w	r4, {r0, r1}
 800159a:	e885 0003 	stmia.w	r5, {r0, r1}
 800159e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015a2:	f7ff fa33 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x01, 0, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x01, 0, 0, 0, 0, 0, 0, 0);
 80015a6:	4b68      	ldr	r3, [pc, #416]	; (8001748 <HAL_GPIO_EXTI_Callback+0x278>)
 80015a8:	6918      	ldr	r0, [r3, #16]
 80015aa:	2300      	movs	r3, #0
 80015ac:	9304      	str	r3, [sp, #16]
 80015ae:	2300      	movs	r3, #0
 80015b0:	9303      	str	r3, [sp, #12]
 80015b2:	2300      	movs	r3, #0
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	2300      	movs	r3, #0
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	2300      	movs	r3, #0
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	2300      	movs	r3, #0
 80015c0:	2200      	movs	r2, #0
 80015c2:	2101      	movs	r1, #1
 80015c4:	f007 f8a0 	bl	8008708 <UsbTransferDataByte>
		}
		HAL_Delay(10);
 80015c8:	200a      	movs	r0, #10
 80015ca:	f000 fe0f 	bl	80021ec <HAL_Delay>
	}

	if (GPIO_Pin == OPTO_INPUT6_Pin)
 80015ce:	88fb      	ldrh	r3, [r7, #6]
 80015d0:	2b40      	cmp	r3, #64	; 0x40
 80015d2:	d176      	bne.n	80016c2 <HAL_GPIO_EXTI_Callback+0x1f2>
	{
		/* opto input 6 - RIGHT */
		if (HAL_GPIO_ReadPin(OPTO_INPUT6_GPIO_Port, OPTO_INPUT6_Pin)
 80015d4:	2140      	movs	r1, #64	; 0x40
 80015d6:	485b      	ldr	r0, [pc, #364]	; (8001744 <HAL_GPIO_EXTI_Callback+0x274>)
 80015d8:	f001 ff7c 	bl	80034d4 <HAL_GPIO_ReadPin>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d136      	bne.n	8001650 <HAL_GPIO_EXTI_Callback+0x180>
				== GPIO_PIN_SET)
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 80015e2:	4b59      	ldr	r3, [pc, #356]	; (8001748 <HAL_GPIO_EXTI_Callback+0x278>)
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	4e59      	ldr	r6, [pc, #356]	; (800174c <HAL_GPIO_EXTI_Callback+0x27c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	9210      	str	r2, [sp, #64]	; 0x40
 80015ec:	2200      	movs	r2, #0
 80015ee:	920f      	str	r2, [sp, #60]	; 0x3c
 80015f0:	2200      	movs	r2, #0
 80015f2:	920e      	str	r2, [sp, #56]	; 0x38
 80015f4:	2200      	movs	r2, #0
 80015f6:	920d      	str	r2, [sp, #52]	; 0x34
 80015f8:	2200      	movs	r2, #0
 80015fa:	920c      	str	r2, [sp, #48]	; 0x30
 80015fc:	2201      	movs	r2, #1
 80015fe:	920b      	str	r2, [sp, #44]	; 0x2c
 8001600:	2202      	movs	r2, #2
 8001602:	920a      	str	r2, [sp, #40]	; 0x28
 8001604:	2240      	movs	r2, #64	; 0x40
 8001606:	9209      	str	r2, [sp, #36]	; 0x24
 8001608:	2203      	movs	r2, #3
 800160a:	9208      	str	r2, [sp, #32]
 800160c:	4a50      	ldr	r2, [pc, #320]	; (8001750 <HAL_GPIO_EXTI_Callback+0x280>)
 800160e:	9207      	str	r2, [sp, #28]
 8001610:	9306      	str	r3, [sp, #24]
 8001612:	466d      	mov	r5, sp
 8001614:	f106 0410 	add.w	r4, r6, #16
 8001618:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001620:	e885 0003 	stmia.w	r5, {r0, r1}
 8001624:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001628:	f7ff f9f0 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x02, 1, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x02, 1, 0, 0, 0, 0, 0, 0);
 800162c:	4b46      	ldr	r3, [pc, #280]	; (8001748 <HAL_GPIO_EXTI_Callback+0x278>)
 800162e:	6918      	ldr	r0, [r3, #16]
 8001630:	2300      	movs	r3, #0
 8001632:	9304      	str	r3, [sp, #16]
 8001634:	2300      	movs	r3, #0
 8001636:	9303      	str	r3, [sp, #12]
 8001638:	2300      	movs	r3, #0
 800163a:	9302      	str	r3, [sp, #8]
 800163c:	2300      	movs	r3, #0
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	2300      	movs	r3, #0
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2300      	movs	r3, #0
 8001646:	2201      	movs	r2, #1
 8001648:	2102      	movs	r1, #2
 800164a:	f007 f85d 	bl	8008708 <UsbTransferDataByte>
 800164e:	e035      	b.n	80016bc <HAL_GPIO_EXTI_Callback+0x1ec>
		}
		else
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 8001650:	4b3d      	ldr	r3, [pc, #244]	; (8001748 <HAL_GPIO_EXTI_Callback+0x278>)
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	4e3d      	ldr	r6, [pc, #244]	; (800174c <HAL_GPIO_EXTI_Callback+0x27c>)
 8001656:	2200      	movs	r2, #0
 8001658:	9210      	str	r2, [sp, #64]	; 0x40
 800165a:	2200      	movs	r2, #0
 800165c:	920f      	str	r2, [sp, #60]	; 0x3c
 800165e:	2200      	movs	r2, #0
 8001660:	920e      	str	r2, [sp, #56]	; 0x38
 8001662:	2200      	movs	r2, #0
 8001664:	920d      	str	r2, [sp, #52]	; 0x34
 8001666:	2200      	movs	r2, #0
 8001668:	920c      	str	r2, [sp, #48]	; 0x30
 800166a:	2200      	movs	r2, #0
 800166c:	920b      	str	r2, [sp, #44]	; 0x2c
 800166e:	2202      	movs	r2, #2
 8001670:	920a      	str	r2, [sp, #40]	; 0x28
 8001672:	2240      	movs	r2, #64	; 0x40
 8001674:	9209      	str	r2, [sp, #36]	; 0x24
 8001676:	2203      	movs	r2, #3
 8001678:	9208      	str	r2, [sp, #32]
 800167a:	4a35      	ldr	r2, [pc, #212]	; (8001750 <HAL_GPIO_EXTI_Callback+0x280>)
 800167c:	9207      	str	r2, [sp, #28]
 800167e:	9306      	str	r3, [sp, #24]
 8001680:	466d      	mov	r5, sp
 8001682:	f106 0410 	add.w	r4, r6, #16
 8001686:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001688:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800168a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800168e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001692:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001696:	f7ff f9b9 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x02, 0, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x02, 0, 0, 0, 0, 0, 0, 0);
 800169a:	4b2b      	ldr	r3, [pc, #172]	; (8001748 <HAL_GPIO_EXTI_Callback+0x278>)
 800169c:	6918      	ldr	r0, [r3, #16]
 800169e:	2300      	movs	r3, #0
 80016a0:	9304      	str	r3, [sp, #16]
 80016a2:	2300      	movs	r3, #0
 80016a4:	9303      	str	r3, [sp, #12]
 80016a6:	2300      	movs	r3, #0
 80016a8:	9302      	str	r3, [sp, #8]
 80016aa:	2300      	movs	r3, #0
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	2300      	movs	r3, #0
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2300      	movs	r3, #0
 80016b4:	2200      	movs	r2, #0
 80016b6:	2102      	movs	r1, #2
 80016b8:	f007 f826 	bl	8008708 <UsbTransferDataByte>
		}

		HAL_Delay(10);
 80016bc:	200a      	movs	r0, #10
 80016be:	f000 fd95 	bl	80021ec <HAL_Delay>
	}

	if (GPIO_Pin == OPTO_INPUT7_Pin)
 80016c2:	88fb      	ldrh	r3, [r7, #6]
 80016c4:	2b80      	cmp	r3, #128	; 0x80
 80016c6:	d17e      	bne.n	80017c6 <HAL_GPIO_EXTI_Callback+0x2f6>
	{
		/* opto input 7 LEFT */
		if (HAL_GPIO_ReadPin(OPTO_INPUT7_GPIO_Port, OPTO_INPUT7_Pin)
 80016c8:	2180      	movs	r1, #128	; 0x80
 80016ca:	481e      	ldr	r0, [pc, #120]	; (8001744 <HAL_GPIO_EXTI_Callback+0x274>)
 80016cc:	f001 ff02 	bl	80034d4 <HAL_GPIO_ReadPin>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d13e      	bne.n	8001754 <HAL_GPIO_EXTI_Callback+0x284>
				== GPIO_PIN_SET)
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <HAL_GPIO_EXTI_Callback+0x278>)
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	4e1c      	ldr	r6, [pc, #112]	; (800174c <HAL_GPIO_EXTI_Callback+0x27c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	9210      	str	r2, [sp, #64]	; 0x40
 80016e0:	2200      	movs	r2, #0
 80016e2:	920f      	str	r2, [sp, #60]	; 0x3c
 80016e4:	2200      	movs	r2, #0
 80016e6:	920e      	str	r2, [sp, #56]	; 0x38
 80016e8:	2200      	movs	r2, #0
 80016ea:	920d      	str	r2, [sp, #52]	; 0x34
 80016ec:	2200      	movs	r2, #0
 80016ee:	920c      	str	r2, [sp, #48]	; 0x30
 80016f0:	2201      	movs	r2, #1
 80016f2:	920b      	str	r2, [sp, #44]	; 0x2c
 80016f4:	2203      	movs	r2, #3
 80016f6:	920a      	str	r2, [sp, #40]	; 0x28
 80016f8:	2240      	movs	r2, #64	; 0x40
 80016fa:	9209      	str	r2, [sp, #36]	; 0x24
 80016fc:	2203      	movs	r2, #3
 80016fe:	9208      	str	r2, [sp, #32]
 8001700:	4a13      	ldr	r2, [pc, #76]	; (8001750 <HAL_GPIO_EXTI_Callback+0x280>)
 8001702:	9207      	str	r2, [sp, #28]
 8001704:	9306      	str	r3, [sp, #24]
 8001706:	466d      	mov	r5, sp
 8001708:	f106 0410 	add.w	r4, r6, #16
 800170c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800170e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001710:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001714:	e885 0003 	stmia.w	r5, {r0, r1}
 8001718:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800171c:	f7ff f976 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x03, 1, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x03, 1, 0, 0, 0, 0, 0, 0);
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <HAL_GPIO_EXTI_Callback+0x278>)
 8001722:	6918      	ldr	r0, [r3, #16]
 8001724:	2300      	movs	r3, #0
 8001726:	9304      	str	r3, [sp, #16]
 8001728:	2300      	movs	r3, #0
 800172a:	9303      	str	r3, [sp, #12]
 800172c:	2300      	movs	r3, #0
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	2300      	movs	r3, #0
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	2300      	movs	r3, #0
 8001736:	9300      	str	r3, [sp, #0]
 8001738:	2300      	movs	r3, #0
 800173a:	2201      	movs	r2, #1
 800173c:	2103      	movs	r1, #3
 800173e:	f006 ffe3 	bl	8008708 <UsbTransferDataByte>
 8001742:	e03d      	b.n	80017c0 <HAL_GPIO_EXTI_Callback+0x2f0>
 8001744:	40021000 	.word	0x40021000
 8001748:	200002b8 	.word	0x200002b8
 800174c:	200002f4 	.word	0x200002f4
 8001750:	20000274 	.word	0x20000274

		}
		else
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 8001754:	4b9c      	ldr	r3, [pc, #624]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x4f8>)
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	4e9c      	ldr	r6, [pc, #624]	; (80019cc <HAL_GPIO_EXTI_Callback+0x4fc>)
 800175a:	2200      	movs	r2, #0
 800175c:	9210      	str	r2, [sp, #64]	; 0x40
 800175e:	2200      	movs	r2, #0
 8001760:	920f      	str	r2, [sp, #60]	; 0x3c
 8001762:	2200      	movs	r2, #0
 8001764:	920e      	str	r2, [sp, #56]	; 0x38
 8001766:	2200      	movs	r2, #0
 8001768:	920d      	str	r2, [sp, #52]	; 0x34
 800176a:	2200      	movs	r2, #0
 800176c:	920c      	str	r2, [sp, #48]	; 0x30
 800176e:	2200      	movs	r2, #0
 8001770:	920b      	str	r2, [sp, #44]	; 0x2c
 8001772:	2203      	movs	r2, #3
 8001774:	920a      	str	r2, [sp, #40]	; 0x28
 8001776:	2240      	movs	r2, #64	; 0x40
 8001778:	9209      	str	r2, [sp, #36]	; 0x24
 800177a:	2203      	movs	r2, #3
 800177c:	9208      	str	r2, [sp, #32]
 800177e:	4a94      	ldr	r2, [pc, #592]	; (80019d0 <HAL_GPIO_EXTI_Callback+0x500>)
 8001780:	9207      	str	r2, [sp, #28]
 8001782:	9306      	str	r3, [sp, #24]
 8001784:	466d      	mov	r5, sp
 8001786:	f106 0410 	add.w	r4, r6, #16
 800178a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800178c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800178e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001792:	e885 0003 	stmia.w	r5, {r0, r1}
 8001796:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800179a:	f7ff f937 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x03, 0, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x03, 0, 0, 0, 0, 0, 0, 0);
 800179e:	4b8a      	ldr	r3, [pc, #552]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x4f8>)
 80017a0:	6918      	ldr	r0, [r3, #16]
 80017a2:	2300      	movs	r3, #0
 80017a4:	9304      	str	r3, [sp, #16]
 80017a6:	2300      	movs	r3, #0
 80017a8:	9303      	str	r3, [sp, #12]
 80017aa:	2300      	movs	r3, #0
 80017ac:	9302      	str	r3, [sp, #8]
 80017ae:	2300      	movs	r3, #0
 80017b0:	9301      	str	r3, [sp, #4]
 80017b2:	2300      	movs	r3, #0
 80017b4:	9300      	str	r3, [sp, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	2200      	movs	r2, #0
 80017ba:	2103      	movs	r1, #3
 80017bc:	f006 ffa4 	bl	8008708 <UsbTransferDataByte>
		}

		HAL_Delay(10);
 80017c0:	200a      	movs	r0, #10
 80017c2:	f000 fd13 	bl	80021ec <HAL_Delay>
	}

	if (GPIO_Pin == OPTO_INPUT8_Pin)
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017cc:	d177      	bne.n	80018be <HAL_GPIO_EXTI_Callback+0x3ee>
	{
		/* opto input 8 Emergency */
		if (HAL_GPIO_ReadPin(OPTO_INPUT8_GPIO_Port, OPTO_INPUT8_Pin)
 80017ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017d2:	4880      	ldr	r0, [pc, #512]	; (80019d4 <HAL_GPIO_EXTI_Callback+0x504>)
 80017d4:	f001 fe7e 	bl	80034d4 <HAL_GPIO_ReadPin>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d136      	bne.n	800184c <HAL_GPIO_EXTI_Callback+0x37c>
				== GPIO_PIN_SET)
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 80017de:	4b7a      	ldr	r3, [pc, #488]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x4f8>)
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	4e7a      	ldr	r6, [pc, #488]	; (80019cc <HAL_GPIO_EXTI_Callback+0x4fc>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	9210      	str	r2, [sp, #64]	; 0x40
 80017e8:	2200      	movs	r2, #0
 80017ea:	920f      	str	r2, [sp, #60]	; 0x3c
 80017ec:	2200      	movs	r2, #0
 80017ee:	920e      	str	r2, [sp, #56]	; 0x38
 80017f0:	2200      	movs	r2, #0
 80017f2:	920d      	str	r2, [sp, #52]	; 0x34
 80017f4:	2200      	movs	r2, #0
 80017f6:	920c      	str	r2, [sp, #48]	; 0x30
 80017f8:	2201      	movs	r2, #1
 80017fa:	920b      	str	r2, [sp, #44]	; 0x2c
 80017fc:	2206      	movs	r2, #6
 80017fe:	920a      	str	r2, [sp, #40]	; 0x28
 8001800:	2240      	movs	r2, #64	; 0x40
 8001802:	9209      	str	r2, [sp, #36]	; 0x24
 8001804:	2203      	movs	r2, #3
 8001806:	9208      	str	r2, [sp, #32]
 8001808:	4a71      	ldr	r2, [pc, #452]	; (80019d0 <HAL_GPIO_EXTI_Callback+0x500>)
 800180a:	9207      	str	r2, [sp, #28]
 800180c:	9306      	str	r3, [sp, #24]
 800180e:	466d      	mov	r5, sp
 8001810:	f106 0410 	add.w	r4, r6, #16
 8001814:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001816:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001818:	e894 0003 	ldmia.w	r4, {r0, r1}
 800181c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001820:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001824:	f7ff f8f2 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x06, 1, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x06, 1, 0, 0, 0, 0, 0, 0);
 8001828:	4b67      	ldr	r3, [pc, #412]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x4f8>)
 800182a:	6918      	ldr	r0, [r3, #16]
 800182c:	2300      	movs	r3, #0
 800182e:	9304      	str	r3, [sp, #16]
 8001830:	2300      	movs	r3, #0
 8001832:	9303      	str	r3, [sp, #12]
 8001834:	2300      	movs	r3, #0
 8001836:	9302      	str	r3, [sp, #8]
 8001838:	2300      	movs	r3, #0
 800183a:	9301      	str	r3, [sp, #4]
 800183c:	2300      	movs	r3, #0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2300      	movs	r3, #0
 8001842:	2201      	movs	r2, #1
 8001844:	2106      	movs	r1, #6
 8001846:	f006 ff5f 	bl	8008708 <UsbTransferDataByte>
 800184a:	e035      	b.n	80018b8 <HAL_GPIO_EXTI_Callback+0x3e8>

		}
		else
		{
			CanSendSdo(CAN_LOW_SPEED, lights_controller.pdo_consumer_id,
 800184c:	4b5e      	ldr	r3, [pc, #376]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x4f8>)
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	4e5e      	ldr	r6, [pc, #376]	; (80019cc <HAL_GPIO_EXTI_Callback+0x4fc>)
 8001852:	2200      	movs	r2, #0
 8001854:	9210      	str	r2, [sp, #64]	; 0x40
 8001856:	2200      	movs	r2, #0
 8001858:	920f      	str	r2, [sp, #60]	; 0x3c
 800185a:	2200      	movs	r2, #0
 800185c:	920e      	str	r2, [sp, #56]	; 0x38
 800185e:	2200      	movs	r2, #0
 8001860:	920d      	str	r2, [sp, #52]	; 0x34
 8001862:	2200      	movs	r2, #0
 8001864:	920c      	str	r2, [sp, #48]	; 0x30
 8001866:	2200      	movs	r2, #0
 8001868:	920b      	str	r2, [sp, #44]	; 0x2c
 800186a:	2206      	movs	r2, #6
 800186c:	920a      	str	r2, [sp, #40]	; 0x28
 800186e:	2240      	movs	r2, #64	; 0x40
 8001870:	9209      	str	r2, [sp, #36]	; 0x24
 8001872:	2203      	movs	r2, #3
 8001874:	9208      	str	r2, [sp, #32]
 8001876:	4a56      	ldr	r2, [pc, #344]	; (80019d0 <HAL_GPIO_EXTI_Callback+0x500>)
 8001878:	9207      	str	r2, [sp, #28]
 800187a:	9306      	str	r3, [sp, #24]
 800187c:	466d      	mov	r5, sp
 800187e:	f106 0410 	add.w	r4, r6, #16
 8001882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001886:	e894 0003 	ldmia.w	r4, {r0, r1}
 800188a:	e885 0003 	stmia.w	r5, {r0, r1}
 800188e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001892:	f7ff f8bb 	bl	8000a0c <CanSendSdo>
					&can_frame_template, 3, SDO_DOWNLOAD, 0x06, 0, 0, 0, 0, 0,
					0);
			UsbTransferDataByte(lights_controller.pdo_consumer_id, 0x06, 0, 0, 0, 0, 0, 0, 0);
 8001896:	4b4c      	ldr	r3, [pc, #304]	; (80019c8 <HAL_GPIO_EXTI_Callback+0x4f8>)
 8001898:	6918      	ldr	r0, [r3, #16]
 800189a:	2300      	movs	r3, #0
 800189c:	9304      	str	r3, [sp, #16]
 800189e:	2300      	movs	r3, #0
 80018a0:	9303      	str	r3, [sp, #12]
 80018a2:	2300      	movs	r3, #0
 80018a4:	9302      	str	r3, [sp, #8]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	2300      	movs	r3, #0
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2300      	movs	r3, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	2106      	movs	r1, #6
 80018b4:	f006 ff28 	bl	8008708 <UsbTransferDataByte>
		}
		HAL_Delay(10);
 80018b8:	200a      	movs	r0, #10
 80018ba:	f000 fc97 	bl	80021ec <HAL_Delay>
	}

	/*Charging state register*/
	if (GPIO_Pin == OPTO_INPUT10_Pin)
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018c4:	d134      	bne.n	8001930 <HAL_GPIO_EXTI_Callback+0x460>
	{
		if (HAL_GPIO_ReadPin(OPTO_INPUT10_GPIO_Port, OPTO_INPUT10_Pin)
 80018c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ca:	4842      	ldr	r0, [pc, #264]	; (80019d4 <HAL_GPIO_EXTI_Callback+0x504>)
 80018cc:	f001 fe02 	bl	80034d4 <HAL_GPIO_ReadPin>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d116      	bne.n	8001904 <HAL_GPIO_EXTI_Callback+0x434>
				== GPIO_PIN_SET)
		{
			charging = true;
 80018d6:	4b40      	ldr	r3, [pc, #256]	; (80019d8 <HAL_GPIO_EXTI_Callback+0x508>)
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
			UsbTransferDataByte(0x0C, 0x01, 0, 0, 0, 0, 0, 0, 0);
 80018dc:	2300      	movs	r3, #0
 80018de:	9304      	str	r3, [sp, #16]
 80018e0:	2300      	movs	r3, #0
 80018e2:	9303      	str	r3, [sp, #12]
 80018e4:	2300      	movs	r3, #0
 80018e6:	9302      	str	r3, [sp, #8]
 80018e8:	2300      	movs	r3, #0
 80018ea:	9301      	str	r3, [sp, #4]
 80018ec:	2300      	movs	r3, #0
 80018ee:	9300      	str	r3, [sp, #0]
 80018f0:	2300      	movs	r3, #0
 80018f2:	2200      	movs	r2, #0
 80018f4:	2101      	movs	r1, #1
 80018f6:	200c      	movs	r0, #12
 80018f8:	f006 ff06 	bl	8008708 <UsbTransferDataByte>
			HAL_Delay(10);
 80018fc:	200a      	movs	r0, #10
 80018fe:	f000 fc75 	bl	80021ec <HAL_Delay>
 8001902:	e015      	b.n	8001930 <HAL_GPIO_EXTI_Callback+0x460>
		}
		else
		{
			charging = false;
 8001904:	4b34      	ldr	r3, [pc, #208]	; (80019d8 <HAL_GPIO_EXTI_Callback+0x508>)
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
			UsbTransferDataByte(0x0C, 0x0, 0, 0, 0, 0, 0, 0, 0);
 800190a:	2300      	movs	r3, #0
 800190c:	9304      	str	r3, [sp, #16]
 800190e:	2300      	movs	r3, #0
 8001910:	9303      	str	r3, [sp, #12]
 8001912:	2300      	movs	r3, #0
 8001914:	9302      	str	r3, [sp, #8]
 8001916:	2300      	movs	r3, #0
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	2300      	movs	r3, #0
 800191c:	9300      	str	r3, [sp, #0]
 800191e:	2300      	movs	r3, #0
 8001920:	2200      	movs	r2, #0
 8001922:	2100      	movs	r1, #0
 8001924:	200c      	movs	r0, #12
 8001926:	f006 feef 	bl	8008708 <UsbTransferDataByte>
			HAL_Delay(10);
 800192a:	200a      	movs	r0, #10
 800192c:	f000 fc5e 	bl	80021ec <HAL_Delay>
		}
	}

	if (GPIO_Pin == OPTO_INPUT11_Pin)
 8001930:	88fb      	ldrh	r3, [r7, #6]
 8001932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001936:	d142      	bne.n	80019be <HAL_GPIO_EXTI_Callback+0x4ee>
		{
		if (HAL_GPIO_ReadPin(OPTO_INPUT10_GPIO_Port, OPTO_INPUT11_Pin)
 8001938:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800193c:	4825      	ldr	r0, [pc, #148]	; (80019d4 <HAL_GPIO_EXTI_Callback+0x504>)
 800193e:	f001 fdc9 	bl	80034d4 <HAL_GPIO_ReadPin>
 8001942:	4603      	mov	r3, r0
 8001944:	2b01      	cmp	r3, #1
 8001946:	d122      	bne.n	800198e <HAL_GPIO_EXTI_Callback+0x4be>
				== GPIO_PIN_SET && !highVoltageActive) {
 8001948:	4b24      	ldr	r3, [pc, #144]	; (80019dc <HAL_GPIO_EXTI_Callback+0x50c>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	f083 0301 	eor.w	r3, r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d01b      	beq.n	800198e <HAL_GPIO_EXTI_Callback+0x4be>
			CanSendNmt(hcan1, OPERATIONAL_STATE, bms.node_id,
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_GPIO_EXTI_Callback+0x510>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	4e22      	ldr	r6, [pc, #136]	; (80019e4 <HAL_GPIO_EXTI_Callback+0x514>)
 800195c:	4a1c      	ldr	r2, [pc, #112]	; (80019d0 <HAL_GPIO_EXTI_Callback+0x500>)
 800195e:	9208      	str	r2, [sp, #32]
 8001960:	9307      	str	r3, [sp, #28]
 8001962:	2301      	movs	r3, #1
 8001964:	9306      	str	r3, [sp, #24]
 8001966:	466d      	mov	r5, sp
 8001968:	f106 0410 	add.w	r4, r6, #16
 800196c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800196e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001970:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001974:	e885 0003 	stmia.w	r5, {r0, r1}
 8001978:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800197c:	f7fe ffb2 	bl	80008e4 <CanSendNmt>
					&can_frame_template);
			highVoltageActive = true;
 8001980:	4b16      	ldr	r3, [pc, #88]	; (80019dc <HAL_GPIO_EXTI_Callback+0x50c>)
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]
			HAL_Delay(2);
 8001986:	2002      	movs	r0, #2
 8001988:	f000 fc30 	bl	80021ec <HAL_Delay>
			CanSendNmt(hcan1, STOPPED_STATE, bms.node_id,
					&can_frame_template);
			highVoltageActive = true;
		}
	}
}
 800198c:	e017      	b.n	80019be <HAL_GPIO_EXTI_Callback+0x4ee>
			CanSendNmt(hcan1, STOPPED_STATE, bms.node_id,
 800198e:	4b14      	ldr	r3, [pc, #80]	; (80019e0 <HAL_GPIO_EXTI_Callback+0x510>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	4e14      	ldr	r6, [pc, #80]	; (80019e4 <HAL_GPIO_EXTI_Callback+0x514>)
 8001994:	4a0e      	ldr	r2, [pc, #56]	; (80019d0 <HAL_GPIO_EXTI_Callback+0x500>)
 8001996:	9208      	str	r2, [sp, #32]
 8001998:	9307      	str	r3, [sp, #28]
 800199a:	2302      	movs	r3, #2
 800199c:	9306      	str	r3, [sp, #24]
 800199e:	466d      	mov	r5, sp
 80019a0:	f106 0410 	add.w	r4, r6, #16
 80019a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80019b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80019b4:	f7fe ff96 	bl	80008e4 <CanSendNmt>
			highVoltageActive = true;
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <HAL_GPIO_EXTI_Callback+0x50c>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200002b8 	.word	0x200002b8
 80019cc:	200002f4 	.word	0x200002f4
 80019d0:	20000274 	.word	0x20000274
 80019d4:	40021000 	.word	0x40021000
 80019d8:	200002f0 	.word	0x200002f0
 80019dc:	20000464 	.word	0x20000464
 80019e0:	200002d4 	.word	0x200002d4
 80019e4:	2000043c 	.word	0x2000043c

080019e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ea:	b093      	sub	sp, #76	; 0x4c
 80019ec:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019ee:	f000 fb8b 	bl	8002108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019f2:	f000 f893 	bl	8001b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019f6:	f7ff fc5b 	bl	80012b0 <MX_GPIO_Init>
  MX_CAN1_Init();
 80019fa:	f7fe fdb5 	bl	8000568 <MX_CAN1_Init>
  MX_CAN2_Init();
 80019fe:	f7fe fde9 	bl	80005d4 <MX_CAN2_Init>
  MX_TIM10_Init();
 8001a02:	f000 fb0b 	bl	800201c <MX_TIM10_Init>
  MX_USB_DEVICE_Init();
 8001a06:	f006 fd15 	bl	8008434 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

	/************************************************************************************************
	 CAN PERIPHERIAL AND ITS COMPONENTS
	 ************************************************************************************************/
	CanopenObjectDictInit();
 8001a0a:	f7ff fbad 	bl	8001168 <CanopenObjectDictInit>

	CanConfigFilter(CAN_HIGH_SPEED, 1);
 8001a0e:	4e3a      	ldr	r6, [pc, #232]	; (8001af8 <main+0x110>)
 8001a10:	2301      	movs	r3, #1
 8001a12:	9306      	str	r3, [sp, #24]
 8001a14:	466d      	mov	r5, sp
 8001a16:	f106 0410 	add.w	r4, r6, #16
 8001a1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a22:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a26:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a2a:	f7fe ff23 	bl	8000874 <CanConfigFilter>
	CanInit(CAN_HIGH_SPEED);
 8001a2e:	4e32      	ldr	r6, [pc, #200]	; (8001af8 <main+0x110>)
 8001a30:	466d      	mov	r5, sp
 8001a32:	f106 0410 	add.w	r4, r6, #16
 8001a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a3e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a42:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a46:	f7fe fecd 	bl	80007e4 <CanInit>

	CanConfigFilter(CAN_LOW_SPEED, 0);
 8001a4a:	4e2c      	ldr	r6, [pc, #176]	; (8001afc <main+0x114>)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9306      	str	r3, [sp, #24]
 8001a50:	466d      	mov	r5, sp
 8001a52:	f106 0410 	add.w	r4, r6, #16
 8001a56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a62:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a66:	f7fe ff05 	bl	8000874 <CanConfigFilter>
	CanInit(CAN_LOW_SPEED);
 8001a6a:	4e24      	ldr	r6, [pc, #144]	; (8001afc <main+0x114>)
 8001a6c:	466d      	mov	r5, sp
 8001a6e:	f106 0410 	add.w	r4, r6, #16
 8001a72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a7e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a82:	f7fe feaf 	bl	80007e4 <CanInit>

	HAL_TIM_Base_Start_IT(&htim10);
 8001a86:	481e      	ldr	r0, [pc, #120]	; (8001b00 <main+0x118>)
 8001a88:	f003 fb79 	bl	800517e <HAL_TIM_Base_Start_IT>
	 ************************************************************************************************/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	error = false;
 8001a8c:	4b1d      	ldr	r3, [pc, #116]	; (8001b04 <main+0x11c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
	charging = false;
 8001a92:	4b1d      	ldr	r3, [pc, #116]	; (8001b08 <main+0x120>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
	highVoltageActive = false;
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <main+0x124>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	701a      	strb	r2, [r3, #0]
//		HAL_Delay(10);
//		sendZeroes();
//		UsbTransferDataByte(0x581, 0, 2, 0, 0, 0, 0, 0, 0);
//		HAL_Delay(100);
		//ChargingStateModule();
		CanSendExtendedIdMessage(hcan1, &can_frame_template, 0x1806E5F4, 8,
 8001a9e:	4e16      	ldr	r6, [pc, #88]	; (8001af8 <main+0x110>)
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	9310      	str	r3, [sp, #64]	; 0x40
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	930e      	str	r3, [sp, #56]	; 0x38
 8001aac:	2300      	movs	r3, #0
 8001aae:	930d      	str	r3, [sp, #52]	; 0x34
 8001ab0:	23b4      	movs	r3, #180	; 0xb4
 8001ab2:	930c      	str	r3, [sp, #48]	; 0x30
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ab8:	2358      	movs	r3, #88	; 0x58
 8001aba:	930a      	str	r3, [sp, #40]	; 0x28
 8001abc:	2302      	movs	r3, #2
 8001abe:	9309      	str	r3, [sp, #36]	; 0x24
 8001ac0:	2308      	movs	r3, #8
 8001ac2:	9308      	str	r3, [sp, #32]
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <main+0x128>)
 8001ac6:	9307      	str	r3, [sp, #28]
 8001ac8:	4b12      	ldr	r3, [pc, #72]	; (8001b14 <main+0x12c>)
 8001aca:	9306      	str	r3, [sp, #24]
 8001acc:	466d      	mov	r5, sp
 8001ace:	f106 0410 	add.w	r4, r6, #16
 8001ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ada:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ade:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001ae2:	f7ff f92f 	bl	8000d44 <CanSendExtendedIdMessage>
				0x02, 0x58, 0, 0xB4, 0, 0, 0, 0);

		CanClearRxDataFrame(&can_rx_frame_template);
 8001ae6:	480c      	ldr	r0, [pc, #48]	; (8001b18 <main+0x130>)
 8001ae8:	f7ff f8f3 	bl	8000cd2 <CanClearRxDataFrame>

		HAL_Delay(998);
 8001aec:	f240 30e6 	movw	r0, #998	; 0x3e6
 8001af0:	f000 fb7c 	bl	80021ec <HAL_Delay>
		CanSendExtendedIdMessage(hcan1, &can_frame_template, 0x1806E5F4, 8,
 8001af4:	e7d3      	b.n	8001a9e <main+0xb6>
 8001af6:	bf00      	nop
 8001af8:	2000043c 	.word	0x2000043c
 8001afc:	200002f4 	.word	0x200002f4
 8001b00:	20000470 	.word	0x20000470
 8001b04:	20000400 	.word	0x20000400
 8001b08:	200002f0 	.word	0x200002f0
 8001b0c:	20000464 	.word	0x20000464
 8001b10:	1806e5f4 	.word	0x1806e5f4
 8001b14:	20000274 	.word	0x20000274
 8001b18:	200003bc 	.word	0x200003bc

08001b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b094      	sub	sp, #80	; 0x50
 8001b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b22:	f107 0320 	add.w	r3, r7, #32
 8001b26:	2230      	movs	r2, #48	; 0x30
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f007 fa82 	bl	8009034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <SystemClock_Config+0xc8>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	4a26      	ldr	r2, [pc, #152]	; (8001be4 <SystemClock_Config+0xc8>)
 8001b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b50:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <SystemClock_Config+0xc8>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <SystemClock_Config+0xcc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <SystemClock_Config+0xcc>)
 8001b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6a:	6013      	str	r3, [r2, #0]
 8001b6c:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <SystemClock_Config+0xcc>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b74:	607b      	str	r3, [r7, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b82:	2302      	movs	r3, #2
 8001b84:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b8c:	2308      	movs	r3, #8
 8001b8e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001b90:	2378      	movs	r3, #120	; 0x78
 8001b92:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001b94:	2306      	movs	r3, #6
 8001b96:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001b98:	2305      	movs	r3, #5
 8001b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b9c:	f107 0320 	add.w	r3, r7, #32
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f002 fe7f 	bl	80048a4 <HAL_RCC_OscConfig>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bac:	f000 f81e 	bl	8001bec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bb0:	230f      	movs	r3, #15
 8001bb2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001bc6:	f107 030c 	add.w	r3, r7, #12
 8001bca:	2101      	movs	r1, #1
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f003 f8d9 	bl	8004d84 <HAL_RCC_ClockConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001bd8:	f000 f808 	bl	8001bec <Error_Handler>
  }
}
 8001bdc:	bf00      	nop
 8001bde:	3750      	adds	r7, #80	; 0x50
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40007000 	.word	0x40007000

08001bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <HardFault_Handler+0x4>

08001c60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <MemManage_Handler+0x4>

08001c66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <BusFault_Handler+0x4>

08001c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <UsageFault_Handler+0x4>

08001c72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ca0:	f000 fa84 	bl	80021ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ca4:	bf00      	nop
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001cac:	2002      	movs	r0, #2
 8001cae:	f001 fc5d 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
	 ************************************************************************************************/
	/* opto input 1 - long lights */
//	OptoInputsRisingFalling(OPTO_INPUT1_GPIO_Port, OPTO_INPUT1_Pin, 0x01);

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001cba:	2004      	movs	r0, #4
 8001cbc:	f001 fc56 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
	 ************************************************************************************************/
	/* opto input 2 - long lights */
//	OptoInputsRisingFalling(OPTO_INPUT2_GPIO_Port, OPTO_INPUT2_Pin, 0x01);

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001cc0:	bf00      	nop
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001cc8:	2008      	movs	r0, #8
 8001cca:	f001 fc4f 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
	 ************************************************************************************************/
	/* opto input 3 - right indicator */
//	OptoInputsRisingFalling(OPTO_INPUT3_GPIO_Port, OPTO_INPUT3_Pin, 0x02);

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001cd6:	2010      	movs	r0, #16
 8001cd8:	f001 fc48 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
	 ************************************************************************************************/
	/* opto input - left indicator4 */
//	OptoInputsRisingFalling(OPTO_INPUT4_GPIO_Port, OPTO_INPUT4_Pin, 0x03);

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ce4:	4805      	ldr	r0, [pc, #20]	; (8001cfc <CAN1_TX_IRQHandler+0x1c>)
 8001ce6:	f000 ff0d 	bl	8002b04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */
  UsbTransfer(&can_frame_template);
 8001cea:	4805      	ldr	r0, [pc, #20]	; (8001d00 <CAN1_TX_IRQHandler+0x20>)
 8001cec:	f006 fcc8 	bl	8008680 <UsbTransfer>

	/************************************************************************************************
	 CAN_HIGH_SPEED TX INTERRUPT HANDLING
	 ************************************************************************************************/

  CanClearTxDataFrame(&can_frame_template);
 8001cf0:	4803      	ldr	r0, [pc, #12]	; (8001d00 <CAN1_TX_IRQHandler+0x20>)
 8001cf2:	f7fe ffbd 	bl	8000c70 <CanClearTxDataFrame>
  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	2000043c 	.word	0x2000043c
 8001d00:	20000274 	.word	0x20000274

08001d04 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d06:	b09b      	sub	sp, #108	; 0x6c
 8001d08:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d0a:	481b      	ldr	r0, [pc, #108]	; (8001d78 <CAN1_RX0_IRQHandler+0x74>)
 8001d0c:	f000 fefa 	bl	8002b04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

	/************************************************************************************************
	 CAN_HIGH_SPEED RX INTERRUPT HANDLING
	 ************************************************************************************************/
	CanSaveReceivedData(CAN_HIGH_SPEED, &can_rx_frame_template);
 8001d10:	46bc      	mov	ip, r7
 8001d12:	4e19      	ldr	r6, [pc, #100]	; (8001d78 <CAN1_RX0_IRQHandler+0x74>)
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <CAN1_RX0_IRQHandler+0x78>)
 8001d16:	9307      	str	r3, [sp, #28]
 8001d18:	466d      	mov	r5, sp
 8001d1a:	f106 040c 	add.w	r4, r6, #12
 8001d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d22:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001d26:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001d2a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001d2e:	4660      	mov	r0, ip
 8001d30:	f7fe fd78 	bl	8000824 <CanSaveReceivedData>
	UsbTransfer(&can_rx_frame_template);
 8001d34:	4811      	ldr	r0, [pc, #68]	; (8001d7c <CAN1_RX0_IRQHandler+0x78>)
 8001d36:	f006 fca3 	bl	8008680 <UsbTransfer>
	if (can_rx_frame_template.rx_header.ExtId == 0x18FF50E5)
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <CAN1_RX0_IRQHandler+0x78>)
 8001d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3e:	4a10      	ldr	r2, [pc, #64]	; (8001d80 <CAN1_RX0_IRQHandler+0x7c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d108      	bne.n	8001d56 <CAN1_RX0_IRQHandler+0x52>
	{
		ActUponCurrentAndVoltage(&can_rx_frame_template, 3000, 200);
 8001d44:	22c8      	movs	r2, #200	; 0xc8
 8001d46:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001d4a:	480c      	ldr	r0, [pc, #48]	; (8001d7c <CAN1_RX0_IRQHandler+0x78>)
 8001d4c:	f7ff f962 	bl	8001014 <ActUponCurrentAndVoltage>
		CatchChargingErrorOccuring(&can_rx_frame_template);
 8001d50:	480a      	ldr	r0, [pc, #40]	; (8001d7c <CAN1_RX0_IRQHandler+0x78>)
 8001d52:	f7ff f995 	bl	8001080 <CatchChargingErrorOccuring>
	}

//	CanTransferFrame(hcan1, &can_rx_frame_template);

	CatchErrorOccuring(&can_rx_frame_template);
 8001d56:	4809      	ldr	r0, [pc, #36]	; (8001d7c <CAN1_RX0_IRQHandler+0x78>)
 8001d58:	f7ff f9a8 	bl	80010ac <CatchErrorOccuring>

	WarningHandler(&can_rx_frame_template);
 8001d5c:	4807      	ldr	r0, [pc, #28]	; (8001d7c <CAN1_RX0_IRQHandler+0x78>)
 8001d5e:	f7ff f9b9 	bl	80010d4 <WarningHandler>

	BMSWarningHandler(&can_rx_frame_template);
 8001d62:	4806      	ldr	r0, [pc, #24]	; (8001d7c <CAN1_RX0_IRQHandler+0x78>)
 8001d64:	f7ff f900 	bl	8000f68 <BMSWarningHandler>

	ReverseManagement(&can_rx_frame_template);
 8001d68:	4804      	ldr	r0, [pc, #16]	; (8001d7c <CAN1_RX0_IRQHandler+0x78>)
 8001d6a:	f7ff f88b 	bl	8000e84 <ReverseManagement>


  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d6e:	bf00      	nop
 8001d70:	374c      	adds	r7, #76	; 0x4c
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d76:	bf00      	nop
 8001d78:	2000043c 	.word	0x2000043c
 8001d7c:	200003bc 	.word	0x200003bc
 8001d80:	18ff50e5 	.word	0x18ff50e5

08001d84 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <CAN1_RX1_IRQHandler+0x10>)
 8001d8a:	f000 febb 	bl	8002b04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2000043c 	.word	0x2000043c

08001d98 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001d9c:	2020      	movs	r0, #32
 8001d9e:	f001 fbe5 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001da2:	2040      	movs	r0, #64	; 0x40
 8001da4:	f001 fbe2 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001da8:	2080      	movs	r0, #128	; 0x80
 8001daa:	f001 fbdf 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001dae:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001db2:	f001 fbdb 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001db6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001dba:	f001 fbd7 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
	/* opto input 12 - day lights */

	/* opto input 13 - sport */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001dc8:	4804      	ldr	r0, [pc, #16]	; (8001ddc <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001dca:	f003 f9fc 	bl	80051c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

	/************************************************************************************************
	 TIMER 10Hz INTERRUPT HANDLING
	 ************************************************************************************************/
	HAL_GPIO_TogglePin(LED_D4_GPIO_Port, LED_D4_Pin);
 8001dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dd2:	4803      	ldr	r0, [pc, #12]	; (8001de0 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8001dd4:	f001 fbaf 	bl	8003536 <HAL_GPIO_TogglePin>
//	{
//		ChargingStateModule();
//	}

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000470 	.word	0x20000470
 8001de0:	40020800 	.word	0x40020800

08001de4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001de8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001dec:	f001 fbbe 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001df0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001df4:	f001 fbba 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001df8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001dfc:	f001 fbb6 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e04:	f001 fbb2 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001e08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e0c:	f001 fbae 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001e10:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e14:	f001 fbaa 	bl	800356c <HAL_GPIO_EXTI_IRQHandler>
	 OPTO-INPUTS INTERRUPT HANDLING
	 ************************************************************************************************/


  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001e20:	4803      	ldr	r0, [pc, #12]	; (8001e30 <CAN2_TX_IRQHandler+0x14>)
 8001e22:	f000 fe6f 	bl	8002b04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

	/************************************************************************************************
	 CAN_LOW_SPEED TX INTERRUPT HANDLING
	 ************************************************************************************************/
	UsbTransfer(&can_frame_template);
 8001e26:	4803      	ldr	r0, [pc, #12]	; (8001e34 <CAN2_TX_IRQHandler+0x18>)
 8001e28:	f006 fc2a 	bl	8008680 <UsbTransfer>

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200002f4 	.word	0x200002f4
 8001e34:	20000274 	.word	0x20000274

08001e38 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e3a:	b09b      	sub	sp, #108	; 0x6c
 8001e3c:	af08      	add	r7, sp, #32
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001e3e:	480e      	ldr	r0, [pc, #56]	; (8001e78 <CAN2_RX0_IRQHandler+0x40>)
 8001e40:	f000 fe60 	bl	8002b04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */
  CanSaveReceivedData(CAN_LOW_SPEED, &can_rx_frame_template);
 8001e44:	46bc      	mov	ip, r7
 8001e46:	4e0c      	ldr	r6, [pc, #48]	; (8001e78 <CAN2_RX0_IRQHandler+0x40>)
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <CAN2_RX0_IRQHandler+0x44>)
 8001e4a:	9307      	str	r3, [sp, #28]
 8001e4c:	466d      	mov	r5, sp
 8001e4e:	f106 040c 	add.w	r4, r6, #12
 8001e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e56:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001e5a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001e5e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001e62:	4660      	mov	r0, ip
 8001e64:	f7fe fcde 	bl	8000824 <CanSaveReceivedData>
  CatchErrorOccuring(&can_rx_frame_template);
 8001e68:	4804      	ldr	r0, [pc, #16]	; (8001e7c <CAN2_RX0_IRQHandler+0x44>)
 8001e6a:	f7ff f91f 	bl	80010ac <CatchErrorOccuring>

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	374c      	adds	r7, #76	; 0x4c
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200002f4 	.word	0x200002f4
 8001e7c:	200003bc 	.word	0x200003bc

08001e80 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <CAN2_RX1_IRQHandler+0x10>)
 8001e86:	f000 fe3d 	bl	8002b04 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	200002f4 	.word	0x200002f4

08001e94 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001e98:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <OTG_HS_IRQHandler+0x10>)
 8001e9a:	f001 fccf 	bl	800383c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */
//HAL_GPIO_TogglePin(LED_D6_GPIO_Port, LED_D6_Pin);
  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000a34 	.word	0x20000a34

08001ea8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e00a      	b.n	8001ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001eba:	f3af 8000 	nop.w
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	60ba      	str	r2, [r7, #8]
 8001ec6:	b2ca      	uxtb	r2, r1
 8001ec8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	dbf0      	blt.n	8001eba <_read+0x12>
	}

return len;
 8001ed8:	687b      	ldr	r3, [r7, #4]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e009      	b.n	8001f08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	60ba      	str	r2, [r7, #8]
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	dbf1      	blt.n	8001ef4 <_write+0x12>
	}
	return len;
 8001f10:	687b      	ldr	r3, [r7, #4]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_close>:

int _close(int file)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
	return -1;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f42:	605a      	str	r2, [r3, #4]
	return 0;
 8001f44:	2300      	movs	r3, #0
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <_isatty>:

int _isatty(int file)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
	return 1;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]
	return 0;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f8c:	4a14      	ldr	r2, [pc, #80]	; (8001fe0 <_sbrk+0x5c>)
 8001f8e:	4b15      	ldr	r3, [pc, #84]	; (8001fe4 <_sbrk+0x60>)
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f98:	4b13      	ldr	r3, [pc, #76]	; (8001fe8 <_sbrk+0x64>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d102      	bne.n	8001fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <_sbrk+0x64>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <_sbrk+0x68>)
 8001fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <_sbrk+0x64>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4413      	add	r3, r2
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d207      	bcs.n	8001fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fb4:	f006 fff6 	bl	8008fa4 <__errno>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	220c      	movs	r2, #12
 8001fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001fc2:	e009      	b.n	8001fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <_sbrk+0x64>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fca:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <_sbrk+0x64>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <_sbrk+0x64>)
 8001fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	20020000 	.word	0x20020000
 8001fe4:	00004000 	.word	0x00004000
 8001fe8:	2000020c 	.word	0x2000020c
 8001fec:	20000e50 	.word	0x20000e50

08001ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <SystemInit+0x28>)
 8001ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffa:	4a07      	ldr	r2, [pc, #28]	; (8002018 <SystemInit+0x28>)
 8001ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <SystemInit+0x28>)
 8002006:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800200a:	609a      	str	r2, [r3, #8]
#endif
}
 800200c:	bf00      	nop
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 8002020:	4b0e      	ldr	r3, [pc, #56]	; (800205c <MX_TIM10_Init+0x40>)
 8002022:	4a0f      	ldr	r2, [pc, #60]	; (8002060 <MX_TIM10_Init+0x44>)
 8002024:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 4999;
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <MX_TIM10_Init+0x40>)
 8002028:	f241 3287 	movw	r2, #4999	; 0x1387
 800202c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202e:	4b0b      	ldr	r3, [pc, #44]	; (800205c <MX_TIM10_Init+0x40>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 7999;
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <MX_TIM10_Init+0x40>)
 8002036:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800203a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203c:	4b07      	ldr	r3, [pc, #28]	; (800205c <MX_TIM10_Init+0x40>)
 800203e:	2200      	movs	r2, #0
 8002040:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <MX_TIM10_Init+0x40>)
 8002044:	2200      	movs	r2, #0
 8002046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002048:	4804      	ldr	r0, [pc, #16]	; (800205c <MX_TIM10_Init+0x40>)
 800204a:	f003 f86d 	bl	8005128 <HAL_TIM_Base_Init>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8002054:	f7ff fdca 	bl	8001bec <Error_Handler>
  }

}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	20000470 	.word	0x20000470
 8002060:	40014400 	.word	0x40014400

08002064 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a0e      	ldr	r2, [pc, #56]	; (80020ac <HAL_TIM_Base_MspInit+0x48>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d115      	bne.n	80020a2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_TIM_Base_MspInit+0x4c>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <HAL_TIM_Base_MspInit+0x4c>)
 8002080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002084:	6453      	str	r3, [r2, #68]	; 0x44
 8002086:	4b0a      	ldr	r3, [pc, #40]	; (80020b0 <HAL_TIM_Base_MspInit+0x4c>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8002092:	2200      	movs	r2, #0
 8002094:	2101      	movs	r1, #1
 8002096:	2019      	movs	r0, #25
 8002098:	f001 f849 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800209c:	2019      	movs	r0, #25
 800209e:	f001 f862 	bl	8003166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40014400 	.word	0x40014400
 80020b0:	40023800 	.word	0x40023800

080020b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020ba:	e003      	b.n	80020c4 <LoopCopyDataInit>

080020bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020c2:	3104      	adds	r1, #4

080020c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020c4:	480b      	ldr	r0, [pc, #44]	; (80020f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020cc:	d3f6      	bcc.n	80020bc <CopyDataInit>
  ldr  r2, =_sbss
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020d0:	e002      	b.n	80020d8 <LoopFillZerobss>

080020d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020d4:	f842 3b04 	str.w	r3, [r2], #4

080020d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020dc:	d3f9      	bcc.n	80020d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020de:	f7ff ff87 	bl	8001ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020e2:	f006 ff65 	bl	8008fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020e6:	f7ff fc7f 	bl	80019e8 <main>
  bx  lr    
 80020ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020f0:	0800a50c 	.word	0x0800a50c
  ldr  r0, =_sdata
 80020f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020f8:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80020fc:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8002100:	20000e4c 	.word	0x20000e4c

08002104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002104:	e7fe      	b.n	8002104 <ADC_IRQHandler>
	...

08002108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800210c:	4b0e      	ldr	r3, [pc, #56]	; (8002148 <HAL_Init+0x40>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0d      	ldr	r2, [pc, #52]	; (8002148 <HAL_Init+0x40>)
 8002112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002118:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <HAL_Init+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <HAL_Init+0x40>)
 800211e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <HAL_Init+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a07      	ldr	r2, [pc, #28]	; (8002148 <HAL_Init+0x40>)
 800212a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800212e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002130:	2003      	movs	r0, #3
 8002132:	f000 fff1 	bl	8003118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002136:	2000      	movs	r0, #0
 8002138:	f000 f808 	bl	800214c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800213c:	f7ff fd5e 	bl	8001bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40023c00 	.word	0x40023c00

0800214c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002154:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_InitTick+0x54>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_InitTick+0x58>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002162:	fbb3 f3f1 	udiv	r3, r3, r1
 8002166:	fbb2 f3f3 	udiv	r3, r2, r3
 800216a:	4618      	mov	r0, r3
 800216c:	f001 f809 	bl	8003182 <HAL_SYSTICK_Config>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e00e      	b.n	8002198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b0f      	cmp	r3, #15
 800217e:	d80a      	bhi.n	8002196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002180:	2200      	movs	r2, #0
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	f04f 30ff 	mov.w	r0, #4294967295
 8002188:	f000 ffd1 	bl	800312e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800218c:	4a06      	ldr	r2, [pc, #24]	; (80021a8 <HAL_InitTick+0x5c>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	e000      	b.n	8002198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000000 	.word	0x20000000
 80021a4:	20000008 	.word	0x20000008
 80021a8:	20000004 	.word	0x20000004

080021ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b0:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_IncTick+0x20>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <HAL_IncTick+0x24>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <HAL_IncTick+0x24>)
 80021be:	6013      	str	r3, [r2, #0]
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000008 	.word	0x20000008
 80021d0:	200004b0 	.word	0x200004b0

080021d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return uwTick;
 80021d8:	4b03      	ldr	r3, [pc, #12]	; (80021e8 <HAL_GetTick+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	200004b0 	.word	0x200004b0

080021ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021f4:	f7ff ffee 	bl	80021d4 <HAL_GetTick>
 80021f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d005      	beq.n	8002212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <HAL_Delay+0x44>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	4413      	add	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002212:	bf00      	nop
 8002214:	f7ff ffde 	bl	80021d4 <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	429a      	cmp	r2, r3
 8002222:	d8f7      	bhi.n	8002214 <HAL_Delay+0x28>
  {
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000008 	.word	0x20000008

08002234 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0ed      	b.n	8002422 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 3020 	ldrb.w	r3, [r3, #32]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d102      	bne.n	8002258 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7fe f9f4 	bl	8000640 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0202 	bic.w	r2, r2, #2
 8002266:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002268:	f7ff ffb4 	bl	80021d4 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800226e:	e012      	b.n	8002296 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002270:	f7ff ffb0 	bl	80021d4 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	2b0a      	cmp	r3, #10
 800227c:	d90b      	bls.n	8002296 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002282:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2205      	movs	r2, #5
 800228e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e0c5      	b.n	8002422 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e5      	bne.n	8002270 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f042 0201 	orr.w	r2, r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022b4:	f7ff ff8e 	bl	80021d4 <HAL_GetTick>
 80022b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022ba:	e012      	b.n	80022e2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022bc:	f7ff ff8a 	bl	80021d4 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b0a      	cmp	r3, #10
 80022c8:	d90b      	bls.n	80022e2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2205      	movs	r2, #5
 80022da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e09f      	b.n	8002422 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0e5      	beq.n	80022bc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	7e1b      	ldrb	r3, [r3, #24]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d108      	bne.n	800230a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e007      	b.n	800231a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002318:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7e5b      	ldrb	r3, [r3, #25]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d108      	bne.n	8002334 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	e007      	b.n	8002344 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002342:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	7e9b      	ldrb	r3, [r3, #26]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d108      	bne.n	800235e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0220 	orr.w	r2, r2, #32
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	e007      	b.n	800236e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0220 	bic.w	r2, r2, #32
 800236c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	7edb      	ldrb	r3, [r3, #27]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d108      	bne.n	8002388 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0210 	bic.w	r2, r2, #16
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e007      	b.n	8002398 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0210 	orr.w	r2, r2, #16
 8002396:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7f1b      	ldrb	r3, [r3, #28]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d108      	bne.n	80023b2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0208 	orr.w	r2, r2, #8
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	e007      	b.n	80023c2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f022 0208 	bic.w	r2, r2, #8
 80023c0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	7f5b      	ldrb	r3, [r3, #29]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d108      	bne.n	80023dc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f042 0204 	orr.w	r2, r2, #4
 80023d8:	601a      	str	r2, [r3, #0]
 80023da:	e007      	b.n	80023ec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f022 0204 	bic.w	r2, r2, #4
 80023ea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	431a      	orrs	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	ea42 0103 	orr.w	r1, r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	1e5a      	subs	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002442:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002444:	7cfb      	ldrb	r3, [r7, #19]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d003      	beq.n	8002452 <HAL_CAN_ConfigFilter+0x26>
 800244a:	7cfb      	ldrb	r3, [r7, #19]
 800244c:	2b02      	cmp	r3, #2
 800244e:	f040 80be 	bne.w	80025ce <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002452:	4b65      	ldr	r3, [pc, #404]	; (80025e8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002454:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800245c:	f043 0201 	orr.w	r2, r3, #1
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800246c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	021b      	lsls	r3, r3, #8
 8002482:	431a      	orrs	r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2201      	movs	r2, #1
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	43db      	mvns	r3, r3
 80024a4:	401a      	ands	r2, r3
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d123      	bne.n	80024fc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	43db      	mvns	r3, r3
 80024be:	401a      	ands	r2, r3
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80024d6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3248      	adds	r2, #72	; 0x48
 80024dc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024f0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024f2:	6979      	ldr	r1, [r7, #20]
 80024f4:	3348      	adds	r3, #72	; 0x48
 80024f6:	00db      	lsls	r3, r3, #3
 80024f8:	440b      	add	r3, r1
 80024fa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d122      	bne.n	800254a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	431a      	orrs	r2, r3
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002524:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	3248      	adds	r2, #72	; 0x48
 800252a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800253e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002540:	6979      	ldr	r1, [r7, #20]
 8002542:	3348      	adds	r3, #72	; 0x48
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	440b      	add	r3, r1
 8002548:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	43db      	mvns	r3, r3
 800255c:	401a      	ands	r2, r3
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002564:	e007      	b.n	8002576 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	431a      	orrs	r2, r3
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	691b      	ldr	r3, [r3, #16]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d109      	bne.n	8002592 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	43db      	mvns	r3, r3
 8002588:	401a      	ands	r2, r3
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002590:	e007      	b.n	80025a2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	431a      	orrs	r2, r3
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	6a1b      	ldr	r3, [r3, #32]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d107      	bne.n	80025ba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80025c0:	f023 0201 	bic.w	r2, r3, #1
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80025ca:	2300      	movs	r3, #0
 80025cc:	e006      	b.n	80025dc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
  }
}
 80025dc:	4618      	mov	r0, r3
 80025de:	371c      	adds	r7, #28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	40006400 	.word	0x40006400

080025ec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d12e      	bne.n	800265e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002618:	f7ff fddc 	bl	80021d4 <HAL_GetTick>
 800261c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800261e:	e012      	b.n	8002646 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002620:	f7ff fdd8 	bl	80021d4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b0a      	cmp	r3, #10
 800262c:	d90b      	bls.n	8002646 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002632:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2205      	movs	r2, #5
 800263e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e012      	b.n	800266c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1e5      	bne.n	8002620 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800265a:	2300      	movs	r3, #0
 800265c:	e006      	b.n	800266c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
  }
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002688:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002692:	7ffb      	ldrb	r3, [r7, #31]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d003      	beq.n	80026a0 <HAL_CAN_AddTxMessage+0x2c>
 8002698:	7ffb      	ldrb	r3, [r7, #31]
 800269a:	2b02      	cmp	r3, #2
 800269c:	f040 80b8 	bne.w	8002810 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10a      	bne.n	80026c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d105      	bne.n	80026c0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80a0 	beq.w	8002800 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	0e1b      	lsrs	r3, r3, #24
 80026c4:	f003 0303 	and.w	r3, r3, #3
 80026c8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d907      	bls.n	80026e0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e09e      	b.n	800281e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80026e0:	2201      	movs	r2, #1
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	409a      	lsls	r2, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10d      	bne.n	800270e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80026fc:	68f9      	ldr	r1, [r7, #12]
 80026fe:	6809      	ldr	r1, [r1, #0]
 8002700:	431a      	orrs	r2, r3
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3318      	adds	r3, #24
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	440b      	add	r3, r1
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e00f      	b.n	800272e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002718:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800271e:	68f9      	ldr	r1, [r7, #12]
 8002720:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002722:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	3318      	adds	r3, #24
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	440b      	add	r3, r1
 800272c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6819      	ldr	r1, [r3, #0]
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	3318      	adds	r3, #24
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	440b      	add	r3, r1
 800273e:	3304      	adds	r3, #4
 8002740:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	7d1b      	ldrb	r3, [r3, #20]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d111      	bne.n	800276e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	3318      	adds	r3, #24
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	4413      	add	r3, r2
 8002756:	3304      	adds	r3, #4
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	6811      	ldr	r1, [r2, #0]
 800275e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	3318      	adds	r3, #24
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	440b      	add	r3, r1
 800276a:	3304      	adds	r3, #4
 800276c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	3307      	adds	r3, #7
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	061a      	lsls	r2, r3, #24
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3306      	adds	r3, #6
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	041b      	lsls	r3, r3, #16
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3305      	adds	r3, #5
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	4313      	orrs	r3, r2
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	3204      	adds	r2, #4
 800278e:	7812      	ldrb	r2, [r2, #0]
 8002790:	4610      	mov	r0, r2
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	6811      	ldr	r1, [r2, #0]
 8002796:	ea43 0200 	orr.w	r2, r3, r0
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	440b      	add	r3, r1
 80027a0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80027a4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3303      	adds	r3, #3
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	061a      	lsls	r2, r3, #24
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3302      	adds	r3, #2
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	041b      	lsls	r3, r3, #16
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3301      	adds	r3, #1
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	4313      	orrs	r3, r2
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	7812      	ldrb	r2, [r2, #0]
 80027c6:	4610      	mov	r0, r2
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	6811      	ldr	r1, [r2, #0]
 80027cc:	ea43 0200 	orr.w	r2, r3, r0
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	440b      	add	r3, r1
 80027d6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80027da:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	3318      	adds	r3, #24
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	4413      	add	r3, r2
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	6811      	ldr	r1, [r2, #0]
 80027ee:	f043 0201 	orr.w	r2, r3, #1
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	3318      	adds	r3, #24
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	440b      	add	r3, r1
 80027fa:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80027fc:	2300      	movs	r3, #0
 80027fe:	e00e      	b.n	800281e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e006      	b.n	800281e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
  }
}
 800281e:	4618      	mov	r0, r3
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800282a:	b480      	push	{r7}
 800282c:	b085      	sub	sp, #20
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3020 	ldrb.w	r3, [r3, #32]
 800283c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800283e:	7afb      	ldrb	r3, [r7, #11]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d002      	beq.n	800284a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002844:	7afb      	ldrb	r3, [r7, #11]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d11d      	bne.n	8002886 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d002      	beq.n	800285e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3301      	adds	r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d002      	beq.n	8002872 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	3301      	adds	r3, #1
 8002870:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d002      	beq.n	8002886 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	3301      	adds	r3, #1
 8002884:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002886:	68fb      	ldr	r3, [r7, #12]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
 80028a0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d003      	beq.n	80028b8 <HAL_CAN_GetRxMessage+0x24>
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	f040 80f3 	bne.w	8002a9e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10e      	bne.n	80028dc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0303 	and.w	r3, r3, #3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d116      	bne.n	80028fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0e7      	b.n	8002aac <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d107      	bne.n	80028fa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e0d8      	b.n	8002aac <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	331b      	adds	r3, #27
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	4413      	add	r3, r2
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0204 	and.w	r2, r3, #4
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10c      	bne.n	8002932 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	331b      	adds	r3, #27
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	4413      	add	r3, r2
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	0d5b      	lsrs	r3, r3, #21
 8002928:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	e00b      	b.n	800294a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	331b      	adds	r3, #27
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	4413      	add	r3, r2
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	08db      	lsrs	r3, r3, #3
 8002942:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	331b      	adds	r3, #27
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	4413      	add	r3, r2
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0202 	and.w	r2, r3, #2
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	331b      	adds	r3, #27
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	4413      	add	r3, r2
 800296c:	3304      	adds	r3, #4
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 020f 	and.w	r2, r3, #15
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	331b      	adds	r3, #27
 8002980:	011b      	lsls	r3, r3, #4
 8002982:	4413      	add	r3, r2
 8002984:	3304      	adds	r3, #4
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	b2da      	uxtb	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	331b      	adds	r3, #27
 8002998:	011b      	lsls	r3, r3, #4
 800299a:	4413      	add	r3, r2
 800299c:	3304      	adds	r3, #4
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	0c1b      	lsrs	r3, r3, #16
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	4413      	add	r3, r2
 80029b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	0a1a      	lsrs	r2, r3, #8
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	3301      	adds	r3, #1
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	011b      	lsls	r3, r3, #4
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0c1a      	lsrs	r2, r3, #16
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	3302      	adds	r3, #2
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	0e1a      	lsrs	r2, r3, #24
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	3303      	adds	r3, #3
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	3304      	adds	r3, #4
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	011b      	lsls	r3, r3, #4
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	0a1a      	lsrs	r2, r3, #8
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	3305      	adds	r3, #5
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	4413      	add	r3, r2
 8002a48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	0c1a      	lsrs	r2, r3, #16
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	3306      	adds	r3, #6
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	011b      	lsls	r3, r3, #4
 8002a60:	4413      	add	r3, r2
 8002a62:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	0e1a      	lsrs	r2, r3, #24
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	3307      	adds	r3, #7
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d108      	bne.n	8002a8a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0220 	orr.w	r2, r2, #32
 8002a86:	60da      	str	r2, [r3, #12]
 8002a88:	e007      	b.n	8002a9a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 0220 	orr.w	r2, r2, #32
 8002a98:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e006      	b.n	8002aac <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
  }
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d002      	beq.n	8002ad6 <HAL_CAN_ActivateNotification+0x1e>
 8002ad0:	7bfb      	ldrb	r3, [r7, #15]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d109      	bne.n	8002aea <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6959      	ldr	r1, [r3, #20]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	e006      	b.n	8002af8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
  }
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3714      	adds	r7, #20
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	; 0x28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d07c      	beq.n	8002c44 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d023      	beq.n	8002b9c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	f003 0302 	and.w	r3, r3, #2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f983 	bl	8002e72 <HAL_CAN_TxMailbox0CompleteCallback>
 8002b6c:	e016      	b.n	8002b9c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	f003 0304 	and.w	r3, r3, #4
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d004      	beq.n	8002b82 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b80:	e00c      	b.n	8002b9c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f003 0308 	and.w	r3, r3, #8
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d004      	beq.n	8002b96 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
 8002b94:	e002      	b.n	8002b9c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f989 	bl	8002eae <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d024      	beq.n	8002bf0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f963 	bl	8002e86 <HAL_CAN_TxMailbox1CompleteCallback>
 8002bc0:	e016      	b.n	8002bf0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d004      	beq.n	8002bd6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
 8002bd4:	e00c      	b.n	8002bf0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d004      	beq.n	8002bea <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
 8002be8:	e002      	b.n	8002bf0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f969 	bl	8002ec2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d024      	beq.n	8002c44 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f943 	bl	8002e9a <HAL_CAN_TxMailbox2CompleteCallback>
 8002c14:	e016      	b.n	8002c44 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d004      	beq.n	8002c2a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
 8002c28:	e00c      	b.n	8002c44 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d004      	beq.n	8002c3e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c3c:	e002      	b.n	8002c44 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f000 f949 	bl	8002ed6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002c44:	6a3b      	ldr	r3, [r7, #32]
 8002c46:	f003 0308 	and.w	r3, r3, #8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00c      	beq.n	8002c68 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f003 0310 	and.w	r3, r3, #16
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d007      	beq.n	8002c68 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2210      	movs	r2, #16
 8002c66:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d006      	beq.n	8002c8a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2208      	movs	r2, #8
 8002c82:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f93a 	bl	8002efe <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d009      	beq.n	8002ca8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d002      	beq.n	8002ca8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f921 	bl	8002eea <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00c      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f003 0310 	and.w	r3, r3, #16
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2210      	movs	r2, #16
 8002cca:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d006      	beq.n	8002cee <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 f91c 	bl	8002f26 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002cee:	6a3b      	ldr	r3, [r7, #32]
 8002cf0:	f003 0310 	and.w	r3, r3, #16
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d009      	beq.n	8002d0c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d002      	beq.n	8002d0c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f903 	bl	8002f12 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002d0c:	6a3b      	ldr	r3, [r7, #32]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	f003 0310 	and.w	r3, r3, #16
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d006      	beq.n	8002d2e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2210      	movs	r2, #16
 8002d26:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 f906 	bl	8002f3a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00b      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2208      	movs	r2, #8
 8002d48:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8ff 	bl	8002f4e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002d50:	6a3b      	ldr	r3, [r7, #32]
 8002d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d07b      	beq.n	8002e52 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d072      	beq.n	8002e4a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d008      	beq.n	8002d80 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	f043 0301 	orr.w	r3, r3, #1
 8002d7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d003      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	f043 0302 	orr.w	r3, r3, #2
 8002d9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d008      	beq.n	8002db8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	f043 0304 	orr.w	r3, r3, #4
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d043      	beq.n	8002e4a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d03e      	beq.n	8002e4a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dd2:	2b60      	cmp	r3, #96	; 0x60
 8002dd4:	d02b      	beq.n	8002e2e <HAL_CAN_IRQHandler+0x32a>
 8002dd6:	2b60      	cmp	r3, #96	; 0x60
 8002dd8:	d82e      	bhi.n	8002e38 <HAL_CAN_IRQHandler+0x334>
 8002dda:	2b50      	cmp	r3, #80	; 0x50
 8002ddc:	d022      	beq.n	8002e24 <HAL_CAN_IRQHandler+0x320>
 8002dde:	2b50      	cmp	r3, #80	; 0x50
 8002de0:	d82a      	bhi.n	8002e38 <HAL_CAN_IRQHandler+0x334>
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	d019      	beq.n	8002e1a <HAL_CAN_IRQHandler+0x316>
 8002de6:	2b40      	cmp	r3, #64	; 0x40
 8002de8:	d826      	bhi.n	8002e38 <HAL_CAN_IRQHandler+0x334>
 8002dea:	2b30      	cmp	r3, #48	; 0x30
 8002dec:	d010      	beq.n	8002e10 <HAL_CAN_IRQHandler+0x30c>
 8002dee:	2b30      	cmp	r3, #48	; 0x30
 8002df0:	d822      	bhi.n	8002e38 <HAL_CAN_IRQHandler+0x334>
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d002      	beq.n	8002dfc <HAL_CAN_IRQHandler+0x2f8>
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d005      	beq.n	8002e06 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002dfa:	e01d      	b.n	8002e38 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfe:	f043 0308 	orr.w	r3, r3, #8
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e04:	e019      	b.n	8002e3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	f043 0310 	orr.w	r3, r3, #16
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e0e:	e014      	b.n	8002e3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	f043 0320 	orr.w	r3, r3, #32
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e18:	e00f      	b.n	8002e3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e22:	e00a      	b.n	8002e3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e2c:	e005      	b.n	8002e3a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e34:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002e36:	e000      	b.n	8002e3a <HAL_CAN_IRQHandler+0x336>
            break;
 8002e38:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	699a      	ldr	r2, [r3, #24]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002e48:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2204      	movs	r2, #4
 8002e50:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f87c 	bl	8002f62 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	3728      	adds	r7, #40	; 0x28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002e7a:	bf00      	nop
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e86:	b480      	push	{r7}
 8002e88:	b083      	sub	sp, #12
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002e8e:	bf00      	nop
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr

08002e9a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b083      	sub	sp, #12
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002ea2:	bf00      	nop
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002eb6:	bf00      	nop
 8002eb8:	370c      	adds	r7, #12
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	b083      	sub	sp, #12
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002eca:	bf00      	nop
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b083      	sub	sp, #12
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002f06:	bf00      	nop
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b083      	sub	sp, #12
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f88:	4b0c      	ldr	r3, [pc, #48]	; (8002fbc <__NVIC_SetPriorityGrouping+0x44>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f94:	4013      	ands	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002faa:	4a04      	ldr	r2, [pc, #16]	; (8002fbc <__NVIC_SetPriorityGrouping+0x44>)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	60d3      	str	r3, [r2, #12]
}
 8002fb0:	bf00      	nop
 8002fb2:	3714      	adds	r7, #20
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr
 8002fbc:	e000ed00 	.word	0xe000ed00

08002fc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fc4:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	0a1b      	lsrs	r3, r3, #8
 8002fca:	f003 0307 	and.w	r3, r3, #7
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000ed00 	.word	0xe000ed00

08002fdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	db0b      	blt.n	8003006 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	f003 021f 	and.w	r2, r3, #31
 8002ff4:	4907      	ldr	r1, [pc, #28]	; (8003014 <__NVIC_EnableIRQ+0x38>)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	fa00 f202 	lsl.w	r2, r0, r2
 8003002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	e000e100 	.word	0xe000e100

08003018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
 800301e:	4603      	mov	r3, r0
 8003020:	6039      	str	r1, [r7, #0]
 8003022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003028:	2b00      	cmp	r3, #0
 800302a:	db0a      	blt.n	8003042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	b2da      	uxtb	r2, r3
 8003030:	490c      	ldr	r1, [pc, #48]	; (8003064 <__NVIC_SetPriority+0x4c>)
 8003032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003036:	0112      	lsls	r2, r2, #4
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	440b      	add	r3, r1
 800303c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003040:	e00a      	b.n	8003058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	b2da      	uxtb	r2, r3
 8003046:	4908      	ldr	r1, [pc, #32]	; (8003068 <__NVIC_SetPriority+0x50>)
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	3b04      	subs	r3, #4
 8003050:	0112      	lsls	r2, r2, #4
 8003052:	b2d2      	uxtb	r2, r2
 8003054:	440b      	add	r3, r1
 8003056:	761a      	strb	r2, [r3, #24]
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	e000e100 	.word	0xe000e100
 8003068:	e000ed00 	.word	0xe000ed00

0800306c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800306c:	b480      	push	{r7}
 800306e:	b089      	sub	sp, #36	; 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f1c3 0307 	rsb	r3, r3, #7
 8003086:	2b04      	cmp	r3, #4
 8003088:	bf28      	it	cs
 800308a:	2304      	movcs	r3, #4
 800308c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3304      	adds	r3, #4
 8003092:	2b06      	cmp	r3, #6
 8003094:	d902      	bls.n	800309c <NVIC_EncodePriority+0x30>
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3b03      	subs	r3, #3
 800309a:	e000      	b.n	800309e <NVIC_EncodePriority+0x32>
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a0:	f04f 32ff 	mov.w	r2, #4294967295
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	fa02 f303 	lsl.w	r3, r2, r3
 80030aa:	43da      	mvns	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	401a      	ands	r2, r3
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030b4:	f04f 31ff 	mov.w	r1, #4294967295
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	43d9      	mvns	r1, r3
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	4313      	orrs	r3, r2
         );
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3724      	adds	r7, #36	; 0x24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3b01      	subs	r3, #1
 80030e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030e4:	d301      	bcc.n	80030ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00f      	b.n	800310a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ea:	4a0a      	ldr	r2, [pc, #40]	; (8003114 <SysTick_Config+0x40>)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030f2:	210f      	movs	r1, #15
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295
 80030f8:	f7ff ff8e 	bl	8003018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <SysTick_Config+0x40>)
 80030fe:	2200      	movs	r2, #0
 8003100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003102:	4b04      	ldr	r3, [pc, #16]	; (8003114 <SysTick_Config+0x40>)
 8003104:	2207      	movs	r2, #7
 8003106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	e000e010 	.word	0xe000e010

08003118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ff29 	bl	8002f78 <__NVIC_SetPriorityGrouping>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	4603      	mov	r3, r0
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003140:	f7ff ff3e 	bl	8002fc0 <__NVIC_GetPriorityGrouping>
 8003144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	6978      	ldr	r0, [r7, #20]
 800314c:	f7ff ff8e 	bl	800306c <NVIC_EncodePriority>
 8003150:	4602      	mov	r2, r0
 8003152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003156:	4611      	mov	r1, r2
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff5d 	bl	8003018 <__NVIC_SetPriority>
}
 800315e:	bf00      	nop
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b082      	sub	sp, #8
 800316a:	af00      	add	r7, sp, #0
 800316c:	4603      	mov	r3, r0
 800316e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003174:	4618      	mov	r0, r3
 8003176:	f7ff ff31 	bl	8002fdc <__NVIC_EnableIRQ>
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff ffa2 	bl	80030d4 <SysTick_Config>
 8003190:	4603      	mov	r3, r0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
 80031b6:	e16b      	b.n	8003490 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031b8:	2201      	movs	r2, #1
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	4013      	ands	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	f040 815a 	bne.w	800348a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d00b      	beq.n	80031f6 <HAL_GPIO_Init+0x5a>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d007      	beq.n	80031f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031ea:	2b11      	cmp	r3, #17
 80031ec:	d003      	beq.n	80031f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2b12      	cmp	r3, #18
 80031f4:	d130      	bne.n	8003258 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4013      	ands	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	69ba      	ldr	r2, [r7, #24]
 8003224:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800322c:	2201      	movs	r2, #1
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 0201 	and.w	r2, r3, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4313      	orrs	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2203      	movs	r2, #3
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d003      	beq.n	8003298 <HAL_GPIO_Init+0xfc>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b12      	cmp	r3, #18
 8003296:	d123      	bne.n	80032e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	08da      	lsrs	r2, r3, #3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3208      	adds	r2, #8
 80032a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	220f      	movs	r2, #15
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	08da      	lsrs	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3208      	adds	r2, #8
 80032da:	69b9      	ldr	r1, [r7, #24]
 80032dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	2203      	movs	r2, #3
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0203 	and.w	r2, r3, #3
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80b4 	beq.w	800348a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	4b60      	ldr	r3, [pc, #384]	; (80034a8 <HAL_GPIO_Init+0x30c>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	4a5f      	ldr	r2, [pc, #380]	; (80034a8 <HAL_GPIO_Init+0x30c>)
 800332c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003330:	6453      	str	r3, [r2, #68]	; 0x44
 8003332:	4b5d      	ldr	r3, [pc, #372]	; (80034a8 <HAL_GPIO_Init+0x30c>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800333e:	4a5b      	ldr	r2, [pc, #364]	; (80034ac <HAL_GPIO_Init+0x310>)
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	089b      	lsrs	r3, r3, #2
 8003344:	3302      	adds	r3, #2
 8003346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800334a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	220f      	movs	r2, #15
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a52      	ldr	r2, [pc, #328]	; (80034b0 <HAL_GPIO_Init+0x314>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d02b      	beq.n	80033c2 <HAL_GPIO_Init+0x226>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a51      	ldr	r2, [pc, #324]	; (80034b4 <HAL_GPIO_Init+0x318>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d025      	beq.n	80033be <HAL_GPIO_Init+0x222>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a50      	ldr	r2, [pc, #320]	; (80034b8 <HAL_GPIO_Init+0x31c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d01f      	beq.n	80033ba <HAL_GPIO_Init+0x21e>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a4f      	ldr	r2, [pc, #316]	; (80034bc <HAL_GPIO_Init+0x320>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d019      	beq.n	80033b6 <HAL_GPIO_Init+0x21a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a4e      	ldr	r2, [pc, #312]	; (80034c0 <HAL_GPIO_Init+0x324>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d013      	beq.n	80033b2 <HAL_GPIO_Init+0x216>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a4d      	ldr	r2, [pc, #308]	; (80034c4 <HAL_GPIO_Init+0x328>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00d      	beq.n	80033ae <HAL_GPIO_Init+0x212>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a4c      	ldr	r2, [pc, #304]	; (80034c8 <HAL_GPIO_Init+0x32c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <HAL_GPIO_Init+0x20e>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a4b      	ldr	r2, [pc, #300]	; (80034cc <HAL_GPIO_Init+0x330>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d101      	bne.n	80033a6 <HAL_GPIO_Init+0x20a>
 80033a2:	2307      	movs	r3, #7
 80033a4:	e00e      	b.n	80033c4 <HAL_GPIO_Init+0x228>
 80033a6:	2308      	movs	r3, #8
 80033a8:	e00c      	b.n	80033c4 <HAL_GPIO_Init+0x228>
 80033aa:	2306      	movs	r3, #6
 80033ac:	e00a      	b.n	80033c4 <HAL_GPIO_Init+0x228>
 80033ae:	2305      	movs	r3, #5
 80033b0:	e008      	b.n	80033c4 <HAL_GPIO_Init+0x228>
 80033b2:	2304      	movs	r3, #4
 80033b4:	e006      	b.n	80033c4 <HAL_GPIO_Init+0x228>
 80033b6:	2303      	movs	r3, #3
 80033b8:	e004      	b.n	80033c4 <HAL_GPIO_Init+0x228>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e002      	b.n	80033c4 <HAL_GPIO_Init+0x228>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <HAL_GPIO_Init+0x228>
 80033c2:	2300      	movs	r3, #0
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	f002 0203 	and.w	r2, r2, #3
 80033ca:	0092      	lsls	r2, r2, #2
 80033cc:	4093      	lsls	r3, r2
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033d4:	4935      	ldr	r1, [pc, #212]	; (80034ac <HAL_GPIO_Init+0x310>)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	089b      	lsrs	r3, r3, #2
 80033da:	3302      	adds	r3, #2
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033e2:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_GPIO_Init+0x334>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003406:	4a32      	ldr	r2, [pc, #200]	; (80034d0 <HAL_GPIO_Init+0x334>)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800340c:	4b30      	ldr	r3, [pc, #192]	; (80034d0 <HAL_GPIO_Init+0x334>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003430:	4a27      	ldr	r2, [pc, #156]	; (80034d0 <HAL_GPIO_Init+0x334>)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003436:	4b26      	ldr	r3, [pc, #152]	; (80034d0 <HAL_GPIO_Init+0x334>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	43db      	mvns	r3, r3
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	4013      	ands	r3, r2
 8003444:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003452:	69ba      	ldr	r2, [r7, #24]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800345a:	4a1d      	ldr	r2, [pc, #116]	; (80034d0 <HAL_GPIO_Init+0x334>)
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003460:	4b1b      	ldr	r3, [pc, #108]	; (80034d0 <HAL_GPIO_Init+0x334>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	43db      	mvns	r3, r3
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	4013      	ands	r3, r2
 800346e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d003      	beq.n	8003484 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800347c:	69ba      	ldr	r2, [r7, #24]
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003484:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <HAL_GPIO_Init+0x334>)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3301      	adds	r3, #1
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b0f      	cmp	r3, #15
 8003494:	f67f ae90 	bls.w	80031b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003498:	bf00      	nop
 800349a:	bf00      	nop
 800349c:	3724      	adds	r7, #36	; 0x24
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40023800 	.word	0x40023800
 80034ac:	40013800 	.word	0x40013800
 80034b0:	40020000 	.word	0x40020000
 80034b4:	40020400 	.word	0x40020400
 80034b8:	40020800 	.word	0x40020800
 80034bc:	40020c00 	.word	0x40020c00
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40021400 	.word	0x40021400
 80034c8:	40021800 	.word	0x40021800
 80034cc:	40021c00 	.word	0x40021c00
 80034d0:	40013c00 	.word	0x40013c00

080034d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	887b      	ldrh	r3, [r7, #2]
 80034e6:	4013      	ands	r3, r2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034ec:	2301      	movs	r3, #1
 80034ee:	73fb      	strb	r3, [r7, #15]
 80034f0:	e001      	b.n	80034f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034f2:	2300      	movs	r3, #0
 80034f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	807b      	strh	r3, [r7, #2]
 8003510:	4613      	mov	r3, r2
 8003512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003514:	787b      	ldrb	r3, [r7, #1]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d003      	beq.n	8003522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003520:	e003      	b.n	800352a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003522:	887b      	ldrh	r3, [r7, #2]
 8003524:	041a      	lsls	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	619a      	str	r2, [r3, #24]
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr

08003536 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	460b      	mov	r3, r1
 8003540:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	695a      	ldr	r2, [r3, #20]
 8003546:	887b      	ldrh	r3, [r7, #2]
 8003548:	401a      	ands	r2, r3
 800354a:	887b      	ldrh	r3, [r7, #2]
 800354c:	429a      	cmp	r2, r3
 800354e:	d104      	bne.n	800355a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003550:	887b      	ldrh	r3, [r7, #2]
 8003552:	041a      	lsls	r2, r3, #16
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003558:	e002      	b.n	8003560 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800355a:	887a      	ldrh	r2, [r7, #2]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	619a      	str	r2, [r3, #24]
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003576:	4b08      	ldr	r3, [pc, #32]	; (8003598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003578:	695a      	ldr	r2, [r3, #20]
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	4013      	ands	r3, r2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d006      	beq.n	8003590 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003582:	4a05      	ldr	r2, [pc, #20]	; (8003598 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003588:	88fb      	ldrh	r3, [r7, #6]
 800358a:	4618      	mov	r0, r3
 800358c:	f7fd ffa0 	bl	80014d0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40013c00 	.word	0x40013c00

0800359c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800359c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800359e:	b08f      	sub	sp, #60	; 0x3c
 80035a0:	af0a      	add	r7, sp, #40	; 0x28
 80035a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e10f      	b.n	80037ce <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d106      	bne.n	80035ce <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f005 f9ed 	bl	80089a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2203      	movs	r2, #3
 80035d2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d102      	bne.n	80035e8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f002 f8ee 	bl	80057ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	687e      	ldr	r6, [r7, #4]
 80035fa:	466d      	mov	r5, sp
 80035fc:	f106 0410 	add.w	r4, r6, #16
 8003600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003604:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003606:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003608:	e894 0003 	ldmia.w	r4, {r0, r1}
 800360c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003610:	1d33      	adds	r3, r6, #4
 8003612:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003614:	6838      	ldr	r0, [r7, #0]
 8003616:	f001 ffc5 	bl	80055a4 <USB_CoreInit>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d005      	beq.n	800362c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e0d0      	b.n	80037ce <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2100      	movs	r1, #0
 8003632:	4618      	mov	r0, r3
 8003634:	f002 f8dc 	bl	80057f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003638:	2300      	movs	r3, #0
 800363a:	73fb      	strb	r3, [r7, #15]
 800363c:	e04a      	b.n	80036d4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800363e:	7bfa      	ldrb	r2, [r7, #15]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	333d      	adds	r3, #61	; 0x3d
 800364e:	2201      	movs	r2, #1
 8003650:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003652:	7bfa      	ldrb	r2, [r7, #15]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	00db      	lsls	r3, r3, #3
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	333c      	adds	r3, #60	; 0x3c
 8003662:	7bfa      	ldrb	r2, [r7, #15]
 8003664:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003666:	7bfa      	ldrb	r2, [r7, #15]
 8003668:	7bfb      	ldrb	r3, [r7, #15]
 800366a:	b298      	uxth	r0, r3
 800366c:	6879      	ldr	r1, [r7, #4]
 800366e:	4613      	mov	r3, r2
 8003670:	00db      	lsls	r3, r3, #3
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	009b      	lsls	r3, r3, #2
 8003676:	440b      	add	r3, r1
 8003678:	3342      	adds	r3, #66	; 0x42
 800367a:	4602      	mov	r2, r0
 800367c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800367e:	7bfa      	ldrb	r2, [r7, #15]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	333f      	adds	r3, #63	; 0x3f
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	6879      	ldr	r1, [r7, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	1a9b      	subs	r3, r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	3344      	adds	r3, #68	; 0x44
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80036a6:	7bfa      	ldrb	r2, [r7, #15]
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	3348      	adds	r3, #72	; 0x48
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80036ba:	7bfa      	ldrb	r2, [r7, #15]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	3350      	adds	r3, #80	; 0x50
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	3301      	adds	r3, #1
 80036d2:	73fb      	strb	r3, [r7, #15]
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d3af      	bcc.n	800363e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
 80036e2:	e044      	b.n	800376e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80036e4:	7bfa      	ldrb	r2, [r7, #15]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80036f6:	2200      	movs	r2, #0
 80036f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80036fa:	7bfa      	ldrb	r2, [r7, #15]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800370c:	7bfa      	ldrb	r2, [r7, #15]
 800370e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003710:	7bfa      	ldrb	r2, [r7, #15]
 8003712:	6879      	ldr	r1, [r7, #4]
 8003714:	4613      	mov	r3, r2
 8003716:	00db      	lsls	r3, r3, #3
 8003718:	1a9b      	subs	r3, r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	440b      	add	r3, r1
 800371e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003726:	7bfa      	ldrb	r2, [r7, #15]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	00db      	lsls	r3, r3, #3
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800373c:	7bfa      	ldrb	r2, [r7, #15]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003752:	7bfa      	ldrb	r2, [r7, #15]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003768:	7bfb      	ldrb	r3, [r7, #15]
 800376a:	3301      	adds	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	429a      	cmp	r2, r3
 8003776:	d3b5      	bcc.n	80036e4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	603b      	str	r3, [r7, #0]
 800377e:	687e      	ldr	r6, [r7, #4]
 8003780:	466d      	mov	r5, sp
 8003782:	f106 0410 	add.w	r4, r6, #16
 8003786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800378a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800378c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800378e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003792:	e885 0003 	stmia.w	r5, {r0, r1}
 8003796:	1d33      	adds	r3, r6, #4
 8003798:	cb0e      	ldmia	r3, {r1, r2, r3}
 800379a:	6838      	ldr	r0, [r7, #0]
 800379c:	f002 f852 	bl	8005844 <USB_DevInit>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2202      	movs	r2, #2
 80037aa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e00d      	b.n	80037ce <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2201      	movs	r2, #1
 80037be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f003 f891 	bl	80068ee <USB_DevDisconnect>

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3714      	adds	r7, #20
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080037d6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80037d6:	b580      	push	{r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d101      	bne.n	80037f2 <HAL_PCD_Start+0x1c>
 80037ee:	2302      	movs	r3, #2
 80037f0:	e020      	b.n	8003834 <HAL_PCD_Start+0x5e>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2201      	movs	r2, #1
 80037f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d109      	bne.n	8003816 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003806:	2b01      	cmp	r3, #1
 8003808:	d005      	beq.n	8003816 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f003 f84f 	bl	80068be <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f001 ffc1 	bl	80057ac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800383c:	b590      	push	{r4, r7, lr}
 800383e:	b08d      	sub	sp, #52	; 0x34
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f003 f8f6 	bl	8006a44 <USB_GetMode>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	f040 839d 	bne.w	8003f9a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f003 f85a 	bl	800691e <USB_ReadInterrupts>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 8393 	beq.w	8003f98 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f003 f851 	bl	800691e <USB_ReadInterrupts>
 800387c:	4603      	mov	r3, r0
 800387e:	f003 0302 	and.w	r3, r3, #2
 8003882:	2b02      	cmp	r3, #2
 8003884:	d107      	bne.n	8003896 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695a      	ldr	r2, [r3, #20]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f002 0202 	and.w	r2, r2, #2
 8003894:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4618      	mov	r0, r3
 800389c:	f003 f83f 	bl	800691e <USB_ReadInterrupts>
 80038a0:	4603      	mov	r3, r0
 80038a2:	f003 0310 	and.w	r3, r3, #16
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d161      	bne.n	800396e <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	699a      	ldr	r2, [r3, #24]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0210 	bic.w	r2, r2, #16
 80038b8:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	f003 020f 	and.w	r2, r3, #15
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	4413      	add	r3, r2
 80038d6:	3304      	adds	r3, #4
 80038d8:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	0c5b      	lsrs	r3, r3, #17
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d124      	bne.n	8003930 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80038ec:	4013      	ands	r3, r2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d035      	beq.n	800395e <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	091b      	lsrs	r3, r3, #4
 80038fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80038fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003900:	b29b      	uxth	r3, r3
 8003902:	461a      	mov	r2, r3
 8003904:	6a38      	ldr	r0, [r7, #32]
 8003906:	f002 feb7 	bl	8006678 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	68da      	ldr	r2, [r3, #12]
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	091b      	lsrs	r3, r3, #4
 8003912:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003916:	441a      	add	r2, r3
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	699a      	ldr	r2, [r3, #24]
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	091b      	lsrs	r3, r3, #4
 8003924:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003928:	441a      	add	r2, r3
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	619a      	str	r2, [r3, #24]
 800392e:	e016      	b.n	800395e <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	0c5b      	lsrs	r3, r3, #17
 8003934:	f003 030f 	and.w	r3, r3, #15
 8003938:	2b06      	cmp	r3, #6
 800393a:	d110      	bne.n	800395e <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003942:	2208      	movs	r2, #8
 8003944:	4619      	mov	r1, r3
 8003946:	6a38      	ldr	r0, [r7, #32]
 8003948:	f002 fe96 	bl	8006678 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	699a      	ldr	r2, [r3, #24]
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	091b      	lsrs	r3, r3, #4
 8003954:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003958:	441a      	add	r2, r3
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	699a      	ldr	r2, [r3, #24]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f042 0210 	orr.w	r2, r2, #16
 800396c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f002 ffd3 	bl	800691e <USB_ReadInterrupts>
 8003978:	4603      	mov	r3, r0
 800397a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800397e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003982:	d16e      	bne.n	8003a62 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4618      	mov	r0, r3
 800398e:	f002 ffd9 	bl	8006944 <USB_ReadDevAllOutEpInterrupt>
 8003992:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003994:	e062      	b.n	8003a5c <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b00      	cmp	r3, #0
 800399e:	d057      	beq.n	8003a50 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f002 fffe 	bl	80069ac <USB_ReadDevOutEPInterrupt>
 80039b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00c      	beq.n	80039d6 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c8:	461a      	mov	r2, r3
 80039ca:	2301      	movs	r3, #1
 80039cc:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80039ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 fdb1 	bl	8004538 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00c      	beq.n	80039fa <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ec:	461a      	mov	r2, r3
 80039ee:	2308      	movs	r3, #8
 80039f0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80039f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 feab 	bl	8004750 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f003 0310 	and.w	r3, r3, #16
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d008      	beq.n	8003a16 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a10:	461a      	mov	r2, r3
 8003a12:	2310      	movs	r3, #16
 8003a14:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	f003 0320 	and.w	r3, r3, #32
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	015a      	lsls	r2, r3, #5
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	4413      	add	r3, r2
 8003a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2320      	movs	r3, #32
 8003a30:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d009      	beq.n	8003a50 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a48:	461a      	mov	r2, r3
 8003a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a4e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	3301      	adds	r3, #1
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a58:	085b      	lsrs	r3, r3, #1
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d199      	bne.n	8003996 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f002 ff59 	bl	800691e <USB_ReadInterrupts>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a76:	f040 80c0 	bne.w	8003bfa <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f002 ff7a 	bl	8006978 <USB_ReadDevAllInEpInterrupt>
 8003a84:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a8a:	e0b2      	b.n	8003bf2 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 80a7 	beq.w	8003be6 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f002 ffa0 	bl	80069e8 <USB_ReadDevInEPInterrupt>
 8003aa8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d057      	beq.n	8003b64 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	2201      	movs	r2, #1
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69f9      	ldr	r1, [r7, #28]
 8003ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d132      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af6:	4613      	mov	r3, r2
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	3348      	adds	r3, #72	; 0x48
 8003b02:	6819      	ldr	r1, [r3, #0]
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b08:	4613      	mov	r3, r2
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4403      	add	r3, r0
 8003b12:	3344      	adds	r3, #68	; 0x44
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4419      	add	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4403      	add	r3, r0
 8003b26:	3348      	adds	r3, #72	; 0x48
 8003b28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d113      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x31c>
 8003b30:	6879      	ldr	r1, [r7, #4]
 8003b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b34:	4613      	mov	r3, r2
 8003b36:	00db      	lsls	r3, r3, #3
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	3350      	adds	r3, #80	; 0x50
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d108      	bne.n	8003b58 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6818      	ldr	r0, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b50:	461a      	mov	r2, r3
 8003b52:	2101      	movs	r1, #1
 8003b54:	f002 ffa8 	bl	8006aa8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f004 ff9f 	bl	8008aa2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d008      	beq.n	8003b80 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	015a      	lsls	r2, r3, #5
 8003b72:	69fb      	ldr	r3, [r7, #28]
 8003b74:	4413      	add	r3, r2
 8003b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2308      	movs	r3, #8
 8003b7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d008      	beq.n	8003b9c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b96:	461a      	mov	r2, r3
 8003b98:	2310      	movs	r3, #16
 8003b9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d008      	beq.n	8003bb8 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bb2:	461a      	mov	r2, r3
 8003bb4:	2340      	movs	r3, #64	; 0x40
 8003bb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f003 0302 	and.w	r3, r3, #2
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bce:	461a      	mov	r2, r3
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003bde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 fc1b 	bl	800441c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be8:	3301      	adds	r3, #1
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bee:	085b      	lsrs	r3, r3, #1
 8003bf0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f47f af49 	bne.w	8003a8c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f002 fe8d 	bl	800691e <USB_ReadInterrupts>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c0e:	d122      	bne.n	8003c56 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	69fa      	ldr	r2, [r7, #28]
 8003c1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d108      	bne.n	8003c40 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003c36:	2100      	movs	r1, #0
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fe27 	bl	800488c <HAL_PCDEx_LPM_Callback>
 8003c3e:	e002      	b.n	8003c46 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f004 ffa5 	bl	8008b90 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	695a      	ldr	r2, [r3, #20]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003c54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f002 fe5f 	bl	800691e <USB_ReadInterrupts>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6a:	d112      	bne.n	8003c92 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d102      	bne.n	8003c82 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f004 ff61 	bl	8008b44 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	695a      	ldr	r2, [r3, #20]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c90:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f002 fe41 	bl	800691e <USB_ReadInterrupts>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca6:	f040 80c7 	bne.w	8003e38 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	69fa      	ldr	r2, [r7, #28]
 8003cb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb8:	f023 0301 	bic.w	r3, r3, #1
 8003cbc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2110      	movs	r1, #16
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f001 ff21 	bl	8005b0c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cce:	e056      	b.n	8003d7e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ce2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cf4:	0151      	lsls	r1, r2, #5
 8003cf6:	69fa      	ldr	r2, [r7, #28]
 8003cf8:	440a      	add	r2, r1
 8003cfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d02:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d14:	0151      	lsls	r1, r2, #5
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	440a      	add	r2, r1
 8003d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d30:	461a      	mov	r2, r3
 8003d32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d36:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d48:	0151      	lsls	r1, r2, #5
 8003d4a:	69fa      	ldr	r2, [r7, #28]
 8003d4c:	440a      	add	r2, r1
 8003d4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	015a      	lsls	r2, r3, #5
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d68:	0151      	lsls	r1, r2, #5
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	440a      	add	r2, r1
 8003d6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d76:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d3a3      	bcc.n	8003cd0 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	69fa      	ldr	r2, [r7, #28]
 8003d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d96:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d9a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d016      	beq.n	8003dd2 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003daa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dae:	69fa      	ldr	r2, [r7, #28]
 8003db0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003db4:	f043 030b 	orr.w	r3, r3, #11
 8003db8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc4:	69fa      	ldr	r2, [r7, #28]
 8003dc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dca:	f043 030b 	orr.w	r3, r3, #11
 8003dce:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd0:	e015      	b.n	8003dfe <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	69fa      	ldr	r2, [r7, #28]
 8003ddc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003de0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003de4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003de8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003df8:	f043 030b 	orr.w	r3, r3, #11
 8003dfc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e0c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e10:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e22:	461a      	mov	r2, r3
 8003e24:	f002 fe40 	bl	8006aa8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695a      	ldr	r2, [r3, #20]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003e36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f002 fd6e 	bl	800691e <USB_ReadInterrupts>
 8003e42:	4603      	mov	r3, r0
 8003e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4c:	d124      	bne.n	8003e98 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f002 fe04 	bl	8006a60 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f001 feb6 	bl	8005bce <USB_GetDevSpeed>
 8003e62:	4603      	mov	r3, r0
 8003e64:	461a      	mov	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681c      	ldr	r4, [r3, #0]
 8003e6e:	f001 f94f 	bl	8005110 <HAL_RCC_GetHCLKFreq>
 8003e72:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	f001 fbf3 	bl	8005668 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f004 fe35 	bl	8008af2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f002 fd3e 	bl	800691e <USB_ReadInterrupts>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d10a      	bne.n	8003ec2 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f004 fe12 	bl	8008ad6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	695a      	ldr	r2, [r3, #20]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f002 0208 	and.w	r2, r2, #8
 8003ec0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f002 fd29 	bl	800691e <USB_ReadInterrupts>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ed6:	d10f      	bne.n	8003ef8 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f004 fe74 	bl	8008bd0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003ef6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f002 fd0e 	bl	800691e <USB_ReadInterrupts>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f0c:	d10f      	bne.n	8003f2e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	4619      	mov	r1, r3
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f004 fe47 	bl	8008bac <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695a      	ldr	r2, [r3, #20]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f002 fcf3 	bl	800691e <USB_ReadInterrupts>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f42:	d10a      	bne.n	8003f5a <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f004 fe55 	bl	8008bf4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695a      	ldr	r2, [r3, #20]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003f58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f002 fcdd 	bl	800691e <USB_ReadInterrupts>
 8003f64:	4603      	mov	r3, r0
 8003f66:	f003 0304 	and.w	r3, r3, #4
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d115      	bne.n	8003f9a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f004 fe45 	bl	8008c10 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6859      	ldr	r1, [r3, #4]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]
 8003f96:	e000      	b.n	8003f9a <HAL_PCD_IRQHandler+0x75e>
      return;
 8003f98:	bf00      	nop
    }
  }
}
 8003f9a:	3734      	adds	r7, #52	; 0x34
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd90      	pop	{r4, r7, pc}

08003fa0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <HAL_PCD_SetAddress+0x1a>
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	e013      	b.n	8003fe2 <HAL_PCD_SetAddress+0x42>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	78fa      	ldrb	r2, [r7, #3]
 8003fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	78fa      	ldrb	r2, [r7, #3]
 8003fd0:	4611      	mov	r1, r2
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f002 fc4d 	bl	8006872 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	4608      	mov	r0, r1
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	70fb      	strb	r3, [r7, #3]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	803b      	strh	r3, [r7, #0]
 8004000:	4613      	mov	r3, r2
 8004002:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004008:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800400c:	2b00      	cmp	r3, #0
 800400e:	da0f      	bge.n	8004030 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	f003 020f 	and.w	r2, r3, #15
 8004016:	4613      	mov	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	3338      	adds	r3, #56	; 0x38
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	4413      	add	r3, r2
 8004024:	3304      	adds	r3, #4
 8004026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	705a      	strb	r2, [r3, #1]
 800402e:	e00f      	b.n	8004050 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	f003 020f 	and.w	r2, r3, #15
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	4413      	add	r3, r2
 8004046:	3304      	adds	r3, #4
 8004048:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	b2da      	uxtb	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800405c:	883a      	ldrh	r2, [r7, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	78ba      	ldrb	r2, [r7, #2]
 8004066:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	785b      	ldrb	r3, [r3, #1]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d004      	beq.n	800407a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	b29a      	uxth	r2, r3
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800407a:	78bb      	ldrb	r3, [r7, #2]
 800407c:	2b02      	cmp	r3, #2
 800407e:	d102      	bne.n	8004086 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_PCD_EP_Open+0xaa>
 8004090:	2302      	movs	r3, #2
 8004092:	e00e      	b.n	80040b2 <HAL_PCD_EP_Open+0xc8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68f9      	ldr	r1, [r7, #12]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 fdb8 	bl	8005c18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80040b0:	7afb      	ldrb	r3, [r7, #11]
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
 80040c2:	460b      	mov	r3, r1
 80040c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	da0f      	bge.n	80040ee <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	f003 020f 	and.w	r2, r3, #15
 80040d4:	4613      	mov	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	3338      	adds	r3, #56	; 0x38
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4413      	add	r3, r2
 80040e2:	3304      	adds	r3, #4
 80040e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	705a      	strb	r2, [r3, #1]
 80040ec:	e00f      	b.n	800410e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	f003 020f 	and.w	r2, r3, #15
 80040f4:	4613      	mov	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	4413      	add	r3, r2
 8004104:	3304      	adds	r3, #4
 8004106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	b2da      	uxtb	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_PCD_EP_Close+0x6e>
 8004124:	2302      	movs	r3, #2
 8004126:	e00e      	b.n	8004146 <HAL_PCD_EP_Close+0x8c>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68f9      	ldr	r1, [r7, #12]
 8004136:	4618      	mov	r0, r3
 8004138:	f001 fdf6 	bl	8005d28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b086      	sub	sp, #24
 8004152:	af00      	add	r7, sp, #0
 8004154:	60f8      	str	r0, [r7, #12]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
 800415a:	460b      	mov	r3, r1
 800415c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800415e:	7afb      	ldrb	r3, [r7, #11]
 8004160:	f003 020f 	and.w	r2, r3, #15
 8004164:	4613      	mov	r3, r2
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	1a9b      	subs	r3, r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	3304      	adds	r3, #4
 8004176:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	683a      	ldr	r2, [r7, #0]
 8004182:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	2200      	movs	r2, #0
 8004188:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2200      	movs	r2, #0
 800418e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004190:	7afb      	ldrb	r3, [r7, #11]
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	b2da      	uxtb	r2, r3
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d102      	bne.n	80041aa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041aa:	7afb      	ldrb	r3, [r7, #11]
 80041ac:	f003 030f 	and.w	r3, r3, #15
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d109      	bne.n	80041c8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	6979      	ldr	r1, [r7, #20]
 80041c2:	f002 f8d1 	bl	8006368 <USB_EP0StartXfer>
 80041c6:	e008      	b.n	80041da <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6818      	ldr	r0, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	461a      	mov	r2, r3
 80041d4:	6979      	ldr	r1, [r7, #20]
 80041d6:	f001 fe83 	bl	8005ee0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	460b      	mov	r3, r1
 80041ee:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	f003 020f 	and.w	r2, r3, #15
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004206:	681b      	ldr	r3, [r3, #0]
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	460b      	mov	r3, r1
 8004222:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004224:	7afb      	ldrb	r3, [r7, #11]
 8004226:	f003 020f 	and.w	r2, r3, #15
 800422a:	4613      	mov	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	3338      	adds	r3, #56	; 0x38
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	4413      	add	r3, r2
 8004238:	3304      	adds	r3, #4
 800423a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2200      	movs	r2, #0
 800424c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2201      	movs	r2, #1
 8004252:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004254:	7afb      	ldrb	r3, [r7, #11]
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	b2da      	uxtb	r2, r3
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d102      	bne.n	800426e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800426e:	7afb      	ldrb	r3, [r7, #11]
 8004270:	f003 030f 	and.w	r3, r3, #15
 8004274:	2b00      	cmp	r3, #0
 8004276:	d109      	bne.n	800428c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	6979      	ldr	r1, [r7, #20]
 8004286:	f002 f86f 	bl	8006368 <USB_EP0StartXfer>
 800428a:	e008      	b.n	800429e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6818      	ldr	r0, [r3, #0]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	6979      	ldr	r1, [r7, #20]
 800429a:	f001 fe21 	bl	8005ee0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800429e:	2300      	movs	r3, #0
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	460b      	mov	r3, r1
 80042b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042b4:	78fb      	ldrb	r3, [r7, #3]
 80042b6:	f003 020f 	and.w	r2, r3, #15
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d901      	bls.n	80042c6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e050      	b.n	8004368 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	da0f      	bge.n	80042ee <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042ce:	78fb      	ldrb	r3, [r7, #3]
 80042d0:	f003 020f 	and.w	r2, r3, #15
 80042d4:	4613      	mov	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	3338      	adds	r3, #56	; 0x38
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	4413      	add	r3, r2
 80042e2:	3304      	adds	r3, #4
 80042e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2201      	movs	r2, #1
 80042ea:	705a      	strb	r2, [r3, #1]
 80042ec:	e00d      	b.n	800430a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	4613      	mov	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	4413      	add	r3, r2
 8004300:	3304      	adds	r3, #4
 8004302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	b2da      	uxtb	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004322:	2b01      	cmp	r3, #1
 8004324:	d101      	bne.n	800432a <HAL_PCD_EP_SetStall+0x82>
 8004326:	2302      	movs	r3, #2
 8004328:	e01e      	b.n	8004368 <HAL_PCD_EP_SetStall+0xc0>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68f9      	ldr	r1, [r7, #12]
 8004338:	4618      	mov	r0, r3
 800433a:	f002 f9c6 	bl	80066ca <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	f003 030f 	and.w	r3, r3, #15
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10a      	bne.n	800435e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	b2d9      	uxtb	r1, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004358:	461a      	mov	r2, r3
 800435a:	f002 fba5 	bl	8006aa8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004366:	2300      	movs	r3, #0
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b084      	sub	sp, #16
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800437c:	78fb      	ldrb	r3, [r7, #3]
 800437e:	f003 020f 	and.w	r2, r3, #15
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	d901      	bls.n	800438e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e042      	b.n	8004414 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800438e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004392:	2b00      	cmp	r3, #0
 8004394:	da0f      	bge.n	80043b6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	f003 020f 	and.w	r2, r3, #15
 800439c:	4613      	mov	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	1a9b      	subs	r3, r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	3338      	adds	r3, #56	; 0x38
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	4413      	add	r3, r2
 80043aa:	3304      	adds	r3, #4
 80043ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	705a      	strb	r2, [r3, #1]
 80043b4:	e00f      	b.n	80043d6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	f003 020f 	and.w	r2, r3, #15
 80043bc:	4613      	mov	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	4413      	add	r3, r2
 80043cc:	3304      	adds	r3, #4
 80043ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d101      	bne.n	80043f6 <HAL_PCD_EP_ClrStall+0x86>
 80043f2:	2302      	movs	r3, #2
 80043f4:	e00e      	b.n	8004414 <HAL_PCD_EP_ClrStall+0xa4>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68f9      	ldr	r1, [r7, #12]
 8004404:	4618      	mov	r0, r3
 8004406:	f002 f9ce 	bl	80067a6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af02      	add	r7, sp, #8
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	3338      	adds	r3, #56	; 0x38
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	4413      	add	r3, r2
 8004440:	3304      	adds	r3, #4
 8004442:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	429a      	cmp	r2, r3
 800444e:	d901      	bls.n	8004454 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e06c      	b.n	800452e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	695a      	ldr	r2, [r3, #20]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	429a      	cmp	r2, r3
 8004468:	d902      	bls.n	8004470 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	3303      	adds	r3, #3
 8004474:	089b      	lsrs	r3, r3, #2
 8004476:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004478:	e02b      	b.n	80044d2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	429a      	cmp	r2, r3
 800448e:	d902      	bls.n	8004496 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	3303      	adds	r3, #3
 800449a:	089b      	lsrs	r3, r3, #2
 800449c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	68d9      	ldr	r1, [r3, #12]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	4603      	mov	r3, r0
 80044b4:	6978      	ldr	r0, [r7, #20]
 80044b6:	f002 f8aa 	bl	800660e <USB_WritePacket>

    ep->xfer_buff  += len;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	68da      	ldr	r2, [r3, #12]
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	441a      	add	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	441a      	add	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d809      	bhi.n	80044fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	699a      	ldr	r2, [r3, #24]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d203      	bcs.n	80044fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	695b      	ldr	r3, [r3, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1be      	bne.n	800447a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	699b      	ldr	r3, [r3, #24]
 8004504:	429a      	cmp	r2, r3
 8004506:	d811      	bhi.n	800452c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	2201      	movs	r2, #1
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	43db      	mvns	r3, r3
 8004522:	6939      	ldr	r1, [r7, #16]
 8004524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004528:	4013      	ands	r3, r2
 800452a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	333c      	adds	r3, #60	; 0x3c
 8004550:	3304      	adds	r3, #4
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b01      	cmp	r3, #1
 800456c:	f040 80a0 	bne.w	80046b0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0308 	and.w	r3, r3, #8
 8004576:	2b00      	cmp	r3, #0
 8004578:	d015      	beq.n	80045a6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4a72      	ldr	r2, [pc, #456]	; (8004748 <PCD_EP_OutXfrComplete_int+0x210>)
 800457e:	4293      	cmp	r3, r2
 8004580:	f240 80dd 	bls.w	800473e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80d7 	beq.w	800473e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	015a      	lsls	r2, r3, #5
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4413      	add	r3, r2
 8004598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459c:	461a      	mov	r2, r3
 800459e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a2:	6093      	str	r3, [r2, #8]
 80045a4:	e0cb      	b.n	800473e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f003 0320 	and.w	r3, r3, #32
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d009      	beq.n	80045c4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045bc:	461a      	mov	r2, r3
 80045be:	2320      	movs	r3, #32
 80045c0:	6093      	str	r3, [r2, #8]
 80045c2:	e0bc      	b.n	800473e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f040 80b7 	bne.w	800473e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	4a5d      	ldr	r2, [pc, #372]	; (8004748 <PCD_EP_OutXfrComplete_int+0x210>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d90f      	bls.n	80045f8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ee:	461a      	mov	r2, r3
 80045f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f4:	6093      	str	r3, [r2, #8]
 80045f6:	e0a2      	b.n	800473e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	1a9b      	subs	r3, r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	440b      	add	r3, r1
 8004606:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800460a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	0159      	lsls	r1, r3, #5
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	440b      	add	r3, r1
 8004614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800461e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4403      	add	r3, r0
 800462e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004632:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	4613      	mov	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004646:	6819      	ldr	r1, [r3, #0]
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4403      	add	r3, r0
 8004656:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4419      	add	r1, r3
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	1a9b      	subs	r3, r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	4403      	add	r3, r0
 800466c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004670:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d114      	bne.n	80046a2 <PCD_EP_OutXfrComplete_int+0x16a>
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	4613      	mov	r3, r2
 800467e:	00db      	lsls	r3, r3, #3
 8004680:	1a9b      	subs	r3, r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d108      	bne.n	80046a2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6818      	ldr	r0, [r3, #0]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800469a:	461a      	mov	r2, r3
 800469c:	2101      	movs	r1, #1
 800469e:	f002 fa03 	bl	8006aa8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	4619      	mov	r1, r3
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f004 f9df 	bl	8008a6c <HAL_PCD_DataOutStageCallback>
 80046ae:	e046      	b.n	800473e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4a26      	ldr	r2, [pc, #152]	; (800474c <PCD_EP_OutXfrComplete_int+0x214>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d124      	bne.n	8004702 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00a      	beq.n	80046d8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ce:	461a      	mov	r2, r3
 80046d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046d4:	6093      	str	r3, [r2, #8]
 80046d6:	e032      	b.n	800473e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f003 0320 	and.w	r3, r3, #32
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d008      	beq.n	80046f4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ee:	461a      	mov	r2, r3
 80046f0:	2320      	movs	r3, #32
 80046f2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	4619      	mov	r1, r3
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f004 f9b6 	bl	8008a6c <HAL_PCD_DataOutStageCallback>
 8004700:	e01d      	b.n	800473e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d114      	bne.n	8004732 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	4613      	mov	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d108      	bne.n	8004732 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6818      	ldr	r0, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800472a:	461a      	mov	r2, r3
 800472c:	2100      	movs	r1, #0
 800472e:	f002 f9bb 	bl	8006aa8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	b2db      	uxtb	r3, r3
 8004736:	4619      	mov	r1, r3
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f004 f997 	bl	8008a6c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	4f54300a 	.word	0x4f54300a
 800474c:	4f54310a 	.word	0x4f54310a

08004750 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	333c      	adds	r3, #60	; 0x3c
 8004768:	3304      	adds	r3, #4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	4a15      	ldr	r2, [pc, #84]	; (80047d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d90e      	bls.n	80047a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800478c:	2b00      	cmp	r3, #0
 800478e:	d009      	beq.n	80047a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479c:	461a      	mov	r2, r3
 800479e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f004 f94f 	bl	8008a48 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	4a0a      	ldr	r2, [pc, #40]	; (80047d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d90c      	bls.n	80047cc <PCD_EP_OutSetupPacket_int+0x7c>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d108      	bne.n	80047cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80047c4:	461a      	mov	r2, r3
 80047c6:	2101      	movs	r1, #1
 80047c8:	f002 f96e 	bl	8006aa8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	4f54300a 	.word	0x4f54300a

080047dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	70fb      	strb	r3, [r7, #3]
 80047e8:	4613      	mov	r3, r2
 80047ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d107      	bne.n	800480a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80047fa:	883b      	ldrh	r3, [r7, #0]
 80047fc:	0419      	lsls	r1, r3, #16
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	430a      	orrs	r2, r1
 8004806:	629a      	str	r2, [r3, #40]	; 0x28
 8004808:	e028      	b.n	800485c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	4413      	add	r3, r2
 8004816:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004818:	2300      	movs	r3, #0
 800481a:	73fb      	strb	r3, [r7, #15]
 800481c:	e00d      	b.n	800483a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	7bfb      	ldrb	r3, [r7, #15]
 8004824:	3340      	adds	r3, #64	; 0x40
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	4413      	add	r3, r2
 8004832:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004834:	7bfb      	ldrb	r3, [r7, #15]
 8004836:	3301      	adds	r3, #1
 8004838:	73fb      	strb	r3, [r7, #15]
 800483a:	7bfa      	ldrb	r2, [r7, #15]
 800483c:	78fb      	ldrb	r3, [r7, #3]
 800483e:	3b01      	subs	r3, #1
 8004840:	429a      	cmp	r2, r3
 8004842:	d3ec      	bcc.n	800481e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004844:	883b      	ldrh	r3, [r7, #0]
 8004846:	0418      	lsls	r0, r3, #16
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6819      	ldr	r1, [r3, #0]
 800484c:	78fb      	ldrb	r3, [r7, #3]
 800484e:	3b01      	subs	r3, #1
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	4302      	orrs	r2, r0
 8004854:	3340      	adds	r3, #64	; 0x40
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800485c:	2300      	movs	r3, #0
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800486a:	b480      	push	{r7}
 800486c:	b083      	sub	sp, #12
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
 8004872:	460b      	mov	r3, r1
 8004874:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	887a      	ldrh	r2, [r7, #2]
 800487c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	370c      	adds	r7, #12
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e25b      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d075      	beq.n	80049ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048c2:	4ba3      	ldr	r3, [pc, #652]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 030c 	and.w	r3, r3, #12
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d00c      	beq.n	80048e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ce:	4ba0      	ldr	r3, [pc, #640]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048d6:	2b08      	cmp	r3, #8
 80048d8:	d112      	bne.n	8004900 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048da:	4b9d      	ldr	r3, [pc, #628]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e6:	d10b      	bne.n	8004900 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e8:	4b99      	ldr	r3, [pc, #612]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d05b      	beq.n	80049ac <HAL_RCC_OscConfig+0x108>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d157      	bne.n	80049ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e236      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004908:	d106      	bne.n	8004918 <HAL_RCC_OscConfig+0x74>
 800490a:	4b91      	ldr	r3, [pc, #580]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a90      	ldr	r2, [pc, #576]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004914:	6013      	str	r3, [r2, #0]
 8004916:	e01d      	b.n	8004954 <HAL_RCC_OscConfig+0xb0>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004920:	d10c      	bne.n	800493c <HAL_RCC_OscConfig+0x98>
 8004922:	4b8b      	ldr	r3, [pc, #556]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a8a      	ldr	r2, [pc, #552]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004928:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	4b88      	ldr	r3, [pc, #544]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a87      	ldr	r2, [pc, #540]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	e00b      	b.n	8004954 <HAL_RCC_OscConfig+0xb0>
 800493c:	4b84      	ldr	r3, [pc, #528]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a83      	ldr	r2, [pc, #524]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004942:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	4b81      	ldr	r3, [pc, #516]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a80      	ldr	r2, [pc, #512]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 800494e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004952:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d013      	beq.n	8004984 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fd fc3a 	bl	80021d4 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004964:	f7fd fc36 	bl	80021d4 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	; 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e1fb      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004976:	4b76      	ldr	r3, [pc, #472]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d0f0      	beq.n	8004964 <HAL_RCC_OscConfig+0xc0>
 8004982:	e014      	b.n	80049ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004984:	f7fd fc26 	bl	80021d4 <HAL_GetTick>
 8004988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800498a:	e008      	b.n	800499e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800498c:	f7fd fc22 	bl	80021d4 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b64      	cmp	r3, #100	; 0x64
 8004998:	d901      	bls.n	800499e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e1e7      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499e:	4b6c      	ldr	r3, [pc, #432]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d1f0      	bne.n	800498c <HAL_RCC_OscConfig+0xe8>
 80049aa:	e000      	b.n	80049ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d063      	beq.n	8004a82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ba:	4b65      	ldr	r3, [pc, #404]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00b      	beq.n	80049de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049c6:	4b62      	ldr	r3, [pc, #392]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d11c      	bne.n	8004a0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d2:	4b5f      	ldr	r3, [pc, #380]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d116      	bne.n	8004a0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049de:	4b5c      	ldr	r3, [pc, #368]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d005      	beq.n	80049f6 <HAL_RCC_OscConfig+0x152>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d001      	beq.n	80049f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e1bb      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f6:	4b56      	ldr	r3, [pc, #344]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	4952      	ldr	r1, [pc, #328]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a0a:	e03a      	b.n	8004a82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d020      	beq.n	8004a56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a14:	4b4f      	ldr	r3, [pc, #316]	; (8004b54 <HAL_RCC_OscConfig+0x2b0>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1a:	f7fd fbdb 	bl	80021d4 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a22:	f7fd fbd7 	bl	80021d4 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e19c      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a34:	4b46      	ldr	r3, [pc, #280]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f0      	beq.n	8004a22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a40:	4b43      	ldr	r3, [pc, #268]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	4940      	ldr	r1, [pc, #256]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	600b      	str	r3, [r1, #0]
 8004a54:	e015      	b.n	8004a82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a56:	4b3f      	ldr	r3, [pc, #252]	; (8004b54 <HAL_RCC_OscConfig+0x2b0>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5c:	f7fd fbba 	bl	80021d4 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a64:	f7fd fbb6 	bl	80021d4 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e17b      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a76:	4b36      	ldr	r3, [pc, #216]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f0      	bne.n	8004a64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d030      	beq.n	8004af0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	695b      	ldr	r3, [r3, #20]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d016      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a96:	4b30      	ldr	r3, [pc, #192]	; (8004b58 <HAL_RCC_OscConfig+0x2b4>)
 8004a98:	2201      	movs	r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9c:	f7fd fb9a 	bl	80021d4 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aa4:	f7fd fb96 	bl	80021d4 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e15b      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab6:	4b26      	ldr	r3, [pc, #152]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d0f0      	beq.n	8004aa4 <HAL_RCC_OscConfig+0x200>
 8004ac2:	e015      	b.n	8004af0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac4:	4b24      	ldr	r3, [pc, #144]	; (8004b58 <HAL_RCC_OscConfig+0x2b4>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aca:	f7fd fb83 	bl	80021d4 <HAL_GetTick>
 8004ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad0:	e008      	b.n	8004ae4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ad2:	f7fd fb7f 	bl	80021d4 <HAL_GetTick>
 8004ad6:	4602      	mov	r2, r0
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d901      	bls.n	8004ae4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e144      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae4:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d1f0      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	f000 80a0 	beq.w	8004c3e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004afe:	2300      	movs	r3, #0
 8004b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b02:	4b13      	ldr	r3, [pc, #76]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10f      	bne.n	8004b2e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	4b0f      	ldr	r3, [pc, #60]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	4a0e      	ldr	r2, [pc, #56]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <HAL_RCC_OscConfig+0x2ac>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b26:	60bb      	str	r3, [r7, #8]
 8004b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <HAL_RCC_OscConfig+0x2b8>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d121      	bne.n	8004b7e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b3a:	4b08      	ldr	r3, [pc, #32]	; (8004b5c <HAL_RCC_OscConfig+0x2b8>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a07      	ldr	r2, [pc, #28]	; (8004b5c <HAL_RCC_OscConfig+0x2b8>)
 8004b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b46:	f7fd fb45 	bl	80021d4 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4c:	e011      	b.n	8004b72 <HAL_RCC_OscConfig+0x2ce>
 8004b4e:	bf00      	nop
 8004b50:	40023800 	.word	0x40023800
 8004b54:	42470000 	.word	0x42470000
 8004b58:	42470e80 	.word	0x42470e80
 8004b5c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b60:	f7fd fb38 	bl	80021d4 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e0fd      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b72:	4b81      	ldr	r3, [pc, #516]	; (8004d78 <HAL_RCC_OscConfig+0x4d4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d0f0      	beq.n	8004b60 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d106      	bne.n	8004b94 <HAL_RCC_OscConfig+0x2f0>
 8004b86:	4b7d      	ldr	r3, [pc, #500]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8a:	4a7c      	ldr	r2, [pc, #496]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004b8c:	f043 0301 	orr.w	r3, r3, #1
 8004b90:	6713      	str	r3, [r2, #112]	; 0x70
 8004b92:	e01c      	b.n	8004bce <HAL_RCC_OscConfig+0x32a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b05      	cmp	r3, #5
 8004b9a:	d10c      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x312>
 8004b9c:	4b77      	ldr	r3, [pc, #476]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba0:	4a76      	ldr	r2, [pc, #472]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004ba2:	f043 0304 	orr.w	r3, r3, #4
 8004ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba8:	4b74      	ldr	r3, [pc, #464]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bac:	4a73      	ldr	r2, [pc, #460]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb4:	e00b      	b.n	8004bce <HAL_RCC_OscConfig+0x32a>
 8004bb6:	4b71      	ldr	r3, [pc, #452]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bba:	4a70      	ldr	r2, [pc, #448]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004bbc:	f023 0301 	bic.w	r3, r3, #1
 8004bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc2:	4b6e      	ldr	r3, [pc, #440]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc6:	4a6d      	ldr	r2, [pc, #436]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004bc8:	f023 0304 	bic.w	r3, r3, #4
 8004bcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d015      	beq.n	8004c02 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd6:	f7fd fafd 	bl	80021d4 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bdc:	e00a      	b.n	8004bf4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bde:	f7fd faf9 	bl	80021d4 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e0bc      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf4:	4b61      	ldr	r3, [pc, #388]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0ee      	beq.n	8004bde <HAL_RCC_OscConfig+0x33a>
 8004c00:	e014      	b.n	8004c2c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c02:	f7fd fae7 	bl	80021d4 <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c08:	e00a      	b.n	8004c20 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c0a:	f7fd fae3 	bl	80021d4 <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d901      	bls.n	8004c20 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e0a6      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c20:	4b56      	ldr	r3, [pc, #344]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1ee      	bne.n	8004c0a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c2c:	7dfb      	ldrb	r3, [r7, #23]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d105      	bne.n	8004c3e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c32:	4b52      	ldr	r3, [pc, #328]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	4a51      	ldr	r2, [pc, #324]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	699b      	ldr	r3, [r3, #24]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 8092 	beq.w	8004d6c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c48:	4b4c      	ldr	r3, [pc, #304]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 030c 	and.w	r3, r3, #12
 8004c50:	2b08      	cmp	r3, #8
 8004c52:	d05c      	beq.n	8004d0e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d141      	bne.n	8004ce0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c5c:	4b48      	ldr	r3, [pc, #288]	; (8004d80 <HAL_RCC_OscConfig+0x4dc>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c62:	f7fd fab7 	bl	80021d4 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c6a:	f7fd fab3 	bl	80021d4 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e078      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7c:	4b3f      	ldr	r3, [pc, #252]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1f0      	bne.n	8004c6a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6a1b      	ldr	r3, [r3, #32]
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	019b      	lsls	r3, r3, #6
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	041b      	lsls	r3, r3, #16
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	061b      	lsls	r3, r3, #24
 8004cac:	4933      	ldr	r1, [pc, #204]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb2:	4b33      	ldr	r3, [pc, #204]	; (8004d80 <HAL_RCC_OscConfig+0x4dc>)
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb8:	f7fd fa8c 	bl	80021d4 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cbe:	e008      	b.n	8004cd2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc0:	f7fd fa88 	bl	80021d4 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e04d      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd2:	4b2a      	ldr	r3, [pc, #168]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d0f0      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x41c>
 8004cde:	e045      	b.n	8004d6c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce0:	4b27      	ldr	r3, [pc, #156]	; (8004d80 <HAL_RCC_OscConfig+0x4dc>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce6:	f7fd fa75 	bl	80021d4 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cec:	e008      	b.n	8004d00 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cee:	f7fd fa71 	bl	80021d4 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	2b02      	cmp	r3, #2
 8004cfa:	d901      	bls.n	8004d00 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e036      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d00:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f0      	bne.n	8004cee <HAL_RCC_OscConfig+0x44a>
 8004d0c:	e02e      	b.n	8004d6c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e029      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d1a:	4b18      	ldr	r3, [pc, #96]	; (8004d7c <HAL_RCC_OscConfig+0x4d8>)
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d11c      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d115      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d42:	4013      	ands	r3, r2
 8004d44:	687a      	ldr	r2, [r7, #4]
 8004d46:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d10d      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d106      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d001      	beq.n	8004d6c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40007000 	.word	0x40007000
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	42470060 	.word	0x42470060

08004d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e0cc      	b.n	8004f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d98:	4b68      	ldr	r3, [pc, #416]	; (8004f3c <HAL_RCC_ClockConfig+0x1b8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d90c      	bls.n	8004dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da6:	4b65      	ldr	r3, [pc, #404]	; (8004f3c <HAL_RCC_ClockConfig+0x1b8>)
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dae:	4b63      	ldr	r3, [pc, #396]	; (8004f3c <HAL_RCC_ClockConfig+0x1b8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 030f 	and.w	r3, r3, #15
 8004db6:	683a      	ldr	r2, [r7, #0]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d001      	beq.n	8004dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e0b8      	b.n	8004f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d020      	beq.n	8004e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d005      	beq.n	8004de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dd8:	4b59      	ldr	r3, [pc, #356]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	4a58      	ldr	r2, [pc, #352]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0308 	and.w	r3, r3, #8
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d005      	beq.n	8004dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004df0:	4b53      	ldr	r3, [pc, #332]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	4a52      	ldr	r2, [pc, #328]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dfc:	4b50      	ldr	r3, [pc, #320]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	494d      	ldr	r1, [pc, #308]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d044      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d107      	bne.n	8004e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e22:	4b47      	ldr	r3, [pc, #284]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d119      	bne.n	8004e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e07f      	b.n	8004f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d003      	beq.n	8004e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d107      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e42:	4b3f      	ldr	r3, [pc, #252]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d109      	bne.n	8004e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e06f      	b.n	8004f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e52:	4b3b      	ldr	r3, [pc, #236]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d101      	bne.n	8004e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e067      	b.n	8004f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e62:	4b37      	ldr	r3, [pc, #220]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f023 0203 	bic.w	r2, r3, #3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	4934      	ldr	r1, [pc, #208]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e74:	f7fd f9ae 	bl	80021d4 <HAL_GetTick>
 8004e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7a:	e00a      	b.n	8004e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e7c:	f7fd f9aa 	bl	80021d4 <HAL_GetTick>
 8004e80:	4602      	mov	r2, r0
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d901      	bls.n	8004e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e04f      	b.n	8004f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e92:	4b2b      	ldr	r3, [pc, #172]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 020c 	and.w	r2, r3, #12
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d1eb      	bne.n	8004e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ea4:	4b25      	ldr	r3, [pc, #148]	; (8004f3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d20c      	bcs.n	8004ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eb2:	4b22      	ldr	r3, [pc, #136]	; (8004f3c <HAL_RCC_ClockConfig+0x1b8>)
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	b2d2      	uxtb	r2, r2
 8004eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eba:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <HAL_RCC_ClockConfig+0x1b8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	683a      	ldr	r2, [r7, #0]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d001      	beq.n	8004ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e032      	b.n	8004f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d008      	beq.n	8004eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ed8:	4b19      	ldr	r3, [pc, #100]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4916      	ldr	r1, [pc, #88]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0308 	and.w	r3, r3, #8
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d009      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ef6:	4b12      	ldr	r3, [pc, #72]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	490e      	ldr	r1, [pc, #56]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f0a:	f000 f821 	bl	8004f50 <HAL_RCC_GetSysClockFreq>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	091b      	lsrs	r3, r3, #4
 8004f16:	f003 030f 	and.w	r3, r3, #15
 8004f1a:	490a      	ldr	r1, [pc, #40]	; (8004f44 <HAL_RCC_ClockConfig+0x1c0>)
 8004f1c:	5ccb      	ldrb	r3, [r1, r3]
 8004f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f22:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <HAL_RCC_ClockConfig+0x1c4>)
 8004f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f26:	4b09      	ldr	r3, [pc, #36]	; (8004f4c <HAL_RCC_ClockConfig+0x1c8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fd f90e 	bl	800214c <HAL_InitTick>

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40023c00 	.word	0x40023c00
 8004f40:	40023800 	.word	0x40023800
 8004f44:	0800a454 	.word	0x0800a454
 8004f48:	20000000 	.word	0x20000000
 8004f4c:	20000004 	.word	0x20000004

08004f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	607b      	str	r3, [r7, #4]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60fb      	str	r3, [r7, #12]
 8004f60:	2300      	movs	r3, #0
 8004f62:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f64:	2300      	movs	r3, #0
 8004f66:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f68:	4b67      	ldr	r3, [pc, #412]	; (8005108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	f003 030c 	and.w	r3, r3, #12
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d00d      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0x40>
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	f200 80bd 	bhi.w	80050f4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <HAL_RCC_GetSysClockFreq+0x34>
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d003      	beq.n	8004f8a <HAL_RCC_GetSysClockFreq+0x3a>
 8004f82:	e0b7      	b.n	80050f4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f84:	4b61      	ldr	r3, [pc, #388]	; (800510c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f86:	60bb      	str	r3, [r7, #8]
       break;
 8004f88:	e0b7      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f8a:	4b60      	ldr	r3, [pc, #384]	; (800510c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004f8c:	60bb      	str	r3, [r7, #8]
      break;
 8004f8e:	e0b4      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f90:	4b5d      	ldr	r3, [pc, #372]	; (8005108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f9a:	4b5b      	ldr	r3, [pc, #364]	; (8005108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d04d      	beq.n	8005042 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa6:	4b58      	ldr	r3, [pc, #352]	; (8005108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	099b      	lsrs	r3, r3, #6
 8004fac:	461a      	mov	r2, r3
 8004fae:	f04f 0300 	mov.w	r3, #0
 8004fb2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004fb6:	f04f 0100 	mov.w	r1, #0
 8004fba:	ea02 0800 	and.w	r8, r2, r0
 8004fbe:	ea03 0901 	and.w	r9, r3, r1
 8004fc2:	4640      	mov	r0, r8
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	014b      	lsls	r3, r1, #5
 8004fd0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004fd4:	0142      	lsls	r2, r0, #5
 8004fd6:	4610      	mov	r0, r2
 8004fd8:	4619      	mov	r1, r3
 8004fda:	ebb0 0008 	subs.w	r0, r0, r8
 8004fde:	eb61 0109 	sbc.w	r1, r1, r9
 8004fe2:	f04f 0200 	mov.w	r2, #0
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	018b      	lsls	r3, r1, #6
 8004fec:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ff0:	0182      	lsls	r2, r0, #6
 8004ff2:	1a12      	subs	r2, r2, r0
 8004ff4:	eb63 0301 	sbc.w	r3, r3, r1
 8004ff8:	f04f 0000 	mov.w	r0, #0
 8004ffc:	f04f 0100 	mov.w	r1, #0
 8005000:	00d9      	lsls	r1, r3, #3
 8005002:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005006:	00d0      	lsls	r0, r2, #3
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	eb12 0208 	adds.w	r2, r2, r8
 8005010:	eb43 0309 	adc.w	r3, r3, r9
 8005014:	f04f 0000 	mov.w	r0, #0
 8005018:	f04f 0100 	mov.w	r1, #0
 800501c:	0299      	lsls	r1, r3, #10
 800501e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005022:	0290      	lsls	r0, r2, #10
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4610      	mov	r0, r2
 800502a:	4619      	mov	r1, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	461a      	mov	r2, r3
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	f7fb f91c 	bl	8000270 <__aeabi_uldivmod>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4613      	mov	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
 8005040:	e04a      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005042:	4b31      	ldr	r3, [pc, #196]	; (8005108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	099b      	lsrs	r3, r3, #6
 8005048:	461a      	mov	r2, r3
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005052:	f04f 0100 	mov.w	r1, #0
 8005056:	ea02 0400 	and.w	r4, r2, r0
 800505a:	ea03 0501 	and.w	r5, r3, r1
 800505e:	4620      	mov	r0, r4
 8005060:	4629      	mov	r1, r5
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	014b      	lsls	r3, r1, #5
 800506c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005070:	0142      	lsls	r2, r0, #5
 8005072:	4610      	mov	r0, r2
 8005074:	4619      	mov	r1, r3
 8005076:	1b00      	subs	r0, r0, r4
 8005078:	eb61 0105 	sbc.w	r1, r1, r5
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	018b      	lsls	r3, r1, #6
 8005086:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800508a:	0182      	lsls	r2, r0, #6
 800508c:	1a12      	subs	r2, r2, r0
 800508e:	eb63 0301 	sbc.w	r3, r3, r1
 8005092:	f04f 0000 	mov.w	r0, #0
 8005096:	f04f 0100 	mov.w	r1, #0
 800509a:	00d9      	lsls	r1, r3, #3
 800509c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050a0:	00d0      	lsls	r0, r2, #3
 80050a2:	4602      	mov	r2, r0
 80050a4:	460b      	mov	r3, r1
 80050a6:	1912      	adds	r2, r2, r4
 80050a8:	eb45 0303 	adc.w	r3, r5, r3
 80050ac:	f04f 0000 	mov.w	r0, #0
 80050b0:	f04f 0100 	mov.w	r1, #0
 80050b4:	0299      	lsls	r1, r3, #10
 80050b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80050ba:	0290      	lsls	r0, r2, #10
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4610      	mov	r0, r2
 80050c2:	4619      	mov	r1, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	461a      	mov	r2, r3
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	f7fb f8d0 	bl	8000270 <__aeabi_uldivmod>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4613      	mov	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	0c1b      	lsrs	r3, r3, #16
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	3301      	adds	r3, #1
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f0:	60bb      	str	r3, [r7, #8]
      break;
 80050f2:	e002      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050f4:	4b05      	ldr	r3, [pc, #20]	; (800510c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050f6:	60bb      	str	r3, [r7, #8]
      break;
 80050f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050fa:	68bb      	ldr	r3, [r7, #8]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005106:	bf00      	nop
 8005108:	40023800 	.word	0x40023800
 800510c:	00f42400 	.word	0x00f42400

08005110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005114:	4b03      	ldr	r3, [pc, #12]	; (8005124 <HAL_RCC_GetHCLKFreq+0x14>)
 8005116:	681b      	ldr	r3, [r3, #0]
}
 8005118:	4618      	mov	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000000 	.word	0x20000000

08005128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e01d      	b.n	8005176 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b00      	cmp	r3, #0
 8005144:	d106      	bne.n	8005154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fc ff88 	bl	8002064 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2202      	movs	r2, #2
 8005158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	3304      	adds	r3, #4
 8005164:	4619      	mov	r1, r3
 8005166:	4610      	mov	r0, r2
 8005168:	f000 f968 	bl	800543c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}

0800517e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800517e:	b480      	push	{r7}
 8005180:	b085      	sub	sp, #20
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68da      	ldr	r2, [r3, #12]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0201 	orr.w	r2, r2, #1
 8005194:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b06      	cmp	r3, #6
 80051a6:	d007      	beq.n	80051b8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f042 0201 	orr.w	r2, r2, #1
 80051b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b082      	sub	sp, #8
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d122      	bne.n	8005222 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	f003 0302 	and.w	r3, r3, #2
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d11b      	bne.n	8005222 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f06f 0202 	mvn.w	r2, #2
 80051f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	f003 0303 	and.w	r3, r3, #3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d003      	beq.n	8005210 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f8f8 	bl	80053fe <HAL_TIM_IC_CaptureCallback>
 800520e:	e005      	b.n	800521c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f8ea 	bl	80053ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f8fb 	bl	8005412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b04      	cmp	r3, #4
 800522e:	d122      	bne.n	8005276 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	f003 0304 	and.w	r3, r3, #4
 800523a:	2b04      	cmp	r3, #4
 800523c:	d11b      	bne.n	8005276 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f06f 0204 	mvn.w	r2, #4
 8005246:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	699b      	ldr	r3, [r3, #24]
 8005254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005258:	2b00      	cmp	r3, #0
 800525a:	d003      	beq.n	8005264 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f8ce 	bl	80053fe <HAL_TIM_IC_CaptureCallback>
 8005262:	e005      	b.n	8005270 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f8c0 	bl	80053ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f8d1 	bl	8005412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f003 0308 	and.w	r3, r3, #8
 8005280:	2b08      	cmp	r3, #8
 8005282:	d122      	bne.n	80052ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f003 0308 	and.w	r3, r3, #8
 800528e:	2b08      	cmp	r3, #8
 8005290:	d11b      	bne.n	80052ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f06f 0208 	mvn.w	r2, #8
 800529a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2204      	movs	r2, #4
 80052a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f8a4 	bl	80053fe <HAL_TIM_IC_CaptureCallback>
 80052b6:	e005      	b.n	80052c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f896 	bl	80053ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f8a7 	bl	8005412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	f003 0310 	and.w	r3, r3, #16
 80052d4:	2b10      	cmp	r3, #16
 80052d6:	d122      	bne.n	800531e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f003 0310 	and.w	r3, r3, #16
 80052e2:	2b10      	cmp	r3, #16
 80052e4:	d11b      	bne.n	800531e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f06f 0210 	mvn.w	r2, #16
 80052ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2208      	movs	r2, #8
 80052f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	69db      	ldr	r3, [r3, #28]
 80052fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005300:	2b00      	cmp	r3, #0
 8005302:	d003      	beq.n	800530c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f87a 	bl	80053fe <HAL_TIM_IC_CaptureCallback>
 800530a:	e005      	b.n	8005318 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f86c 	bl	80053ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f87d 	bl	8005412 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b01      	cmp	r3, #1
 800532a:	d10e      	bne.n	800534a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b01      	cmp	r3, #1
 8005338:	d107      	bne.n	800534a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f06f 0201 	mvn.w	r2, #1
 8005342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f846 	bl	80053d6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005354:	2b80      	cmp	r3, #128	; 0x80
 8005356:	d10e      	bne.n	8005376 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005362:	2b80      	cmp	r3, #128	; 0x80
 8005364:	d107      	bne.n	8005376 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800536e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f90d 	bl	8005590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b40      	cmp	r3, #64	; 0x40
 8005382:	d10e      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d107      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800539a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f842 	bl	8005426 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	f003 0320 	and.w	r3, r3, #32
 80053ac:	2b20      	cmp	r3, #32
 80053ae:	d10e      	bne.n	80053ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	d107      	bne.n	80053ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f06f 0220 	mvn.w	r2, #32
 80053c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f8d7 	bl	800557c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr

08005412 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005412:	b480      	push	{r7}
 8005414:	b083      	sub	sp, #12
 8005416:	af00      	add	r7, sp, #0
 8005418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800541a:	bf00      	nop
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800542e:	bf00      	nop
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a40      	ldr	r2, [pc, #256]	; (8005550 <TIM_Base_SetConfig+0x114>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d013      	beq.n	800547c <TIM_Base_SetConfig+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800545a:	d00f      	beq.n	800547c <TIM_Base_SetConfig+0x40>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a3d      	ldr	r2, [pc, #244]	; (8005554 <TIM_Base_SetConfig+0x118>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00b      	beq.n	800547c <TIM_Base_SetConfig+0x40>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a3c      	ldr	r2, [pc, #240]	; (8005558 <TIM_Base_SetConfig+0x11c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d007      	beq.n	800547c <TIM_Base_SetConfig+0x40>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a3b      	ldr	r2, [pc, #236]	; (800555c <TIM_Base_SetConfig+0x120>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_Base_SetConfig+0x40>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a3a      	ldr	r2, [pc, #232]	; (8005560 <TIM_Base_SetConfig+0x124>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d108      	bne.n	800548e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2f      	ldr	r2, [pc, #188]	; (8005550 <TIM_Base_SetConfig+0x114>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d02b      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549c:	d027      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a2c      	ldr	r2, [pc, #176]	; (8005554 <TIM_Base_SetConfig+0x118>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d023      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a2b      	ldr	r2, [pc, #172]	; (8005558 <TIM_Base_SetConfig+0x11c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d01f      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a2a      	ldr	r2, [pc, #168]	; (800555c <TIM_Base_SetConfig+0x120>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01b      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a29      	ldr	r2, [pc, #164]	; (8005560 <TIM_Base_SetConfig+0x124>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d017      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a28      	ldr	r2, [pc, #160]	; (8005564 <TIM_Base_SetConfig+0x128>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d013      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a27      	ldr	r2, [pc, #156]	; (8005568 <TIM_Base_SetConfig+0x12c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00f      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a26      	ldr	r2, [pc, #152]	; (800556c <TIM_Base_SetConfig+0x130>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00b      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a25      	ldr	r2, [pc, #148]	; (8005570 <TIM_Base_SetConfig+0x134>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d007      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a24      	ldr	r2, [pc, #144]	; (8005574 <TIM_Base_SetConfig+0x138>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d003      	beq.n	80054ee <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a23      	ldr	r2, [pc, #140]	; (8005578 <TIM_Base_SetConfig+0x13c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d108      	bne.n	8005500 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	4313      	orrs	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	689a      	ldr	r2, [r3, #8]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a0a      	ldr	r2, [pc, #40]	; (8005550 <TIM_Base_SetConfig+0x114>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_Base_SetConfig+0xf8>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a0c      	ldr	r2, [pc, #48]	; (8005560 <TIM_Base_SetConfig+0x124>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d103      	bne.n	800553c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	615a      	str	r2, [r3, #20]
}
 8005542:	bf00      	nop
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40010000 	.word	0x40010000
 8005554:	40000400 	.word	0x40000400
 8005558:	40000800 	.word	0x40000800
 800555c:	40000c00 	.word	0x40000c00
 8005560:	40010400 	.word	0x40010400
 8005564:	40014000 	.word	0x40014000
 8005568:	40014400 	.word	0x40014400
 800556c:	40014800 	.word	0x40014800
 8005570:	40001800 	.word	0x40001800
 8005574:	40001c00 	.word	0x40001c00
 8005578:	40002000 	.word	0x40002000

0800557c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055a4:	b084      	sub	sp, #16
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b084      	sub	sp, #16
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
 80055ae:	f107 001c 	add.w	r0, r7, #28
 80055b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d122      	bne.n	8005602 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80055e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d105      	bne.n	80055f6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f001 fab4 	bl	8006b64 <USB_CoreReset>
 80055fc:	4603      	mov	r3, r0
 80055fe:	73fb      	strb	r3, [r7, #15]
 8005600:	e01a      	b.n	8005638 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f001 faa8 	bl	8006b64 <USB_CoreReset>
 8005614:	4603      	mov	r3, r0
 8005616:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005622:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	639a      	str	r2, [r3, #56]	; 0x38
 800562a:	e005      	b.n	8005638 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	2b01      	cmp	r3, #1
 800563c:	d10b      	bne.n	8005656 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f043 0206 	orr.w	r2, r3, #6
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f043 0220 	orr.w	r2, r3, #32
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005656:	7bfb      	ldrb	r3, [r7, #15]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005662:	b004      	add	sp, #16
 8005664:	4770      	bx	lr
	...

08005668 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005668:	b480      	push	{r7}
 800566a:	b087      	sub	sp, #28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	4613      	mov	r3, r2
 8005674:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005676:	79fb      	ldrb	r3, [r7, #7]
 8005678:	2b02      	cmp	r3, #2
 800567a:	d165      	bne.n	8005748 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4a41      	ldr	r2, [pc, #260]	; (8005784 <USB_SetTurnaroundTime+0x11c>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d906      	bls.n	8005692 <USB_SetTurnaroundTime+0x2a>
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	4a40      	ldr	r2, [pc, #256]	; (8005788 <USB_SetTurnaroundTime+0x120>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d202      	bcs.n	8005692 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800568c:	230f      	movs	r3, #15
 800568e:	617b      	str	r3, [r7, #20]
 8005690:	e062      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	4a3c      	ldr	r2, [pc, #240]	; (8005788 <USB_SetTurnaroundTime+0x120>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d306      	bcc.n	80056a8 <USB_SetTurnaroundTime+0x40>
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	4a3b      	ldr	r2, [pc, #236]	; (800578c <USB_SetTurnaroundTime+0x124>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d202      	bcs.n	80056a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80056a2:	230e      	movs	r3, #14
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	e057      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4a38      	ldr	r2, [pc, #224]	; (800578c <USB_SetTurnaroundTime+0x124>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d306      	bcc.n	80056be <USB_SetTurnaroundTime+0x56>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4a37      	ldr	r2, [pc, #220]	; (8005790 <USB_SetTurnaroundTime+0x128>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d202      	bcs.n	80056be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80056b8:	230d      	movs	r3, #13
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	e04c      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	4a33      	ldr	r2, [pc, #204]	; (8005790 <USB_SetTurnaroundTime+0x128>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d306      	bcc.n	80056d4 <USB_SetTurnaroundTime+0x6c>
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	4a32      	ldr	r2, [pc, #200]	; (8005794 <USB_SetTurnaroundTime+0x12c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d802      	bhi.n	80056d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80056ce:	230c      	movs	r3, #12
 80056d0:	617b      	str	r3, [r7, #20]
 80056d2:	e041      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4a2f      	ldr	r2, [pc, #188]	; (8005794 <USB_SetTurnaroundTime+0x12c>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d906      	bls.n	80056ea <USB_SetTurnaroundTime+0x82>
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	4a2e      	ldr	r2, [pc, #184]	; (8005798 <USB_SetTurnaroundTime+0x130>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d802      	bhi.n	80056ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80056e4:	230b      	movs	r3, #11
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	e036      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4a2a      	ldr	r2, [pc, #168]	; (8005798 <USB_SetTurnaroundTime+0x130>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d906      	bls.n	8005700 <USB_SetTurnaroundTime+0x98>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	4a29      	ldr	r2, [pc, #164]	; (800579c <USB_SetTurnaroundTime+0x134>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d802      	bhi.n	8005700 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80056fa:	230a      	movs	r3, #10
 80056fc:	617b      	str	r3, [r7, #20]
 80056fe:	e02b      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	4a26      	ldr	r2, [pc, #152]	; (800579c <USB_SetTurnaroundTime+0x134>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d906      	bls.n	8005716 <USB_SetTurnaroundTime+0xae>
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4a25      	ldr	r2, [pc, #148]	; (80057a0 <USB_SetTurnaroundTime+0x138>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d202      	bcs.n	8005716 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005710:	2309      	movs	r3, #9
 8005712:	617b      	str	r3, [r7, #20]
 8005714:	e020      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4a21      	ldr	r2, [pc, #132]	; (80057a0 <USB_SetTurnaroundTime+0x138>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d306      	bcc.n	800572c <USB_SetTurnaroundTime+0xc4>
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	4a20      	ldr	r2, [pc, #128]	; (80057a4 <USB_SetTurnaroundTime+0x13c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d802      	bhi.n	800572c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005726:	2308      	movs	r3, #8
 8005728:	617b      	str	r3, [r7, #20]
 800572a:	e015      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <USB_SetTurnaroundTime+0x13c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d906      	bls.n	8005742 <USB_SetTurnaroundTime+0xda>
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4a1c      	ldr	r2, [pc, #112]	; (80057a8 <USB_SetTurnaroundTime+0x140>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d202      	bcs.n	8005742 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800573c:	2307      	movs	r3, #7
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	e00a      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005742:	2306      	movs	r3, #6
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	e007      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005748:	79fb      	ldrb	r3, [r7, #7]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d102      	bne.n	8005754 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800574e:	2309      	movs	r3, #9
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	e001      	b.n	8005758 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005754:	2309      	movs	r3, #9
 8005756:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	68da      	ldr	r2, [r3, #12]
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	029b      	lsls	r3, r3, #10
 800576c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005770:	431a      	orrs	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	371c      	adds	r7, #28
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	00d8acbf 	.word	0x00d8acbf
 8005788:	00e4e1c0 	.word	0x00e4e1c0
 800578c:	00f42400 	.word	0x00f42400
 8005790:	01067380 	.word	0x01067380
 8005794:	011a499f 	.word	0x011a499f
 8005798:	01312cff 	.word	0x01312cff
 800579c:	014ca43f 	.word	0x014ca43f
 80057a0:	016e3600 	.word	0x016e3600
 80057a4:	01a6ab1f 	.word	0x01a6ab1f
 80057a8:	01e84800 	.word	0x01e84800

080057ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f043 0201 	orr.w	r2, r3, #1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr

080057ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	f023 0201 	bic.w	r2, r3, #1
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	460b      	mov	r3, r1
 80057fa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d106      	bne.n	800581c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60da      	str	r2, [r3, #12]
 800581a:	e00b      	b.n	8005834 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	60da      	str	r2, [r3, #12]
 800582e:	e001      	b.n	8005834 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e003      	b.n	800583c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005834:	2032      	movs	r0, #50	; 0x32
 8005836:	f7fc fcd9 	bl	80021ec <HAL_Delay>

  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005844:	b084      	sub	sp, #16
 8005846:	b580      	push	{r7, lr}
 8005848:	b086      	sub	sp, #24
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800585e:	2300      	movs	r3, #0
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	e009      	b.n	8005878 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	3340      	adds	r3, #64	; 0x40
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	2200      	movs	r2, #0
 8005870:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	3301      	adds	r3, #1
 8005876:	613b      	str	r3, [r7, #16]
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	2b0e      	cmp	r3, #14
 800587c:	d9f2      	bls.n	8005864 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800587e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005880:	2b00      	cmp	r3, #0
 8005882:	d11c      	bne.n	80058be <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005892:	f043 0302 	orr.w	r3, r3, #2
 8005896:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	639a      	str	r2, [r3, #56]	; 0x38
 80058bc:	e00b      	b.n	80058d6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058dc:	461a      	mov	r2, r3
 80058de:	2300      	movs	r3, #0
 80058e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e8:	4619      	mov	r1, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f0:	461a      	mov	r2, r3
 80058f2:	680b      	ldr	r3, [r1, #0]
 80058f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d10c      	bne.n	8005916 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80058fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d104      	bne.n	800590c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005902:	2100      	movs	r1, #0
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f949 	bl	8005b9c <USB_SetDevSpeed>
 800590a:	e008      	b.n	800591e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800590c:	2101      	movs	r1, #1
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f944 	bl	8005b9c <USB_SetDevSpeed>
 8005914:	e003      	b.n	800591e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005916:	2103      	movs	r1, #3
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f93f 	bl	8005b9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800591e:	2110      	movs	r1, #16
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f8f3 	bl	8005b0c <USB_FlushTxFifo>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f911 	bl	8005b58 <USB_FlushRxFifo>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005946:	461a      	mov	r2, r3
 8005948:	2300      	movs	r3, #0
 800594a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005952:	461a      	mov	r2, r3
 8005954:	2300      	movs	r3, #0
 8005956:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595e:	461a      	mov	r2, r3
 8005960:	2300      	movs	r3, #0
 8005962:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005964:	2300      	movs	r3, #0
 8005966:	613b      	str	r3, [r7, #16]
 8005968:	e043      	b.n	80059f2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800597c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005980:	d118      	bne.n	80059b4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10a      	bne.n	800599e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005994:	461a      	mov	r2, r3
 8005996:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	e013      	b.n	80059c6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059aa:	461a      	mov	r2, r3
 80059ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	e008      	b.n	80059c6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059c0:	461a      	mov	r2, r3
 80059c2:	2300      	movs	r3, #0
 80059c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d2:	461a      	mov	r2, r3
 80059d4:	2300      	movs	r3, #0
 80059d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	015a      	lsls	r2, r3, #5
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4413      	add	r3, r2
 80059e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e4:	461a      	mov	r2, r3
 80059e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	3301      	adds	r3, #1
 80059f0:	613b      	str	r3, [r7, #16]
 80059f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f4:	693a      	ldr	r2, [r7, #16]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d3b7      	bcc.n	800596a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059fa:	2300      	movs	r3, #0
 80059fc:	613b      	str	r3, [r7, #16]
 80059fe:	e043      	b.n	8005a88 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a16:	d118      	bne.n	8005a4a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	015a      	lsls	r2, r3, #5
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	4413      	add	r3, r2
 8005a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a30:	6013      	str	r3, [r2, #0]
 8005a32:	e013      	b.n	8005a5c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a40:	461a      	mov	r2, r3
 8005a42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a46:	6013      	str	r3, [r2, #0]
 8005a48:	e008      	b.n	8005a5c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a56:	461a      	mov	r2, r3
 8005a58:	2300      	movs	r3, #0
 8005a5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	015a      	lsls	r2, r3, #5
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a68:	461a      	mov	r2, r3
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	3301      	adds	r3, #1
 8005a86:	613b      	str	r3, [r7, #16]
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d3b7      	bcc.n	8005a00 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a96:	691b      	ldr	r3, [r3, #16]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005aa2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ab0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f043 0210 	orr.w	r2, r3, #16
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	699a      	ldr	r2, [r3, #24]
 8005ac8:	4b0f      	ldr	r3, [pc, #60]	; (8005b08 <USB_DevInit+0x2c4>)
 8005aca:	4313      	orrs	r3, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d005      	beq.n	8005ae2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	f043 0208 	orr.w	r2, r3, #8
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d107      	bne.n	8005af8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005af0:	f043 0304 	orr.w	r3, r3, #4
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b04:	b004      	add	sp, #16
 8005b06:	4770      	bx	lr
 8005b08:	803c3800 	.word	0x803c3800

08005b0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	019b      	lsls	r3, r3, #6
 8005b1e:	f043 0220 	orr.w	r2, r3, #32
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	3301      	adds	r3, #1
 8005b2a:	60fb      	str	r3, [r7, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a09      	ldr	r2, [pc, #36]	; (8005b54 <USB_FlushTxFifo+0x48>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d901      	bls.n	8005b38 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e006      	b.n	8005b46 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f003 0320 	and.w	r3, r3, #32
 8005b40:	2b20      	cmp	r3, #32
 8005b42:	d0f0      	beq.n	8005b26 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	00030d40 	.word	0x00030d40

08005b58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2210      	movs	r2, #16
 8005b68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4a09      	ldr	r2, [pc, #36]	; (8005b98 <USB_FlushRxFifo+0x40>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d901      	bls.n	8005b7c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e006      	b.n	8005b8a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	691b      	ldr	r3, [r3, #16]
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	2b10      	cmp	r3, #16
 8005b86:	d0f0      	beq.n	8005b6a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005b88:	2300      	movs	r3, #0
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3714      	adds	r7, #20
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	00030d40 	.word	0x00030d40

08005b9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b085      	sub	sp, #20
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	78fb      	ldrb	r3, [r7, #3]
 8005bb6:	68f9      	ldr	r1, [r7, #12]
 8005bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b087      	sub	sp, #28
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 0306 	and.w	r3, r3, #6
 8005be6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d102      	bne.n	8005bf4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	75fb      	strb	r3, [r7, #23]
 8005bf2:	e00a      	b.n	8005c0a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	d002      	beq.n	8005c00 <USB_GetDevSpeed+0x32>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b06      	cmp	r3, #6
 8005bfe:	d102      	bne.n	8005c06 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005c00:	2302      	movs	r3, #2
 8005c02:	75fb      	strb	r3, [r7, #23]
 8005c04:	e001      	b.n	8005c0a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005c06:	230f      	movs	r3, #15
 8005c08:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	785b      	ldrb	r3, [r3, #1]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d13a      	bne.n	8005caa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3a:	69da      	ldr	r2, [r3, #28]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	2101      	movs	r1, #1
 8005c46:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	68f9      	ldr	r1, [r7, #12]
 8005c4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c52:	4313      	orrs	r3, r2
 8005c54:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d155      	bne.n	8005d18 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	78db      	ldrb	r3, [r3, #3]
 8005c86:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c88:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	059b      	lsls	r3, r3, #22
 8005c8e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005c90:	4313      	orrs	r3, r2
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	e036      	b.n	8005d18 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb0:	69da      	ldr	r2, [r3, #28]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	f003 030f 	and.w	r3, r3, #15
 8005cba:	2101      	movs	r1, #1
 8005cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc0:	041b      	lsls	r3, r3, #16
 8005cc2:	68f9      	ldr	r1, [r7, #12]
 8005cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d11a      	bne.n	8005d18 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	015a      	lsls	r2, r3, #5
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	4413      	add	r3, r2
 8005cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	78db      	ldrb	r3, [r3, #3]
 8005cfc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005cfe:	430b      	orrs	r3, r1
 8005d00:	4313      	orrs	r3, r2
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	0151      	lsls	r1, r2, #5
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	440a      	add	r2, r1
 8005d0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d16:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
	...

08005d28 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	785b      	ldrb	r3, [r3, #1]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d161      	bne.n	8005e08 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d5a:	d11f      	bne.n	8005d9c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	015a      	lsls	r2, r3, #5
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4413      	add	r3, r2
 8005d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	0151      	lsls	r1, r2, #5
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	440a      	add	r2, r1
 8005d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d7a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	0151      	lsls	r1, r2, #5
 8005d8e:	68fa      	ldr	r2, [r7, #12]
 8005d90:	440a      	add	r2, r1
 8005d92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	f003 030f 	and.w	r3, r3, #15
 8005dac:	2101      	movs	r1, #1
 8005dae:	fa01 f303 	lsl.w	r3, r1, r3
 8005db2:	b29b      	uxth	r3, r3
 8005db4:	43db      	mvns	r3, r3
 8005db6:	68f9      	ldr	r1, [r7, #12]
 8005db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	2101      	movs	r1, #1
 8005dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	43db      	mvns	r3, r3
 8005dda:	68f9      	ldr	r1, [r7, #12]
 8005ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005de0:	4013      	ands	r3, r2
 8005de2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	0159      	lsls	r1, r3, #5
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	440b      	add	r3, r1
 8005dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dfe:	4619      	mov	r1, r3
 8005e00:	4b35      	ldr	r3, [pc, #212]	; (8005ed8 <USB_DeactivateEndpoint+0x1b0>)
 8005e02:	4013      	ands	r3, r2
 8005e04:	600b      	str	r3, [r1, #0]
 8005e06:	e060      	b.n	8005eca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e1e:	d11f      	bne.n	8005e60 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	0151      	lsls	r1, r2, #5
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	440a      	add	r2, r1
 8005e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e3e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	0151      	lsls	r1, r2, #5
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	440a      	add	r2, r1
 8005e56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	2101      	movs	r1, #1
 8005e72:	fa01 f303 	lsl.w	r3, r1, r3
 8005e76:	041b      	lsls	r3, r3, #16
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	68f9      	ldr	r1, [r7, #12]
 8005e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e80:	4013      	ands	r3, r2
 8005e82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8a:	69da      	ldr	r2, [r3, #28]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	f003 030f 	and.w	r3, r3, #15
 8005e94:	2101      	movs	r1, #1
 8005e96:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9a:	041b      	lsls	r3, r3, #16
 8005e9c:	43db      	mvns	r3, r3
 8005e9e:	68f9      	ldr	r1, [r7, #12]
 8005ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	0159      	lsls	r1, r3, #5
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	440b      	add	r3, r1
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4b05      	ldr	r3, [pc, #20]	; (8005edc <USB_DeactivateEndpoint+0x1b4>)
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3714      	adds	r7, #20
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr
 8005ed8:	ec337800 	.word	0xec337800
 8005edc:	eff37800 	.word	0xeff37800

08005ee0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b08a      	sub	sp, #40	; 0x28
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	4613      	mov	r3, r2
 8005eec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	785b      	ldrb	r3, [r3, #1]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	f040 815c 	bne.w	80061ba <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d132      	bne.n	8005f70 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	015a      	lsls	r2, r3, #5
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	4413      	add	r3, r2
 8005f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	69ba      	ldr	r2, [r7, #24]
 8005f1a:	0151      	lsls	r1, r2, #5
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	440a      	add	r2, r1
 8005f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	69fb      	ldr	r3, [r7, #28]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5a:	691b      	ldr	r3, [r3, #16]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	0151      	lsls	r1, r2, #5
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	440a      	add	r2, r1
 8005f64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f68:	0cdb      	lsrs	r3, r3, #19
 8005f6a:	04db      	lsls	r3, r3, #19
 8005f6c:	6113      	str	r3, [r2, #16]
 8005f6e:	e074      	b.n	800605a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	0151      	lsls	r1, r2, #5
 8005f82:	69fa      	ldr	r2, [r7, #28]
 8005f84:	440a      	add	r2, r1
 8005f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f8a:	0cdb      	lsrs	r3, r3, #19
 8005f8c:	04db      	lsls	r3, r3, #19
 8005f8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	015a      	lsls	r2, r3, #5
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	4413      	add	r3, r2
 8005f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	69ba      	ldr	r2, [r7, #24]
 8005fa0:	0151      	lsls	r1, r2, #5
 8005fa2:	69fa      	ldr	r2, [r7, #28]
 8005fa4:	440a      	add	r2, r1
 8005fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005faa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	015a      	lsls	r2, r3, #5
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	4413      	add	r3, r2
 8005fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	6959      	ldr	r1, [r3, #20]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	440b      	add	r3, r1
 8005fcc:	1e59      	subs	r1, r3, #1
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fd6:	04d9      	lsls	r1, r3, #19
 8005fd8:	4b9d      	ldr	r3, [pc, #628]	; (8006250 <USB_EPStartXfer+0x370>)
 8005fda:	400b      	ands	r3, r1
 8005fdc:	69b9      	ldr	r1, [r7, #24]
 8005fde:	0148      	lsls	r0, r1, #5
 8005fe0:	69f9      	ldr	r1, [r7, #28]
 8005fe2:	4401      	add	r1, r0
 8005fe4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006002:	69b9      	ldr	r1, [r7, #24]
 8006004:	0148      	lsls	r0, r1, #5
 8006006:	69f9      	ldr	r1, [r7, #28]
 8006008:	4401      	add	r1, r0
 800600a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800600e:	4313      	orrs	r3, r2
 8006010:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	78db      	ldrb	r3, [r3, #3]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d11f      	bne.n	800605a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	0151      	lsls	r1, r2, #5
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	440a      	add	r2, r1
 8006030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006034:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006038:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	0151      	lsls	r1, r2, #5
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	440a      	add	r2, r1
 8006050:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006054:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006058:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800605a:	79fb      	ldrb	r3, [r7, #7]
 800605c:	2b01      	cmp	r3, #1
 800605e:	d14b      	bne.n	80060f8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d009      	beq.n	800607c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	015a      	lsls	r2, r3, #5
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	4413      	add	r3, r2
 8006070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006074:	461a      	mov	r2, r3
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	78db      	ldrb	r3, [r3, #3]
 8006080:	2b01      	cmp	r3, #1
 8006082:	d128      	bne.n	80060d6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006090:	2b00      	cmp	r3, #0
 8006092:	d110      	bne.n	80060b6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	0151      	lsls	r1, r2, #5
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	440a      	add	r2, r1
 80060aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	e00f      	b.n	80060d6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	69fa      	ldr	r2, [r7, #28]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060d4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	0151      	lsls	r1, r2, #5
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	440a      	add	r2, r1
 80060ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	e12f      	b.n	8006358 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	0151      	lsls	r1, r2, #5
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	440a      	add	r2, r1
 800610e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006112:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006116:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	78db      	ldrb	r3, [r3, #3]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d015      	beq.n	800614c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	695b      	ldr	r3, [r3, #20]
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 8117 	beq.w	8006358 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	2101      	movs	r1, #1
 800613c:	fa01 f303 	lsl.w	r3, r1, r3
 8006140:	69f9      	ldr	r1, [r7, #28]
 8006142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006146:	4313      	orrs	r3, r2
 8006148:	634b      	str	r3, [r1, #52]	; 0x34
 800614a:	e105      	b.n	8006358 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006152:	689b      	ldr	r3, [r3, #8]
 8006154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d110      	bne.n	800617e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	015a      	lsls	r2, r3, #5
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	4413      	add	r3, r2
 8006164:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	0151      	lsls	r1, r2, #5
 800616e:	69fa      	ldr	r2, [r7, #28]
 8006170:	440a      	add	r2, r1
 8006172:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006176:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800617a:	6013      	str	r3, [r2, #0]
 800617c:	e00f      	b.n	800619e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	440a      	add	r2, r1
 8006194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800619c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	68d9      	ldr	r1, [r3, #12]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	781a      	ldrb	r2, [r3, #0]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	b298      	uxth	r0, r3
 80061ac:	79fb      	ldrb	r3, [r7, #7]
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	4603      	mov	r3, r0
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f000 fa2b 	bl	800660e <USB_WritePacket>
 80061b8:	e0ce      	b.n	8006358 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	0151      	lsls	r1, r2, #5
 80061cc:	69fa      	ldr	r2, [r7, #28]
 80061ce:	440a      	add	r2, r1
 80061d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d4:	0cdb      	lsrs	r3, r3, #19
 80061d6:	04db      	lsls	r3, r3, #19
 80061d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	015a      	lsls	r2, r3, #5
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	4413      	add	r3, r2
 80061e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	0151      	lsls	r1, r2, #5
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	440a      	add	r2, r1
 80061f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d126      	bne.n	8006254 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800621c:	69b9      	ldr	r1, [r7, #24]
 800621e:	0148      	lsls	r0, r1, #5
 8006220:	69f9      	ldr	r1, [r7, #28]
 8006222:	4401      	add	r1, r0
 8006224:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006228:	4313      	orrs	r3, r2
 800622a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	440a      	add	r2, r1
 8006242:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006246:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800624a:	6113      	str	r3, [r2, #16]
 800624c:	e036      	b.n	80062bc <USB_EPStartXfer+0x3dc>
 800624e:	bf00      	nop
 8006250:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	695a      	ldr	r2, [r3, #20]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	4413      	add	r3, r2
 800625e:	1e5a      	subs	r2, r3, #1
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	fbb2 f3f3 	udiv	r3, r2, r3
 8006268:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	8afb      	ldrh	r3, [r7, #22]
 800627a:	04d9      	lsls	r1, r3, #19
 800627c:	4b39      	ldr	r3, [pc, #228]	; (8006364 <USB_EPStartXfer+0x484>)
 800627e:	400b      	ands	r3, r1
 8006280:	69b9      	ldr	r1, [r7, #24]
 8006282:	0148      	lsls	r0, r1, #5
 8006284:	69f9      	ldr	r1, [r7, #28]
 8006286:	4401      	add	r1, r0
 8006288:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800628c:	4313      	orrs	r3, r2
 800628e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800629c:	691a      	ldr	r2, [r3, #16]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	8af9      	ldrh	r1, [r7, #22]
 80062a4:	fb01 f303 	mul.w	r3, r1, r3
 80062a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ac:	69b9      	ldr	r1, [r7, #24]
 80062ae:	0148      	lsls	r0, r1, #5
 80062b0:	69f9      	ldr	r1, [r7, #28]
 80062b2:	4401      	add	r1, r0
 80062b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062b8:	4313      	orrs	r3, r2
 80062ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80062bc:	79fb      	ldrb	r3, [r7, #7]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d10d      	bne.n	80062de <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d009      	beq.n	80062de <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	68d9      	ldr	r1, [r3, #12]
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062da:	460a      	mov	r2, r1
 80062dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	78db      	ldrb	r3, [r3, #3]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d128      	bne.n	8006338 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ec:	689b      	ldr	r3, [r3, #8]
 80062ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d110      	bne.n	8006318 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	0151      	lsls	r1, r2, #5
 8006308:	69fa      	ldr	r2, [r7, #28]
 800630a:	440a      	add	r2, r1
 800630c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006310:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	e00f      	b.n	8006338 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	0151      	lsls	r1, r2, #5
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	440a      	add	r2, r1
 800632e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006336:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	015a      	lsls	r2, r3, #5
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	4413      	add	r3, r2
 8006340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	69ba      	ldr	r2, [r7, #24]
 8006348:	0151      	lsls	r1, r2, #5
 800634a:	69fa      	ldr	r2, [r7, #28]
 800634c:	440a      	add	r2, r1
 800634e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006352:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006356:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3720      	adds	r7, #32
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
 8006362:	bf00      	nop
 8006364:	1ff80000 	.word	0x1ff80000

08006368 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006368:	b480      	push	{r7}
 800636a:	b087      	sub	sp, #28
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	4613      	mov	r3, r2
 8006374:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	785b      	ldrb	r3, [r3, #1]
 8006384:	2b01      	cmp	r3, #1
 8006386:	f040 80cd 	bne.w	8006524 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d132      	bne.n	80063f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	0151      	lsls	r1, r2, #5
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	440a      	add	r2, r1
 80063a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	0151      	lsls	r1, r2, #5
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	440a      	add	r2, r1
 80063cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80063d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e2:	691b      	ldr	r3, [r3, #16]
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f0:	0cdb      	lsrs	r3, r3, #19
 80063f2:	04db      	lsls	r3, r3, #19
 80063f4:	6113      	str	r3, [r2, #16]
 80063f6:	e04e      	b.n	8006496 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	0151      	lsls	r1, r2, #5
 800640a:	697a      	ldr	r2, [r7, #20]
 800640c:	440a      	add	r2, r1
 800640e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006412:	0cdb      	lsrs	r3, r3, #19
 8006414:	04db      	lsls	r3, r3, #19
 8006416:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	015a      	lsls	r2, r3, #5
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	4413      	add	r3, r2
 8006420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	693a      	ldr	r2, [r7, #16]
 8006428:	0151      	lsls	r1, r2, #5
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	440a      	add	r2, r1
 800642e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006432:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006436:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800643a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	695a      	ldr	r2, [r3, #20]
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	429a      	cmp	r2, r3
 8006446:	d903      	bls.n	8006450 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	689a      	ldr	r2, [r3, #8]
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	015a      	lsls	r2, r3, #5
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	4413      	add	r3, r2
 8006458:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	0151      	lsls	r1, r2, #5
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	440a      	add	r2, r1
 8006466:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800646a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800646e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	691a      	ldr	r2, [r3, #16]
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	695b      	ldr	r3, [r3, #20]
 8006482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006486:	6939      	ldr	r1, [r7, #16]
 8006488:	0148      	lsls	r0, r1, #5
 800648a:	6979      	ldr	r1, [r7, #20]
 800648c:	4401      	add	r1, r0
 800648e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006492:	4313      	orrs	r3, r2
 8006494:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006496:	79fb      	ldrb	r3, [r7, #7]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d11e      	bne.n	80064da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d009      	beq.n	80064b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b0:	461a      	mov	r2, r3
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	693a      	ldr	r2, [r7, #16]
 80064c8:	0151      	lsls	r1, r2, #5
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	440a      	add	r2, r1
 80064ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064d6:	6013      	str	r3, [r2, #0]
 80064d8:	e092      	b.n	8006600 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d07e      	beq.n	8006600 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	2101      	movs	r1, #1
 8006514:	fa01 f303 	lsl.w	r3, r1, r3
 8006518:	6979      	ldr	r1, [r7, #20]
 800651a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800651e:	4313      	orrs	r3, r2
 8006520:	634b      	str	r3, [r1, #52]	; 0x34
 8006522:	e06d      	b.n	8006600 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	693a      	ldr	r2, [r7, #16]
 8006534:	0151      	lsls	r1, r2, #5
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	440a      	add	r2, r1
 800653a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800653e:	0cdb      	lsrs	r3, r3, #19
 8006540:	04db      	lsls	r3, r3, #19
 8006542:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	0151      	lsls	r1, r2, #5
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	440a      	add	r2, r1
 800655a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800655e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006562:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006566:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	689a      	ldr	r2, [r3, #8]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	693a      	ldr	r2, [r7, #16]
 8006588:	0151      	lsls	r1, r2, #5
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	440a      	add	r2, r1
 800658e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006592:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006596:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a4:	691a      	ldr	r2, [r3, #16]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ae:	6939      	ldr	r1, [r7, #16]
 80065b0:	0148      	lsls	r0, r1, #5
 80065b2:	6979      	ldr	r1, [r7, #20]
 80065b4:	4401      	add	r1, r0
 80065b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065ba:	4313      	orrs	r3, r2
 80065bc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80065be:	79fb      	ldrb	r3, [r7, #7]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d10d      	bne.n	80065e0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d009      	beq.n	80065e0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	68d9      	ldr	r1, [r3, #12]
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065dc:	460a      	mov	r2, r1
 80065de:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	0151      	lsls	r1, r2, #5
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	440a      	add	r2, r1
 80065f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	371c      	adds	r7, #28
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800660e:	b480      	push	{r7}
 8006610:	b089      	sub	sp, #36	; 0x24
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	4611      	mov	r1, r2
 800661a:	461a      	mov	r2, r3
 800661c:	460b      	mov	r3, r1
 800661e:	71fb      	strb	r3, [r7, #7]
 8006620:	4613      	mov	r3, r2
 8006622:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800662c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006630:	2b00      	cmp	r3, #0
 8006632:	d11a      	bne.n	800666a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006634:	88bb      	ldrh	r3, [r7, #4]
 8006636:	3303      	adds	r3, #3
 8006638:	089b      	lsrs	r3, r3, #2
 800663a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800663c:	2300      	movs	r3, #0
 800663e:	61bb      	str	r3, [r7, #24]
 8006640:	e00f      	b.n	8006662 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	031a      	lsls	r2, r3, #12
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	4413      	add	r3, r2
 800664a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800664e:	461a      	mov	r2, r3
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	3304      	adds	r3, #4
 800665a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800665c:	69bb      	ldr	r3, [r7, #24]
 800665e:	3301      	adds	r3, #1
 8006660:	61bb      	str	r3, [r7, #24]
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	429a      	cmp	r2, r3
 8006668:	d3eb      	bcc.n	8006642 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3724      	adds	r7, #36	; 0x24
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006678:	b480      	push	{r7}
 800667a:	b089      	sub	sp, #36	; 0x24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	4613      	mov	r3, r2
 8006684:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800668e:	88fb      	ldrh	r3, [r7, #6]
 8006690:	3303      	adds	r3, #3
 8006692:	089b      	lsrs	r3, r3, #2
 8006694:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006696:	2300      	movs	r3, #0
 8006698:	61bb      	str	r3, [r7, #24]
 800669a:	e00b      	b.n	80066b4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	69fb      	ldr	r3, [r7, #28]
 80066a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	3304      	adds	r3, #4
 80066ac:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	3301      	adds	r3, #1
 80066b2:	61bb      	str	r3, [r7, #24]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d3ef      	bcc.n	800669c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80066bc:	69fb      	ldr	r3, [r7, #28]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3724      	adds	r7, #36	; 0x24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr

080066ca <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b085      	sub	sp, #20
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
 80066d2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	781b      	ldrb	r3, [r3, #0]
 80066dc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	785b      	ldrb	r3, [r3, #1]
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d12c      	bne.n	8006740 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	015a      	lsls	r2, r3, #5
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	4413      	add	r3, r2
 80066ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	db12      	blt.n	800671e <USB_EPSetStall+0x54>
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00f      	beq.n	800671e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	015a      	lsls	r2, r3, #5
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	4413      	add	r3, r2
 8006706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	0151      	lsls	r1, r2, #5
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	440a      	add	r2, r1
 8006714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006718:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800671c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	0151      	lsls	r1, r2, #5
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	440a      	add	r2, r1
 8006734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006738:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	e02b      	b.n	8006798 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	db12      	blt.n	8006778 <USB_EPSetStall+0xae>
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00f      	beq.n	8006778 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	68ba      	ldr	r2, [r7, #8]
 8006768:	0151      	lsls	r1, r2, #5
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	440a      	add	r2, r1
 800676e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006772:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006776:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	0151      	lsls	r1, r2, #5
 800678a:	68fa      	ldr	r2, [r7, #12]
 800678c:	440a      	add	r2, r1
 800678e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006792:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006796:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3714      	adds	r7, #20
 800679e:	46bd      	mov	sp, r7
 80067a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a4:	4770      	bx	lr

080067a6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067a6:	b480      	push	{r7}
 80067a8:	b085      	sub	sp, #20
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	785b      	ldrb	r3, [r3, #1]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d128      	bne.n	8006814 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	68fa      	ldr	r2, [r7, #12]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80067e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	78db      	ldrb	r3, [r3, #3]
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d003      	beq.n	80067f2 <USB_EPClearStall+0x4c>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	78db      	ldrb	r3, [r3, #3]
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d138      	bne.n	8006864 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68ba      	ldr	r2, [r7, #8]
 8006802:	0151      	lsls	r1, r2, #5
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	440a      	add	r2, r1
 8006808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800680c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	e027      	b.n	8006864 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	0151      	lsls	r1, r2, #5
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	440a      	add	r2, r1
 800682a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800682e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006832:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	78db      	ldrb	r3, [r3, #3]
 8006838:	2b03      	cmp	r3, #3
 800683a:	d003      	beq.n	8006844 <USB_EPClearStall+0x9e>
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	78db      	ldrb	r3, [r3, #3]
 8006840:	2b02      	cmp	r3, #2
 8006842:	d10f      	bne.n	8006864 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	015a      	lsls	r2, r3, #5
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	0151      	lsls	r1, r2, #5
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	440a      	add	r2, r1
 800685a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800685e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006862:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3714      	adds	r7, #20
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006872:	b480      	push	{r7}
 8006874:	b085      	sub	sp, #20
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	460b      	mov	r3, r1
 800687c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006890:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006894:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	78fb      	ldrb	r3, [r7, #3]
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80068a6:	68f9      	ldr	r1, [r7, #12]
 80068a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ac:	4313      	orrs	r3, r2
 80068ae:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068be:	b580      	push	{r7, lr}
 80068c0:	b084      	sub	sp, #16
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068d8:	f023 0302 	bic.w	r3, r3, #2
 80068dc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80068de:	2003      	movs	r0, #3
 80068e0:	f7fb fc84 	bl	80021ec <HAL_Delay>

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b084      	sub	sp, #16
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006908:	f043 0302 	orr.w	r3, r3, #2
 800690c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800690e:	2003      	movs	r0, #3
 8006910:	f7fb fc6c 	bl	80021ec <HAL_Delay>

  return HAL_OK;
 8006914:	2300      	movs	r3, #0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3710      	adds	r7, #16
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800691e:	b480      	push	{r7}
 8006920:	b085      	sub	sp, #20
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4013      	ands	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006936:	68fb      	ldr	r3, [r7, #12]
}
 8006938:	4618      	mov	r0, r3
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr

08006944 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006944:	b480      	push	{r7}
 8006946:	b085      	sub	sp, #20
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006956:	699b      	ldr	r3, [r3, #24]
 8006958:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	68ba      	ldr	r2, [r7, #8]
 8006964:	4013      	ands	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	0c1b      	lsrs	r3, r3, #16
}
 800696c:	4618      	mov	r0, r3
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006978:	b480      	push	{r7}
 800697a:	b085      	sub	sp, #20
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4013      	ands	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	b29b      	uxth	r3, r3
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	460b      	mov	r3, r1
 80069b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d2:	695b      	ldr	r3, [r3, #20]
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	4013      	ands	r3, r2
 80069d8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80069da:	68bb      	ldr	r3, [r7, #8]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	460b      	mov	r3, r1
 80069f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a0a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	f003 030f 	and.w	r3, r3, #15
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	fa22 f303 	lsr.w	r3, r2, r3
 8006a18:	01db      	lsls	r3, r3, #7
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006a22:	78fb      	ldrb	r3, [r7, #3]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	4013      	ands	r3, r2
 8006a34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006a36:	68bb      	ldr	r3, [r7, #8]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	f003 0301 	and.w	r3, r3, #1
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b085      	sub	sp, #20
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a7e:	f023 0307 	bic.w	r3, r3, #7
 8006a82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
	...

08006aa8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	607a      	str	r2, [r7, #4]
 8006ab4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	333c      	adds	r3, #60	; 0x3c
 8006abe:	3304      	adds	r3, #4
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4a26      	ldr	r2, [pc, #152]	; (8006b60 <USB_EP0_OutStart+0xb8>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d90a      	bls.n	8006ae2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006adc:	d101      	bne.n	8006ae2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e037      	b.n	8006b52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae8:	461a      	mov	r2, r3
 8006aea:	2300      	movs	r3, #0
 8006aec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006afc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b08:	691b      	ldr	r3, [r3, #16]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b10:	f043 0318 	orr.w	r3, r3, #24
 8006b14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006b28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006b2a:	7afb      	ldrb	r3, [r7, #11]
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d10f      	bne.n	8006b50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b36:	461a      	mov	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006b4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	4f54300a 	.word	0x4f54300a

08006b64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	3301      	adds	r3, #1
 8006b74:	60fb      	str	r3, [r7, #12]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	4a13      	ldr	r2, [pc, #76]	; (8006bc8 <USB_CoreReset+0x64>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d901      	bls.n	8006b82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e01b      	b.n	8006bba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	daf2      	bge.n	8006b70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	f043 0201 	orr.w	r2, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	4a09      	ldr	r2, [pc, #36]	; (8006bc8 <USB_CoreReset+0x64>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d901      	bls.n	8006bac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ba8:	2303      	movs	r3, #3
 8006baa:	e006      	b.n	8006bba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	f003 0301 	and.w	r3, r3, #1
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d0f0      	beq.n	8006b9a <USB_CoreReset+0x36>

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3714      	adds	r7, #20
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	00030d40 	.word	0x00030d40

08006bcc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006bd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006bdc:	f002 fa0c 	bl	8008ff8 <malloc>
 8006be0:	4603      	mov	r3, r0
 8006be2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d105      	bne.n	8006bf6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	e066      	b.n	8006cc4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	68fa      	ldr	r2, [r7, #12]
 8006bfa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	7c1b      	ldrb	r3, [r3, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d119      	bne.n	8006c3a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	2181      	movs	r1, #129	; 0x81
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f002 f879 	bl	8008d06 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c1e:	2202      	movs	r2, #2
 8006c20:	2101      	movs	r1, #1
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f002 f86f 	bl	8008d06 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2210      	movs	r2, #16
 8006c34:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006c38:	e016      	b.n	8006c68 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006c3a:	2340      	movs	r3, #64	; 0x40
 8006c3c:	2202      	movs	r2, #2
 8006c3e:	2181      	movs	r1, #129	; 0x81
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f002 f860 	bl	8008d06 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006c4c:	2340      	movs	r3, #64	; 0x40
 8006c4e:	2202      	movs	r2, #2
 8006c50:	2101      	movs	r1, #1
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f002 f857 	bl	8008d06 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2210      	movs	r2, #16
 8006c64:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006c68:	2308      	movs	r3, #8
 8006c6a:	2203      	movs	r2, #3
 8006c6c:	2182      	movs	r1, #130	; 0x82
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f002 f849 	bl	8008d06 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	7c1b      	ldrb	r3, [r3, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d109      	bne.n	8006cb2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ca4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ca8:	2101      	movs	r1, #1
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f002 f91a 	bl	8008ee4 <USBD_LL_PrepareReceive>
 8006cb0:	e007      	b.n	8006cc2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006cb8:	2340      	movs	r3, #64	; 0x40
 8006cba:	2101      	movs	r1, #1
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f002 f911 	bl	8008ee4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006cdc:	2181      	movs	r1, #129	; 0x81
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f002 f837 	bl	8008d52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006cea:	2101      	movs	r1, #1
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f002 f830 	bl	8008d52 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006cfa:	2182      	movs	r1, #130	; 0x82
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f002 f828 	bl	8008d52 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00e      	beq.n	8006d3a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f002 f96b 	bl	8009008 <free>
    pdev->pClassData = NULL;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006d54:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d03a      	beq.n	8006de4 <USBD_CDC_Setup+0xa0>
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	f040 8097 	bne.w	8006ea2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	88db      	ldrh	r3, [r3, #6]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d029      	beq.n	8006dd0 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	b25b      	sxtb	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	da11      	bge.n	8006daa <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006d92:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006d94:	683a      	ldr	r2, [r7, #0]
 8006d96:	88d2      	ldrh	r2, [r2, #6]
 8006d98:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006d9a:	6939      	ldr	r1, [r7, #16]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	88db      	ldrh	r3, [r3, #6]
 8006da0:	461a      	mov	r2, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f001 fac6 	bl	8008334 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006da8:	e082      	b.n	8006eb0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	785a      	ldrb	r2, [r3, #1]
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	88db      	ldrh	r3, [r3, #6]
 8006db8:	b2da      	uxtb	r2, r3
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006dc0:	6939      	ldr	r1, [r7, #16]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	88db      	ldrh	r3, [r3, #6]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 fadf 	bl	800838c <USBD_CtlPrepareRx>
    break;
 8006dce:	e06f      	b.n	8006eb0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	7850      	ldrb	r0, [r2, #1]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	4798      	blx	r3
    break;
 8006de2:	e065      	b.n	8006eb0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	785b      	ldrb	r3, [r3, #1]
 8006de8:	2b0b      	cmp	r3, #11
 8006dea:	d84f      	bhi.n	8006e8c <USBD_CDC_Setup+0x148>
 8006dec:	a201      	add	r2, pc, #4	; (adr r2, 8006df4 <USBD_CDC_Setup+0xb0>)
 8006dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df2:	bf00      	nop
 8006df4:	08006e25 	.word	0x08006e25
 8006df8:	08006e9b 	.word	0x08006e9b
 8006dfc:	08006e8d 	.word	0x08006e8d
 8006e00:	08006e8d 	.word	0x08006e8d
 8006e04:	08006e8d 	.word	0x08006e8d
 8006e08:	08006e8d 	.word	0x08006e8d
 8006e0c:	08006e8d 	.word	0x08006e8d
 8006e10:	08006e8d 	.word	0x08006e8d
 8006e14:	08006e8d 	.word	0x08006e8d
 8006e18:	08006e8d 	.word	0x08006e8d
 8006e1c:	08006e4d 	.word	0x08006e4d
 8006e20:	08006e75 	.word	0x08006e75
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e2a:	2b03      	cmp	r3, #3
 8006e2c:	d107      	bne.n	8006e3e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006e2e:	f107 030c 	add.w	r3, r7, #12
 8006e32:	2202      	movs	r2, #2
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f001 fa7c 	bl	8008334 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006e3c:	e030      	b.n	8006ea0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 fa06 	bl	8008252 <USBD_CtlError>
        ret = USBD_FAIL;
 8006e46:	2303      	movs	r3, #3
 8006e48:	75fb      	strb	r3, [r7, #23]
      break;
 8006e4a:	e029      	b.n	8006ea0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d107      	bne.n	8006e66 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006e56:	f107 030f 	add.w	r3, r7, #15
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 fa68 	bl	8008334 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006e64:	e01c      	b.n	8006ea0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006e66:	6839      	ldr	r1, [r7, #0]
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f001 f9f2 	bl	8008252 <USBD_CtlError>
        ret = USBD_FAIL;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	75fb      	strb	r3, [r7, #23]
      break;
 8006e72:	e015      	b.n	8006ea0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7a:	2b03      	cmp	r3, #3
 8006e7c:	d00f      	beq.n	8006e9e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006e7e:	6839      	ldr	r1, [r7, #0]
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f001 f9e6 	bl	8008252 <USBD_CtlError>
        ret = USBD_FAIL;
 8006e86:	2303      	movs	r3, #3
 8006e88:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006e8a:	e008      	b.n	8006e9e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f001 f9df 	bl	8008252 <USBD_CtlError>
      ret = USBD_FAIL;
 8006e94:	2303      	movs	r3, #3
 8006e96:	75fb      	strb	r3, [r7, #23]
      break;
 8006e98:	e002      	b.n	8006ea0 <USBD_CDC_Setup+0x15c>
      break;
 8006e9a:	bf00      	nop
 8006e9c:	e008      	b.n	8006eb0 <USBD_CDC_Setup+0x16c>
      break;
 8006e9e:	bf00      	nop
    }
    break;
 8006ea0:	e006      	b.n	8006eb0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006ea2:	6839      	ldr	r1, [r7, #0]
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 f9d4 	bl	8008252 <USBD_CtlError>
    ret = USBD_FAIL;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	75fb      	strb	r3, [r7, #23]
    break;
 8006eae:	bf00      	nop
  }

  return (uint8_t)ret;
 8006eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop

08006ebc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006ece:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006eda:	2303      	movs	r3, #3
 8006edc:	e049      	b.n	8006f72 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ee4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006ee6:	78fa      	ldrb	r2, [r7, #3]
 8006ee8:	6879      	ldr	r1, [r7, #4]
 8006eea:	4613      	mov	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	440b      	add	r3, r1
 8006ef4:	3318      	adds	r3, #24
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d029      	beq.n	8006f50 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006efc:	78fa      	ldrb	r2, [r7, #3]
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	4613      	mov	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4413      	add	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	440b      	add	r3, r1
 8006f0a:	3318      	adds	r3, #24
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	78f9      	ldrb	r1, [r7, #3]
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	460b      	mov	r3, r1
 8006f14:	00db      	lsls	r3, r3, #3
 8006f16:	1a5b      	subs	r3, r3, r1
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	4403      	add	r3, r0
 8006f1c:	3344      	adds	r3, #68	; 0x44
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	fbb2 f1f3 	udiv	r1, r2, r3
 8006f24:	fb03 f301 	mul.w	r3, r3, r1
 8006f28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d110      	bne.n	8006f50 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006f2e:	78fa      	ldrb	r2, [r7, #3]
 8006f30:	6879      	ldr	r1, [r7, #4]
 8006f32:	4613      	mov	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	440b      	add	r3, r1
 8006f3c:	3318      	adds	r3, #24
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006f42:	78f9      	ldrb	r1, [r7, #3]
 8006f44:	2300      	movs	r3, #0
 8006f46:	2200      	movs	r2, #0
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 ffaa 	bl	8008ea2 <USBD_LL_Transmit>
 8006f4e:	e00f      	b.n	8006f70 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006f6c:	78fa      	ldrb	r2, [r7, #3]
 8006f6e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f7a:	b580      	push	{r7, lr}
 8006f7c:	b084      	sub	sp, #16
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	460b      	mov	r3, r1
 8006f84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d101      	bne.n	8006f9c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f98:	2303      	movs	r3, #3
 8006f9a:	e015      	b.n	8006fc8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006f9c:	78fb      	ldrb	r3, [r7, #3]
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f001 ffc0 	bl	8008f26 <USBD_LL_GetRxDataSize>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3710      	adds	r7, #16
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fde:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d015      	beq.n	8007016 <USBD_CDC_EP0_RxReady+0x46>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ff0:	2bff      	cmp	r3, #255	; 0xff
 8006ff2:	d010      	beq.n	8007016 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8007002:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800700a:	b292      	uxth	r2, r2
 800700c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	22ff      	movs	r2, #255	; 0xff
 8007012:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2243      	movs	r2, #67	; 0x43
 800702c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800702e:	4b03      	ldr	r3, [pc, #12]	; (800703c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	20000094 	.word	0x20000094

08007040 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2243      	movs	r2, #67	; 0x43
 800704c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800704e:	4b03      	ldr	r3, [pc, #12]	; (800705c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007050:	4618      	mov	r0, r3
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	20000050 	.word	0x20000050

08007060 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2243      	movs	r2, #67	; 0x43
 800706c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800706e:	4b03      	ldr	r3, [pc, #12]	; (800707c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007070:	4618      	mov	r0, r3
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	200000d8 	.word	0x200000d8

08007080 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	220a      	movs	r2, #10
 800708c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800708e:	4b03      	ldr	r3, [pc, #12]	; (800709c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007090:	4618      	mov	r0, r3
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	2000000c 	.word	0x2000000c

080070a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e004      	b.n	80070be <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80070ca:	b480      	push	{r7}
 80070cc:	b087      	sub	sp, #28
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	60f8      	str	r0, [r7, #12]
 80070d2:	60b9      	str	r1, [r7, #8]
 80070d4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070dc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	68ba      	ldr	r2, [r7, #8]
 80070e2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80070ee:	2300      	movs	r3, #0
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800710c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007132:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007134:	2301      	movs	r3, #1
 8007136:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007142:	2303      	movs	r3, #3
 8007144:	e01a      	b.n	800717c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800714c:	2b00      	cmp	r3, #0
 800714e:	d114      	bne.n	800717a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	2201      	movs	r2, #1
 8007154:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800716e:	2181      	movs	r1, #129	; 0x81
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f001 fe96 	bl	8008ea2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007176:	2300      	movs	r3, #0
 8007178:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800717a:	7bfb      	ldrb	r3, [r7, #15]
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007192:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800719e:	2303      	movs	r3, #3
 80071a0:	e016      	b.n	80071d0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	7c1b      	ldrb	r3, [r3, #16]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d109      	bne.n	80071be <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80071b4:	2101      	movs	r1, #1
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f001 fe94 	bl	8008ee4 <USBD_LL_PrepareReceive>
 80071bc:	e007      	b.n	80071ce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80071c4:	2340      	movs	r3, #64	; 0x40
 80071c6:	2101      	movs	r1, #1
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f001 fe8b 	bl	8008ee4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3710      	adds	r7, #16
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	4613      	mov	r3, r2
 80071e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d10a      	bne.n	8007202 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80071ec:	481a      	ldr	r0, [pc, #104]	; (8007258 <USBD_Init+0x80>)
 80071ee:	f001 ffd3 	bl	8009198 <iprintf>
 80071f2:	481a      	ldr	r0, [pc, #104]	; (800725c <USBD_Init+0x84>)
 80071f4:	f001 ffd0 	bl	8009198 <iprintf>
 80071f8:	200a      	movs	r0, #10
 80071fa:	f001 ffe5 	bl	80091c8 <putchar>
#endif
    return USBD_FAIL;
 80071fe:	2303      	movs	r3, #3
 8007200:	e025      	b.n	800724e <USBD_Init+0x76>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007208:	2b00      	cmp	r3, #0
 800720a:	d003      	beq.n	8007214 <USBD_Init+0x3c>
  {
    pdev->pClass = NULL;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <USBD_Init+0x4e>
  {
    pdev->pConfDesc = NULL;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <USBD_Init+0x5c>
  {
    pdev->pDesc = pdesc;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	79fa      	ldrb	r2, [r7, #7]
 8007240:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f001 fcf2 	bl	8008c2c <USBD_LL_Init>
 8007248:	4603      	mov	r3, r0
 800724a:	75fb      	strb	r3, [r7, #23]

  return ret;
 800724c:	7dfb      	ldrb	r3, [r7, #23]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	0800a378 	.word	0x0800a378
 800725c:	0800a380 	.word	0x0800a380

08007260 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10a      	bne.n	800728a <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8007274:	480f      	ldr	r0, [pc, #60]	; (80072b4 <USBD_RegisterClass+0x54>)
 8007276:	f001 ff8f 	bl	8009198 <iprintf>
 800727a:	480f      	ldr	r0, [pc, #60]	; (80072b8 <USBD_RegisterClass+0x58>)
 800727c:	f001 ff8c 	bl	8009198 <iprintf>
 8007280:	200a      	movs	r0, #10
 8007282:	f001 ffa1 	bl	80091c8 <putchar>
#endif
    return USBD_FAIL;
 8007286:	2303      	movs	r3, #3
 8007288:	e010      	b.n	80072ac <USBD_RegisterClass+0x4c>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	683a      	ldr	r2, [r7, #0]
 800728e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729a:	f107 020e 	add.w	r2, r7, #14
 800729e:	4610      	mov	r0, r2
 80072a0:	4798      	blx	r3
 80072a2:	4602      	mov	r2, r0
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3710      	adds	r7, #16
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	0800a378 	.word	0x0800a378
 80072b8:	0800a398 	.word	0x0800a398

080072bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f001 fd03 	bl	8008cd0 <USBD_LL_Start>
 80072ca:	4603      	mov	r3, r0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3708      	adds	r7, #8
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	460b      	mov	r3, r1
 80072f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80072f6:	2303      	movs	r3, #3
 80072f8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007300:	2b00      	cmp	r3, #0
 8007302:	d009      	beq.n	8007318 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	78fa      	ldrb	r2, [r7, #3]
 800730e:	4611      	mov	r1, r2
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	4798      	blx	r3
 8007314:	4603      	mov	r3, r0
 8007316:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	460b      	mov	r3, r1
 800732c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007334:	2b00      	cmp	r3, #0
 8007336:	d007      	beq.n	8007348 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	78fa      	ldrb	r2, [r7, #3]
 8007342:	4611      	mov	r1, r2
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	4798      	blx	r3
  }

  return USBD_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
 800735a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	4618      	mov	r0, r3
 8007366:	f000 ff3a 	bl	80081de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2201      	movs	r2, #1
 800736e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007378:	461a      	mov	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007386:	f003 031f 	and.w	r3, r3, #31
 800738a:	2b02      	cmp	r3, #2
 800738c:	d01a      	beq.n	80073c4 <USBD_LL_SetupStage+0x72>
 800738e:	2b02      	cmp	r3, #2
 8007390:	d822      	bhi.n	80073d8 <USBD_LL_SetupStage+0x86>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <USBD_LL_SetupStage+0x4a>
 8007396:	2b01      	cmp	r3, #1
 8007398:	d00a      	beq.n	80073b0 <USBD_LL_SetupStage+0x5e>
 800739a:	e01d      	b.n	80073d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073a2:	4619      	mov	r1, r3
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fa17 	bl	80077d8 <USBD_StdDevReq>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73fb      	strb	r3, [r7, #15]
      break;
 80073ae:	e020      	b.n	80073f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073b6:	4619      	mov	r1, r3
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f000 fa7b 	bl	80078b4 <USBD_StdItfReq>
 80073be:	4603      	mov	r3, r0
 80073c0:	73fb      	strb	r3, [r7, #15]
      break;
 80073c2:	e016      	b.n	80073f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80073ca:	4619      	mov	r1, r3
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fab9 	bl	8007944 <USBD_StdEPReq>
 80073d2:	4603      	mov	r3, r0
 80073d4:	73fb      	strb	r3, [r7, #15]
      break;
 80073d6:	e00c      	b.n	80073f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80073de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f001 fcd2 	bl	8008d90 <USBD_LL_StallEP>
 80073ec:	4603      	mov	r3, r0
 80073ee:	73fb      	strb	r3, [r7, #15]
      break;
 80073f0:	bf00      	nop
  }

  return ret;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3710      	adds	r7, #16
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	460b      	mov	r3, r1
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800740a:	7afb      	ldrb	r3, [r7, #11]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d137      	bne.n	8007480 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007416:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800741e:	2b03      	cmp	r3, #3
 8007420:	d14a      	bne.n	80074b8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	689a      	ldr	r2, [r3, #8]
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	429a      	cmp	r2, r3
 800742c:	d913      	bls.n	8007456 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	689a      	ldr	r2, [r3, #8]
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	1ad2      	subs	r2, r2, r3
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	68da      	ldr	r2, [r3, #12]
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	4293      	cmp	r3, r2
 8007446:	bf28      	it	cs
 8007448:	4613      	movcs	r3, r2
 800744a:	461a      	mov	r2, r3
 800744c:	6879      	ldr	r1, [r7, #4]
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 ffb9 	bl	80083c6 <USBD_CtlContinueRx>
 8007454:	e030      	b.n	80074b8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00a      	beq.n	8007478 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007468:	2b03      	cmp	r3, #3
 800746a:	d105      	bne.n	8007478 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	68f8      	ldr	r0, [r7, #12]
 8007476:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 ffb5 	bl	80083e8 <USBD_CtlSendStatus>
 800747e:	e01b      	b.n	80074b8 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d013      	beq.n	80074b4 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007492:	2b03      	cmp	r3, #3
 8007494:	d10e      	bne.n	80074b4 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	7afa      	ldrb	r2, [r7, #11]
 80074a0:	4611      	mov	r1, r2
 80074a2:	68f8      	ldr	r0, [r7, #12]
 80074a4:	4798      	blx	r3
 80074a6:	4603      	mov	r3, r0
 80074a8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d003      	beq.n	80074b8 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80074b0:	7dfb      	ldrb	r3, [r7, #23]
 80074b2:	e002      	b.n	80074ba <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074b4:	2303      	movs	r3, #3
 80074b6:	e000      	b.n	80074ba <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}

080074c2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b086      	sub	sp, #24
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	60f8      	str	r0, [r7, #12]
 80074ca:	460b      	mov	r3, r1
 80074cc:	607a      	str	r2, [r7, #4]
 80074ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80074d0:	7afb      	ldrb	r3, [r7, #11]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d16a      	bne.n	80075ac <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3314      	adds	r3, #20
 80074da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d155      	bne.n	8007592 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d914      	bls.n	800751c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	68db      	ldr	r3, [r3, #12]
 80074fa:	1ad2      	subs	r2, r2, r3
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	461a      	mov	r2, r3
 8007506:	6879      	ldr	r1, [r7, #4]
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 ff2e 	bl	800836a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800750e:	2300      	movs	r3, #0
 8007510:	2200      	movs	r2, #0
 8007512:	2100      	movs	r1, #0
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f001 fce5 	bl	8008ee4 <USBD_LL_PrepareReceive>
 800751a:	e03a      	b.n	8007592 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	68da      	ldr	r2, [r3, #12]
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	429a      	cmp	r2, r3
 8007526:	d11c      	bne.n	8007562 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	685a      	ldr	r2, [r3, #4]
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007530:	429a      	cmp	r2, r3
 8007532:	d316      	bcc.n	8007562 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800753e:	429a      	cmp	r2, r3
 8007540:	d20f      	bcs.n	8007562 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007542:	2200      	movs	r2, #0
 8007544:	2100      	movs	r1, #0
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 ff0f 	bl	800836a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007554:	2300      	movs	r3, #0
 8007556:	2200      	movs	r2, #0
 8007558:	2100      	movs	r1, #0
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f001 fcc2 	bl	8008ee4 <USBD_LL_PrepareReceive>
 8007560:	e017      	b.n	8007592 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00a      	beq.n	8007584 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007574:	2b03      	cmp	r3, #3
 8007576:	d105      	bne.n	8007584 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800757e:	68db      	ldr	r3, [r3, #12]
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007584:	2180      	movs	r1, #128	; 0x80
 8007586:	68f8      	ldr	r0, [r7, #12]
 8007588:	f001 fc02 	bl	8008d90 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 ff3e 	bl	800840e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007598:	2b01      	cmp	r3, #1
 800759a:	d123      	bne.n	80075e4 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f7ff fe99 	bl	80072d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80075aa:	e01b      	b.n	80075e4 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d013      	beq.n	80075e0 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80075be:	2b03      	cmp	r3, #3
 80075c0:	d10e      	bne.n	80075e0 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075c8:	695b      	ldr	r3, [r3, #20]
 80075ca:	7afa      	ldrb	r2, [r7, #11]
 80075cc:	4611      	mov	r1, r2
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	4798      	blx	r3
 80075d2:	4603      	mov	r3, r0
 80075d4:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80075d6:	7dfb      	ldrb	r3, [r7, #23]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80075dc:	7dfb      	ldrb	r3, [r7, #23]
 80075de:	e002      	b.n	80075e6 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80075e0:	2303      	movs	r3, #3
 80075e2:	e000      	b.n	80075e6 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3718      	adds	r7, #24
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2201      	movs	r2, #1
 80075fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800761a:	2b00      	cmp	r3, #0
 800761c:	d009      	beq.n	8007632 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	6852      	ldr	r2, [r2, #4]
 800762a:	b2d2      	uxtb	r2, r2
 800762c:	4611      	mov	r1, r2
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007632:	2340      	movs	r3, #64	; 0x40
 8007634:	2200      	movs	r2, #0
 8007636:	2100      	movs	r1, #0
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f001 fb64 	bl	8008d06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2240      	movs	r2, #64	; 0x40
 800764a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800764e:	2340      	movs	r3, #64	; 0x40
 8007650:	2200      	movs	r2, #0
 8007652:	2180      	movs	r1, #128	; 0x80
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f001 fb56 	bl	8008d06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2201      	movs	r2, #1
 800765e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2240      	movs	r2, #64	; 0x40
 8007664:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	460b      	mov	r3, r1
 800767a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	78fa      	ldrb	r2, [r7, #3]
 8007680:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2204      	movs	r2, #4
 80076a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b083      	sub	sp, #12
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c8:	2b04      	cmp	r3, #4
 80076ca:	d105      	bne.n	80076d8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076f4:	2b03      	cmp	r3, #3
 80076f6:	d10b      	bne.n	8007710 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d005      	beq.n	8007710 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800770a:	69db      	ldr	r3, [r3, #28]
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	460b      	mov	r3, r1
 8007724:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	460b      	mov	r3, r1
 800773e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007740:	2300      	movs	r3, #0
}
 8007742:	4618      	mov	r0, r3
 8007744:	370c      	adds	r7, #12
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr

0800774e <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800774e:	b480      	push	{r7}
 8007750:	b083      	sub	sp, #12
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800777a:	2b00      	cmp	r3, #0
 800777c:	d009      	beq.n	8007792 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	6852      	ldr	r2, [r2, #4]
 800778a:	b2d2      	uxtb	r2, r2
 800778c:	4611      	mov	r1, r2
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	4798      	blx	r3
  }

  return USBD_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	3301      	adds	r3, #1
 80077b2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80077ba:	8a3b      	ldrh	r3, [r7, #16]
 80077bc:	021b      	lsls	r3, r3, #8
 80077be:	b21a      	sxth	r2, r3
 80077c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	b21b      	sxth	r3, r3
 80077c8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80077ca:	89fb      	ldrh	r3, [r7, #14]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	371c      	adds	r7, #28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ee:	2b40      	cmp	r3, #64	; 0x40
 80077f0:	d005      	beq.n	80077fe <USBD_StdDevReq+0x26>
 80077f2:	2b40      	cmp	r3, #64	; 0x40
 80077f4:	d853      	bhi.n	800789e <USBD_StdDevReq+0xc6>
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d00b      	beq.n	8007812 <USBD_StdDevReq+0x3a>
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	d14f      	bne.n	800789e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	4798      	blx	r3
 800780c:	4603      	mov	r3, r0
 800780e:	73fb      	strb	r3, [r7, #15]
    break;
 8007810:	e04a      	b.n	80078a8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	785b      	ldrb	r3, [r3, #1]
 8007816:	2b09      	cmp	r3, #9
 8007818:	d83b      	bhi.n	8007892 <USBD_StdDevReq+0xba>
 800781a:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <USBD_StdDevReq+0x48>)
 800781c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007820:	08007875 	.word	0x08007875
 8007824:	08007889 	.word	0x08007889
 8007828:	08007893 	.word	0x08007893
 800782c:	0800787f 	.word	0x0800787f
 8007830:	08007893 	.word	0x08007893
 8007834:	08007853 	.word	0x08007853
 8007838:	08007849 	.word	0x08007849
 800783c:	08007893 	.word	0x08007893
 8007840:	0800786b 	.word	0x0800786b
 8007844:	0800785d 	.word	0x0800785d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f9d8 	bl	8007c00 <USBD_GetDescriptor>
      break;
 8007850:	e024      	b.n	800789c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fb3d 	bl	8007ed4 <USBD_SetAddress>
      break;
 800785a:	e01f      	b.n	800789c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fb7c 	bl	8007f5c <USBD_SetConfig>
 8007864:	4603      	mov	r3, r0
 8007866:	73fb      	strb	r3, [r7, #15]
      break;
 8007868:	e018      	b.n	800789c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fc19 	bl	80080a4 <USBD_GetConfig>
      break;
 8007872:	e013      	b.n	800789c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007874:	6839      	ldr	r1, [r7, #0]
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fc49 	bl	800810e <USBD_GetStatus>
      break;
 800787c:	e00e      	b.n	800789c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fc77 	bl	8008174 <USBD_SetFeature>
      break;
 8007886:	e009      	b.n	800789c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007888:	6839      	ldr	r1, [r7, #0]
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f000 fc86 	bl	800819c <USBD_ClrFeature>
      break;
 8007890:	e004      	b.n	800789c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fcdc 	bl	8008252 <USBD_CtlError>
      break;
 800789a:	bf00      	nop
    }
    break;
 800789c:	e004      	b.n	80078a8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800789e:	6839      	ldr	r1, [r7, #0]
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 fcd6 	bl	8008252 <USBD_CtlError>
    break;
 80078a6:	bf00      	nop
  }

  return ret;
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop

080078b4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80078ca:	2b40      	cmp	r3, #64	; 0x40
 80078cc:	d005      	beq.n	80078da <USBD_StdItfReq+0x26>
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d82e      	bhi.n	8007930 <USBD_StdItfReq+0x7c>
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <USBD_StdItfReq+0x26>
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d12a      	bne.n	8007930 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e0:	3b01      	subs	r3, #1
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d81d      	bhi.n	8007922 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	889b      	ldrh	r3, [r3, #4]
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d813      	bhi.n	8007918 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	6839      	ldr	r1, [r7, #0]
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	4798      	blx	r3
 80078fe:	4603      	mov	r3, r0
 8007900:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	88db      	ldrh	r3, [r3, #6]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d110      	bne.n	800792c <USBD_StdItfReq+0x78>
 800790a:	7bfb      	ldrb	r3, [r7, #15]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d10d      	bne.n	800792c <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fd69 	bl	80083e8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007916:	e009      	b.n	800792c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fc99 	bl	8008252 <USBD_CtlError>
      break;
 8007920:	e004      	b.n	800792c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fc94 	bl	8008252 <USBD_CtlError>
      break;
 800792a:	e000      	b.n	800792e <USBD_StdItfReq+0x7a>
      break;
 800792c:	bf00      	nop
    }
    break;
 800792e:	e004      	b.n	800793a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fc8d 	bl	8008252 <USBD_CtlError>
    break;
 8007938:	bf00      	nop
  }

  return ret;
 800793a:	7bfb      	ldrb	r3, [r7, #15]
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	889b      	ldrh	r3, [r3, #4]
 8007956:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007960:	2b40      	cmp	r3, #64	; 0x40
 8007962:	d007      	beq.n	8007974 <USBD_StdEPReq+0x30>
 8007964:	2b40      	cmp	r3, #64	; 0x40
 8007966:	f200 8140 	bhi.w	8007bea <USBD_StdEPReq+0x2a6>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00c      	beq.n	8007988 <USBD_StdEPReq+0x44>
 800796e:	2b20      	cmp	r3, #32
 8007970:	f040 813b 	bne.w	8007bea <USBD_StdEPReq+0x2a6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	6839      	ldr	r1, [r7, #0]
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	4798      	blx	r3
 8007982:	4603      	mov	r3, r0
 8007984:	73fb      	strb	r3, [r7, #15]
    break;
 8007986:	e135      	b.n	8007bf4 <USBD_StdEPReq+0x2b0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	785b      	ldrb	r3, [r3, #1]
 800798c:	2b03      	cmp	r3, #3
 800798e:	d007      	beq.n	80079a0 <USBD_StdEPReq+0x5c>
 8007990:	2b03      	cmp	r3, #3
 8007992:	f300 8124 	bgt.w	8007bde <USBD_StdEPReq+0x29a>
 8007996:	2b00      	cmp	r3, #0
 8007998:	d07b      	beq.n	8007a92 <USBD_StdEPReq+0x14e>
 800799a:	2b01      	cmp	r3, #1
 800799c:	d03b      	beq.n	8007a16 <USBD_StdEPReq+0xd2>
 800799e:	e11e      	b.n	8007bde <USBD_StdEPReq+0x29a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d002      	beq.n	80079b0 <USBD_StdEPReq+0x6c>
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d016      	beq.n	80079dc <USBD_StdEPReq+0x98>
 80079ae:	e02c      	b.n	8007a0a <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079b0:	7bbb      	ldrb	r3, [r7, #14]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00d      	beq.n	80079d2 <USBD_StdEPReq+0x8e>
 80079b6:	7bbb      	ldrb	r3, [r7, #14]
 80079b8:	2b80      	cmp	r3, #128	; 0x80
 80079ba:	d00a      	beq.n	80079d2 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80079bc:	7bbb      	ldrb	r3, [r7, #14]
 80079be:	4619      	mov	r1, r3
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f001 f9e5 	bl	8008d90 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80079c6:	2180      	movs	r1, #128	; 0x80
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 f9e1 	bl	8008d90 <USBD_LL_StallEP>
 80079ce:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80079d0:	e020      	b.n	8007a14 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 80079d2:	6839      	ldr	r1, [r7, #0]
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f000 fc3c 	bl	8008252 <USBD_CtlError>
        break;
 80079da:	e01b      	b.n	8007a14 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	885b      	ldrh	r3, [r3, #2]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10e      	bne.n	8007a02 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079e4:	7bbb      	ldrb	r3, [r7, #14]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d00b      	beq.n	8007a02 <USBD_StdEPReq+0xbe>
 80079ea:	7bbb      	ldrb	r3, [r7, #14]
 80079ec:	2b80      	cmp	r3, #128	; 0x80
 80079ee:	d008      	beq.n	8007a02 <USBD_StdEPReq+0xbe>
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	88db      	ldrh	r3, [r3, #6]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d104      	bne.n	8007a02 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80079f8:	7bbb      	ldrb	r3, [r7, #14]
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f001 f9c7 	bl	8008d90 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 fcf0 	bl	80083e8 <USBD_CtlSendStatus>

        break;
 8007a08:	e004      	b.n	8007a14 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fc20 	bl	8008252 <USBD_CtlError>
        break;
 8007a12:	bf00      	nop
      }
      break;
 8007a14:	e0e8      	b.n	8007be8 <USBD_StdEPReq+0x2a4>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d002      	beq.n	8007a26 <USBD_StdEPReq+0xe2>
 8007a20:	2b03      	cmp	r3, #3
 8007a22:	d016      	beq.n	8007a52 <USBD_StdEPReq+0x10e>
 8007a24:	e02e      	b.n	8007a84 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00d      	beq.n	8007a48 <USBD_StdEPReq+0x104>
 8007a2c:	7bbb      	ldrb	r3, [r7, #14]
 8007a2e:	2b80      	cmp	r3, #128	; 0x80
 8007a30:	d00a      	beq.n	8007a48 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a32:	7bbb      	ldrb	r3, [r7, #14]
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f001 f9aa 	bl	8008d90 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a3c:	2180      	movs	r1, #128	; 0x80
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f001 f9a6 	bl	8008d90 <USBD_LL_StallEP>
 8007a44:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007a46:	e023      	b.n	8007a90 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fc01 	bl	8008252 <USBD_CtlError>
        break;
 8007a50:	e01e      	b.n	8007a90 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	885b      	ldrh	r3, [r3, #2]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d119      	bne.n	8007a8e <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d004      	beq.n	8007a6e <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f001 f9b0 	bl	8008dce <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 fcba 	bl	80083e8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7a:	689b      	ldr	r3, [r3, #8]
 8007a7c:	6839      	ldr	r1, [r7, #0]
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	4798      	blx	r3
        }
        break;
 8007a82:	e004      	b.n	8007a8e <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007a84:	6839      	ldr	r1, [r7, #0]
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fbe3 	bl	8008252 <USBD_CtlError>
        break;
 8007a8c:	e000      	b.n	8007a90 <USBD_StdEPReq+0x14c>
        break;
 8007a8e:	bf00      	nop
      }
      break;
 8007a90:	e0aa      	b.n	8007be8 <USBD_StdEPReq+0x2a4>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d002      	beq.n	8007aa2 <USBD_StdEPReq+0x15e>
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d032      	beq.n	8007b06 <USBD_StdEPReq+0x1c2>
 8007aa0:	e097      	b.n	8007bd2 <USBD_StdEPReq+0x28e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aa2:	7bbb      	ldrb	r3, [r7, #14]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d007      	beq.n	8007ab8 <USBD_StdEPReq+0x174>
 8007aa8:	7bbb      	ldrb	r3, [r7, #14]
 8007aaa:	2b80      	cmp	r3, #128	; 0x80
 8007aac:	d004      	beq.n	8007ab8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8007aae:	6839      	ldr	r1, [r7, #0]
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fbce 	bl	8008252 <USBD_CtlError>
          break;
 8007ab6:	e091      	b.n	8007bdc <USBD_StdEPReq+0x298>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ab8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	da0b      	bge.n	8007ad8 <USBD_StdEPReq+0x194>
 8007ac0:	7bbb      	ldrb	r3, [r7, #14]
 8007ac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	009b      	lsls	r3, r3, #2
 8007aca:	4413      	add	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	3310      	adds	r3, #16
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	3304      	adds	r3, #4
 8007ad6:	e00b      	b.n	8007af0 <USBD_StdEPReq+0x1ac>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007ad8:	7bbb      	ldrb	r3, [r7, #14]
 8007ada:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	4413      	add	r3, r2
 8007aee:	3304      	adds	r3, #4
 8007af0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	2200      	movs	r2, #0
 8007af6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	2202      	movs	r2, #2
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fc18 	bl	8008334 <USBD_CtlSendData>
        break;
 8007b04:	e06a      	b.n	8007bdc <USBD_StdEPReq+0x298>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8007b06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	da11      	bge.n	8007b32 <USBD_StdEPReq+0x1ee>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
 8007b10:	f003 020f 	and.w	r2, r3, #15
 8007b14:	6879      	ldr	r1, [r7, #4]
 8007b16:	4613      	mov	r3, r2
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	4413      	add	r3, r2
 8007b1c:	009b      	lsls	r3, r3, #2
 8007b1e:	440b      	add	r3, r1
 8007b20:	3324      	adds	r3, #36	; 0x24
 8007b22:	881b      	ldrh	r3, [r3, #0]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d117      	bne.n	8007b58 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8007b28:	6839      	ldr	r1, [r7, #0]
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 fb91 	bl	8008252 <USBD_CtlError>
            break;
 8007b30:	e054      	b.n	8007bdc <USBD_StdEPReq+0x298>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	f003 020f 	and.w	r2, r3, #15
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007b48:	881b      	ldrh	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d104      	bne.n	8007b58 <USBD_StdEPReq+0x214>
          {
            USBD_CtlError(pdev, req);
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fb7e 	bl	8008252 <USBD_CtlError>
            break;
 8007b56:	e041      	b.n	8007bdc <USBD_StdEPReq+0x298>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	da0b      	bge.n	8007b78 <USBD_StdEPReq+0x234>
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b66:	4613      	mov	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4413      	add	r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	3310      	adds	r3, #16
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	4413      	add	r3, r2
 8007b74:	3304      	adds	r3, #4
 8007b76:	e00b      	b.n	8007b90 <USBD_StdEPReq+0x24c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b7e:	4613      	mov	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	3304      	adds	r3, #4
 8007b90:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d002      	beq.n	8007b9e <USBD_StdEPReq+0x25a>
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	2b80      	cmp	r3, #128	; 0x80
 8007b9c:	d103      	bne.n	8007ba6 <USBD_StdEPReq+0x262>
          {
            pep->status = 0x0000U;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	e00e      	b.n	8007bc4 <USBD_StdEPReq+0x280>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f001 f92e 	bl	8008e0c <USBD_LL_IsStallEP>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <USBD_StdEPReq+0x27a>
          {
            pep->status = 0x0001U;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	e002      	b.n	8007bc4 <USBD_StdEPReq+0x280>
          }
          else
          {
            pep->status = 0x0000U;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	4619      	mov	r1, r3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 fbb2 	bl	8008334 <USBD_CtlSendData>
          break;
 8007bd0:	e004      	b.n	8007bdc <USBD_StdEPReq+0x298>

      default:
        USBD_CtlError(pdev, req);
 8007bd2:	6839      	ldr	r1, [r7, #0]
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fb3c 	bl	8008252 <USBD_CtlError>
        break;
 8007bda:	bf00      	nop
      }
      break;
 8007bdc:	e004      	b.n	8007be8 <USBD_StdEPReq+0x2a4>

    default:
      USBD_CtlError(pdev, req);
 8007bde:	6839      	ldr	r1, [r7, #0]
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 fb36 	bl	8008252 <USBD_CtlError>
      break;
 8007be6:	bf00      	nop
    }
    break;
 8007be8:	e004      	b.n	8007bf4 <USBD_StdEPReq+0x2b0>

  default:
    USBD_CtlError(pdev, req);
 8007bea:	6839      	ldr	r1, [r7, #0]
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 fb30 	bl	8008252 <USBD_CtlError>
    break;
 8007bf2:	bf00      	nop
  }

  return ret;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
	...

08007c00 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	885b      	ldrh	r3, [r3, #2]
 8007c1a:	0a1b      	lsrs	r3, r3, #8
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	2b06      	cmp	r3, #6
 8007c22:	f200 8128 	bhi.w	8007e76 <USBD_GetDescriptor+0x276>
 8007c26:	a201      	add	r2, pc, #4	; (adr r2, 8007c2c <USBD_GetDescriptor+0x2c>)
 8007c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2c:	08007c49 	.word	0x08007c49
 8007c30:	08007c61 	.word	0x08007c61
 8007c34:	08007ca1 	.word	0x08007ca1
 8007c38:	08007e77 	.word	0x08007e77
 8007c3c:	08007e77 	.word	0x08007e77
 8007c40:	08007e17 	.word	0x08007e17
 8007c44:	08007e43 	.word	0x08007e43
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	7c12      	ldrb	r2, [r2, #16]
 8007c54:	f107 0108 	add.w	r1, r7, #8
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4798      	blx	r3
 8007c5c:	60f8      	str	r0, [r7, #12]
    break;
 8007c5e:	e112      	b.n	8007e86 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	7c1b      	ldrb	r3, [r3, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10d      	bne.n	8007c84 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c70:	f107 0208 	add.w	r2, r7, #8
 8007c74:	4610      	mov	r0, r2
 8007c76:	4798      	blx	r3
 8007c78:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	2202      	movs	r2, #2
 8007c80:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007c82:	e100      	b.n	8007e86 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c8c:	f107 0208 	add.w	r2, r7, #8
 8007c90:	4610      	mov	r0, r2
 8007c92:	4798      	blx	r3
 8007c94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	701a      	strb	r2, [r3, #0]
    break;
 8007c9e:	e0f2      	b.n	8007e86 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	885b      	ldrh	r3, [r3, #2]
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b05      	cmp	r3, #5
 8007ca8:	f200 80ac 	bhi.w	8007e04 <USBD_GetDescriptor+0x204>
 8007cac:	a201      	add	r2, pc, #4	; (adr r2, 8007cb4 <USBD_GetDescriptor+0xb4>)
 8007cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb2:	bf00      	nop
 8007cb4:	08007ccd 	.word	0x08007ccd
 8007cb8:	08007d01 	.word	0x08007d01
 8007cbc:	08007d35 	.word	0x08007d35
 8007cc0:	08007d69 	.word	0x08007d69
 8007cc4:	08007d9d 	.word	0x08007d9d
 8007cc8:	08007dd1 	.word	0x08007dd1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00b      	beq.n	8007cf0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	7c12      	ldrb	r2, [r2, #16]
 8007ce4:	f107 0108 	add.w	r1, r7, #8
 8007ce8:	4610      	mov	r0, r2
 8007cea:	4798      	blx	r3
 8007cec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cee:	e091      	b.n	8007e14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 faad 	bl	8008252 <USBD_CtlError>
        err++;
 8007cf8:	7afb      	ldrb	r3, [r7, #11]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	72fb      	strb	r3, [r7, #11]
      break;
 8007cfe:	e089      	b.n	8007e14 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00b      	beq.n	8007d24 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	7c12      	ldrb	r2, [r2, #16]
 8007d18:	f107 0108 	add.w	r1, r7, #8
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	4798      	blx	r3
 8007d20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d22:	e077      	b.n	8007e14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fa93 	bl	8008252 <USBD_CtlError>
        err++;
 8007d2c:	7afb      	ldrb	r3, [r7, #11]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	72fb      	strb	r3, [r7, #11]
      break;
 8007d32:	e06f      	b.n	8007e14 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00b      	beq.n	8007d58 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	7c12      	ldrb	r2, [r2, #16]
 8007d4c:	f107 0108 	add.w	r1, r7, #8
 8007d50:	4610      	mov	r0, r2
 8007d52:	4798      	blx	r3
 8007d54:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d56:	e05d      	b.n	8007e14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fa79 	bl	8008252 <USBD_CtlError>
        err++;
 8007d60:	7afb      	ldrb	r3, [r7, #11]
 8007d62:	3301      	adds	r3, #1
 8007d64:	72fb      	strb	r3, [r7, #11]
      break;
 8007d66:	e055      	b.n	8007e14 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00b      	beq.n	8007d8c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	7c12      	ldrb	r2, [r2, #16]
 8007d80:	f107 0108 	add.w	r1, r7, #8
 8007d84:	4610      	mov	r0, r2
 8007d86:	4798      	blx	r3
 8007d88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d8a:	e043      	b.n	8007e14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fa5f 	bl	8008252 <USBD_CtlError>
        err++;
 8007d94:	7afb      	ldrb	r3, [r7, #11]
 8007d96:	3301      	adds	r3, #1
 8007d98:	72fb      	strb	r3, [r7, #11]
      break;
 8007d9a:	e03b      	b.n	8007e14 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00b      	beq.n	8007dc0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	7c12      	ldrb	r2, [r2, #16]
 8007db4:	f107 0108 	add.w	r1, r7, #8
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
 8007dbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dbe:	e029      	b.n	8007e14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa45 	bl	8008252 <USBD_CtlError>
        err++;
 8007dc8:	7afb      	ldrb	r3, [r7, #11]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	72fb      	strb	r3, [r7, #11]
      break;
 8007dce:	e021      	b.n	8007e14 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00b      	beq.n	8007df4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	7c12      	ldrb	r2, [r2, #16]
 8007de8:	f107 0108 	add.w	r1, r7, #8
 8007dec:	4610      	mov	r0, r2
 8007dee:	4798      	blx	r3
 8007df0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007df2:	e00f      	b.n	8007e14 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa2b 	bl	8008252 <USBD_CtlError>
        err++;
 8007dfc:	7afb      	ldrb	r3, [r7, #11]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	72fb      	strb	r3, [r7, #11]
      break;
 8007e02:	e007      	b.n	8007e14 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fa23 	bl	8008252 <USBD_CtlError>
      err++;
 8007e0c:	7afb      	ldrb	r3, [r7, #11]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007e12:	bf00      	nop
    }
    break;
 8007e14:	e037      	b.n	8007e86 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	7c1b      	ldrb	r3, [r3, #16]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d109      	bne.n	8007e32 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e26:	f107 0208 	add.w	r2, r7, #8
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	4798      	blx	r3
 8007e2e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007e30:	e029      	b.n	8007e86 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fa0c 	bl	8008252 <USBD_CtlError>
      err++;
 8007e3a:	7afb      	ldrb	r3, [r7, #11]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	72fb      	strb	r3, [r7, #11]
    break;
 8007e40:	e021      	b.n	8007e86 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	7c1b      	ldrb	r3, [r3, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10d      	bne.n	8007e66 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e52:	f107 0208 	add.w	r2, r7, #8
 8007e56:	4610      	mov	r0, r2
 8007e58:	4798      	blx	r3
 8007e5a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	2207      	movs	r2, #7
 8007e62:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007e64:	e00f      	b.n	8007e86 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f9f2 	bl	8008252 <USBD_CtlError>
      err++;
 8007e6e:	7afb      	ldrb	r3, [r7, #11]
 8007e70:	3301      	adds	r3, #1
 8007e72:	72fb      	strb	r3, [r7, #11]
    break;
 8007e74:	e007      	b.n	8007e86 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f9ea 	bl	8008252 <USBD_CtlError>
    err++;
 8007e7e:	7afb      	ldrb	r3, [r7, #11]
 8007e80:	3301      	adds	r3, #1
 8007e82:	72fb      	strb	r3, [r7, #11]
    break;
 8007e84:	bf00      	nop
  }

  if (err != 0U)
 8007e86:	7afb      	ldrb	r3, [r7, #11]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d11e      	bne.n	8007eca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	88db      	ldrh	r3, [r3, #6]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d016      	beq.n	8007ec2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007e94:	893b      	ldrh	r3, [r7, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00e      	beq.n	8007eb8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	88da      	ldrh	r2, [r3, #6]
 8007e9e:	893b      	ldrh	r3, [r7, #8]
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	bf28      	it	cs
 8007ea4:	4613      	movcs	r3, r2
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007eaa:	893b      	ldrh	r3, [r7, #8]
 8007eac:	461a      	mov	r2, r3
 8007eae:	68f9      	ldr	r1, [r7, #12]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fa3f 	bl	8008334 <USBD_CtlSendData>
 8007eb6:	e009      	b.n	8007ecc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f9c9 	bl	8008252 <USBD_CtlError>
 8007ec0:	e004      	b.n	8007ecc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 fa90 	bl	80083e8 <USBD_CtlSendStatus>
 8007ec8:	e000      	b.n	8007ecc <USBD_GetDescriptor+0x2cc>
    return;
 8007eca:	bf00      	nop
    }
  }
}
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop

08007ed4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	889b      	ldrh	r3, [r3, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d130      	bne.n	8007f48 <USBD_SetAddress+0x74>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	88db      	ldrh	r3, [r3, #6]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d12c      	bne.n	8007f48 <USBD_SetAddress+0x74>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	885b      	ldrh	r3, [r3, #2]
 8007ef2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ef4:	d828      	bhi.n	8007f48 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	885b      	ldrh	r3, [r3, #2]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f08:	2b03      	cmp	r3, #3
 8007f0a:	d104      	bne.n	8007f16 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007f0c:	6839      	ldr	r1, [r7, #0]
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f99f 	bl	8008252 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f14:	e01d      	b.n	8007f52 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	7bfa      	ldrb	r2, [r7, #15]
 8007f1a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f1e:	7bfb      	ldrb	r3, [r7, #15]
 8007f20:	4619      	mov	r1, r3
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 ff9e 	bl	8008e64 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f000 fa5d 	bl	80083e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d004      	beq.n	8007f3e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2202      	movs	r2, #2
 8007f38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3c:	e009      	b.n	8007f52 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f46:	e004      	b.n	8007f52 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f48:	6839      	ldr	r1, [r7, #0]
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 f981 	bl	8008252 <USBD_CtlError>
  }
}
 8007f50:	bf00      	nop
 8007f52:	bf00      	nop
 8007f54:	3710      	adds	r7, #16
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
	...

08007f5c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f66:	2300      	movs	r3, #0
 8007f68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	885b      	ldrh	r3, [r3, #2]
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	4b4b      	ldr	r3, [pc, #300]	; (80080a0 <USBD_SetConfig+0x144>)
 8007f72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f74:	4b4a      	ldr	r3, [pc, #296]	; (80080a0 <USBD_SetConfig+0x144>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d905      	bls.n	8007f88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f967 	bl	8008252 <USBD_CtlError>
    return USBD_FAIL;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e087      	b.n	8008098 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	d002      	beq.n	8007f98 <USBD_SetConfig+0x3c>
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d025      	beq.n	8007fe2 <USBD_SetConfig+0x86>
 8007f96:	e071      	b.n	800807c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007f98:	4b41      	ldr	r3, [pc, #260]	; (80080a0 <USBD_SetConfig+0x144>)
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d01c      	beq.n	8007fda <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007fa0:	4b3f      	ldr	r3, [pc, #252]	; (80080a0 <USBD_SetConfig+0x144>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007faa:	4b3d      	ldr	r3, [pc, #244]	; (80080a0 <USBD_SetConfig+0x144>)
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	4619      	mov	r1, r3
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f7ff f99a 	bl	80072ea <USBD_SetClassConfig>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d004      	beq.n	8007fca <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 f945 	bl	8008252 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007fc8:	e065      	b.n	8008096 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fa0c 	bl	80083e8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2203      	movs	r2, #3
 8007fd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007fd8:	e05d      	b.n	8008096 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 fa04 	bl	80083e8 <USBD_CtlSendStatus>
    break;
 8007fe0:	e059      	b.n	8008096 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007fe2:	4b2f      	ldr	r3, [pc, #188]	; (80080a0 <USBD_SetConfig+0x144>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d112      	bne.n	8008010 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2202      	movs	r2, #2
 8007fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007ff2:	4b2b      	ldr	r3, [pc, #172]	; (80080a0 <USBD_SetConfig+0x144>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ffc:	4b28      	ldr	r3, [pc, #160]	; (80080a0 <USBD_SetConfig+0x144>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	4619      	mov	r1, r3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7ff f98d 	bl	8007322 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f9ed 	bl	80083e8 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800800e:	e042      	b.n	8008096 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008010:	4b23      	ldr	r3, [pc, #140]	; (80080a0 <USBD_SetConfig+0x144>)
 8008012:	781b      	ldrb	r3, [r3, #0]
 8008014:	461a      	mov	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	429a      	cmp	r2, r3
 800801c:	d02a      	beq.n	8008074 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	b2db      	uxtb	r3, r3
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff f97b 	bl	8007322 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800802c:	4b1c      	ldr	r3, [pc, #112]	; (80080a0 <USBD_SetConfig+0x144>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	461a      	mov	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8008036:	4b1a      	ldr	r3, [pc, #104]	; (80080a0 <USBD_SetConfig+0x144>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f7ff f954 	bl	80072ea <USBD_SetClassConfig>
 8008042:	4603      	mov	r3, r0
 8008044:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8008046:	7bfb      	ldrb	r3, [r7, #15]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00f      	beq.n	800806c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f8ff 	bl	8008252 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	b2db      	uxtb	r3, r3
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7ff f960 	bl	8007322 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2202      	movs	r2, #2
 8008066:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800806a:	e014      	b.n	8008096 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f000 f9bb 	bl	80083e8 <USBD_CtlSendStatus>
    break;
 8008072:	e010      	b.n	8008096 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 f9b7 	bl	80083e8 <USBD_CtlSendStatus>
    break;
 800807a:	e00c      	b.n	8008096 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f8e7 	bl	8008252 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008084:	4b06      	ldr	r3, [pc, #24]	; (80080a0 <USBD_SetConfig+0x144>)
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f7ff f949 	bl	8007322 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8008090:	2303      	movs	r3, #3
 8008092:	73fb      	strb	r3, [r7, #15]
    break;
 8008094:	bf00      	nop
  }

  return ret;
 8008096:	7bfb      	ldrb	r3, [r7, #15]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3710      	adds	r7, #16
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	20000210 	.word	0x20000210

080080a4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	88db      	ldrh	r3, [r3, #6]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d004      	beq.n	80080c0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080b6:	6839      	ldr	r1, [r7, #0]
 80080b8:	6878      	ldr	r0, [r7, #4]
 80080ba:	f000 f8ca 	bl	8008252 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80080be:	e022      	b.n	8008106 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	dc02      	bgt.n	80080d0 <USBD_GetConfig+0x2c>
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	dc03      	bgt.n	80080d6 <USBD_GetConfig+0x32>
 80080ce:	e015      	b.n	80080fc <USBD_GetConfig+0x58>
 80080d0:	2b03      	cmp	r3, #3
 80080d2:	d00b      	beq.n	80080ec <USBD_GetConfig+0x48>
 80080d4:	e012      	b.n	80080fc <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3308      	adds	r3, #8
 80080e0:	2201      	movs	r2, #1
 80080e2:	4619      	mov	r1, r3
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 f925 	bl	8008334 <USBD_CtlSendData>
      break;
 80080ea:	e00c      	b.n	8008106 <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	3304      	adds	r3, #4
 80080f0:	2201      	movs	r2, #1
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 f91d 	bl	8008334 <USBD_CtlSendData>
      break;
 80080fa:	e004      	b.n	8008106 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 80080fc:	6839      	ldr	r1, [r7, #0]
 80080fe:	6878      	ldr	r0, [r7, #4]
 8008100:	f000 f8a7 	bl	8008252 <USBD_CtlError>
      break;
 8008104:	bf00      	nop
}
 8008106:	bf00      	nop
 8008108:	3708      	adds	r7, #8
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b082      	sub	sp, #8
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800811e:	3b01      	subs	r3, #1
 8008120:	2b02      	cmp	r3, #2
 8008122:	d81e      	bhi.n	8008162 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	88db      	ldrh	r3, [r3, #6]
 8008128:	2b02      	cmp	r3, #2
 800812a:	d004      	beq.n	8008136 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800812c:	6839      	ldr	r1, [r7, #0]
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f88f 	bl	8008252 <USBD_CtlError>
      break;
 8008134:	e01a      	b.n	800816c <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008142:	2b00      	cmp	r3, #0
 8008144:	d005      	beq.n	8008152 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f043 0202 	orr.w	r2, r3, #2
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	330c      	adds	r3, #12
 8008156:	2202      	movs	r2, #2
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f8ea 	bl	8008334 <USBD_CtlSendData>
    break;
 8008160:	e004      	b.n	800816c <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008162:	6839      	ldr	r1, [r7, #0]
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 f874 	bl	8008252 <USBD_CtlError>
    break;
 800816a:	bf00      	nop
  }
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	885b      	ldrh	r3, [r3, #2]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d106      	bne.n	8008194 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2201      	movs	r2, #1
 800818a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 f92a 	bl	80083e8 <USBD_CtlSendStatus>
  }
}
 8008194:	bf00      	nop
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ac:	3b01      	subs	r3, #1
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d80b      	bhi.n	80081ca <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	885b      	ldrh	r3, [r3, #2]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d10c      	bne.n	80081d4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f910 	bl	80083e8 <USBD_CtlSendStatus>
      }
      break;
 80081c8:	e004      	b.n	80081d4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f840 	bl	8008252 <USBD_CtlError>
      break;
 80081d2:	e000      	b.n	80081d6 <USBD_ClrFeature+0x3a>
      break;
 80081d4:	bf00      	nop
  }
}
 80081d6:	bf00      	nop
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	781a      	ldrb	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	3301      	adds	r3, #1
 80081f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	781a      	ldrb	r2, [r3, #0]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	3301      	adds	r3, #1
 8008206:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008208:	68f8      	ldr	r0, [r7, #12]
 800820a:	f7ff fac7 	bl	800779c <SWAPBYTE>
 800820e:	4603      	mov	r3, r0
 8008210:	461a      	mov	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3301      	adds	r3, #1
 800821a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	3301      	adds	r3, #1
 8008220:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008222:	68f8      	ldr	r0, [r7, #12]
 8008224:	f7ff faba 	bl	800779c <SWAPBYTE>
 8008228:	4603      	mov	r3, r0
 800822a:	461a      	mov	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3301      	adds	r3, #1
 8008234:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	3301      	adds	r3, #1
 800823a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7ff faad 	bl	800779c <SWAPBYTE>
 8008242:	4603      	mov	r3, r0
 8008244:	461a      	mov	r2, r3
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	80da      	strh	r2, [r3, #6]
}
 800824a:	bf00      	nop
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}

08008252 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b082      	sub	sp, #8
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800825c:	2180      	movs	r1, #128	; 0x80
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f000 fd96 	bl	8008d90 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008264:	2100      	movs	r1, #0
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fd92 	bl	8008d90 <USBD_LL_StallEP>
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b086      	sub	sp, #24
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008280:	2300      	movs	r3, #0
 8008282:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d036      	beq.n	80082f8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800828e:	6938      	ldr	r0, [r7, #16]
 8008290:	f000 f836 	bl	8008300 <USBD_GetLen>
 8008294:	4603      	mov	r3, r0
 8008296:	3301      	adds	r3, #1
 8008298:	b29b      	uxth	r3, r3
 800829a:	005b      	lsls	r3, r3, #1
 800829c:	b29a      	uxth	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80082a2:	7dfb      	ldrb	r3, [r7, #23]
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	4413      	add	r3, r2
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	7812      	ldrb	r2, [r2, #0]
 80082ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80082ae:	7dfb      	ldrb	r3, [r7, #23]
 80082b0:	3301      	adds	r3, #1
 80082b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	4413      	add	r3, r2
 80082ba:	2203      	movs	r2, #3
 80082bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80082be:	7dfb      	ldrb	r3, [r7, #23]
 80082c0:	3301      	adds	r3, #1
 80082c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80082c4:	e013      	b.n	80082ee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80082c6:	7dfb      	ldrb	r3, [r7, #23]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	4413      	add	r3, r2
 80082cc:	693a      	ldr	r2, [r7, #16]
 80082ce:	7812      	ldrb	r2, [r2, #0]
 80082d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80082d2:	693b      	ldr	r3, [r7, #16]
 80082d4:	3301      	adds	r3, #1
 80082d6:	613b      	str	r3, [r7, #16]
    idx++;
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
 80082da:	3301      	adds	r3, #1
 80082dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80082de:	7dfb      	ldrb	r3, [r7, #23]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	4413      	add	r3, r2
 80082e4:	2200      	movs	r2, #0
 80082e6:	701a      	strb	r2, [r3, #0]
    idx++;
 80082e8:	7dfb      	ldrb	r3, [r7, #23]
 80082ea:	3301      	adds	r3, #1
 80082ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1e7      	bne.n	80082c6 <USBD_GetString+0x52>
 80082f6:	e000      	b.n	80082fa <USBD_GetString+0x86>
    return;
 80082f8:	bf00      	nop
  }
}
 80082fa:	3718      	adds	r7, #24
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008310:	e005      	b.n	800831e <USBD_GetLen+0x1e>
  {
    len++;
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	3301      	adds	r3, #1
 8008316:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	3301      	adds	r3, #1
 800831c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1f5      	bne.n	8008312 <USBD_GetLen+0x12>
  }

  return len;
 8008326:	7bfb      	ldrb	r3, [r7, #15]
}
 8008328:	4618      	mov	r0, r3
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b084      	sub	sp, #16
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	2202      	movs	r2, #2
 8008344:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	687a      	ldr	r2, [r7, #4]
 800834c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	2100      	movs	r1, #0
 800835a:	68f8      	ldr	r0, [r7, #12]
 800835c:	f000 fda1 	bl	8008ea2 <USBD_LL_Transmit>

  return USBD_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3710      	adds	r7, #16
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}

0800836a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800836a:	b580      	push	{r7, lr}
 800836c:	b084      	sub	sp, #16
 800836e:	af00      	add	r7, sp, #0
 8008370:	60f8      	str	r0, [r7, #12]
 8008372:	60b9      	str	r1, [r7, #8]
 8008374:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	2100      	movs	r1, #0
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f000 fd90 	bl	8008ea2 <USBD_LL_Transmit>

  return USBD_OK;
 8008382:	2300      	movs	r3, #0
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2203      	movs	r2, #3
 800839c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	2100      	movs	r1, #0
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 fd94 	bl	8008ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3710      	adds	r7, #16
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	2100      	movs	r1, #0
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f000 fd83 	bl	8008ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3710      	adds	r7, #16
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2204      	movs	r2, #4
 80083f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80083f8:	2300      	movs	r3, #0
 80083fa:	2200      	movs	r2, #0
 80083fc:	2100      	movs	r1, #0
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 fd4f 	bl	8008ea2 <USBD_LL_Transmit>

  return USBD_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2205      	movs	r2, #5
 800841a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800841e:	2300      	movs	r3, #0
 8008420:	2200      	movs	r2, #0
 8008422:	2100      	movs	r1, #0
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fd5d 	bl	8008ee4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3708      	adds	r7, #8
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8008438:	2201      	movs	r2, #1
 800843a:	4912      	ldr	r1, [pc, #72]	; (8008484 <MX_USB_DEVICE_Init+0x50>)
 800843c:	4812      	ldr	r0, [pc, #72]	; (8008488 <MX_USB_DEVICE_Init+0x54>)
 800843e:	f7fe fecb 	bl	80071d8 <USBD_Init>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008448:	f7f9 fbd0 	bl	8001bec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800844c:	490f      	ldr	r1, [pc, #60]	; (800848c <MX_USB_DEVICE_Init+0x58>)
 800844e:	480e      	ldr	r0, [pc, #56]	; (8008488 <MX_USB_DEVICE_Init+0x54>)
 8008450:	f7fe ff06 	bl	8007260 <USBD_RegisterClass>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800845a:	f7f9 fbc7 	bl	8001bec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800845e:	490c      	ldr	r1, [pc, #48]	; (8008490 <MX_USB_DEVICE_Init+0x5c>)
 8008460:	4809      	ldr	r0, [pc, #36]	; (8008488 <MX_USB_DEVICE_Init+0x54>)
 8008462:	f7fe fe1d 	bl	80070a0 <USBD_CDC_RegisterInterface>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800846c:	f7f9 fbbe 	bl	8001bec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8008470:	4805      	ldr	r0, [pc, #20]	; (8008488 <MX_USB_DEVICE_Init+0x54>)
 8008472:	f7fe ff23 	bl	80072bc <USBD_Start>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800847c:	f7f9 fbb6 	bl	8001bec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008480:	bf00      	nop
 8008482:	bd80      	pop	{r7, pc}
 8008484:	20000138 	.word	0x20000138
 8008488:	200004b4 	.word	0x200004b4
 800848c:	20000018 	.word	0x20000018
 8008490:	20000124 	.word	0x20000124

08008494 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8008498:	2200      	movs	r2, #0
 800849a:	4905      	ldr	r1, [pc, #20]	; (80084b0 <CDC_Init_HS+0x1c>)
 800849c:	4805      	ldr	r0, [pc, #20]	; (80084b4 <CDC_Init_HS+0x20>)
 800849e:	f7fe fe14 	bl	80070ca <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80084a2:	4905      	ldr	r1, [pc, #20]	; (80084b8 <CDC_Init_HS+0x24>)
 80084a4:	4803      	ldr	r0, [pc, #12]	; (80084b4 <CDC_Init_HS+0x20>)
 80084a6:	f7fe fe29 	bl	80070fc <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80084aa:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	200007e8 	.word	0x200007e8
 80084b4:	200004b4 	.word	0x200004b4
 80084b8:	20000784 	.word	0x20000784

080084bc <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80084bc:	b480      	push	{r7}
 80084be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
	return (USBD_OK);
 80084c0:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	4603      	mov	r3, r0
 80084d4:	6039      	str	r1, [r7, #0]
 80084d6:	71fb      	strb	r3, [r7, #7]
 80084d8:	4613      	mov	r3, r2
 80084da:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
	switch (cmd) {
 80084dc:	79fb      	ldrb	r3, [r7, #7]
 80084de:	2b23      	cmp	r3, #35	; 0x23
 80084e0:	d85c      	bhi.n	800859c <CDC_Control_HS+0xd0>
 80084e2:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <CDC_Control_HS+0x1c>)
 80084e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e8:	0800859d 	.word	0x0800859d
 80084ec:	0800859d 	.word	0x0800859d
 80084f0:	0800859d 	.word	0x0800859d
 80084f4:	0800859d 	.word	0x0800859d
 80084f8:	0800859d 	.word	0x0800859d
 80084fc:	0800859d 	.word	0x0800859d
 8008500:	0800859d 	.word	0x0800859d
 8008504:	0800859d 	.word	0x0800859d
 8008508:	0800859d 	.word	0x0800859d
 800850c:	0800859d 	.word	0x0800859d
 8008510:	0800859d 	.word	0x0800859d
 8008514:	0800859d 	.word	0x0800859d
 8008518:	0800859d 	.word	0x0800859d
 800851c:	0800859d 	.word	0x0800859d
 8008520:	0800859d 	.word	0x0800859d
 8008524:	0800859d 	.word	0x0800859d
 8008528:	0800859d 	.word	0x0800859d
 800852c:	0800859d 	.word	0x0800859d
 8008530:	0800859d 	.word	0x0800859d
 8008534:	0800859d 	.word	0x0800859d
 8008538:	0800859d 	.word	0x0800859d
 800853c:	0800859d 	.word	0x0800859d
 8008540:	0800859d 	.word	0x0800859d
 8008544:	0800859d 	.word	0x0800859d
 8008548:	0800859d 	.word	0x0800859d
 800854c:	0800859d 	.word	0x0800859d
 8008550:	0800859d 	.word	0x0800859d
 8008554:	0800859d 	.word	0x0800859d
 8008558:	0800859d 	.word	0x0800859d
 800855c:	0800859d 	.word	0x0800859d
 8008560:	0800859d 	.word	0x0800859d
 8008564:	0800859d 	.word	0x0800859d
 8008568:	08008579 	.word	0x08008579
 800856c:	0800858b 	.word	0x0800858b
 8008570:	0800859d 	.word	0x0800859d
 8008574:	0800859d 	.word	0x0800859d
		/*                                        4 - Space                            */
		/* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
		/*******************************************************************************/

	case CDC_SET_LINE_CODING:
		memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8008578:	4b0c      	ldr	r3, [pc, #48]	; (80085ac <CDC_Control_HS+0xe0>)
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	6810      	ldr	r0, [r2, #0]
 800857e:	6018      	str	r0, [r3, #0]
 8008580:	8891      	ldrh	r1, [r2, #4]
 8008582:	7992      	ldrb	r2, [r2, #6]
 8008584:	8099      	strh	r1, [r3, #4]
 8008586:	719a      	strb	r2, [r3, #6]
		break;
 8008588:	e009      	b.n	800859e <CDC_Control_HS+0xd2>

	case CDC_GET_LINE_CODING:
		memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	4a07      	ldr	r2, [pc, #28]	; (80085ac <CDC_Control_HS+0xe0>)
 800858e:	6810      	ldr	r0, [r2, #0]
 8008590:	6018      	str	r0, [r3, #0]
 8008592:	8891      	ldrh	r1, [r2, #4]
 8008594:	7992      	ldrb	r2, [r2, #6]
 8008596:	8099      	strh	r1, [r3, #4]
 8008598:	719a      	strb	r2, [r3, #6]
		break;
 800859a:	e000      	b.n	800859e <CDC_Control_HS+0xd2>
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 800859c:	bf00      	nop
	}

	return (USBD_OK);
 800859e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	2000011c 	.word	0x2000011c

080085b0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80085ba:	6879      	ldr	r1, [r7, #4]
 80085bc:	4811      	ldr	r0, [pc, #68]	; (8008604 <CDC_Receive_HS+0x54>)
 80085be:	f7fe fd9d 	bl	80070fc <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80085c2:	4810      	ldr	r0, [pc, #64]	; (8008604 <CDC_Receive_HS+0x54>)
 80085c4:	f7fe fdde 	bl	8007184 <USBD_CDC_ReceivePacket>
	strlcpy(usb_received_data, Buf, &Len + 1);
 80085c8:	463b      	mov	r3, r7
 80085ca:	3304      	adds	r3, #4
 80085cc:	461a      	mov	r2, r3
 80085ce:	6879      	ldr	r1, [r7, #4]
 80085d0:	480d      	ldr	r0, [pc, #52]	; (8008608 <CDC_Receive_HS+0x58>)
 80085d2:	f000 fe3f 	bl	8009254 <strlcpy>

	if (usb_received_data[0] == '1') {
 80085d6:	4b0c      	ldr	r3, [pc, #48]	; (8008608 <CDC_Receive_HS+0x58>)
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	2b31      	cmp	r3, #49	; 0x31
 80085dc:	d106      	bne.n	80085ec <CDC_Receive_HS+0x3c>
		HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_SET);
 80085de:	2201      	movs	r2, #1
 80085e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80085e4:	4809      	ldr	r0, [pc, #36]	; (800860c <CDC_Receive_HS+0x5c>)
 80085e6:	f7fa ff8d 	bl	8003504 <HAL_GPIO_WritePin>
 80085ea:	e005      	b.n	80085f8 <CDC_Receive_HS+0x48>
	} else {
		HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin, GPIO_PIN_RESET);
 80085ec:	2200      	movs	r2, #0
 80085ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80085f2:	4806      	ldr	r0, [pc, #24]	; (800860c <CDC_Receive_HS+0x5c>)
 80085f4:	f7fa ff86 	bl	8003504 <HAL_GPIO_WritePin>
	}
//	CDC_ReceiveCallback(&Buf, Len[0]);
	return (USBD_OK);
 80085f8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	200004b4 	.word	0x200004b4
 8008608:	20000810 	.word	0x20000810
 800860c:	40020800 	.word	0x40020800

08008610 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
 8008618:	460b      	mov	r3, r1
 800861a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
	USBD_CDC_HandleTypeDef *hcdc =
 8008620:	4b0d      	ldr	r3, [pc, #52]	; (8008658 <CDC_Transmit_HS+0x48>)
 8008622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008626:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceHS.pClassData;
	if (hcdc->TxState != 0) {
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800862e:	2b00      	cmp	r3, #0
 8008630:	d001      	beq.n	8008636 <CDC_Transmit_HS+0x26>
		return USBD_BUSY;
 8008632:	2301      	movs	r3, #1
 8008634:	e00b      	b.n	800864e <CDC_Transmit_HS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8008636:	887b      	ldrh	r3, [r7, #2]
 8008638:	461a      	mov	r2, r3
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	4806      	ldr	r0, [pc, #24]	; (8008658 <CDC_Transmit_HS+0x48>)
 800863e:	f7fe fd44 	bl	80070ca <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8008642:	4805      	ldr	r0, [pc, #20]	; (8008658 <CDC_Transmit_HS+0x48>)
 8008644:	f7fe fd6e 	bl	8007124 <USBD_CDC_TransmitPacket>
 8008648:	4603      	mov	r3, r0
 800864a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800864c:	7bfb      	ldrb	r3, [r7, #15]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	200004b4 	.word	0x200004b4

0800865c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800865c:	b480      	push	{r7}
 800865e:	b087      	sub	sp, #28
 8008660:	af00      	add	r7, sp, #0
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	4613      	mov	r3, r2
 8008668:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800866e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008672:	4618      	mov	r0, r3
 8008674:	371c      	adds	r7, #28
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr
	...

08008680 <UsbTransfer>:
/**
 * @brief: transfer sent or received can data frame over virtual com port
 * @param ptr_can_frame_template
 *
 **/
void UsbTransfer(CanDataFrameInit *ptr_can_frame_template) {
 8008680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008682:	b08d      	sub	sp, #52	; 0x34
 8008684:	af08      	add	r7, sp, #32
 8008686:	60f8      	str	r0, [r7, #12]
//	uint8_t buffer_size = ptr_can_frame_template->rx_header.DLC * 2 + 7;
//	uint8_t usb_tx_data_buffer[buffer_size];

	message_length = sprintf(&usb_tx_data_buffer,
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	689a      	ldr	r2, [r3, #8]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	6999      	ldr	r1, [r3, #24]
			"%3X[%01X]%02X%02X%02X%02X%02X%02X%02X%02X\r\n", // 050[8]DEADBEEFFEEDDEAD
			ptr_can_frame_template->tx_header.StdId,
			ptr_can_frame_template->tx_header.DLC,
			ptr_can_frame_template->tx_data[0],
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	781b      	ldrb	r3, [r3, #0]
	message_length = sprintf(&usb_tx_data_buffer,
 8008694:	4618      	mov	r0, r3
			ptr_can_frame_template->tx_data[1],
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	785b      	ldrb	r3, [r3, #1]
	message_length = sprintf(&usb_tx_data_buffer,
 800869a:	461c      	mov	r4, r3
			ptr_can_frame_template->tx_data[2],
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	789b      	ldrb	r3, [r3, #2]
	message_length = sprintf(&usb_tx_data_buffer,
 80086a0:	461d      	mov	r5, r3
			ptr_can_frame_template->tx_data[3],
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	78db      	ldrb	r3, [r3, #3]
	message_length = sprintf(&usb_tx_data_buffer,
 80086a6:	461e      	mov	r6, r3
			ptr_can_frame_template->tx_data[4],
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	791b      	ldrb	r3, [r3, #4]
	message_length = sprintf(&usb_tx_data_buffer,
 80086ac:	60bb      	str	r3, [r7, #8]
			ptr_can_frame_template->tx_data[5],
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	795b      	ldrb	r3, [r3, #5]
	message_length = sprintf(&usb_tx_data_buffer,
 80086b2:	607b      	str	r3, [r7, #4]
			ptr_can_frame_template->tx_data[6],
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	799b      	ldrb	r3, [r3, #6]
	message_length = sprintf(&usb_tx_data_buffer,
 80086b8:	603b      	str	r3, [r7, #0]
			ptr_can_frame_template->tx_data[7]);
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	79db      	ldrb	r3, [r3, #7]
	message_length = sprintf(&usb_tx_data_buffer,
 80086be:	9307      	str	r3, [sp, #28]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	9306      	str	r3, [sp, #24]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	9305      	str	r3, [sp, #20]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	9304      	str	r3, [sp, #16]
 80086cc:	9603      	str	r6, [sp, #12]
 80086ce:	9502      	str	r5, [sp, #8]
 80086d0:	9401      	str	r4, [sp, #4]
 80086d2:	9000      	str	r0, [sp, #0]
 80086d4:	460b      	mov	r3, r1
 80086d6:	4909      	ldr	r1, [pc, #36]	; (80086fc <UsbTransfer+0x7c>)
 80086d8:	4809      	ldr	r0, [pc, #36]	; (8008700 <UsbTransfer+0x80>)
 80086da:	f000 fd9b 	bl	8009214 <siprintf>
 80086de:	4603      	mov	r3, r0
 80086e0:	b2da      	uxtb	r2, r3
 80086e2:	4b08      	ldr	r3, [pc, #32]	; (8008704 <UsbTransfer+0x84>)
 80086e4:	701a      	strb	r2, [r3, #0]
	CDC_Transmit_HS(usb_tx_data_buffer, message_length);
 80086e6:	4b07      	ldr	r3, [pc, #28]	; (8008704 <UsbTransfer+0x84>)
 80086e8:	781b      	ldrb	r3, [r3, #0]
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	4619      	mov	r1, r3
 80086ee:	4804      	ldr	r0, [pc, #16]	; (8008700 <UsbTransfer+0x80>)
 80086f0:	f7ff ff8e 	bl	8008610 <CDC_Transmit_HS>

}
 80086f4:	bf00      	nop
 80086f6:	3714      	adds	r7, #20
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086fc:	0800a3b0 	.word	0x0800a3b0
 8008700:	200007d0 	.word	0x200007d0
 8008704:	20000211 	.word	0x20000211

08008708 <UsbTransferDataByte>:

void UsbTransferDataByte(uint32_t nodeId, uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3, uint8_t byte4,  uint8_t byte5, uint8_t byte6, uint8_t byte7){
 8008708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800870a:	b08d      	sub	sp, #52	; 0x34
 800870c:	af08      	add	r7, sp, #32
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	4608      	mov	r0, r1
 8008712:	4611      	mov	r1, r2
 8008714:	461a      	mov	r2, r3
 8008716:	4603      	mov	r3, r0
 8008718:	72fb      	strb	r3, [r7, #11]
 800871a:	460b      	mov	r3, r1
 800871c:	72bb      	strb	r3, [r7, #10]
 800871e:	4613      	mov	r3, r2
 8008720:	727b      	strb	r3, [r7, #9]
//	uint8_t buffer_size = ptr_can_frame_template->rx_header.DLC * 2 + 7;
//	uint8_t usb_tx_data_buffer[buffer_size];

	message_length = sprintf(&usb_tx_data_buffer,
 8008722:	7afb      	ldrb	r3, [r7, #11]
 8008724:	607b      	str	r3, [r7, #4]
 8008726:	7aba      	ldrb	r2, [r7, #10]
 8008728:	7a79      	ldrb	r1, [r7, #9]
 800872a:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 800872e:	f897 402c 	ldrb.w	r4, [r7, #44]	; 0x2c
 8008732:	f897 5030 	ldrb.w	r5, [r7, #48]	; 0x30
 8008736:	f897 6034 	ldrb.w	r6, [r7, #52]	; 0x34
 800873a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800873e:	9307      	str	r3, [sp, #28]
 8008740:	9606      	str	r6, [sp, #24]
 8008742:	9505      	str	r5, [sp, #20]
 8008744:	9404      	str	r4, [sp, #16]
 8008746:	9003      	str	r0, [sp, #12]
 8008748:	9102      	str	r1, [sp, #8]
 800874a:	9201      	str	r2, [sp, #4]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	2308      	movs	r3, #8
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	4909      	ldr	r1, [pc, #36]	; (800877c <UsbTransferDataByte+0x74>)
 8008756:	480a      	ldr	r0, [pc, #40]	; (8008780 <UsbTransferDataByte+0x78>)
 8008758:	f000 fd5c 	bl	8009214 <siprintf>
 800875c:	4603      	mov	r3, r0
 800875e:	b2da      	uxtb	r2, r3
 8008760:	4b08      	ldr	r3, [pc, #32]	; (8008784 <UsbTransferDataByte+0x7c>)
 8008762:	701a      	strb	r2, [r3, #0]
			byte3,
			byte4,
			byte5,
			byte6,
			byte7);
	CDC_Transmit_HS(usb_tx_data_buffer, message_length);
 8008764:	4b07      	ldr	r3, [pc, #28]	; (8008784 <UsbTransferDataByte+0x7c>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	b29b      	uxth	r3, r3
 800876a:	4619      	mov	r1, r3
 800876c:	4804      	ldr	r0, [pc, #16]	; (8008780 <UsbTransferDataByte+0x78>)
 800876e:	f7ff ff4f 	bl	8008610 <CDC_Transmit_HS>

}
 8008772:	bf00      	nop
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800877a:	bf00      	nop
 800877c:	0800a3b0 	.word	0x0800a3b0
 8008780:	200007d0 	.word	0x200007d0
 8008784:	20000211 	.word	0x20000211

08008788 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	4603      	mov	r3, r0
 8008790:	6039      	str	r1, [r7, #0]
 8008792:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8008794:	683b      	ldr	r3, [r7, #0]
 8008796:	2212      	movs	r2, #18
 8008798:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800879a:	4b03      	ldr	r3, [pc, #12]	; (80087a8 <USBD_HS_DeviceDescriptor+0x20>)
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	20000154 	.word	0x20000154

080087ac <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	6039      	str	r1, [r7, #0]
 80087b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	2204      	movs	r2, #4
 80087bc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80087be:	4b03      	ldr	r3, [pc, #12]	; (80087cc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	20000168 	.word	0x20000168

080087d0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	4603      	mov	r3, r0
 80087d8:	6039      	str	r1, [r7, #0]
 80087da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80087dc:	79fb      	ldrb	r3, [r7, #7]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d105      	bne.n	80087ee <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	4907      	ldr	r1, [pc, #28]	; (8008804 <USBD_HS_ProductStrDescriptor+0x34>)
 80087e6:	4808      	ldr	r0, [pc, #32]	; (8008808 <USBD_HS_ProductStrDescriptor+0x38>)
 80087e8:	f7ff fd44 	bl	8008274 <USBD_GetString>
 80087ec:	e004      	b.n	80087f8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	4904      	ldr	r1, [pc, #16]	; (8008804 <USBD_HS_ProductStrDescriptor+0x34>)
 80087f2:	4805      	ldr	r0, [pc, #20]	; (8008808 <USBD_HS_ProductStrDescriptor+0x38>)
 80087f4:	f7ff fd3e 	bl	8008274 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087f8:	4b02      	ldr	r3, [pc, #8]	; (8008804 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000834 	.word	0x20000834
 8008808:	0800a414 	.word	0x0800a414

0800880c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	4603      	mov	r3, r0
 8008814:	6039      	str	r1, [r7, #0]
 8008816:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008818:	683a      	ldr	r2, [r7, #0]
 800881a:	4904      	ldr	r1, [pc, #16]	; (800882c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800881c:	4804      	ldr	r0, [pc, #16]	; (8008830 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800881e:	f7ff fd29 	bl	8008274 <USBD_GetString>
  return USBD_StrDesc;
 8008822:	4b02      	ldr	r3, [pc, #8]	; (800882c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8008824:	4618      	mov	r0, r3
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}
 800882c:	20000834 	.word	0x20000834
 8008830:	0800a424 	.word	0x0800a424

08008834 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	4603      	mov	r3, r0
 800883c:	6039      	str	r1, [r7, #0]
 800883e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	221a      	movs	r2, #26
 8008844:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008846:	f000 f843 	bl	80088d0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800884a:	4b02      	ldr	r3, [pc, #8]	; (8008854 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800884c:	4618      	mov	r0, r3
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}
 8008854:	2000016c 	.word	0x2000016c

08008858 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	4603      	mov	r3, r0
 8008860:	6039      	str	r1, [r7, #0]
 8008862:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008864:	79fb      	ldrb	r3, [r7, #7]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d105      	bne.n	8008876 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800886a:	683a      	ldr	r2, [r7, #0]
 800886c:	4907      	ldr	r1, [pc, #28]	; (800888c <USBD_HS_ConfigStrDescriptor+0x34>)
 800886e:	4808      	ldr	r0, [pc, #32]	; (8008890 <USBD_HS_ConfigStrDescriptor+0x38>)
 8008870:	f7ff fd00 	bl	8008274 <USBD_GetString>
 8008874:	e004      	b.n	8008880 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	4904      	ldr	r1, [pc, #16]	; (800888c <USBD_HS_ConfigStrDescriptor+0x34>)
 800887a:	4805      	ldr	r0, [pc, #20]	; (8008890 <USBD_HS_ConfigStrDescriptor+0x38>)
 800887c:	f7ff fcfa 	bl	8008274 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008880:	4b02      	ldr	r3, [pc, #8]	; (800888c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8008882:	4618      	mov	r0, r3
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	20000834 	.word	0x20000834
 8008890:	0800a438 	.word	0x0800a438

08008894 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	4603      	mov	r3, r0
 800889c:	6039      	str	r1, [r7, #0]
 800889e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80088a0:	79fb      	ldrb	r3, [r7, #7]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d105      	bne.n	80088b2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	4907      	ldr	r1, [pc, #28]	; (80088c8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80088aa:	4808      	ldr	r0, [pc, #32]	; (80088cc <USBD_HS_InterfaceStrDescriptor+0x38>)
 80088ac:	f7ff fce2 	bl	8008274 <USBD_GetString>
 80088b0:	e004      	b.n	80088bc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80088b2:	683a      	ldr	r2, [r7, #0]
 80088b4:	4904      	ldr	r1, [pc, #16]	; (80088c8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80088b6:	4805      	ldr	r0, [pc, #20]	; (80088cc <USBD_HS_InterfaceStrDescriptor+0x38>)
 80088b8:	f7ff fcdc 	bl	8008274 <USBD_GetString>
  }
  return USBD_StrDesc;
 80088bc:	4b02      	ldr	r3, [pc, #8]	; (80088c8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3708      	adds	r7, #8
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20000834 	.word	0x20000834
 80088cc:	0800a444 	.word	0x0800a444

080088d0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b084      	sub	sp, #16
 80088d4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80088d6:	4b0f      	ldr	r3, [pc, #60]	; (8008914 <Get_SerialNum+0x44>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80088dc:	4b0e      	ldr	r3, [pc, #56]	; (8008918 <Get_SerialNum+0x48>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80088e2:	4b0e      	ldr	r3, [pc, #56]	; (800891c <Get_SerialNum+0x4c>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4413      	add	r3, r2
 80088ee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d009      	beq.n	800890a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80088f6:	2208      	movs	r2, #8
 80088f8:	4909      	ldr	r1, [pc, #36]	; (8008920 <Get_SerialNum+0x50>)
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f000 f814 	bl	8008928 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008900:	2204      	movs	r2, #4
 8008902:	4908      	ldr	r1, [pc, #32]	; (8008924 <Get_SerialNum+0x54>)
 8008904:	68b8      	ldr	r0, [r7, #8]
 8008906:	f000 f80f 	bl	8008928 <IntToUnicode>
  }
}
 800890a:	bf00      	nop
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	1fff7a10 	.word	0x1fff7a10
 8008918:	1fff7a14 	.word	0x1fff7a14
 800891c:	1fff7a18 	.word	0x1fff7a18
 8008920:	2000016e 	.word	0x2000016e
 8008924:	2000017e 	.word	0x2000017e

08008928 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008928:	b480      	push	{r7}
 800892a:	b087      	sub	sp, #28
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	4613      	mov	r3, r2
 8008934:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008936:	2300      	movs	r3, #0
 8008938:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800893a:	2300      	movs	r3, #0
 800893c:	75fb      	strb	r3, [r7, #23]
 800893e:	e027      	b.n	8008990 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	0f1b      	lsrs	r3, r3, #28
 8008944:	2b09      	cmp	r3, #9
 8008946:	d80b      	bhi.n	8008960 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	0f1b      	lsrs	r3, r3, #28
 800894c:	b2da      	uxtb	r2, r3
 800894e:	7dfb      	ldrb	r3, [r7, #23]
 8008950:	005b      	lsls	r3, r3, #1
 8008952:	4619      	mov	r1, r3
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	440b      	add	r3, r1
 8008958:	3230      	adds	r2, #48	; 0x30
 800895a:	b2d2      	uxtb	r2, r2
 800895c:	701a      	strb	r2, [r3, #0]
 800895e:	e00a      	b.n	8008976 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	0f1b      	lsrs	r3, r3, #28
 8008964:	b2da      	uxtb	r2, r3
 8008966:	7dfb      	ldrb	r3, [r7, #23]
 8008968:	005b      	lsls	r3, r3, #1
 800896a:	4619      	mov	r1, r3
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	440b      	add	r3, r1
 8008970:	3237      	adds	r2, #55	; 0x37
 8008972:	b2d2      	uxtb	r2, r2
 8008974:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	011b      	lsls	r3, r3, #4
 800897a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800897c:	7dfb      	ldrb	r3, [r7, #23]
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	3301      	adds	r3, #1
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	4413      	add	r3, r2
 8008986:	2200      	movs	r2, #0
 8008988:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800898a:	7dfb      	ldrb	r3, [r7, #23]
 800898c:	3301      	adds	r3, #1
 800898e:	75fb      	strb	r3, [r7, #23]
 8008990:	7dfa      	ldrb	r2, [r7, #23]
 8008992:	79fb      	ldrb	r3, [r7, #7]
 8008994:	429a      	cmp	r2, r3
 8008996:	d3d3      	bcc.n	8008940 <IntToUnicode+0x18>
  }
}
 8008998:	bf00      	nop
 800899a:	bf00      	nop
 800899c:	371c      	adds	r7, #28
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
	...

080089a8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b08a      	sub	sp, #40	; 0x28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089b0:	f107 0314 	add.w	r3, r7, #20
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	605a      	str	r2, [r3, #4]
 80089ba:	609a      	str	r2, [r3, #8]
 80089bc:	60da      	str	r2, [r3, #12]
 80089be:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a1d      	ldr	r2, [pc, #116]	; (8008a3c <HAL_PCD_MspInit+0x94>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d134      	bne.n	8008a34 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80089ca:	2300      	movs	r3, #0
 80089cc:	613b      	str	r3, [r7, #16]
 80089ce:	4b1c      	ldr	r3, [pc, #112]	; (8008a40 <HAL_PCD_MspInit+0x98>)
 80089d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d2:	4a1b      	ldr	r2, [pc, #108]	; (8008a40 <HAL_PCD_MspInit+0x98>)
 80089d4:	f043 0302 	orr.w	r3, r3, #2
 80089d8:	6313      	str	r3, [r2, #48]	; 0x30
 80089da:	4b19      	ldr	r3, [pc, #100]	; (8008a40 <HAL_PCD_MspInit+0x98>)
 80089dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089de:	f003 0302 	and.w	r3, r3, #2
 80089e2:	613b      	str	r3, [r7, #16]
 80089e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80089e6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80089ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089ec:	2302      	movs	r3, #2
 80089ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089f0:	2300      	movs	r3, #0
 80089f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089f4:	2303      	movs	r3, #3
 80089f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80089f8:	230c      	movs	r3, #12
 80089fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089fc:	f107 0314 	add.w	r3, r7, #20
 8008a00:	4619      	mov	r1, r3
 8008a02:	4810      	ldr	r0, [pc, #64]	; (8008a44 <HAL_PCD_MspInit+0x9c>)
 8008a04:	f7fa fbca 	bl	800319c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8008a08:	2300      	movs	r3, #0
 8008a0a:	60fb      	str	r3, [r7, #12]
 8008a0c:	4b0c      	ldr	r3, [pc, #48]	; (8008a40 <HAL_PCD_MspInit+0x98>)
 8008a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a10:	4a0b      	ldr	r2, [pc, #44]	; (8008a40 <HAL_PCD_MspInit+0x98>)
 8008a12:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a16:	6313      	str	r3, [r2, #48]	; 0x30
 8008a18:	4b09      	ldr	r3, [pc, #36]	; (8008a40 <HAL_PCD_MspInit+0x98>)
 8008a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a20:	60fb      	str	r3, [r7, #12]
 8008a22:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8008a24:	2200      	movs	r2, #0
 8008a26:	2100      	movs	r1, #0
 8008a28:	204d      	movs	r0, #77	; 0x4d
 8008a2a:	f7fa fb80 	bl	800312e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8008a2e:	204d      	movs	r0, #77	; 0x4d
 8008a30:	f7fa fb99 	bl	8003166 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8008a34:	bf00      	nop
 8008a36:	3728      	adds	r7, #40	; 0x28
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	40040000 	.word	0x40040000
 8008a40:	40023800 	.word	0x40023800
 8008a44:	40020400 	.word	0x40020400

08008a48 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	4610      	mov	r0, r2
 8008a60:	f7fe fc77 	bl	8007352 <USBD_LL_SetupStage>
}
 8008a64:	bf00      	nop
 8008a66:	3708      	adds	r7, #8
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}

08008a6c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	460b      	mov	r3, r1
 8008a76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008a7e:	78fa      	ldrb	r2, [r7, #3]
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	4613      	mov	r3, r2
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	1a9b      	subs	r3, r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	440b      	add	r3, r1
 8008a8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	78fb      	ldrb	r3, [r7, #3]
 8008a94:	4619      	mov	r1, r3
 8008a96:	f7fe fcb1 	bl	80073fc <USBD_LL_DataOutStage>
}
 8008a9a:	bf00      	nop
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b082      	sub	sp, #8
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008ab4:	78fa      	ldrb	r2, [r7, #3]
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	1a9b      	subs	r3, r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	440b      	add	r3, r1
 8008ac2:	3348      	adds	r3, #72	; 0x48
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	78fb      	ldrb	r3, [r7, #3]
 8008ac8:	4619      	mov	r1, r3
 8008aca:	f7fe fcfa 	bl	80074c2 <USBD_LL_DataInStage>
}
 8008ace:	bf00      	nop
 8008ad0:	3708      	adds	r7, #8
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}

08008ad6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad6:	b580      	push	{r7, lr}
 8008ad8:	b082      	sub	sp, #8
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fe fdfe 	bl	80076e6 <USBD_LL_SOF>
}
 8008aea:	bf00      	nop
 8008aec:	3708      	adds	r7, #8
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008afa:	2301      	movs	r3, #1
 8008afc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d102      	bne.n	8008b0c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73fb      	strb	r3, [r7, #15]
 8008b0a:	e008      	b.n	8008b1e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d102      	bne.n	8008b1a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008b14:	2301      	movs	r3, #1
 8008b16:	73fb      	strb	r3, [r7, #15]
 8008b18:	e001      	b.n	8008b1e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008b1a:	f7f9 f867 	bl	8001bec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b24:	7bfa      	ldrb	r2, [r7, #15]
 8008b26:	4611      	mov	r1, r2
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fe fda1 	bl	8007670 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fe fd5a 	bl	80075ee <USBD_LL_Reset>
}
 8008b3a:	bf00      	nop
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fd9c 	bl	8007690 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	687a      	ldr	r2, [r7, #4]
 8008b64:	6812      	ldr	r2, [r2, #0]
 8008b66:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b6a:	f043 0301 	orr.w	r3, r3, #1
 8008b6e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6a1b      	ldr	r3, [r3, #32]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b78:	4b04      	ldr	r3, [pc, #16]	; (8008b8c <HAL_PCD_SuspendCallback+0x48>)
 8008b7a:	691b      	ldr	r3, [r3, #16]
 8008b7c:	4a03      	ldr	r2, [pc, #12]	; (8008b8c <HAL_PCD_SuspendCallback+0x48>)
 8008b7e:	f043 0306 	orr.w	r3, r3, #6
 8008b82:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008b84:	bf00      	nop
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	e000ed00 	.word	0xe000ed00

08008b90 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7fe fd8b 	bl	80076ba <USBD_LL_Resume>
}
 8008ba4:	bf00      	nop
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008bbe:	78fa      	ldrb	r2, [r7, #3]
 8008bc0:	4611      	mov	r1, r2
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7fe fdb6 	bl	8007734 <USBD_LL_IsoOUTIncomplete>
}
 8008bc8:	bf00      	nop
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
 8008bd8:	460b      	mov	r3, r1
 8008bda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008be2:	78fa      	ldrb	r2, [r7, #3]
 8008be4:	4611      	mov	r1, r2
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7fe fd97 	bl	800771a <USBD_LL_IsoINIncomplete>
}
 8008bec:	bf00      	nop
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fe fda3 	bl	800774e <USBD_LL_DevConnected>
}
 8008c08:	bf00      	nop
 8008c0a:	3708      	adds	r7, #8
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7fe fda0 	bl	8007764 <USBD_LL_DevDisconnected>
}
 8008c24:	bf00      	nop
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b082      	sub	sp, #8
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d140      	bne.n	8008cbe <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8008c3c:	4a22      	ldr	r2, [pc, #136]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_HS;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a20      	ldr	r2, [pc, #128]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008c48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8008c4c:	4b1e      	ldr	r3, [pc, #120]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008c4e:	4a1f      	ldr	r2, [pc, #124]	; (8008ccc <USBD_LL_Init+0xa0>)
 8008c50:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8008c52:	4b1d      	ldr	r3, [pc, #116]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008c54:	2206      	movs	r2, #6
 8008c56:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8008c58:	4b1b      	ldr	r3, [pc, #108]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008c5a:	2202      	movs	r2, #2
 8008c5c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8008c5e:	4b1a      	ldr	r3, [pc, #104]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008c60:	2200      	movs	r2, #0
 8008c62:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8008c64:	4b18      	ldr	r3, [pc, #96]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008c66:	2202      	movs	r2, #2
 8008c68:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8008c6a:	4b17      	ldr	r3, [pc, #92]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8008c70:	4b15      	ldr	r3, [pc, #84]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8008c76:	4b14      	ldr	r3, [pc, #80]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8008c7c:	4b12      	ldr	r3, [pc, #72]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008c7e:	2200      	movs	r2, #0
 8008c80:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8008c82:	4b11      	ldr	r3, [pc, #68]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008c84:	2200      	movs	r2, #0
 8008c86:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8008c88:	4b0f      	ldr	r3, [pc, #60]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8008c8e:	480e      	ldr	r0, [pc, #56]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008c90:	f7fa fc84 	bl	800359c <HAL_PCD_Init>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8008c9a:	f7f8 ffa7 	bl	8001bec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8008c9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008ca2:	4809      	ldr	r0, [pc, #36]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008ca4:	f7fb fde1 	bl	800486a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8008ca8:	2280      	movs	r2, #128	; 0x80
 8008caa:	2100      	movs	r1, #0
 8008cac:	4806      	ldr	r0, [pc, #24]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008cae:	f7fb fd95 	bl	80047dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8008cb2:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8008cb6:	2101      	movs	r1, #1
 8008cb8:	4803      	ldr	r0, [pc, #12]	; (8008cc8 <USBD_LL_Init+0x9c>)
 8008cba:	f7fb fd8f 	bl	80047dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	20000a34 	.word	0x20000a34
 8008ccc:	40040000 	.word	0x40040000

08008cd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fa fd75 	bl	80037d6 <HAL_PCD_Start>
 8008cec:	4603      	mov	r3, r0
 8008cee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cf0:	7bfb      	ldrb	r3, [r7, #15]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f000 f92a 	bl	8008f4c <USBD_Get_USB_Status>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	4608      	mov	r0, r1
 8008d10:	4611      	mov	r1, r2
 8008d12:	461a      	mov	r2, r3
 8008d14:	4603      	mov	r3, r0
 8008d16:	70fb      	strb	r3, [r7, #3]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70bb      	strb	r3, [r7, #2]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d24:	2300      	movs	r3, #0
 8008d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008d2e:	78bb      	ldrb	r3, [r7, #2]
 8008d30:	883a      	ldrh	r2, [r7, #0]
 8008d32:	78f9      	ldrb	r1, [r7, #3]
 8008d34:	f7fb f959 	bl	8003fea <HAL_PCD_EP_Open>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d3c:	7bfb      	ldrb	r3, [r7, #15]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f000 f904 	bl	8008f4c <USBD_Get_USB_Status>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3710      	adds	r7, #16
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d62:	2300      	movs	r3, #0
 8008d64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008d6c:	78fa      	ldrb	r2, [r7, #3]
 8008d6e:	4611      	mov	r1, r2
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7fb f9a2 	bl	80040ba <HAL_PCD_EP_Close>
 8008d76:	4603      	mov	r3, r0
 8008d78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	f000 f8e5 	bl	8008f4c <USBD_Get_USB_Status>
 8008d82:	4603      	mov	r3, r0
 8008d84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d86:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b084      	sub	sp, #16
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	460b      	mov	r3, r1
 8008d9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008daa:	78fa      	ldrb	r2, [r7, #3]
 8008dac:	4611      	mov	r1, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7fb fa7a 	bl	80042a8 <HAL_PCD_EP_SetStall>
 8008db4:	4603      	mov	r3, r0
 8008db6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 f8c6 	bl	8008f4c <USBD_Get_USB_Status>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dce:	b580      	push	{r7, lr}
 8008dd0:	b084      	sub	sp, #16
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dde:	2300      	movs	r3, #0
 8008de0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008de8:	78fa      	ldrb	r2, [r7, #3]
 8008dea:	4611      	mov	r1, r2
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fb fabf 	bl	8004370 <HAL_PCD_EP_ClrStall>
 8008df2:	4603      	mov	r3, r0
 8008df4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008df6:	7bfb      	ldrb	r3, [r7, #15]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f000 f8a7 	bl	8008f4c <USBD_Get_USB_Status>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e02:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	3710      	adds	r7, #16
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	bd80      	pop	{r7, pc}

08008e0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
 8008e14:	460b      	mov	r3, r1
 8008e16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	da0b      	bge.n	8008e40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e28:	78fb      	ldrb	r3, [r7, #3]
 8008e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e2e:	68f9      	ldr	r1, [r7, #12]
 8008e30:	4613      	mov	r3, r2
 8008e32:	00db      	lsls	r3, r3, #3
 8008e34:	1a9b      	subs	r3, r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	440b      	add	r3, r1
 8008e3a:	333e      	adds	r3, #62	; 0x3e
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	e00b      	b.n	8008e58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e40:	78fb      	ldrb	r3, [r7, #3]
 8008e42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e46:	68f9      	ldr	r1, [r7, #12]
 8008e48:	4613      	mov	r3, r2
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	1a9b      	subs	r3, r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	440b      	add	r3, r1
 8008e52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008e56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3714      	adds	r7, #20
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	460b      	mov	r3, r1
 8008e6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e74:	2300      	movs	r3, #0
 8008e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008e7e:	78fa      	ldrb	r2, [r7, #3]
 8008e80:	4611      	mov	r1, r2
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7fb f88c 	bl	8003fa0 <HAL_PCD_SetAddress>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f000 f85c 	bl	8008f4c <USBD_Get_USB_Status>
 8008e94:	4603      	mov	r3, r0
 8008e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b086      	sub	sp, #24
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	60f8      	str	r0, [r7, #12]
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	603b      	str	r3, [r7, #0]
 8008eae:	460b      	mov	r3, r1
 8008eb0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008ec0:	7af9      	ldrb	r1, [r7, #11]
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	f7fb f9a5 	bl	8004214 <HAL_PCD_EP_Transmit>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ece:	7dfb      	ldrb	r3, [r7, #23]
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	f000 f83b 	bl	8008f4c <USBD_Get_USB_Status>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008eda:	7dbb      	ldrb	r3, [r7, #22]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}

08008ee4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	607a      	str	r2, [r7, #4]
 8008eee:	603b      	str	r3, [r7, #0]
 8008ef0:	460b      	mov	r3, r1
 8008ef2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008f02:	7af9      	ldrb	r1, [r7, #11]
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	f7fb f921 	bl	800414e <HAL_PCD_EP_Receive>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f10:	7dfb      	ldrb	r3, [r7, #23]
 8008f12:	4618      	mov	r0, r3
 8008f14:	f000 f81a 	bl	8008f4c <USBD_Get_USB_Status>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f1c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b082      	sub	sp, #8
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
 8008f2e:	460b      	mov	r3, r1
 8008f30:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008f38:	78fa      	ldrb	r2, [r7, #3]
 8008f3a:	4611      	mov	r1, r2
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f7fb f951 	bl	80041e4 <HAL_PCD_EP_GetRxCount>
 8008f42:	4603      	mov	r3, r0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	4603      	mov	r3, r0
 8008f54:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008f5a:	79fb      	ldrb	r3, [r7, #7]
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d817      	bhi.n	8008f90 <USBD_Get_USB_Status+0x44>
 8008f60:	a201      	add	r2, pc, #4	; (adr r2, 8008f68 <USBD_Get_USB_Status+0x1c>)
 8008f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f66:	bf00      	nop
 8008f68:	08008f79 	.word	0x08008f79
 8008f6c:	08008f7f 	.word	0x08008f7f
 8008f70:	08008f85 	.word	0x08008f85
 8008f74:	08008f8b 	.word	0x08008f8b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f7c:	e00b      	b.n	8008f96 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	73fb      	strb	r3, [r7, #15]
    break;
 8008f82:	e008      	b.n	8008f96 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f84:	2301      	movs	r3, #1
 8008f86:	73fb      	strb	r3, [r7, #15]
    break;
 8008f88:	e005      	b.n	8008f96 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f8e:	e002      	b.n	8008f96 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008f90:	2303      	movs	r3, #3
 8008f92:	73fb      	strb	r3, [r7, #15]
    break;
 8008f94:	bf00      	nop
  }
  return usb_status;
 8008f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3714      	adds	r7, #20
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <__errno>:
 8008fa4:	4b01      	ldr	r3, [pc, #4]	; (8008fac <__errno+0x8>)
 8008fa6:	6818      	ldr	r0, [r3, #0]
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	20000188 	.word	0x20000188

08008fb0 <__libc_init_array>:
 8008fb0:	b570      	push	{r4, r5, r6, lr}
 8008fb2:	4d0d      	ldr	r5, [pc, #52]	; (8008fe8 <__libc_init_array+0x38>)
 8008fb4:	4c0d      	ldr	r4, [pc, #52]	; (8008fec <__libc_init_array+0x3c>)
 8008fb6:	1b64      	subs	r4, r4, r5
 8008fb8:	10a4      	asrs	r4, r4, #2
 8008fba:	2600      	movs	r6, #0
 8008fbc:	42a6      	cmp	r6, r4
 8008fbe:	d109      	bne.n	8008fd4 <__libc_init_array+0x24>
 8008fc0:	4d0b      	ldr	r5, [pc, #44]	; (8008ff0 <__libc_init_array+0x40>)
 8008fc2:	4c0c      	ldr	r4, [pc, #48]	; (8008ff4 <__libc_init_array+0x44>)
 8008fc4:	f001 f9cc 	bl	800a360 <_init>
 8008fc8:	1b64      	subs	r4, r4, r5
 8008fca:	10a4      	asrs	r4, r4, #2
 8008fcc:	2600      	movs	r6, #0
 8008fce:	42a6      	cmp	r6, r4
 8008fd0:	d105      	bne.n	8008fde <__libc_init_array+0x2e>
 8008fd2:	bd70      	pop	{r4, r5, r6, pc}
 8008fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fd8:	4798      	blx	r3
 8008fda:	3601      	adds	r6, #1
 8008fdc:	e7ee      	b.n	8008fbc <__libc_init_array+0xc>
 8008fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fe2:	4798      	blx	r3
 8008fe4:	3601      	adds	r6, #1
 8008fe6:	e7f2      	b.n	8008fce <__libc_init_array+0x1e>
 8008fe8:	0800a504 	.word	0x0800a504
 8008fec:	0800a504 	.word	0x0800a504
 8008ff0:	0800a504 	.word	0x0800a504
 8008ff4:	0800a508 	.word	0x0800a508

08008ff8 <malloc>:
 8008ff8:	4b02      	ldr	r3, [pc, #8]	; (8009004 <malloc+0xc>)
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	6818      	ldr	r0, [r3, #0]
 8008ffe:	f000 b871 	b.w	80090e4 <_malloc_r>
 8009002:	bf00      	nop
 8009004:	20000188 	.word	0x20000188

08009008 <free>:
 8009008:	4b02      	ldr	r3, [pc, #8]	; (8009014 <free+0xc>)
 800900a:	4601      	mov	r1, r0
 800900c:	6818      	ldr	r0, [r3, #0]
 800900e:	f000 b819 	b.w	8009044 <_free_r>
 8009012:	bf00      	nop
 8009014:	20000188 	.word	0x20000188

08009018 <memcpy>:
 8009018:	440a      	add	r2, r1
 800901a:	4291      	cmp	r1, r2
 800901c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009020:	d100      	bne.n	8009024 <memcpy+0xc>
 8009022:	4770      	bx	lr
 8009024:	b510      	push	{r4, lr}
 8009026:	f811 4b01 	ldrb.w	r4, [r1], #1
 800902a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800902e:	4291      	cmp	r1, r2
 8009030:	d1f9      	bne.n	8009026 <memcpy+0xe>
 8009032:	bd10      	pop	{r4, pc}

08009034 <memset>:
 8009034:	4402      	add	r2, r0
 8009036:	4603      	mov	r3, r0
 8009038:	4293      	cmp	r3, r2
 800903a:	d100      	bne.n	800903e <memset+0xa>
 800903c:	4770      	bx	lr
 800903e:	f803 1b01 	strb.w	r1, [r3], #1
 8009042:	e7f9      	b.n	8009038 <memset+0x4>

08009044 <_free_r>:
 8009044:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009046:	2900      	cmp	r1, #0
 8009048:	d048      	beq.n	80090dc <_free_r+0x98>
 800904a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800904e:	9001      	str	r0, [sp, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	f1a1 0404 	sub.w	r4, r1, #4
 8009056:	bfb8      	it	lt
 8009058:	18e4      	addlt	r4, r4, r3
 800905a:	f000 fa09 	bl	8009470 <__malloc_lock>
 800905e:	4a20      	ldr	r2, [pc, #128]	; (80090e0 <_free_r+0x9c>)
 8009060:	9801      	ldr	r0, [sp, #4]
 8009062:	6813      	ldr	r3, [r2, #0]
 8009064:	4615      	mov	r5, r2
 8009066:	b933      	cbnz	r3, 8009076 <_free_r+0x32>
 8009068:	6063      	str	r3, [r4, #4]
 800906a:	6014      	str	r4, [r2, #0]
 800906c:	b003      	add	sp, #12
 800906e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009072:	f000 ba03 	b.w	800947c <__malloc_unlock>
 8009076:	42a3      	cmp	r3, r4
 8009078:	d90b      	bls.n	8009092 <_free_r+0x4e>
 800907a:	6821      	ldr	r1, [r4, #0]
 800907c:	1862      	adds	r2, r4, r1
 800907e:	4293      	cmp	r3, r2
 8009080:	bf04      	itt	eq
 8009082:	681a      	ldreq	r2, [r3, #0]
 8009084:	685b      	ldreq	r3, [r3, #4]
 8009086:	6063      	str	r3, [r4, #4]
 8009088:	bf04      	itt	eq
 800908a:	1852      	addeq	r2, r2, r1
 800908c:	6022      	streq	r2, [r4, #0]
 800908e:	602c      	str	r4, [r5, #0]
 8009090:	e7ec      	b.n	800906c <_free_r+0x28>
 8009092:	461a      	mov	r2, r3
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	b10b      	cbz	r3, 800909c <_free_r+0x58>
 8009098:	42a3      	cmp	r3, r4
 800909a:	d9fa      	bls.n	8009092 <_free_r+0x4e>
 800909c:	6811      	ldr	r1, [r2, #0]
 800909e:	1855      	adds	r5, r2, r1
 80090a0:	42a5      	cmp	r5, r4
 80090a2:	d10b      	bne.n	80090bc <_free_r+0x78>
 80090a4:	6824      	ldr	r4, [r4, #0]
 80090a6:	4421      	add	r1, r4
 80090a8:	1854      	adds	r4, r2, r1
 80090aa:	42a3      	cmp	r3, r4
 80090ac:	6011      	str	r1, [r2, #0]
 80090ae:	d1dd      	bne.n	800906c <_free_r+0x28>
 80090b0:	681c      	ldr	r4, [r3, #0]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	6053      	str	r3, [r2, #4]
 80090b6:	4421      	add	r1, r4
 80090b8:	6011      	str	r1, [r2, #0]
 80090ba:	e7d7      	b.n	800906c <_free_r+0x28>
 80090bc:	d902      	bls.n	80090c4 <_free_r+0x80>
 80090be:	230c      	movs	r3, #12
 80090c0:	6003      	str	r3, [r0, #0]
 80090c2:	e7d3      	b.n	800906c <_free_r+0x28>
 80090c4:	6825      	ldr	r5, [r4, #0]
 80090c6:	1961      	adds	r1, r4, r5
 80090c8:	428b      	cmp	r3, r1
 80090ca:	bf04      	itt	eq
 80090cc:	6819      	ldreq	r1, [r3, #0]
 80090ce:	685b      	ldreq	r3, [r3, #4]
 80090d0:	6063      	str	r3, [r4, #4]
 80090d2:	bf04      	itt	eq
 80090d4:	1949      	addeq	r1, r1, r5
 80090d6:	6021      	streq	r1, [r4, #0]
 80090d8:	6054      	str	r4, [r2, #4]
 80090da:	e7c7      	b.n	800906c <_free_r+0x28>
 80090dc:	b003      	add	sp, #12
 80090de:	bd30      	pop	{r4, r5, pc}
 80090e0:	20000214 	.word	0x20000214

080090e4 <_malloc_r>:
 80090e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e6:	1ccd      	adds	r5, r1, #3
 80090e8:	f025 0503 	bic.w	r5, r5, #3
 80090ec:	3508      	adds	r5, #8
 80090ee:	2d0c      	cmp	r5, #12
 80090f0:	bf38      	it	cc
 80090f2:	250c      	movcc	r5, #12
 80090f4:	2d00      	cmp	r5, #0
 80090f6:	4606      	mov	r6, r0
 80090f8:	db01      	blt.n	80090fe <_malloc_r+0x1a>
 80090fa:	42a9      	cmp	r1, r5
 80090fc:	d903      	bls.n	8009106 <_malloc_r+0x22>
 80090fe:	230c      	movs	r3, #12
 8009100:	6033      	str	r3, [r6, #0]
 8009102:	2000      	movs	r0, #0
 8009104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009106:	f000 f9b3 	bl	8009470 <__malloc_lock>
 800910a:	4921      	ldr	r1, [pc, #132]	; (8009190 <_malloc_r+0xac>)
 800910c:	680a      	ldr	r2, [r1, #0]
 800910e:	4614      	mov	r4, r2
 8009110:	b99c      	cbnz	r4, 800913a <_malloc_r+0x56>
 8009112:	4f20      	ldr	r7, [pc, #128]	; (8009194 <_malloc_r+0xb0>)
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	b923      	cbnz	r3, 8009122 <_malloc_r+0x3e>
 8009118:	4621      	mov	r1, r4
 800911a:	4630      	mov	r0, r6
 800911c:	f000 f86a 	bl	80091f4 <_sbrk_r>
 8009120:	6038      	str	r0, [r7, #0]
 8009122:	4629      	mov	r1, r5
 8009124:	4630      	mov	r0, r6
 8009126:	f000 f865 	bl	80091f4 <_sbrk_r>
 800912a:	1c43      	adds	r3, r0, #1
 800912c:	d123      	bne.n	8009176 <_malloc_r+0x92>
 800912e:	230c      	movs	r3, #12
 8009130:	6033      	str	r3, [r6, #0]
 8009132:	4630      	mov	r0, r6
 8009134:	f000 f9a2 	bl	800947c <__malloc_unlock>
 8009138:	e7e3      	b.n	8009102 <_malloc_r+0x1e>
 800913a:	6823      	ldr	r3, [r4, #0]
 800913c:	1b5b      	subs	r3, r3, r5
 800913e:	d417      	bmi.n	8009170 <_malloc_r+0x8c>
 8009140:	2b0b      	cmp	r3, #11
 8009142:	d903      	bls.n	800914c <_malloc_r+0x68>
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	441c      	add	r4, r3
 8009148:	6025      	str	r5, [r4, #0]
 800914a:	e004      	b.n	8009156 <_malloc_r+0x72>
 800914c:	6863      	ldr	r3, [r4, #4]
 800914e:	42a2      	cmp	r2, r4
 8009150:	bf0c      	ite	eq
 8009152:	600b      	streq	r3, [r1, #0]
 8009154:	6053      	strne	r3, [r2, #4]
 8009156:	4630      	mov	r0, r6
 8009158:	f000 f990 	bl	800947c <__malloc_unlock>
 800915c:	f104 000b 	add.w	r0, r4, #11
 8009160:	1d23      	adds	r3, r4, #4
 8009162:	f020 0007 	bic.w	r0, r0, #7
 8009166:	1ac2      	subs	r2, r0, r3
 8009168:	d0cc      	beq.n	8009104 <_malloc_r+0x20>
 800916a:	1a1b      	subs	r3, r3, r0
 800916c:	50a3      	str	r3, [r4, r2]
 800916e:	e7c9      	b.n	8009104 <_malloc_r+0x20>
 8009170:	4622      	mov	r2, r4
 8009172:	6864      	ldr	r4, [r4, #4]
 8009174:	e7cc      	b.n	8009110 <_malloc_r+0x2c>
 8009176:	1cc4      	adds	r4, r0, #3
 8009178:	f024 0403 	bic.w	r4, r4, #3
 800917c:	42a0      	cmp	r0, r4
 800917e:	d0e3      	beq.n	8009148 <_malloc_r+0x64>
 8009180:	1a21      	subs	r1, r4, r0
 8009182:	4630      	mov	r0, r6
 8009184:	f000 f836 	bl	80091f4 <_sbrk_r>
 8009188:	3001      	adds	r0, #1
 800918a:	d1dd      	bne.n	8009148 <_malloc_r+0x64>
 800918c:	e7cf      	b.n	800912e <_malloc_r+0x4a>
 800918e:	bf00      	nop
 8009190:	20000214 	.word	0x20000214
 8009194:	20000218 	.word	0x20000218

08009198 <iprintf>:
 8009198:	b40f      	push	{r0, r1, r2, r3}
 800919a:	4b0a      	ldr	r3, [pc, #40]	; (80091c4 <iprintf+0x2c>)
 800919c:	b513      	push	{r0, r1, r4, lr}
 800919e:	681c      	ldr	r4, [r3, #0]
 80091a0:	b124      	cbz	r4, 80091ac <iprintf+0x14>
 80091a2:	69a3      	ldr	r3, [r4, #24]
 80091a4:	b913      	cbnz	r3, 80091ac <iprintf+0x14>
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 f8c2 	bl	8009330 <__sinit>
 80091ac:	ab05      	add	r3, sp, #20
 80091ae:	9a04      	ldr	r2, [sp, #16]
 80091b0:	68a1      	ldr	r1, [r4, #8]
 80091b2:	9301      	str	r3, [sp, #4]
 80091b4:	4620      	mov	r0, r4
 80091b6:	f000 faed 	bl	8009794 <_vfiprintf_r>
 80091ba:	b002      	add	sp, #8
 80091bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091c0:	b004      	add	sp, #16
 80091c2:	4770      	bx	lr
 80091c4:	20000188 	.word	0x20000188

080091c8 <putchar>:
 80091c8:	4b09      	ldr	r3, [pc, #36]	; (80091f0 <putchar+0x28>)
 80091ca:	b513      	push	{r0, r1, r4, lr}
 80091cc:	681c      	ldr	r4, [r3, #0]
 80091ce:	4601      	mov	r1, r0
 80091d0:	b134      	cbz	r4, 80091e0 <putchar+0x18>
 80091d2:	69a3      	ldr	r3, [r4, #24]
 80091d4:	b923      	cbnz	r3, 80091e0 <putchar+0x18>
 80091d6:	9001      	str	r0, [sp, #4]
 80091d8:	4620      	mov	r0, r4
 80091da:	f000 f8a9 	bl	8009330 <__sinit>
 80091de:	9901      	ldr	r1, [sp, #4]
 80091e0:	68a2      	ldr	r2, [r4, #8]
 80091e2:	4620      	mov	r0, r4
 80091e4:	b002      	add	sp, #8
 80091e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ea:	f000 bd97 	b.w	8009d1c <_putc_r>
 80091ee:	bf00      	nop
 80091f0:	20000188 	.word	0x20000188

080091f4 <_sbrk_r>:
 80091f4:	b538      	push	{r3, r4, r5, lr}
 80091f6:	4d06      	ldr	r5, [pc, #24]	; (8009210 <_sbrk_r+0x1c>)
 80091f8:	2300      	movs	r3, #0
 80091fa:	4604      	mov	r4, r0
 80091fc:	4608      	mov	r0, r1
 80091fe:	602b      	str	r3, [r5, #0]
 8009200:	f7f8 fec0 	bl	8001f84 <_sbrk>
 8009204:	1c43      	adds	r3, r0, #1
 8009206:	d102      	bne.n	800920e <_sbrk_r+0x1a>
 8009208:	682b      	ldr	r3, [r5, #0]
 800920a:	b103      	cbz	r3, 800920e <_sbrk_r+0x1a>
 800920c:	6023      	str	r3, [r4, #0]
 800920e:	bd38      	pop	{r3, r4, r5, pc}
 8009210:	20000e48 	.word	0x20000e48

08009214 <siprintf>:
 8009214:	b40e      	push	{r1, r2, r3}
 8009216:	b500      	push	{lr}
 8009218:	b09c      	sub	sp, #112	; 0x70
 800921a:	ab1d      	add	r3, sp, #116	; 0x74
 800921c:	9002      	str	r0, [sp, #8]
 800921e:	9006      	str	r0, [sp, #24]
 8009220:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009224:	4809      	ldr	r0, [pc, #36]	; (800924c <siprintf+0x38>)
 8009226:	9107      	str	r1, [sp, #28]
 8009228:	9104      	str	r1, [sp, #16]
 800922a:	4909      	ldr	r1, [pc, #36]	; (8009250 <siprintf+0x3c>)
 800922c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009230:	9105      	str	r1, [sp, #20]
 8009232:	6800      	ldr	r0, [r0, #0]
 8009234:	9301      	str	r3, [sp, #4]
 8009236:	a902      	add	r1, sp, #8
 8009238:	f000 f982 	bl	8009540 <_svfiprintf_r>
 800923c:	9b02      	ldr	r3, [sp, #8]
 800923e:	2200      	movs	r2, #0
 8009240:	701a      	strb	r2, [r3, #0]
 8009242:	b01c      	add	sp, #112	; 0x70
 8009244:	f85d eb04 	ldr.w	lr, [sp], #4
 8009248:	b003      	add	sp, #12
 800924a:	4770      	bx	lr
 800924c:	20000188 	.word	0x20000188
 8009250:	ffff0208 	.word	0xffff0208

08009254 <strlcpy>:
 8009254:	b510      	push	{r4, lr}
 8009256:	460b      	mov	r3, r1
 8009258:	b162      	cbz	r2, 8009274 <strlcpy+0x20>
 800925a:	3a01      	subs	r2, #1
 800925c:	d008      	beq.n	8009270 <strlcpy+0x1c>
 800925e:	f813 4b01 	ldrb.w	r4, [r3], #1
 8009262:	f800 4b01 	strb.w	r4, [r0], #1
 8009266:	2c00      	cmp	r4, #0
 8009268:	d1f7      	bne.n	800925a <strlcpy+0x6>
 800926a:	1a58      	subs	r0, r3, r1
 800926c:	3801      	subs	r0, #1
 800926e:	bd10      	pop	{r4, pc}
 8009270:	2200      	movs	r2, #0
 8009272:	7002      	strb	r2, [r0, #0]
 8009274:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009278:	2a00      	cmp	r2, #0
 800927a:	d1fb      	bne.n	8009274 <strlcpy+0x20>
 800927c:	e7f5      	b.n	800926a <strlcpy+0x16>
	...

08009280 <std>:
 8009280:	2300      	movs	r3, #0
 8009282:	b510      	push	{r4, lr}
 8009284:	4604      	mov	r4, r0
 8009286:	e9c0 3300 	strd	r3, r3, [r0]
 800928a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800928e:	6083      	str	r3, [r0, #8]
 8009290:	8181      	strh	r1, [r0, #12]
 8009292:	6643      	str	r3, [r0, #100]	; 0x64
 8009294:	81c2      	strh	r2, [r0, #14]
 8009296:	6183      	str	r3, [r0, #24]
 8009298:	4619      	mov	r1, r3
 800929a:	2208      	movs	r2, #8
 800929c:	305c      	adds	r0, #92	; 0x5c
 800929e:	f7ff fec9 	bl	8009034 <memset>
 80092a2:	4b05      	ldr	r3, [pc, #20]	; (80092b8 <std+0x38>)
 80092a4:	6263      	str	r3, [r4, #36]	; 0x24
 80092a6:	4b05      	ldr	r3, [pc, #20]	; (80092bc <std+0x3c>)
 80092a8:	62a3      	str	r3, [r4, #40]	; 0x28
 80092aa:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <std+0x40>)
 80092ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092ae:	4b05      	ldr	r3, [pc, #20]	; (80092c4 <std+0x44>)
 80092b0:	6224      	str	r4, [r4, #32]
 80092b2:	6323      	str	r3, [r4, #48]	; 0x30
 80092b4:	bd10      	pop	{r4, pc}
 80092b6:	bf00      	nop
 80092b8:	08009dad 	.word	0x08009dad
 80092bc:	08009dcf 	.word	0x08009dcf
 80092c0:	08009e07 	.word	0x08009e07
 80092c4:	08009e2b 	.word	0x08009e2b

080092c8 <_cleanup_r>:
 80092c8:	4901      	ldr	r1, [pc, #4]	; (80092d0 <_cleanup_r+0x8>)
 80092ca:	f000 b8af 	b.w	800942c <_fwalk_reent>
 80092ce:	bf00      	nop
 80092d0:	0800a105 	.word	0x0800a105

080092d4 <__sfmoreglue>:
 80092d4:	b570      	push	{r4, r5, r6, lr}
 80092d6:	1e4a      	subs	r2, r1, #1
 80092d8:	2568      	movs	r5, #104	; 0x68
 80092da:	4355      	muls	r5, r2
 80092dc:	460e      	mov	r6, r1
 80092de:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80092e2:	f7ff feff 	bl	80090e4 <_malloc_r>
 80092e6:	4604      	mov	r4, r0
 80092e8:	b140      	cbz	r0, 80092fc <__sfmoreglue+0x28>
 80092ea:	2100      	movs	r1, #0
 80092ec:	e9c0 1600 	strd	r1, r6, [r0]
 80092f0:	300c      	adds	r0, #12
 80092f2:	60a0      	str	r0, [r4, #8]
 80092f4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80092f8:	f7ff fe9c 	bl	8009034 <memset>
 80092fc:	4620      	mov	r0, r4
 80092fe:	bd70      	pop	{r4, r5, r6, pc}

08009300 <__sfp_lock_acquire>:
 8009300:	4801      	ldr	r0, [pc, #4]	; (8009308 <__sfp_lock_acquire+0x8>)
 8009302:	f000 b8b3 	b.w	800946c <__retarget_lock_acquire_recursive>
 8009306:	bf00      	nop
 8009308:	20000e44 	.word	0x20000e44

0800930c <__sfp_lock_release>:
 800930c:	4801      	ldr	r0, [pc, #4]	; (8009314 <__sfp_lock_release+0x8>)
 800930e:	f000 b8ae 	b.w	800946e <__retarget_lock_release_recursive>
 8009312:	bf00      	nop
 8009314:	20000e44 	.word	0x20000e44

08009318 <__sinit_lock_acquire>:
 8009318:	4801      	ldr	r0, [pc, #4]	; (8009320 <__sinit_lock_acquire+0x8>)
 800931a:	f000 b8a7 	b.w	800946c <__retarget_lock_acquire_recursive>
 800931e:	bf00      	nop
 8009320:	20000e3f 	.word	0x20000e3f

08009324 <__sinit_lock_release>:
 8009324:	4801      	ldr	r0, [pc, #4]	; (800932c <__sinit_lock_release+0x8>)
 8009326:	f000 b8a2 	b.w	800946e <__retarget_lock_release_recursive>
 800932a:	bf00      	nop
 800932c:	20000e3f 	.word	0x20000e3f

08009330 <__sinit>:
 8009330:	b510      	push	{r4, lr}
 8009332:	4604      	mov	r4, r0
 8009334:	f7ff fff0 	bl	8009318 <__sinit_lock_acquire>
 8009338:	69a3      	ldr	r3, [r4, #24]
 800933a:	b11b      	cbz	r3, 8009344 <__sinit+0x14>
 800933c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009340:	f7ff bff0 	b.w	8009324 <__sinit_lock_release>
 8009344:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009348:	6523      	str	r3, [r4, #80]	; 0x50
 800934a:	4b13      	ldr	r3, [pc, #76]	; (8009398 <__sinit+0x68>)
 800934c:	4a13      	ldr	r2, [pc, #76]	; (800939c <__sinit+0x6c>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	62a2      	str	r2, [r4, #40]	; 0x28
 8009352:	42a3      	cmp	r3, r4
 8009354:	bf04      	itt	eq
 8009356:	2301      	moveq	r3, #1
 8009358:	61a3      	streq	r3, [r4, #24]
 800935a:	4620      	mov	r0, r4
 800935c:	f000 f820 	bl	80093a0 <__sfp>
 8009360:	6060      	str	r0, [r4, #4]
 8009362:	4620      	mov	r0, r4
 8009364:	f000 f81c 	bl	80093a0 <__sfp>
 8009368:	60a0      	str	r0, [r4, #8]
 800936a:	4620      	mov	r0, r4
 800936c:	f000 f818 	bl	80093a0 <__sfp>
 8009370:	2200      	movs	r2, #0
 8009372:	60e0      	str	r0, [r4, #12]
 8009374:	2104      	movs	r1, #4
 8009376:	6860      	ldr	r0, [r4, #4]
 8009378:	f7ff ff82 	bl	8009280 <std>
 800937c:	68a0      	ldr	r0, [r4, #8]
 800937e:	2201      	movs	r2, #1
 8009380:	2109      	movs	r1, #9
 8009382:	f7ff ff7d 	bl	8009280 <std>
 8009386:	68e0      	ldr	r0, [r4, #12]
 8009388:	2202      	movs	r2, #2
 800938a:	2112      	movs	r1, #18
 800938c:	f7ff ff78 	bl	8009280 <std>
 8009390:	2301      	movs	r3, #1
 8009392:	61a3      	str	r3, [r4, #24]
 8009394:	e7d2      	b.n	800933c <__sinit+0xc>
 8009396:	bf00      	nop
 8009398:	0800a464 	.word	0x0800a464
 800939c:	080092c9 	.word	0x080092c9

080093a0 <__sfp>:
 80093a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093a2:	4607      	mov	r7, r0
 80093a4:	f7ff ffac 	bl	8009300 <__sfp_lock_acquire>
 80093a8:	4b1e      	ldr	r3, [pc, #120]	; (8009424 <__sfp+0x84>)
 80093aa:	681e      	ldr	r6, [r3, #0]
 80093ac:	69b3      	ldr	r3, [r6, #24]
 80093ae:	b913      	cbnz	r3, 80093b6 <__sfp+0x16>
 80093b0:	4630      	mov	r0, r6
 80093b2:	f7ff ffbd 	bl	8009330 <__sinit>
 80093b6:	3648      	adds	r6, #72	; 0x48
 80093b8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093bc:	3b01      	subs	r3, #1
 80093be:	d503      	bpl.n	80093c8 <__sfp+0x28>
 80093c0:	6833      	ldr	r3, [r6, #0]
 80093c2:	b30b      	cbz	r3, 8009408 <__sfp+0x68>
 80093c4:	6836      	ldr	r6, [r6, #0]
 80093c6:	e7f7      	b.n	80093b8 <__sfp+0x18>
 80093c8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093cc:	b9d5      	cbnz	r5, 8009404 <__sfp+0x64>
 80093ce:	4b16      	ldr	r3, [pc, #88]	; (8009428 <__sfp+0x88>)
 80093d0:	60e3      	str	r3, [r4, #12]
 80093d2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093d6:	6665      	str	r5, [r4, #100]	; 0x64
 80093d8:	f000 f847 	bl	800946a <__retarget_lock_init_recursive>
 80093dc:	f7ff ff96 	bl	800930c <__sfp_lock_release>
 80093e0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80093e4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80093e8:	6025      	str	r5, [r4, #0]
 80093ea:	61a5      	str	r5, [r4, #24]
 80093ec:	2208      	movs	r2, #8
 80093ee:	4629      	mov	r1, r5
 80093f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80093f4:	f7ff fe1e 	bl	8009034 <memset>
 80093f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80093fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009400:	4620      	mov	r0, r4
 8009402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009404:	3468      	adds	r4, #104	; 0x68
 8009406:	e7d9      	b.n	80093bc <__sfp+0x1c>
 8009408:	2104      	movs	r1, #4
 800940a:	4638      	mov	r0, r7
 800940c:	f7ff ff62 	bl	80092d4 <__sfmoreglue>
 8009410:	4604      	mov	r4, r0
 8009412:	6030      	str	r0, [r6, #0]
 8009414:	2800      	cmp	r0, #0
 8009416:	d1d5      	bne.n	80093c4 <__sfp+0x24>
 8009418:	f7ff ff78 	bl	800930c <__sfp_lock_release>
 800941c:	230c      	movs	r3, #12
 800941e:	603b      	str	r3, [r7, #0]
 8009420:	e7ee      	b.n	8009400 <__sfp+0x60>
 8009422:	bf00      	nop
 8009424:	0800a464 	.word	0x0800a464
 8009428:	ffff0001 	.word	0xffff0001

0800942c <_fwalk_reent>:
 800942c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009430:	4606      	mov	r6, r0
 8009432:	4688      	mov	r8, r1
 8009434:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009438:	2700      	movs	r7, #0
 800943a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800943e:	f1b9 0901 	subs.w	r9, r9, #1
 8009442:	d505      	bpl.n	8009450 <_fwalk_reent+0x24>
 8009444:	6824      	ldr	r4, [r4, #0]
 8009446:	2c00      	cmp	r4, #0
 8009448:	d1f7      	bne.n	800943a <_fwalk_reent+0xe>
 800944a:	4638      	mov	r0, r7
 800944c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009450:	89ab      	ldrh	r3, [r5, #12]
 8009452:	2b01      	cmp	r3, #1
 8009454:	d907      	bls.n	8009466 <_fwalk_reent+0x3a>
 8009456:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800945a:	3301      	adds	r3, #1
 800945c:	d003      	beq.n	8009466 <_fwalk_reent+0x3a>
 800945e:	4629      	mov	r1, r5
 8009460:	4630      	mov	r0, r6
 8009462:	47c0      	blx	r8
 8009464:	4307      	orrs	r7, r0
 8009466:	3568      	adds	r5, #104	; 0x68
 8009468:	e7e9      	b.n	800943e <_fwalk_reent+0x12>

0800946a <__retarget_lock_init_recursive>:
 800946a:	4770      	bx	lr

0800946c <__retarget_lock_acquire_recursive>:
 800946c:	4770      	bx	lr

0800946e <__retarget_lock_release_recursive>:
 800946e:	4770      	bx	lr

08009470 <__malloc_lock>:
 8009470:	4801      	ldr	r0, [pc, #4]	; (8009478 <__malloc_lock+0x8>)
 8009472:	f7ff bffb 	b.w	800946c <__retarget_lock_acquire_recursive>
 8009476:	bf00      	nop
 8009478:	20000e40 	.word	0x20000e40

0800947c <__malloc_unlock>:
 800947c:	4801      	ldr	r0, [pc, #4]	; (8009484 <__malloc_unlock+0x8>)
 800947e:	f7ff bff6 	b.w	800946e <__retarget_lock_release_recursive>
 8009482:	bf00      	nop
 8009484:	20000e40 	.word	0x20000e40

08009488 <__ssputs_r>:
 8009488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800948c:	688e      	ldr	r6, [r1, #8]
 800948e:	429e      	cmp	r6, r3
 8009490:	4682      	mov	sl, r0
 8009492:	460c      	mov	r4, r1
 8009494:	4690      	mov	r8, r2
 8009496:	461f      	mov	r7, r3
 8009498:	d838      	bhi.n	800950c <__ssputs_r+0x84>
 800949a:	898a      	ldrh	r2, [r1, #12]
 800949c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094a0:	d032      	beq.n	8009508 <__ssputs_r+0x80>
 80094a2:	6825      	ldr	r5, [r4, #0]
 80094a4:	6909      	ldr	r1, [r1, #16]
 80094a6:	eba5 0901 	sub.w	r9, r5, r1
 80094aa:	6965      	ldr	r5, [r4, #20]
 80094ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094b4:	3301      	adds	r3, #1
 80094b6:	444b      	add	r3, r9
 80094b8:	106d      	asrs	r5, r5, #1
 80094ba:	429d      	cmp	r5, r3
 80094bc:	bf38      	it	cc
 80094be:	461d      	movcc	r5, r3
 80094c0:	0553      	lsls	r3, r2, #21
 80094c2:	d531      	bpl.n	8009528 <__ssputs_r+0xa0>
 80094c4:	4629      	mov	r1, r5
 80094c6:	f7ff fe0d 	bl	80090e4 <_malloc_r>
 80094ca:	4606      	mov	r6, r0
 80094cc:	b950      	cbnz	r0, 80094e4 <__ssputs_r+0x5c>
 80094ce:	230c      	movs	r3, #12
 80094d0:	f8ca 3000 	str.w	r3, [sl]
 80094d4:	89a3      	ldrh	r3, [r4, #12]
 80094d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094da:	81a3      	strh	r3, [r4, #12]
 80094dc:	f04f 30ff 	mov.w	r0, #4294967295
 80094e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e4:	6921      	ldr	r1, [r4, #16]
 80094e6:	464a      	mov	r2, r9
 80094e8:	f7ff fd96 	bl	8009018 <memcpy>
 80094ec:	89a3      	ldrh	r3, [r4, #12]
 80094ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094f6:	81a3      	strh	r3, [r4, #12]
 80094f8:	6126      	str	r6, [r4, #16]
 80094fa:	6165      	str	r5, [r4, #20]
 80094fc:	444e      	add	r6, r9
 80094fe:	eba5 0509 	sub.w	r5, r5, r9
 8009502:	6026      	str	r6, [r4, #0]
 8009504:	60a5      	str	r5, [r4, #8]
 8009506:	463e      	mov	r6, r7
 8009508:	42be      	cmp	r6, r7
 800950a:	d900      	bls.n	800950e <__ssputs_r+0x86>
 800950c:	463e      	mov	r6, r7
 800950e:	4632      	mov	r2, r6
 8009510:	6820      	ldr	r0, [r4, #0]
 8009512:	4641      	mov	r1, r8
 8009514:	f000 fea8 	bl	800a268 <memmove>
 8009518:	68a3      	ldr	r3, [r4, #8]
 800951a:	6822      	ldr	r2, [r4, #0]
 800951c:	1b9b      	subs	r3, r3, r6
 800951e:	4432      	add	r2, r6
 8009520:	60a3      	str	r3, [r4, #8]
 8009522:	6022      	str	r2, [r4, #0]
 8009524:	2000      	movs	r0, #0
 8009526:	e7db      	b.n	80094e0 <__ssputs_r+0x58>
 8009528:	462a      	mov	r2, r5
 800952a:	f000 feb7 	bl	800a29c <_realloc_r>
 800952e:	4606      	mov	r6, r0
 8009530:	2800      	cmp	r0, #0
 8009532:	d1e1      	bne.n	80094f8 <__ssputs_r+0x70>
 8009534:	6921      	ldr	r1, [r4, #16]
 8009536:	4650      	mov	r0, sl
 8009538:	f7ff fd84 	bl	8009044 <_free_r>
 800953c:	e7c7      	b.n	80094ce <__ssputs_r+0x46>
	...

08009540 <_svfiprintf_r>:
 8009540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009544:	4698      	mov	r8, r3
 8009546:	898b      	ldrh	r3, [r1, #12]
 8009548:	061b      	lsls	r3, r3, #24
 800954a:	b09d      	sub	sp, #116	; 0x74
 800954c:	4607      	mov	r7, r0
 800954e:	460d      	mov	r5, r1
 8009550:	4614      	mov	r4, r2
 8009552:	d50e      	bpl.n	8009572 <_svfiprintf_r+0x32>
 8009554:	690b      	ldr	r3, [r1, #16]
 8009556:	b963      	cbnz	r3, 8009572 <_svfiprintf_r+0x32>
 8009558:	2140      	movs	r1, #64	; 0x40
 800955a:	f7ff fdc3 	bl	80090e4 <_malloc_r>
 800955e:	6028      	str	r0, [r5, #0]
 8009560:	6128      	str	r0, [r5, #16]
 8009562:	b920      	cbnz	r0, 800956e <_svfiprintf_r+0x2e>
 8009564:	230c      	movs	r3, #12
 8009566:	603b      	str	r3, [r7, #0]
 8009568:	f04f 30ff 	mov.w	r0, #4294967295
 800956c:	e0d1      	b.n	8009712 <_svfiprintf_r+0x1d2>
 800956e:	2340      	movs	r3, #64	; 0x40
 8009570:	616b      	str	r3, [r5, #20]
 8009572:	2300      	movs	r3, #0
 8009574:	9309      	str	r3, [sp, #36]	; 0x24
 8009576:	2320      	movs	r3, #32
 8009578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800957c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009580:	2330      	movs	r3, #48	; 0x30
 8009582:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800972c <_svfiprintf_r+0x1ec>
 8009586:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800958a:	f04f 0901 	mov.w	r9, #1
 800958e:	4623      	mov	r3, r4
 8009590:	469a      	mov	sl, r3
 8009592:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009596:	b10a      	cbz	r2, 800959c <_svfiprintf_r+0x5c>
 8009598:	2a25      	cmp	r2, #37	; 0x25
 800959a:	d1f9      	bne.n	8009590 <_svfiprintf_r+0x50>
 800959c:	ebba 0b04 	subs.w	fp, sl, r4
 80095a0:	d00b      	beq.n	80095ba <_svfiprintf_r+0x7a>
 80095a2:	465b      	mov	r3, fp
 80095a4:	4622      	mov	r2, r4
 80095a6:	4629      	mov	r1, r5
 80095a8:	4638      	mov	r0, r7
 80095aa:	f7ff ff6d 	bl	8009488 <__ssputs_r>
 80095ae:	3001      	adds	r0, #1
 80095b0:	f000 80aa 	beq.w	8009708 <_svfiprintf_r+0x1c8>
 80095b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095b6:	445a      	add	r2, fp
 80095b8:	9209      	str	r2, [sp, #36]	; 0x24
 80095ba:	f89a 3000 	ldrb.w	r3, [sl]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	f000 80a2 	beq.w	8009708 <_svfiprintf_r+0x1c8>
 80095c4:	2300      	movs	r3, #0
 80095c6:	f04f 32ff 	mov.w	r2, #4294967295
 80095ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095ce:	f10a 0a01 	add.w	sl, sl, #1
 80095d2:	9304      	str	r3, [sp, #16]
 80095d4:	9307      	str	r3, [sp, #28]
 80095d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095da:	931a      	str	r3, [sp, #104]	; 0x68
 80095dc:	4654      	mov	r4, sl
 80095de:	2205      	movs	r2, #5
 80095e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e4:	4851      	ldr	r0, [pc, #324]	; (800972c <_svfiprintf_r+0x1ec>)
 80095e6:	f7f6 fdf3 	bl	80001d0 <memchr>
 80095ea:	9a04      	ldr	r2, [sp, #16]
 80095ec:	b9d8      	cbnz	r0, 8009626 <_svfiprintf_r+0xe6>
 80095ee:	06d0      	lsls	r0, r2, #27
 80095f0:	bf44      	itt	mi
 80095f2:	2320      	movmi	r3, #32
 80095f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095f8:	0711      	lsls	r1, r2, #28
 80095fa:	bf44      	itt	mi
 80095fc:	232b      	movmi	r3, #43	; 0x2b
 80095fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009602:	f89a 3000 	ldrb.w	r3, [sl]
 8009606:	2b2a      	cmp	r3, #42	; 0x2a
 8009608:	d015      	beq.n	8009636 <_svfiprintf_r+0xf6>
 800960a:	9a07      	ldr	r2, [sp, #28]
 800960c:	4654      	mov	r4, sl
 800960e:	2000      	movs	r0, #0
 8009610:	f04f 0c0a 	mov.w	ip, #10
 8009614:	4621      	mov	r1, r4
 8009616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800961a:	3b30      	subs	r3, #48	; 0x30
 800961c:	2b09      	cmp	r3, #9
 800961e:	d94e      	bls.n	80096be <_svfiprintf_r+0x17e>
 8009620:	b1b0      	cbz	r0, 8009650 <_svfiprintf_r+0x110>
 8009622:	9207      	str	r2, [sp, #28]
 8009624:	e014      	b.n	8009650 <_svfiprintf_r+0x110>
 8009626:	eba0 0308 	sub.w	r3, r0, r8
 800962a:	fa09 f303 	lsl.w	r3, r9, r3
 800962e:	4313      	orrs	r3, r2
 8009630:	9304      	str	r3, [sp, #16]
 8009632:	46a2      	mov	sl, r4
 8009634:	e7d2      	b.n	80095dc <_svfiprintf_r+0x9c>
 8009636:	9b03      	ldr	r3, [sp, #12]
 8009638:	1d19      	adds	r1, r3, #4
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	9103      	str	r1, [sp, #12]
 800963e:	2b00      	cmp	r3, #0
 8009640:	bfbb      	ittet	lt
 8009642:	425b      	neglt	r3, r3
 8009644:	f042 0202 	orrlt.w	r2, r2, #2
 8009648:	9307      	strge	r3, [sp, #28]
 800964a:	9307      	strlt	r3, [sp, #28]
 800964c:	bfb8      	it	lt
 800964e:	9204      	strlt	r2, [sp, #16]
 8009650:	7823      	ldrb	r3, [r4, #0]
 8009652:	2b2e      	cmp	r3, #46	; 0x2e
 8009654:	d10c      	bne.n	8009670 <_svfiprintf_r+0x130>
 8009656:	7863      	ldrb	r3, [r4, #1]
 8009658:	2b2a      	cmp	r3, #42	; 0x2a
 800965a:	d135      	bne.n	80096c8 <_svfiprintf_r+0x188>
 800965c:	9b03      	ldr	r3, [sp, #12]
 800965e:	1d1a      	adds	r2, r3, #4
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	9203      	str	r2, [sp, #12]
 8009664:	2b00      	cmp	r3, #0
 8009666:	bfb8      	it	lt
 8009668:	f04f 33ff 	movlt.w	r3, #4294967295
 800966c:	3402      	adds	r4, #2
 800966e:	9305      	str	r3, [sp, #20]
 8009670:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800973c <_svfiprintf_r+0x1fc>
 8009674:	7821      	ldrb	r1, [r4, #0]
 8009676:	2203      	movs	r2, #3
 8009678:	4650      	mov	r0, sl
 800967a:	f7f6 fda9 	bl	80001d0 <memchr>
 800967e:	b140      	cbz	r0, 8009692 <_svfiprintf_r+0x152>
 8009680:	2340      	movs	r3, #64	; 0x40
 8009682:	eba0 000a 	sub.w	r0, r0, sl
 8009686:	fa03 f000 	lsl.w	r0, r3, r0
 800968a:	9b04      	ldr	r3, [sp, #16]
 800968c:	4303      	orrs	r3, r0
 800968e:	3401      	adds	r4, #1
 8009690:	9304      	str	r3, [sp, #16]
 8009692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009696:	4826      	ldr	r0, [pc, #152]	; (8009730 <_svfiprintf_r+0x1f0>)
 8009698:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800969c:	2206      	movs	r2, #6
 800969e:	f7f6 fd97 	bl	80001d0 <memchr>
 80096a2:	2800      	cmp	r0, #0
 80096a4:	d038      	beq.n	8009718 <_svfiprintf_r+0x1d8>
 80096a6:	4b23      	ldr	r3, [pc, #140]	; (8009734 <_svfiprintf_r+0x1f4>)
 80096a8:	bb1b      	cbnz	r3, 80096f2 <_svfiprintf_r+0x1b2>
 80096aa:	9b03      	ldr	r3, [sp, #12]
 80096ac:	3307      	adds	r3, #7
 80096ae:	f023 0307 	bic.w	r3, r3, #7
 80096b2:	3308      	adds	r3, #8
 80096b4:	9303      	str	r3, [sp, #12]
 80096b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096b8:	4433      	add	r3, r6
 80096ba:	9309      	str	r3, [sp, #36]	; 0x24
 80096bc:	e767      	b.n	800958e <_svfiprintf_r+0x4e>
 80096be:	fb0c 3202 	mla	r2, ip, r2, r3
 80096c2:	460c      	mov	r4, r1
 80096c4:	2001      	movs	r0, #1
 80096c6:	e7a5      	b.n	8009614 <_svfiprintf_r+0xd4>
 80096c8:	2300      	movs	r3, #0
 80096ca:	3401      	adds	r4, #1
 80096cc:	9305      	str	r3, [sp, #20]
 80096ce:	4619      	mov	r1, r3
 80096d0:	f04f 0c0a 	mov.w	ip, #10
 80096d4:	4620      	mov	r0, r4
 80096d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096da:	3a30      	subs	r2, #48	; 0x30
 80096dc:	2a09      	cmp	r2, #9
 80096de:	d903      	bls.n	80096e8 <_svfiprintf_r+0x1a8>
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d0c5      	beq.n	8009670 <_svfiprintf_r+0x130>
 80096e4:	9105      	str	r1, [sp, #20]
 80096e6:	e7c3      	b.n	8009670 <_svfiprintf_r+0x130>
 80096e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80096ec:	4604      	mov	r4, r0
 80096ee:	2301      	movs	r3, #1
 80096f0:	e7f0      	b.n	80096d4 <_svfiprintf_r+0x194>
 80096f2:	ab03      	add	r3, sp, #12
 80096f4:	9300      	str	r3, [sp, #0]
 80096f6:	462a      	mov	r2, r5
 80096f8:	4b0f      	ldr	r3, [pc, #60]	; (8009738 <_svfiprintf_r+0x1f8>)
 80096fa:	a904      	add	r1, sp, #16
 80096fc:	4638      	mov	r0, r7
 80096fe:	f3af 8000 	nop.w
 8009702:	1c42      	adds	r2, r0, #1
 8009704:	4606      	mov	r6, r0
 8009706:	d1d6      	bne.n	80096b6 <_svfiprintf_r+0x176>
 8009708:	89ab      	ldrh	r3, [r5, #12]
 800970a:	065b      	lsls	r3, r3, #25
 800970c:	f53f af2c 	bmi.w	8009568 <_svfiprintf_r+0x28>
 8009710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009712:	b01d      	add	sp, #116	; 0x74
 8009714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009718:	ab03      	add	r3, sp, #12
 800971a:	9300      	str	r3, [sp, #0]
 800971c:	462a      	mov	r2, r5
 800971e:	4b06      	ldr	r3, [pc, #24]	; (8009738 <_svfiprintf_r+0x1f8>)
 8009720:	a904      	add	r1, sp, #16
 8009722:	4638      	mov	r0, r7
 8009724:	f000 f9d4 	bl	8009ad0 <_printf_i>
 8009728:	e7eb      	b.n	8009702 <_svfiprintf_r+0x1c2>
 800972a:	bf00      	nop
 800972c:	0800a4c8 	.word	0x0800a4c8
 8009730:	0800a4d2 	.word	0x0800a4d2
 8009734:	00000000 	.word	0x00000000
 8009738:	08009489 	.word	0x08009489
 800973c:	0800a4ce 	.word	0x0800a4ce

08009740 <__sfputc_r>:
 8009740:	6893      	ldr	r3, [r2, #8]
 8009742:	3b01      	subs	r3, #1
 8009744:	2b00      	cmp	r3, #0
 8009746:	b410      	push	{r4}
 8009748:	6093      	str	r3, [r2, #8]
 800974a:	da08      	bge.n	800975e <__sfputc_r+0x1e>
 800974c:	6994      	ldr	r4, [r2, #24]
 800974e:	42a3      	cmp	r3, r4
 8009750:	db01      	blt.n	8009756 <__sfputc_r+0x16>
 8009752:	290a      	cmp	r1, #10
 8009754:	d103      	bne.n	800975e <__sfputc_r+0x1e>
 8009756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800975a:	f000 bb6b 	b.w	8009e34 <__swbuf_r>
 800975e:	6813      	ldr	r3, [r2, #0]
 8009760:	1c58      	adds	r0, r3, #1
 8009762:	6010      	str	r0, [r2, #0]
 8009764:	7019      	strb	r1, [r3, #0]
 8009766:	4608      	mov	r0, r1
 8009768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800976c:	4770      	bx	lr

0800976e <__sfputs_r>:
 800976e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009770:	4606      	mov	r6, r0
 8009772:	460f      	mov	r7, r1
 8009774:	4614      	mov	r4, r2
 8009776:	18d5      	adds	r5, r2, r3
 8009778:	42ac      	cmp	r4, r5
 800977a:	d101      	bne.n	8009780 <__sfputs_r+0x12>
 800977c:	2000      	movs	r0, #0
 800977e:	e007      	b.n	8009790 <__sfputs_r+0x22>
 8009780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009784:	463a      	mov	r2, r7
 8009786:	4630      	mov	r0, r6
 8009788:	f7ff ffda 	bl	8009740 <__sfputc_r>
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	d1f3      	bne.n	8009778 <__sfputs_r+0xa>
 8009790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009794 <_vfiprintf_r>:
 8009794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009798:	460d      	mov	r5, r1
 800979a:	b09d      	sub	sp, #116	; 0x74
 800979c:	4614      	mov	r4, r2
 800979e:	4698      	mov	r8, r3
 80097a0:	4606      	mov	r6, r0
 80097a2:	b118      	cbz	r0, 80097ac <_vfiprintf_r+0x18>
 80097a4:	6983      	ldr	r3, [r0, #24]
 80097a6:	b90b      	cbnz	r3, 80097ac <_vfiprintf_r+0x18>
 80097a8:	f7ff fdc2 	bl	8009330 <__sinit>
 80097ac:	4b89      	ldr	r3, [pc, #548]	; (80099d4 <_vfiprintf_r+0x240>)
 80097ae:	429d      	cmp	r5, r3
 80097b0:	d11b      	bne.n	80097ea <_vfiprintf_r+0x56>
 80097b2:	6875      	ldr	r5, [r6, #4]
 80097b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097b6:	07d9      	lsls	r1, r3, #31
 80097b8:	d405      	bmi.n	80097c6 <_vfiprintf_r+0x32>
 80097ba:	89ab      	ldrh	r3, [r5, #12]
 80097bc:	059a      	lsls	r2, r3, #22
 80097be:	d402      	bmi.n	80097c6 <_vfiprintf_r+0x32>
 80097c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80097c2:	f7ff fe53 	bl	800946c <__retarget_lock_acquire_recursive>
 80097c6:	89ab      	ldrh	r3, [r5, #12]
 80097c8:	071b      	lsls	r3, r3, #28
 80097ca:	d501      	bpl.n	80097d0 <_vfiprintf_r+0x3c>
 80097cc:	692b      	ldr	r3, [r5, #16]
 80097ce:	b9eb      	cbnz	r3, 800980c <_vfiprintf_r+0x78>
 80097d0:	4629      	mov	r1, r5
 80097d2:	4630      	mov	r0, r6
 80097d4:	f000 fb92 	bl	8009efc <__swsetup_r>
 80097d8:	b1c0      	cbz	r0, 800980c <_vfiprintf_r+0x78>
 80097da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097dc:	07dc      	lsls	r4, r3, #31
 80097de:	d50e      	bpl.n	80097fe <_vfiprintf_r+0x6a>
 80097e0:	f04f 30ff 	mov.w	r0, #4294967295
 80097e4:	b01d      	add	sp, #116	; 0x74
 80097e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ea:	4b7b      	ldr	r3, [pc, #492]	; (80099d8 <_vfiprintf_r+0x244>)
 80097ec:	429d      	cmp	r5, r3
 80097ee:	d101      	bne.n	80097f4 <_vfiprintf_r+0x60>
 80097f0:	68b5      	ldr	r5, [r6, #8]
 80097f2:	e7df      	b.n	80097b4 <_vfiprintf_r+0x20>
 80097f4:	4b79      	ldr	r3, [pc, #484]	; (80099dc <_vfiprintf_r+0x248>)
 80097f6:	429d      	cmp	r5, r3
 80097f8:	bf08      	it	eq
 80097fa:	68f5      	ldreq	r5, [r6, #12]
 80097fc:	e7da      	b.n	80097b4 <_vfiprintf_r+0x20>
 80097fe:	89ab      	ldrh	r3, [r5, #12]
 8009800:	0598      	lsls	r0, r3, #22
 8009802:	d4ed      	bmi.n	80097e0 <_vfiprintf_r+0x4c>
 8009804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009806:	f7ff fe32 	bl	800946e <__retarget_lock_release_recursive>
 800980a:	e7e9      	b.n	80097e0 <_vfiprintf_r+0x4c>
 800980c:	2300      	movs	r3, #0
 800980e:	9309      	str	r3, [sp, #36]	; 0x24
 8009810:	2320      	movs	r3, #32
 8009812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009816:	f8cd 800c 	str.w	r8, [sp, #12]
 800981a:	2330      	movs	r3, #48	; 0x30
 800981c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80099e0 <_vfiprintf_r+0x24c>
 8009820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009824:	f04f 0901 	mov.w	r9, #1
 8009828:	4623      	mov	r3, r4
 800982a:	469a      	mov	sl, r3
 800982c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009830:	b10a      	cbz	r2, 8009836 <_vfiprintf_r+0xa2>
 8009832:	2a25      	cmp	r2, #37	; 0x25
 8009834:	d1f9      	bne.n	800982a <_vfiprintf_r+0x96>
 8009836:	ebba 0b04 	subs.w	fp, sl, r4
 800983a:	d00b      	beq.n	8009854 <_vfiprintf_r+0xc0>
 800983c:	465b      	mov	r3, fp
 800983e:	4622      	mov	r2, r4
 8009840:	4629      	mov	r1, r5
 8009842:	4630      	mov	r0, r6
 8009844:	f7ff ff93 	bl	800976e <__sfputs_r>
 8009848:	3001      	adds	r0, #1
 800984a:	f000 80aa 	beq.w	80099a2 <_vfiprintf_r+0x20e>
 800984e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009850:	445a      	add	r2, fp
 8009852:	9209      	str	r2, [sp, #36]	; 0x24
 8009854:	f89a 3000 	ldrb.w	r3, [sl]
 8009858:	2b00      	cmp	r3, #0
 800985a:	f000 80a2 	beq.w	80099a2 <_vfiprintf_r+0x20e>
 800985e:	2300      	movs	r3, #0
 8009860:	f04f 32ff 	mov.w	r2, #4294967295
 8009864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009868:	f10a 0a01 	add.w	sl, sl, #1
 800986c:	9304      	str	r3, [sp, #16]
 800986e:	9307      	str	r3, [sp, #28]
 8009870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009874:	931a      	str	r3, [sp, #104]	; 0x68
 8009876:	4654      	mov	r4, sl
 8009878:	2205      	movs	r2, #5
 800987a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800987e:	4858      	ldr	r0, [pc, #352]	; (80099e0 <_vfiprintf_r+0x24c>)
 8009880:	f7f6 fca6 	bl	80001d0 <memchr>
 8009884:	9a04      	ldr	r2, [sp, #16]
 8009886:	b9d8      	cbnz	r0, 80098c0 <_vfiprintf_r+0x12c>
 8009888:	06d1      	lsls	r1, r2, #27
 800988a:	bf44      	itt	mi
 800988c:	2320      	movmi	r3, #32
 800988e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009892:	0713      	lsls	r3, r2, #28
 8009894:	bf44      	itt	mi
 8009896:	232b      	movmi	r3, #43	; 0x2b
 8009898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800989c:	f89a 3000 	ldrb.w	r3, [sl]
 80098a0:	2b2a      	cmp	r3, #42	; 0x2a
 80098a2:	d015      	beq.n	80098d0 <_vfiprintf_r+0x13c>
 80098a4:	9a07      	ldr	r2, [sp, #28]
 80098a6:	4654      	mov	r4, sl
 80098a8:	2000      	movs	r0, #0
 80098aa:	f04f 0c0a 	mov.w	ip, #10
 80098ae:	4621      	mov	r1, r4
 80098b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098b4:	3b30      	subs	r3, #48	; 0x30
 80098b6:	2b09      	cmp	r3, #9
 80098b8:	d94e      	bls.n	8009958 <_vfiprintf_r+0x1c4>
 80098ba:	b1b0      	cbz	r0, 80098ea <_vfiprintf_r+0x156>
 80098bc:	9207      	str	r2, [sp, #28]
 80098be:	e014      	b.n	80098ea <_vfiprintf_r+0x156>
 80098c0:	eba0 0308 	sub.w	r3, r0, r8
 80098c4:	fa09 f303 	lsl.w	r3, r9, r3
 80098c8:	4313      	orrs	r3, r2
 80098ca:	9304      	str	r3, [sp, #16]
 80098cc:	46a2      	mov	sl, r4
 80098ce:	e7d2      	b.n	8009876 <_vfiprintf_r+0xe2>
 80098d0:	9b03      	ldr	r3, [sp, #12]
 80098d2:	1d19      	adds	r1, r3, #4
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	9103      	str	r1, [sp, #12]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	bfbb      	ittet	lt
 80098dc:	425b      	neglt	r3, r3
 80098de:	f042 0202 	orrlt.w	r2, r2, #2
 80098e2:	9307      	strge	r3, [sp, #28]
 80098e4:	9307      	strlt	r3, [sp, #28]
 80098e6:	bfb8      	it	lt
 80098e8:	9204      	strlt	r2, [sp, #16]
 80098ea:	7823      	ldrb	r3, [r4, #0]
 80098ec:	2b2e      	cmp	r3, #46	; 0x2e
 80098ee:	d10c      	bne.n	800990a <_vfiprintf_r+0x176>
 80098f0:	7863      	ldrb	r3, [r4, #1]
 80098f2:	2b2a      	cmp	r3, #42	; 0x2a
 80098f4:	d135      	bne.n	8009962 <_vfiprintf_r+0x1ce>
 80098f6:	9b03      	ldr	r3, [sp, #12]
 80098f8:	1d1a      	adds	r2, r3, #4
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	9203      	str	r2, [sp, #12]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	bfb8      	it	lt
 8009902:	f04f 33ff 	movlt.w	r3, #4294967295
 8009906:	3402      	adds	r4, #2
 8009908:	9305      	str	r3, [sp, #20]
 800990a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80099f0 <_vfiprintf_r+0x25c>
 800990e:	7821      	ldrb	r1, [r4, #0]
 8009910:	2203      	movs	r2, #3
 8009912:	4650      	mov	r0, sl
 8009914:	f7f6 fc5c 	bl	80001d0 <memchr>
 8009918:	b140      	cbz	r0, 800992c <_vfiprintf_r+0x198>
 800991a:	2340      	movs	r3, #64	; 0x40
 800991c:	eba0 000a 	sub.w	r0, r0, sl
 8009920:	fa03 f000 	lsl.w	r0, r3, r0
 8009924:	9b04      	ldr	r3, [sp, #16]
 8009926:	4303      	orrs	r3, r0
 8009928:	3401      	adds	r4, #1
 800992a:	9304      	str	r3, [sp, #16]
 800992c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009930:	482c      	ldr	r0, [pc, #176]	; (80099e4 <_vfiprintf_r+0x250>)
 8009932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009936:	2206      	movs	r2, #6
 8009938:	f7f6 fc4a 	bl	80001d0 <memchr>
 800993c:	2800      	cmp	r0, #0
 800993e:	d03f      	beq.n	80099c0 <_vfiprintf_r+0x22c>
 8009940:	4b29      	ldr	r3, [pc, #164]	; (80099e8 <_vfiprintf_r+0x254>)
 8009942:	bb1b      	cbnz	r3, 800998c <_vfiprintf_r+0x1f8>
 8009944:	9b03      	ldr	r3, [sp, #12]
 8009946:	3307      	adds	r3, #7
 8009948:	f023 0307 	bic.w	r3, r3, #7
 800994c:	3308      	adds	r3, #8
 800994e:	9303      	str	r3, [sp, #12]
 8009950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009952:	443b      	add	r3, r7
 8009954:	9309      	str	r3, [sp, #36]	; 0x24
 8009956:	e767      	b.n	8009828 <_vfiprintf_r+0x94>
 8009958:	fb0c 3202 	mla	r2, ip, r2, r3
 800995c:	460c      	mov	r4, r1
 800995e:	2001      	movs	r0, #1
 8009960:	e7a5      	b.n	80098ae <_vfiprintf_r+0x11a>
 8009962:	2300      	movs	r3, #0
 8009964:	3401      	adds	r4, #1
 8009966:	9305      	str	r3, [sp, #20]
 8009968:	4619      	mov	r1, r3
 800996a:	f04f 0c0a 	mov.w	ip, #10
 800996e:	4620      	mov	r0, r4
 8009970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009974:	3a30      	subs	r2, #48	; 0x30
 8009976:	2a09      	cmp	r2, #9
 8009978:	d903      	bls.n	8009982 <_vfiprintf_r+0x1ee>
 800997a:	2b00      	cmp	r3, #0
 800997c:	d0c5      	beq.n	800990a <_vfiprintf_r+0x176>
 800997e:	9105      	str	r1, [sp, #20]
 8009980:	e7c3      	b.n	800990a <_vfiprintf_r+0x176>
 8009982:	fb0c 2101 	mla	r1, ip, r1, r2
 8009986:	4604      	mov	r4, r0
 8009988:	2301      	movs	r3, #1
 800998a:	e7f0      	b.n	800996e <_vfiprintf_r+0x1da>
 800998c:	ab03      	add	r3, sp, #12
 800998e:	9300      	str	r3, [sp, #0]
 8009990:	462a      	mov	r2, r5
 8009992:	4b16      	ldr	r3, [pc, #88]	; (80099ec <_vfiprintf_r+0x258>)
 8009994:	a904      	add	r1, sp, #16
 8009996:	4630      	mov	r0, r6
 8009998:	f3af 8000 	nop.w
 800999c:	4607      	mov	r7, r0
 800999e:	1c78      	adds	r0, r7, #1
 80099a0:	d1d6      	bne.n	8009950 <_vfiprintf_r+0x1bc>
 80099a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099a4:	07d9      	lsls	r1, r3, #31
 80099a6:	d405      	bmi.n	80099b4 <_vfiprintf_r+0x220>
 80099a8:	89ab      	ldrh	r3, [r5, #12]
 80099aa:	059a      	lsls	r2, r3, #22
 80099ac:	d402      	bmi.n	80099b4 <_vfiprintf_r+0x220>
 80099ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099b0:	f7ff fd5d 	bl	800946e <__retarget_lock_release_recursive>
 80099b4:	89ab      	ldrh	r3, [r5, #12]
 80099b6:	065b      	lsls	r3, r3, #25
 80099b8:	f53f af12 	bmi.w	80097e0 <_vfiprintf_r+0x4c>
 80099bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099be:	e711      	b.n	80097e4 <_vfiprintf_r+0x50>
 80099c0:	ab03      	add	r3, sp, #12
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	462a      	mov	r2, r5
 80099c6:	4b09      	ldr	r3, [pc, #36]	; (80099ec <_vfiprintf_r+0x258>)
 80099c8:	a904      	add	r1, sp, #16
 80099ca:	4630      	mov	r0, r6
 80099cc:	f000 f880 	bl	8009ad0 <_printf_i>
 80099d0:	e7e4      	b.n	800999c <_vfiprintf_r+0x208>
 80099d2:	bf00      	nop
 80099d4:	0800a488 	.word	0x0800a488
 80099d8:	0800a4a8 	.word	0x0800a4a8
 80099dc:	0800a468 	.word	0x0800a468
 80099e0:	0800a4c8 	.word	0x0800a4c8
 80099e4:	0800a4d2 	.word	0x0800a4d2
 80099e8:	00000000 	.word	0x00000000
 80099ec:	0800976f 	.word	0x0800976f
 80099f0:	0800a4ce 	.word	0x0800a4ce

080099f4 <_printf_common>:
 80099f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f8:	4616      	mov	r6, r2
 80099fa:	4699      	mov	r9, r3
 80099fc:	688a      	ldr	r2, [r1, #8]
 80099fe:	690b      	ldr	r3, [r1, #16]
 8009a00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a04:	4293      	cmp	r3, r2
 8009a06:	bfb8      	it	lt
 8009a08:	4613      	movlt	r3, r2
 8009a0a:	6033      	str	r3, [r6, #0]
 8009a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a10:	4607      	mov	r7, r0
 8009a12:	460c      	mov	r4, r1
 8009a14:	b10a      	cbz	r2, 8009a1a <_printf_common+0x26>
 8009a16:	3301      	adds	r3, #1
 8009a18:	6033      	str	r3, [r6, #0]
 8009a1a:	6823      	ldr	r3, [r4, #0]
 8009a1c:	0699      	lsls	r1, r3, #26
 8009a1e:	bf42      	ittt	mi
 8009a20:	6833      	ldrmi	r3, [r6, #0]
 8009a22:	3302      	addmi	r3, #2
 8009a24:	6033      	strmi	r3, [r6, #0]
 8009a26:	6825      	ldr	r5, [r4, #0]
 8009a28:	f015 0506 	ands.w	r5, r5, #6
 8009a2c:	d106      	bne.n	8009a3c <_printf_common+0x48>
 8009a2e:	f104 0a19 	add.w	sl, r4, #25
 8009a32:	68e3      	ldr	r3, [r4, #12]
 8009a34:	6832      	ldr	r2, [r6, #0]
 8009a36:	1a9b      	subs	r3, r3, r2
 8009a38:	42ab      	cmp	r3, r5
 8009a3a:	dc26      	bgt.n	8009a8a <_printf_common+0x96>
 8009a3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a40:	1e13      	subs	r3, r2, #0
 8009a42:	6822      	ldr	r2, [r4, #0]
 8009a44:	bf18      	it	ne
 8009a46:	2301      	movne	r3, #1
 8009a48:	0692      	lsls	r2, r2, #26
 8009a4a:	d42b      	bmi.n	8009aa4 <_printf_common+0xb0>
 8009a4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a50:	4649      	mov	r1, r9
 8009a52:	4638      	mov	r0, r7
 8009a54:	47c0      	blx	r8
 8009a56:	3001      	adds	r0, #1
 8009a58:	d01e      	beq.n	8009a98 <_printf_common+0xa4>
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	68e5      	ldr	r5, [r4, #12]
 8009a5e:	6832      	ldr	r2, [r6, #0]
 8009a60:	f003 0306 	and.w	r3, r3, #6
 8009a64:	2b04      	cmp	r3, #4
 8009a66:	bf08      	it	eq
 8009a68:	1aad      	subeq	r5, r5, r2
 8009a6a:	68a3      	ldr	r3, [r4, #8]
 8009a6c:	6922      	ldr	r2, [r4, #16]
 8009a6e:	bf0c      	ite	eq
 8009a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a74:	2500      	movne	r5, #0
 8009a76:	4293      	cmp	r3, r2
 8009a78:	bfc4      	itt	gt
 8009a7a:	1a9b      	subgt	r3, r3, r2
 8009a7c:	18ed      	addgt	r5, r5, r3
 8009a7e:	2600      	movs	r6, #0
 8009a80:	341a      	adds	r4, #26
 8009a82:	42b5      	cmp	r5, r6
 8009a84:	d11a      	bne.n	8009abc <_printf_common+0xc8>
 8009a86:	2000      	movs	r0, #0
 8009a88:	e008      	b.n	8009a9c <_printf_common+0xa8>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	4652      	mov	r2, sl
 8009a8e:	4649      	mov	r1, r9
 8009a90:	4638      	mov	r0, r7
 8009a92:	47c0      	blx	r8
 8009a94:	3001      	adds	r0, #1
 8009a96:	d103      	bne.n	8009aa0 <_printf_common+0xac>
 8009a98:	f04f 30ff 	mov.w	r0, #4294967295
 8009a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009aa0:	3501      	adds	r5, #1
 8009aa2:	e7c6      	b.n	8009a32 <_printf_common+0x3e>
 8009aa4:	18e1      	adds	r1, r4, r3
 8009aa6:	1c5a      	adds	r2, r3, #1
 8009aa8:	2030      	movs	r0, #48	; 0x30
 8009aaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aae:	4422      	add	r2, r4
 8009ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009ab4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ab8:	3302      	adds	r3, #2
 8009aba:	e7c7      	b.n	8009a4c <_printf_common+0x58>
 8009abc:	2301      	movs	r3, #1
 8009abe:	4622      	mov	r2, r4
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	4638      	mov	r0, r7
 8009ac4:	47c0      	blx	r8
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	d0e6      	beq.n	8009a98 <_printf_common+0xa4>
 8009aca:	3601      	adds	r6, #1
 8009acc:	e7d9      	b.n	8009a82 <_printf_common+0x8e>
	...

08009ad0 <_printf_i>:
 8009ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	4691      	mov	r9, r2
 8009ad8:	7e27      	ldrb	r7, [r4, #24]
 8009ada:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009adc:	2f78      	cmp	r7, #120	; 0x78
 8009ade:	4680      	mov	r8, r0
 8009ae0:	469a      	mov	sl, r3
 8009ae2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ae6:	d807      	bhi.n	8009af8 <_printf_i+0x28>
 8009ae8:	2f62      	cmp	r7, #98	; 0x62
 8009aea:	d80a      	bhi.n	8009b02 <_printf_i+0x32>
 8009aec:	2f00      	cmp	r7, #0
 8009aee:	f000 80d8 	beq.w	8009ca2 <_printf_i+0x1d2>
 8009af2:	2f58      	cmp	r7, #88	; 0x58
 8009af4:	f000 80a3 	beq.w	8009c3e <_printf_i+0x16e>
 8009af8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009afc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b00:	e03a      	b.n	8009b78 <_printf_i+0xa8>
 8009b02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b06:	2b15      	cmp	r3, #21
 8009b08:	d8f6      	bhi.n	8009af8 <_printf_i+0x28>
 8009b0a:	a001      	add	r0, pc, #4	; (adr r0, 8009b10 <_printf_i+0x40>)
 8009b0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009b10:	08009b69 	.word	0x08009b69
 8009b14:	08009b7d 	.word	0x08009b7d
 8009b18:	08009af9 	.word	0x08009af9
 8009b1c:	08009af9 	.word	0x08009af9
 8009b20:	08009af9 	.word	0x08009af9
 8009b24:	08009af9 	.word	0x08009af9
 8009b28:	08009b7d 	.word	0x08009b7d
 8009b2c:	08009af9 	.word	0x08009af9
 8009b30:	08009af9 	.word	0x08009af9
 8009b34:	08009af9 	.word	0x08009af9
 8009b38:	08009af9 	.word	0x08009af9
 8009b3c:	08009c89 	.word	0x08009c89
 8009b40:	08009bad 	.word	0x08009bad
 8009b44:	08009c6b 	.word	0x08009c6b
 8009b48:	08009af9 	.word	0x08009af9
 8009b4c:	08009af9 	.word	0x08009af9
 8009b50:	08009cab 	.word	0x08009cab
 8009b54:	08009af9 	.word	0x08009af9
 8009b58:	08009bad 	.word	0x08009bad
 8009b5c:	08009af9 	.word	0x08009af9
 8009b60:	08009af9 	.word	0x08009af9
 8009b64:	08009c73 	.word	0x08009c73
 8009b68:	680b      	ldr	r3, [r1, #0]
 8009b6a:	1d1a      	adds	r2, r3, #4
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	600a      	str	r2, [r1, #0]
 8009b70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009b74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b78:	2301      	movs	r3, #1
 8009b7a:	e0a3      	b.n	8009cc4 <_printf_i+0x1f4>
 8009b7c:	6825      	ldr	r5, [r4, #0]
 8009b7e:	6808      	ldr	r0, [r1, #0]
 8009b80:	062e      	lsls	r6, r5, #24
 8009b82:	f100 0304 	add.w	r3, r0, #4
 8009b86:	d50a      	bpl.n	8009b9e <_printf_i+0xce>
 8009b88:	6805      	ldr	r5, [r0, #0]
 8009b8a:	600b      	str	r3, [r1, #0]
 8009b8c:	2d00      	cmp	r5, #0
 8009b8e:	da03      	bge.n	8009b98 <_printf_i+0xc8>
 8009b90:	232d      	movs	r3, #45	; 0x2d
 8009b92:	426d      	negs	r5, r5
 8009b94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b98:	485e      	ldr	r0, [pc, #376]	; (8009d14 <_printf_i+0x244>)
 8009b9a:	230a      	movs	r3, #10
 8009b9c:	e019      	b.n	8009bd2 <_printf_i+0x102>
 8009b9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009ba2:	6805      	ldr	r5, [r0, #0]
 8009ba4:	600b      	str	r3, [r1, #0]
 8009ba6:	bf18      	it	ne
 8009ba8:	b22d      	sxthne	r5, r5
 8009baa:	e7ef      	b.n	8009b8c <_printf_i+0xbc>
 8009bac:	680b      	ldr	r3, [r1, #0]
 8009bae:	6825      	ldr	r5, [r4, #0]
 8009bb0:	1d18      	adds	r0, r3, #4
 8009bb2:	6008      	str	r0, [r1, #0]
 8009bb4:	0628      	lsls	r0, r5, #24
 8009bb6:	d501      	bpl.n	8009bbc <_printf_i+0xec>
 8009bb8:	681d      	ldr	r5, [r3, #0]
 8009bba:	e002      	b.n	8009bc2 <_printf_i+0xf2>
 8009bbc:	0669      	lsls	r1, r5, #25
 8009bbe:	d5fb      	bpl.n	8009bb8 <_printf_i+0xe8>
 8009bc0:	881d      	ldrh	r5, [r3, #0]
 8009bc2:	4854      	ldr	r0, [pc, #336]	; (8009d14 <_printf_i+0x244>)
 8009bc4:	2f6f      	cmp	r7, #111	; 0x6f
 8009bc6:	bf0c      	ite	eq
 8009bc8:	2308      	moveq	r3, #8
 8009bca:	230a      	movne	r3, #10
 8009bcc:	2100      	movs	r1, #0
 8009bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009bd2:	6866      	ldr	r6, [r4, #4]
 8009bd4:	60a6      	str	r6, [r4, #8]
 8009bd6:	2e00      	cmp	r6, #0
 8009bd8:	bfa2      	ittt	ge
 8009bda:	6821      	ldrge	r1, [r4, #0]
 8009bdc:	f021 0104 	bicge.w	r1, r1, #4
 8009be0:	6021      	strge	r1, [r4, #0]
 8009be2:	b90d      	cbnz	r5, 8009be8 <_printf_i+0x118>
 8009be4:	2e00      	cmp	r6, #0
 8009be6:	d04d      	beq.n	8009c84 <_printf_i+0x1b4>
 8009be8:	4616      	mov	r6, r2
 8009bea:	fbb5 f1f3 	udiv	r1, r5, r3
 8009bee:	fb03 5711 	mls	r7, r3, r1, r5
 8009bf2:	5dc7      	ldrb	r7, [r0, r7]
 8009bf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009bf8:	462f      	mov	r7, r5
 8009bfa:	42bb      	cmp	r3, r7
 8009bfc:	460d      	mov	r5, r1
 8009bfe:	d9f4      	bls.n	8009bea <_printf_i+0x11a>
 8009c00:	2b08      	cmp	r3, #8
 8009c02:	d10b      	bne.n	8009c1c <_printf_i+0x14c>
 8009c04:	6823      	ldr	r3, [r4, #0]
 8009c06:	07df      	lsls	r7, r3, #31
 8009c08:	d508      	bpl.n	8009c1c <_printf_i+0x14c>
 8009c0a:	6923      	ldr	r3, [r4, #16]
 8009c0c:	6861      	ldr	r1, [r4, #4]
 8009c0e:	4299      	cmp	r1, r3
 8009c10:	bfde      	ittt	le
 8009c12:	2330      	movle	r3, #48	; 0x30
 8009c14:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009c18:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009c1c:	1b92      	subs	r2, r2, r6
 8009c1e:	6122      	str	r2, [r4, #16]
 8009c20:	f8cd a000 	str.w	sl, [sp]
 8009c24:	464b      	mov	r3, r9
 8009c26:	aa03      	add	r2, sp, #12
 8009c28:	4621      	mov	r1, r4
 8009c2a:	4640      	mov	r0, r8
 8009c2c:	f7ff fee2 	bl	80099f4 <_printf_common>
 8009c30:	3001      	adds	r0, #1
 8009c32:	d14c      	bne.n	8009cce <_printf_i+0x1fe>
 8009c34:	f04f 30ff 	mov.w	r0, #4294967295
 8009c38:	b004      	add	sp, #16
 8009c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c3e:	4835      	ldr	r0, [pc, #212]	; (8009d14 <_printf_i+0x244>)
 8009c40:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	680e      	ldr	r6, [r1, #0]
 8009c48:	061f      	lsls	r7, r3, #24
 8009c4a:	f856 5b04 	ldr.w	r5, [r6], #4
 8009c4e:	600e      	str	r6, [r1, #0]
 8009c50:	d514      	bpl.n	8009c7c <_printf_i+0x1ac>
 8009c52:	07d9      	lsls	r1, r3, #31
 8009c54:	bf44      	itt	mi
 8009c56:	f043 0320 	orrmi.w	r3, r3, #32
 8009c5a:	6023      	strmi	r3, [r4, #0]
 8009c5c:	b91d      	cbnz	r5, 8009c66 <_printf_i+0x196>
 8009c5e:	6823      	ldr	r3, [r4, #0]
 8009c60:	f023 0320 	bic.w	r3, r3, #32
 8009c64:	6023      	str	r3, [r4, #0]
 8009c66:	2310      	movs	r3, #16
 8009c68:	e7b0      	b.n	8009bcc <_printf_i+0xfc>
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	f043 0320 	orr.w	r3, r3, #32
 8009c70:	6023      	str	r3, [r4, #0]
 8009c72:	2378      	movs	r3, #120	; 0x78
 8009c74:	4828      	ldr	r0, [pc, #160]	; (8009d18 <_printf_i+0x248>)
 8009c76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009c7a:	e7e3      	b.n	8009c44 <_printf_i+0x174>
 8009c7c:	065e      	lsls	r6, r3, #25
 8009c7e:	bf48      	it	mi
 8009c80:	b2ad      	uxthmi	r5, r5
 8009c82:	e7e6      	b.n	8009c52 <_printf_i+0x182>
 8009c84:	4616      	mov	r6, r2
 8009c86:	e7bb      	b.n	8009c00 <_printf_i+0x130>
 8009c88:	680b      	ldr	r3, [r1, #0]
 8009c8a:	6826      	ldr	r6, [r4, #0]
 8009c8c:	6960      	ldr	r0, [r4, #20]
 8009c8e:	1d1d      	adds	r5, r3, #4
 8009c90:	600d      	str	r5, [r1, #0]
 8009c92:	0635      	lsls	r5, r6, #24
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	d501      	bpl.n	8009c9c <_printf_i+0x1cc>
 8009c98:	6018      	str	r0, [r3, #0]
 8009c9a:	e002      	b.n	8009ca2 <_printf_i+0x1d2>
 8009c9c:	0671      	lsls	r1, r6, #25
 8009c9e:	d5fb      	bpl.n	8009c98 <_printf_i+0x1c8>
 8009ca0:	8018      	strh	r0, [r3, #0]
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	6123      	str	r3, [r4, #16]
 8009ca6:	4616      	mov	r6, r2
 8009ca8:	e7ba      	b.n	8009c20 <_printf_i+0x150>
 8009caa:	680b      	ldr	r3, [r1, #0]
 8009cac:	1d1a      	adds	r2, r3, #4
 8009cae:	600a      	str	r2, [r1, #0]
 8009cb0:	681e      	ldr	r6, [r3, #0]
 8009cb2:	6862      	ldr	r2, [r4, #4]
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	4630      	mov	r0, r6
 8009cb8:	f7f6 fa8a 	bl	80001d0 <memchr>
 8009cbc:	b108      	cbz	r0, 8009cc2 <_printf_i+0x1f2>
 8009cbe:	1b80      	subs	r0, r0, r6
 8009cc0:	6060      	str	r0, [r4, #4]
 8009cc2:	6863      	ldr	r3, [r4, #4]
 8009cc4:	6123      	str	r3, [r4, #16]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ccc:	e7a8      	b.n	8009c20 <_printf_i+0x150>
 8009cce:	6923      	ldr	r3, [r4, #16]
 8009cd0:	4632      	mov	r2, r6
 8009cd2:	4649      	mov	r1, r9
 8009cd4:	4640      	mov	r0, r8
 8009cd6:	47d0      	blx	sl
 8009cd8:	3001      	adds	r0, #1
 8009cda:	d0ab      	beq.n	8009c34 <_printf_i+0x164>
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	079b      	lsls	r3, r3, #30
 8009ce0:	d413      	bmi.n	8009d0a <_printf_i+0x23a>
 8009ce2:	68e0      	ldr	r0, [r4, #12]
 8009ce4:	9b03      	ldr	r3, [sp, #12]
 8009ce6:	4298      	cmp	r0, r3
 8009ce8:	bfb8      	it	lt
 8009cea:	4618      	movlt	r0, r3
 8009cec:	e7a4      	b.n	8009c38 <_printf_i+0x168>
 8009cee:	2301      	movs	r3, #1
 8009cf0:	4632      	mov	r2, r6
 8009cf2:	4649      	mov	r1, r9
 8009cf4:	4640      	mov	r0, r8
 8009cf6:	47d0      	blx	sl
 8009cf8:	3001      	adds	r0, #1
 8009cfa:	d09b      	beq.n	8009c34 <_printf_i+0x164>
 8009cfc:	3501      	adds	r5, #1
 8009cfe:	68e3      	ldr	r3, [r4, #12]
 8009d00:	9903      	ldr	r1, [sp, #12]
 8009d02:	1a5b      	subs	r3, r3, r1
 8009d04:	42ab      	cmp	r3, r5
 8009d06:	dcf2      	bgt.n	8009cee <_printf_i+0x21e>
 8009d08:	e7eb      	b.n	8009ce2 <_printf_i+0x212>
 8009d0a:	2500      	movs	r5, #0
 8009d0c:	f104 0619 	add.w	r6, r4, #25
 8009d10:	e7f5      	b.n	8009cfe <_printf_i+0x22e>
 8009d12:	bf00      	nop
 8009d14:	0800a4d9 	.word	0x0800a4d9
 8009d18:	0800a4ea 	.word	0x0800a4ea

08009d1c <_putc_r>:
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	460d      	mov	r5, r1
 8009d20:	4614      	mov	r4, r2
 8009d22:	4606      	mov	r6, r0
 8009d24:	b118      	cbz	r0, 8009d2e <_putc_r+0x12>
 8009d26:	6983      	ldr	r3, [r0, #24]
 8009d28:	b90b      	cbnz	r3, 8009d2e <_putc_r+0x12>
 8009d2a:	f7ff fb01 	bl	8009330 <__sinit>
 8009d2e:	4b1c      	ldr	r3, [pc, #112]	; (8009da0 <_putc_r+0x84>)
 8009d30:	429c      	cmp	r4, r3
 8009d32:	d124      	bne.n	8009d7e <_putc_r+0x62>
 8009d34:	6874      	ldr	r4, [r6, #4]
 8009d36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d38:	07d8      	lsls	r0, r3, #31
 8009d3a:	d405      	bmi.n	8009d48 <_putc_r+0x2c>
 8009d3c:	89a3      	ldrh	r3, [r4, #12]
 8009d3e:	0599      	lsls	r1, r3, #22
 8009d40:	d402      	bmi.n	8009d48 <_putc_r+0x2c>
 8009d42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d44:	f7ff fb92 	bl	800946c <__retarget_lock_acquire_recursive>
 8009d48:	68a3      	ldr	r3, [r4, #8]
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	60a3      	str	r3, [r4, #8]
 8009d50:	da05      	bge.n	8009d5e <_putc_r+0x42>
 8009d52:	69a2      	ldr	r2, [r4, #24]
 8009d54:	4293      	cmp	r3, r2
 8009d56:	db1c      	blt.n	8009d92 <_putc_r+0x76>
 8009d58:	b2eb      	uxtb	r3, r5
 8009d5a:	2b0a      	cmp	r3, #10
 8009d5c:	d019      	beq.n	8009d92 <_putc_r+0x76>
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	1c5a      	adds	r2, r3, #1
 8009d62:	6022      	str	r2, [r4, #0]
 8009d64:	701d      	strb	r5, [r3, #0]
 8009d66:	b2ed      	uxtb	r5, r5
 8009d68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d6a:	07da      	lsls	r2, r3, #31
 8009d6c:	d405      	bmi.n	8009d7a <_putc_r+0x5e>
 8009d6e:	89a3      	ldrh	r3, [r4, #12]
 8009d70:	059b      	lsls	r3, r3, #22
 8009d72:	d402      	bmi.n	8009d7a <_putc_r+0x5e>
 8009d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d76:	f7ff fb7a 	bl	800946e <__retarget_lock_release_recursive>
 8009d7a:	4628      	mov	r0, r5
 8009d7c:	bd70      	pop	{r4, r5, r6, pc}
 8009d7e:	4b09      	ldr	r3, [pc, #36]	; (8009da4 <_putc_r+0x88>)
 8009d80:	429c      	cmp	r4, r3
 8009d82:	d101      	bne.n	8009d88 <_putc_r+0x6c>
 8009d84:	68b4      	ldr	r4, [r6, #8]
 8009d86:	e7d6      	b.n	8009d36 <_putc_r+0x1a>
 8009d88:	4b07      	ldr	r3, [pc, #28]	; (8009da8 <_putc_r+0x8c>)
 8009d8a:	429c      	cmp	r4, r3
 8009d8c:	bf08      	it	eq
 8009d8e:	68f4      	ldreq	r4, [r6, #12]
 8009d90:	e7d1      	b.n	8009d36 <_putc_r+0x1a>
 8009d92:	4629      	mov	r1, r5
 8009d94:	4622      	mov	r2, r4
 8009d96:	4630      	mov	r0, r6
 8009d98:	f000 f84c 	bl	8009e34 <__swbuf_r>
 8009d9c:	4605      	mov	r5, r0
 8009d9e:	e7e3      	b.n	8009d68 <_putc_r+0x4c>
 8009da0:	0800a488 	.word	0x0800a488
 8009da4:	0800a4a8 	.word	0x0800a4a8
 8009da8:	0800a468 	.word	0x0800a468

08009dac <__sread>:
 8009dac:	b510      	push	{r4, lr}
 8009dae:	460c      	mov	r4, r1
 8009db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db4:	f000 fa98 	bl	800a2e8 <_read_r>
 8009db8:	2800      	cmp	r0, #0
 8009dba:	bfab      	itete	ge
 8009dbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8009dc0:	181b      	addge	r3, r3, r0
 8009dc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dc6:	bfac      	ite	ge
 8009dc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dca:	81a3      	strhlt	r3, [r4, #12]
 8009dcc:	bd10      	pop	{r4, pc}

08009dce <__swrite>:
 8009dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd2:	461f      	mov	r7, r3
 8009dd4:	898b      	ldrh	r3, [r1, #12]
 8009dd6:	05db      	lsls	r3, r3, #23
 8009dd8:	4605      	mov	r5, r0
 8009dda:	460c      	mov	r4, r1
 8009ddc:	4616      	mov	r6, r2
 8009dde:	d505      	bpl.n	8009dec <__swrite+0x1e>
 8009de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de4:	2302      	movs	r3, #2
 8009de6:	2200      	movs	r2, #0
 8009de8:	f000 f9c8 	bl	800a17c <_lseek_r>
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009df6:	81a3      	strh	r3, [r4, #12]
 8009df8:	4632      	mov	r2, r6
 8009dfa:	463b      	mov	r3, r7
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e02:	f000 b869 	b.w	8009ed8 <_write_r>

08009e06 <__sseek>:
 8009e06:	b510      	push	{r4, lr}
 8009e08:	460c      	mov	r4, r1
 8009e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e0e:	f000 f9b5 	bl	800a17c <_lseek_r>
 8009e12:	1c43      	adds	r3, r0, #1
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	bf15      	itete	ne
 8009e18:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e22:	81a3      	strheq	r3, [r4, #12]
 8009e24:	bf18      	it	ne
 8009e26:	81a3      	strhne	r3, [r4, #12]
 8009e28:	bd10      	pop	{r4, pc}

08009e2a <__sclose>:
 8009e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e2e:	f000 b8d3 	b.w	8009fd8 <_close_r>
	...

08009e34 <__swbuf_r>:
 8009e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e36:	460e      	mov	r6, r1
 8009e38:	4614      	mov	r4, r2
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	b118      	cbz	r0, 8009e46 <__swbuf_r+0x12>
 8009e3e:	6983      	ldr	r3, [r0, #24]
 8009e40:	b90b      	cbnz	r3, 8009e46 <__swbuf_r+0x12>
 8009e42:	f7ff fa75 	bl	8009330 <__sinit>
 8009e46:	4b21      	ldr	r3, [pc, #132]	; (8009ecc <__swbuf_r+0x98>)
 8009e48:	429c      	cmp	r4, r3
 8009e4a:	d12b      	bne.n	8009ea4 <__swbuf_r+0x70>
 8009e4c:	686c      	ldr	r4, [r5, #4]
 8009e4e:	69a3      	ldr	r3, [r4, #24]
 8009e50:	60a3      	str	r3, [r4, #8]
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	071a      	lsls	r2, r3, #28
 8009e56:	d52f      	bpl.n	8009eb8 <__swbuf_r+0x84>
 8009e58:	6923      	ldr	r3, [r4, #16]
 8009e5a:	b36b      	cbz	r3, 8009eb8 <__swbuf_r+0x84>
 8009e5c:	6923      	ldr	r3, [r4, #16]
 8009e5e:	6820      	ldr	r0, [r4, #0]
 8009e60:	1ac0      	subs	r0, r0, r3
 8009e62:	6963      	ldr	r3, [r4, #20]
 8009e64:	b2f6      	uxtb	r6, r6
 8009e66:	4283      	cmp	r3, r0
 8009e68:	4637      	mov	r7, r6
 8009e6a:	dc04      	bgt.n	8009e76 <__swbuf_r+0x42>
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f000 f948 	bl	800a104 <_fflush_r>
 8009e74:	bb30      	cbnz	r0, 8009ec4 <__swbuf_r+0x90>
 8009e76:	68a3      	ldr	r3, [r4, #8]
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	60a3      	str	r3, [r4, #8]
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	1c5a      	adds	r2, r3, #1
 8009e80:	6022      	str	r2, [r4, #0]
 8009e82:	701e      	strb	r6, [r3, #0]
 8009e84:	6963      	ldr	r3, [r4, #20]
 8009e86:	3001      	adds	r0, #1
 8009e88:	4283      	cmp	r3, r0
 8009e8a:	d004      	beq.n	8009e96 <__swbuf_r+0x62>
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	07db      	lsls	r3, r3, #31
 8009e90:	d506      	bpl.n	8009ea0 <__swbuf_r+0x6c>
 8009e92:	2e0a      	cmp	r6, #10
 8009e94:	d104      	bne.n	8009ea0 <__swbuf_r+0x6c>
 8009e96:	4621      	mov	r1, r4
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f000 f933 	bl	800a104 <_fflush_r>
 8009e9e:	b988      	cbnz	r0, 8009ec4 <__swbuf_r+0x90>
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea4:	4b0a      	ldr	r3, [pc, #40]	; (8009ed0 <__swbuf_r+0x9c>)
 8009ea6:	429c      	cmp	r4, r3
 8009ea8:	d101      	bne.n	8009eae <__swbuf_r+0x7a>
 8009eaa:	68ac      	ldr	r4, [r5, #8]
 8009eac:	e7cf      	b.n	8009e4e <__swbuf_r+0x1a>
 8009eae:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <__swbuf_r+0xa0>)
 8009eb0:	429c      	cmp	r4, r3
 8009eb2:	bf08      	it	eq
 8009eb4:	68ec      	ldreq	r4, [r5, #12]
 8009eb6:	e7ca      	b.n	8009e4e <__swbuf_r+0x1a>
 8009eb8:	4621      	mov	r1, r4
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f000 f81e 	bl	8009efc <__swsetup_r>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d0cb      	beq.n	8009e5c <__swbuf_r+0x28>
 8009ec4:	f04f 37ff 	mov.w	r7, #4294967295
 8009ec8:	e7ea      	b.n	8009ea0 <__swbuf_r+0x6c>
 8009eca:	bf00      	nop
 8009ecc:	0800a488 	.word	0x0800a488
 8009ed0:	0800a4a8 	.word	0x0800a4a8
 8009ed4:	0800a468 	.word	0x0800a468

08009ed8 <_write_r>:
 8009ed8:	b538      	push	{r3, r4, r5, lr}
 8009eda:	4d07      	ldr	r5, [pc, #28]	; (8009ef8 <_write_r+0x20>)
 8009edc:	4604      	mov	r4, r0
 8009ede:	4608      	mov	r0, r1
 8009ee0:	4611      	mov	r1, r2
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	602a      	str	r2, [r5, #0]
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	f7f7 fffb 	bl	8001ee2 <_write>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d102      	bne.n	8009ef6 <_write_r+0x1e>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	b103      	cbz	r3, 8009ef6 <_write_r+0x1e>
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
 8009ef8:	20000e48 	.word	0x20000e48

08009efc <__swsetup_r>:
 8009efc:	4b32      	ldr	r3, [pc, #200]	; (8009fc8 <__swsetup_r+0xcc>)
 8009efe:	b570      	push	{r4, r5, r6, lr}
 8009f00:	681d      	ldr	r5, [r3, #0]
 8009f02:	4606      	mov	r6, r0
 8009f04:	460c      	mov	r4, r1
 8009f06:	b125      	cbz	r5, 8009f12 <__swsetup_r+0x16>
 8009f08:	69ab      	ldr	r3, [r5, #24]
 8009f0a:	b913      	cbnz	r3, 8009f12 <__swsetup_r+0x16>
 8009f0c:	4628      	mov	r0, r5
 8009f0e:	f7ff fa0f 	bl	8009330 <__sinit>
 8009f12:	4b2e      	ldr	r3, [pc, #184]	; (8009fcc <__swsetup_r+0xd0>)
 8009f14:	429c      	cmp	r4, r3
 8009f16:	d10f      	bne.n	8009f38 <__swsetup_r+0x3c>
 8009f18:	686c      	ldr	r4, [r5, #4]
 8009f1a:	89a3      	ldrh	r3, [r4, #12]
 8009f1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f20:	0719      	lsls	r1, r3, #28
 8009f22:	d42c      	bmi.n	8009f7e <__swsetup_r+0x82>
 8009f24:	06dd      	lsls	r5, r3, #27
 8009f26:	d411      	bmi.n	8009f4c <__swsetup_r+0x50>
 8009f28:	2309      	movs	r3, #9
 8009f2a:	6033      	str	r3, [r6, #0]
 8009f2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f30:	81a3      	strh	r3, [r4, #12]
 8009f32:	f04f 30ff 	mov.w	r0, #4294967295
 8009f36:	e03e      	b.n	8009fb6 <__swsetup_r+0xba>
 8009f38:	4b25      	ldr	r3, [pc, #148]	; (8009fd0 <__swsetup_r+0xd4>)
 8009f3a:	429c      	cmp	r4, r3
 8009f3c:	d101      	bne.n	8009f42 <__swsetup_r+0x46>
 8009f3e:	68ac      	ldr	r4, [r5, #8]
 8009f40:	e7eb      	b.n	8009f1a <__swsetup_r+0x1e>
 8009f42:	4b24      	ldr	r3, [pc, #144]	; (8009fd4 <__swsetup_r+0xd8>)
 8009f44:	429c      	cmp	r4, r3
 8009f46:	bf08      	it	eq
 8009f48:	68ec      	ldreq	r4, [r5, #12]
 8009f4a:	e7e6      	b.n	8009f1a <__swsetup_r+0x1e>
 8009f4c:	0758      	lsls	r0, r3, #29
 8009f4e:	d512      	bpl.n	8009f76 <__swsetup_r+0x7a>
 8009f50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f52:	b141      	cbz	r1, 8009f66 <__swsetup_r+0x6a>
 8009f54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f58:	4299      	cmp	r1, r3
 8009f5a:	d002      	beq.n	8009f62 <__swsetup_r+0x66>
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	f7ff f871 	bl	8009044 <_free_r>
 8009f62:	2300      	movs	r3, #0
 8009f64:	6363      	str	r3, [r4, #52]	; 0x34
 8009f66:	89a3      	ldrh	r3, [r4, #12]
 8009f68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f6c:	81a3      	strh	r3, [r4, #12]
 8009f6e:	2300      	movs	r3, #0
 8009f70:	6063      	str	r3, [r4, #4]
 8009f72:	6923      	ldr	r3, [r4, #16]
 8009f74:	6023      	str	r3, [r4, #0]
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	f043 0308 	orr.w	r3, r3, #8
 8009f7c:	81a3      	strh	r3, [r4, #12]
 8009f7e:	6923      	ldr	r3, [r4, #16]
 8009f80:	b94b      	cbnz	r3, 8009f96 <__swsetup_r+0x9a>
 8009f82:	89a3      	ldrh	r3, [r4, #12]
 8009f84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f8c:	d003      	beq.n	8009f96 <__swsetup_r+0x9a>
 8009f8e:	4621      	mov	r1, r4
 8009f90:	4630      	mov	r0, r6
 8009f92:	f000 f929 	bl	800a1e8 <__smakebuf_r>
 8009f96:	89a0      	ldrh	r0, [r4, #12]
 8009f98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f9c:	f010 0301 	ands.w	r3, r0, #1
 8009fa0:	d00a      	beq.n	8009fb8 <__swsetup_r+0xbc>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60a3      	str	r3, [r4, #8]
 8009fa6:	6963      	ldr	r3, [r4, #20]
 8009fa8:	425b      	negs	r3, r3
 8009faa:	61a3      	str	r3, [r4, #24]
 8009fac:	6923      	ldr	r3, [r4, #16]
 8009fae:	b943      	cbnz	r3, 8009fc2 <__swsetup_r+0xc6>
 8009fb0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fb4:	d1ba      	bne.n	8009f2c <__swsetup_r+0x30>
 8009fb6:	bd70      	pop	{r4, r5, r6, pc}
 8009fb8:	0781      	lsls	r1, r0, #30
 8009fba:	bf58      	it	pl
 8009fbc:	6963      	ldrpl	r3, [r4, #20]
 8009fbe:	60a3      	str	r3, [r4, #8]
 8009fc0:	e7f4      	b.n	8009fac <__swsetup_r+0xb0>
 8009fc2:	2000      	movs	r0, #0
 8009fc4:	e7f7      	b.n	8009fb6 <__swsetup_r+0xba>
 8009fc6:	bf00      	nop
 8009fc8:	20000188 	.word	0x20000188
 8009fcc:	0800a488 	.word	0x0800a488
 8009fd0:	0800a4a8 	.word	0x0800a4a8
 8009fd4:	0800a468 	.word	0x0800a468

08009fd8 <_close_r>:
 8009fd8:	b538      	push	{r3, r4, r5, lr}
 8009fda:	4d06      	ldr	r5, [pc, #24]	; (8009ff4 <_close_r+0x1c>)
 8009fdc:	2300      	movs	r3, #0
 8009fde:	4604      	mov	r4, r0
 8009fe0:	4608      	mov	r0, r1
 8009fe2:	602b      	str	r3, [r5, #0]
 8009fe4:	f7f7 ff99 	bl	8001f1a <_close>
 8009fe8:	1c43      	adds	r3, r0, #1
 8009fea:	d102      	bne.n	8009ff2 <_close_r+0x1a>
 8009fec:	682b      	ldr	r3, [r5, #0]
 8009fee:	b103      	cbz	r3, 8009ff2 <_close_r+0x1a>
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	bd38      	pop	{r3, r4, r5, pc}
 8009ff4:	20000e48 	.word	0x20000e48

08009ff8 <__sflush_r>:
 8009ff8:	898a      	ldrh	r2, [r1, #12]
 8009ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ffe:	4605      	mov	r5, r0
 800a000:	0710      	lsls	r0, r2, #28
 800a002:	460c      	mov	r4, r1
 800a004:	d458      	bmi.n	800a0b8 <__sflush_r+0xc0>
 800a006:	684b      	ldr	r3, [r1, #4]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	dc05      	bgt.n	800a018 <__sflush_r+0x20>
 800a00c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a00e:	2b00      	cmp	r3, #0
 800a010:	dc02      	bgt.n	800a018 <__sflush_r+0x20>
 800a012:	2000      	movs	r0, #0
 800a014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a018:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a01a:	2e00      	cmp	r6, #0
 800a01c:	d0f9      	beq.n	800a012 <__sflush_r+0x1a>
 800a01e:	2300      	movs	r3, #0
 800a020:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a024:	682f      	ldr	r7, [r5, #0]
 800a026:	602b      	str	r3, [r5, #0]
 800a028:	d032      	beq.n	800a090 <__sflush_r+0x98>
 800a02a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a02c:	89a3      	ldrh	r3, [r4, #12]
 800a02e:	075a      	lsls	r2, r3, #29
 800a030:	d505      	bpl.n	800a03e <__sflush_r+0x46>
 800a032:	6863      	ldr	r3, [r4, #4]
 800a034:	1ac0      	subs	r0, r0, r3
 800a036:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a038:	b10b      	cbz	r3, 800a03e <__sflush_r+0x46>
 800a03a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a03c:	1ac0      	subs	r0, r0, r3
 800a03e:	2300      	movs	r3, #0
 800a040:	4602      	mov	r2, r0
 800a042:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a044:	6a21      	ldr	r1, [r4, #32]
 800a046:	4628      	mov	r0, r5
 800a048:	47b0      	blx	r6
 800a04a:	1c43      	adds	r3, r0, #1
 800a04c:	89a3      	ldrh	r3, [r4, #12]
 800a04e:	d106      	bne.n	800a05e <__sflush_r+0x66>
 800a050:	6829      	ldr	r1, [r5, #0]
 800a052:	291d      	cmp	r1, #29
 800a054:	d82c      	bhi.n	800a0b0 <__sflush_r+0xb8>
 800a056:	4a2a      	ldr	r2, [pc, #168]	; (800a100 <__sflush_r+0x108>)
 800a058:	40ca      	lsrs	r2, r1
 800a05a:	07d6      	lsls	r6, r2, #31
 800a05c:	d528      	bpl.n	800a0b0 <__sflush_r+0xb8>
 800a05e:	2200      	movs	r2, #0
 800a060:	6062      	str	r2, [r4, #4]
 800a062:	04d9      	lsls	r1, r3, #19
 800a064:	6922      	ldr	r2, [r4, #16]
 800a066:	6022      	str	r2, [r4, #0]
 800a068:	d504      	bpl.n	800a074 <__sflush_r+0x7c>
 800a06a:	1c42      	adds	r2, r0, #1
 800a06c:	d101      	bne.n	800a072 <__sflush_r+0x7a>
 800a06e:	682b      	ldr	r3, [r5, #0]
 800a070:	b903      	cbnz	r3, 800a074 <__sflush_r+0x7c>
 800a072:	6560      	str	r0, [r4, #84]	; 0x54
 800a074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a076:	602f      	str	r7, [r5, #0]
 800a078:	2900      	cmp	r1, #0
 800a07a:	d0ca      	beq.n	800a012 <__sflush_r+0x1a>
 800a07c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a080:	4299      	cmp	r1, r3
 800a082:	d002      	beq.n	800a08a <__sflush_r+0x92>
 800a084:	4628      	mov	r0, r5
 800a086:	f7fe ffdd 	bl	8009044 <_free_r>
 800a08a:	2000      	movs	r0, #0
 800a08c:	6360      	str	r0, [r4, #52]	; 0x34
 800a08e:	e7c1      	b.n	800a014 <__sflush_r+0x1c>
 800a090:	6a21      	ldr	r1, [r4, #32]
 800a092:	2301      	movs	r3, #1
 800a094:	4628      	mov	r0, r5
 800a096:	47b0      	blx	r6
 800a098:	1c41      	adds	r1, r0, #1
 800a09a:	d1c7      	bne.n	800a02c <__sflush_r+0x34>
 800a09c:	682b      	ldr	r3, [r5, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d0c4      	beq.n	800a02c <__sflush_r+0x34>
 800a0a2:	2b1d      	cmp	r3, #29
 800a0a4:	d001      	beq.n	800a0aa <__sflush_r+0xb2>
 800a0a6:	2b16      	cmp	r3, #22
 800a0a8:	d101      	bne.n	800a0ae <__sflush_r+0xb6>
 800a0aa:	602f      	str	r7, [r5, #0]
 800a0ac:	e7b1      	b.n	800a012 <__sflush_r+0x1a>
 800a0ae:	89a3      	ldrh	r3, [r4, #12]
 800a0b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0b4:	81a3      	strh	r3, [r4, #12]
 800a0b6:	e7ad      	b.n	800a014 <__sflush_r+0x1c>
 800a0b8:	690f      	ldr	r7, [r1, #16]
 800a0ba:	2f00      	cmp	r7, #0
 800a0bc:	d0a9      	beq.n	800a012 <__sflush_r+0x1a>
 800a0be:	0793      	lsls	r3, r2, #30
 800a0c0:	680e      	ldr	r6, [r1, #0]
 800a0c2:	bf08      	it	eq
 800a0c4:	694b      	ldreq	r3, [r1, #20]
 800a0c6:	600f      	str	r7, [r1, #0]
 800a0c8:	bf18      	it	ne
 800a0ca:	2300      	movne	r3, #0
 800a0cc:	eba6 0807 	sub.w	r8, r6, r7
 800a0d0:	608b      	str	r3, [r1, #8]
 800a0d2:	f1b8 0f00 	cmp.w	r8, #0
 800a0d6:	dd9c      	ble.n	800a012 <__sflush_r+0x1a>
 800a0d8:	6a21      	ldr	r1, [r4, #32]
 800a0da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0dc:	4643      	mov	r3, r8
 800a0de:	463a      	mov	r2, r7
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	47b0      	blx	r6
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	dc06      	bgt.n	800a0f6 <__sflush_r+0xfe>
 800a0e8:	89a3      	ldrh	r3, [r4, #12]
 800a0ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ee:	81a3      	strh	r3, [r4, #12]
 800a0f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f4:	e78e      	b.n	800a014 <__sflush_r+0x1c>
 800a0f6:	4407      	add	r7, r0
 800a0f8:	eba8 0800 	sub.w	r8, r8, r0
 800a0fc:	e7e9      	b.n	800a0d2 <__sflush_r+0xda>
 800a0fe:	bf00      	nop
 800a100:	20400001 	.word	0x20400001

0800a104 <_fflush_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	690b      	ldr	r3, [r1, #16]
 800a108:	4605      	mov	r5, r0
 800a10a:	460c      	mov	r4, r1
 800a10c:	b913      	cbnz	r3, 800a114 <_fflush_r+0x10>
 800a10e:	2500      	movs	r5, #0
 800a110:	4628      	mov	r0, r5
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	b118      	cbz	r0, 800a11e <_fflush_r+0x1a>
 800a116:	6983      	ldr	r3, [r0, #24]
 800a118:	b90b      	cbnz	r3, 800a11e <_fflush_r+0x1a>
 800a11a:	f7ff f909 	bl	8009330 <__sinit>
 800a11e:	4b14      	ldr	r3, [pc, #80]	; (800a170 <_fflush_r+0x6c>)
 800a120:	429c      	cmp	r4, r3
 800a122:	d11b      	bne.n	800a15c <_fflush_r+0x58>
 800a124:	686c      	ldr	r4, [r5, #4]
 800a126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d0ef      	beq.n	800a10e <_fflush_r+0xa>
 800a12e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a130:	07d0      	lsls	r0, r2, #31
 800a132:	d404      	bmi.n	800a13e <_fflush_r+0x3a>
 800a134:	0599      	lsls	r1, r3, #22
 800a136:	d402      	bmi.n	800a13e <_fflush_r+0x3a>
 800a138:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a13a:	f7ff f997 	bl	800946c <__retarget_lock_acquire_recursive>
 800a13e:	4628      	mov	r0, r5
 800a140:	4621      	mov	r1, r4
 800a142:	f7ff ff59 	bl	8009ff8 <__sflush_r>
 800a146:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a148:	07da      	lsls	r2, r3, #31
 800a14a:	4605      	mov	r5, r0
 800a14c:	d4e0      	bmi.n	800a110 <_fflush_r+0xc>
 800a14e:	89a3      	ldrh	r3, [r4, #12]
 800a150:	059b      	lsls	r3, r3, #22
 800a152:	d4dd      	bmi.n	800a110 <_fflush_r+0xc>
 800a154:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a156:	f7ff f98a 	bl	800946e <__retarget_lock_release_recursive>
 800a15a:	e7d9      	b.n	800a110 <_fflush_r+0xc>
 800a15c:	4b05      	ldr	r3, [pc, #20]	; (800a174 <_fflush_r+0x70>)
 800a15e:	429c      	cmp	r4, r3
 800a160:	d101      	bne.n	800a166 <_fflush_r+0x62>
 800a162:	68ac      	ldr	r4, [r5, #8]
 800a164:	e7df      	b.n	800a126 <_fflush_r+0x22>
 800a166:	4b04      	ldr	r3, [pc, #16]	; (800a178 <_fflush_r+0x74>)
 800a168:	429c      	cmp	r4, r3
 800a16a:	bf08      	it	eq
 800a16c:	68ec      	ldreq	r4, [r5, #12]
 800a16e:	e7da      	b.n	800a126 <_fflush_r+0x22>
 800a170:	0800a488 	.word	0x0800a488
 800a174:	0800a4a8 	.word	0x0800a4a8
 800a178:	0800a468 	.word	0x0800a468

0800a17c <_lseek_r>:
 800a17c:	b538      	push	{r3, r4, r5, lr}
 800a17e:	4d07      	ldr	r5, [pc, #28]	; (800a19c <_lseek_r+0x20>)
 800a180:	4604      	mov	r4, r0
 800a182:	4608      	mov	r0, r1
 800a184:	4611      	mov	r1, r2
 800a186:	2200      	movs	r2, #0
 800a188:	602a      	str	r2, [r5, #0]
 800a18a:	461a      	mov	r2, r3
 800a18c:	f7f7 feec 	bl	8001f68 <_lseek>
 800a190:	1c43      	adds	r3, r0, #1
 800a192:	d102      	bne.n	800a19a <_lseek_r+0x1e>
 800a194:	682b      	ldr	r3, [r5, #0]
 800a196:	b103      	cbz	r3, 800a19a <_lseek_r+0x1e>
 800a198:	6023      	str	r3, [r4, #0]
 800a19a:	bd38      	pop	{r3, r4, r5, pc}
 800a19c:	20000e48 	.word	0x20000e48

0800a1a0 <__swhatbuf_r>:
 800a1a0:	b570      	push	{r4, r5, r6, lr}
 800a1a2:	460e      	mov	r6, r1
 800a1a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1a8:	2900      	cmp	r1, #0
 800a1aa:	b096      	sub	sp, #88	; 0x58
 800a1ac:	4614      	mov	r4, r2
 800a1ae:	461d      	mov	r5, r3
 800a1b0:	da07      	bge.n	800a1c2 <__swhatbuf_r+0x22>
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	602b      	str	r3, [r5, #0]
 800a1b6:	89b3      	ldrh	r3, [r6, #12]
 800a1b8:	061a      	lsls	r2, r3, #24
 800a1ba:	d410      	bmi.n	800a1de <__swhatbuf_r+0x3e>
 800a1bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1c0:	e00e      	b.n	800a1e0 <__swhatbuf_r+0x40>
 800a1c2:	466a      	mov	r2, sp
 800a1c4:	f000 f8a2 	bl	800a30c <_fstat_r>
 800a1c8:	2800      	cmp	r0, #0
 800a1ca:	dbf2      	blt.n	800a1b2 <__swhatbuf_r+0x12>
 800a1cc:	9a01      	ldr	r2, [sp, #4]
 800a1ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1d6:	425a      	negs	r2, r3
 800a1d8:	415a      	adcs	r2, r3
 800a1da:	602a      	str	r2, [r5, #0]
 800a1dc:	e7ee      	b.n	800a1bc <__swhatbuf_r+0x1c>
 800a1de:	2340      	movs	r3, #64	; 0x40
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	6023      	str	r3, [r4, #0]
 800a1e4:	b016      	add	sp, #88	; 0x58
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}

0800a1e8 <__smakebuf_r>:
 800a1e8:	898b      	ldrh	r3, [r1, #12]
 800a1ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1ec:	079d      	lsls	r5, r3, #30
 800a1ee:	4606      	mov	r6, r0
 800a1f0:	460c      	mov	r4, r1
 800a1f2:	d507      	bpl.n	800a204 <__smakebuf_r+0x1c>
 800a1f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1f8:	6023      	str	r3, [r4, #0]
 800a1fa:	6123      	str	r3, [r4, #16]
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	6163      	str	r3, [r4, #20]
 800a200:	b002      	add	sp, #8
 800a202:	bd70      	pop	{r4, r5, r6, pc}
 800a204:	ab01      	add	r3, sp, #4
 800a206:	466a      	mov	r2, sp
 800a208:	f7ff ffca 	bl	800a1a0 <__swhatbuf_r>
 800a20c:	9900      	ldr	r1, [sp, #0]
 800a20e:	4605      	mov	r5, r0
 800a210:	4630      	mov	r0, r6
 800a212:	f7fe ff67 	bl	80090e4 <_malloc_r>
 800a216:	b948      	cbnz	r0, 800a22c <__smakebuf_r+0x44>
 800a218:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a21c:	059a      	lsls	r2, r3, #22
 800a21e:	d4ef      	bmi.n	800a200 <__smakebuf_r+0x18>
 800a220:	f023 0303 	bic.w	r3, r3, #3
 800a224:	f043 0302 	orr.w	r3, r3, #2
 800a228:	81a3      	strh	r3, [r4, #12]
 800a22a:	e7e3      	b.n	800a1f4 <__smakebuf_r+0xc>
 800a22c:	4b0d      	ldr	r3, [pc, #52]	; (800a264 <__smakebuf_r+0x7c>)
 800a22e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a230:	89a3      	ldrh	r3, [r4, #12]
 800a232:	6020      	str	r0, [r4, #0]
 800a234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a238:	81a3      	strh	r3, [r4, #12]
 800a23a:	9b00      	ldr	r3, [sp, #0]
 800a23c:	6163      	str	r3, [r4, #20]
 800a23e:	9b01      	ldr	r3, [sp, #4]
 800a240:	6120      	str	r0, [r4, #16]
 800a242:	b15b      	cbz	r3, 800a25c <__smakebuf_r+0x74>
 800a244:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a248:	4630      	mov	r0, r6
 800a24a:	f000 f871 	bl	800a330 <_isatty_r>
 800a24e:	b128      	cbz	r0, 800a25c <__smakebuf_r+0x74>
 800a250:	89a3      	ldrh	r3, [r4, #12]
 800a252:	f023 0303 	bic.w	r3, r3, #3
 800a256:	f043 0301 	orr.w	r3, r3, #1
 800a25a:	81a3      	strh	r3, [r4, #12]
 800a25c:	89a0      	ldrh	r0, [r4, #12]
 800a25e:	4305      	orrs	r5, r0
 800a260:	81a5      	strh	r5, [r4, #12]
 800a262:	e7cd      	b.n	800a200 <__smakebuf_r+0x18>
 800a264:	080092c9 	.word	0x080092c9

0800a268 <memmove>:
 800a268:	4288      	cmp	r0, r1
 800a26a:	b510      	push	{r4, lr}
 800a26c:	eb01 0402 	add.w	r4, r1, r2
 800a270:	d902      	bls.n	800a278 <memmove+0x10>
 800a272:	4284      	cmp	r4, r0
 800a274:	4623      	mov	r3, r4
 800a276:	d807      	bhi.n	800a288 <memmove+0x20>
 800a278:	1e43      	subs	r3, r0, #1
 800a27a:	42a1      	cmp	r1, r4
 800a27c:	d008      	beq.n	800a290 <memmove+0x28>
 800a27e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a282:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a286:	e7f8      	b.n	800a27a <memmove+0x12>
 800a288:	4402      	add	r2, r0
 800a28a:	4601      	mov	r1, r0
 800a28c:	428a      	cmp	r2, r1
 800a28e:	d100      	bne.n	800a292 <memmove+0x2a>
 800a290:	bd10      	pop	{r4, pc}
 800a292:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a296:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a29a:	e7f7      	b.n	800a28c <memmove+0x24>

0800a29c <_realloc_r>:
 800a29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29e:	4607      	mov	r7, r0
 800a2a0:	4614      	mov	r4, r2
 800a2a2:	460e      	mov	r6, r1
 800a2a4:	b921      	cbnz	r1, 800a2b0 <_realloc_r+0x14>
 800a2a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	f7fe bf1a 	b.w	80090e4 <_malloc_r>
 800a2b0:	b922      	cbnz	r2, 800a2bc <_realloc_r+0x20>
 800a2b2:	f7fe fec7 	bl	8009044 <_free_r>
 800a2b6:	4625      	mov	r5, r4
 800a2b8:	4628      	mov	r0, r5
 800a2ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2bc:	f000 f848 	bl	800a350 <_malloc_usable_size_r>
 800a2c0:	42a0      	cmp	r0, r4
 800a2c2:	d20f      	bcs.n	800a2e4 <_realloc_r+0x48>
 800a2c4:	4621      	mov	r1, r4
 800a2c6:	4638      	mov	r0, r7
 800a2c8:	f7fe ff0c 	bl	80090e4 <_malloc_r>
 800a2cc:	4605      	mov	r5, r0
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d0f2      	beq.n	800a2b8 <_realloc_r+0x1c>
 800a2d2:	4631      	mov	r1, r6
 800a2d4:	4622      	mov	r2, r4
 800a2d6:	f7fe fe9f 	bl	8009018 <memcpy>
 800a2da:	4631      	mov	r1, r6
 800a2dc:	4638      	mov	r0, r7
 800a2de:	f7fe feb1 	bl	8009044 <_free_r>
 800a2e2:	e7e9      	b.n	800a2b8 <_realloc_r+0x1c>
 800a2e4:	4635      	mov	r5, r6
 800a2e6:	e7e7      	b.n	800a2b8 <_realloc_r+0x1c>

0800a2e8 <_read_r>:
 800a2e8:	b538      	push	{r3, r4, r5, lr}
 800a2ea:	4d07      	ldr	r5, [pc, #28]	; (800a308 <_read_r+0x20>)
 800a2ec:	4604      	mov	r4, r0
 800a2ee:	4608      	mov	r0, r1
 800a2f0:	4611      	mov	r1, r2
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	602a      	str	r2, [r5, #0]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f7f7 fdd6 	bl	8001ea8 <_read>
 800a2fc:	1c43      	adds	r3, r0, #1
 800a2fe:	d102      	bne.n	800a306 <_read_r+0x1e>
 800a300:	682b      	ldr	r3, [r5, #0]
 800a302:	b103      	cbz	r3, 800a306 <_read_r+0x1e>
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	bd38      	pop	{r3, r4, r5, pc}
 800a308:	20000e48 	.word	0x20000e48

0800a30c <_fstat_r>:
 800a30c:	b538      	push	{r3, r4, r5, lr}
 800a30e:	4d07      	ldr	r5, [pc, #28]	; (800a32c <_fstat_r+0x20>)
 800a310:	2300      	movs	r3, #0
 800a312:	4604      	mov	r4, r0
 800a314:	4608      	mov	r0, r1
 800a316:	4611      	mov	r1, r2
 800a318:	602b      	str	r3, [r5, #0]
 800a31a:	f7f7 fe0a 	bl	8001f32 <_fstat>
 800a31e:	1c43      	adds	r3, r0, #1
 800a320:	d102      	bne.n	800a328 <_fstat_r+0x1c>
 800a322:	682b      	ldr	r3, [r5, #0]
 800a324:	b103      	cbz	r3, 800a328 <_fstat_r+0x1c>
 800a326:	6023      	str	r3, [r4, #0]
 800a328:	bd38      	pop	{r3, r4, r5, pc}
 800a32a:	bf00      	nop
 800a32c:	20000e48 	.word	0x20000e48

0800a330 <_isatty_r>:
 800a330:	b538      	push	{r3, r4, r5, lr}
 800a332:	4d06      	ldr	r5, [pc, #24]	; (800a34c <_isatty_r+0x1c>)
 800a334:	2300      	movs	r3, #0
 800a336:	4604      	mov	r4, r0
 800a338:	4608      	mov	r0, r1
 800a33a:	602b      	str	r3, [r5, #0]
 800a33c:	f7f7 fe09 	bl	8001f52 <_isatty>
 800a340:	1c43      	adds	r3, r0, #1
 800a342:	d102      	bne.n	800a34a <_isatty_r+0x1a>
 800a344:	682b      	ldr	r3, [r5, #0]
 800a346:	b103      	cbz	r3, 800a34a <_isatty_r+0x1a>
 800a348:	6023      	str	r3, [r4, #0]
 800a34a:	bd38      	pop	{r3, r4, r5, pc}
 800a34c:	20000e48 	.word	0x20000e48

0800a350 <_malloc_usable_size_r>:
 800a350:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a354:	1f18      	subs	r0, r3, #4
 800a356:	2b00      	cmp	r3, #0
 800a358:	bfbc      	itt	lt
 800a35a:	580b      	ldrlt	r3, [r1, r0]
 800a35c:	18c0      	addlt	r0, r0, r3
 800a35e:	4770      	bx	lr

0800a360 <_init>:
 800a360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a362:	bf00      	nop
 800a364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a366:	bc08      	pop	{r3}
 800a368:	469e      	mov	lr, r3
 800a36a:	4770      	bx	lr

0800a36c <_fini>:
 800a36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a36e:	bf00      	nop
 800a370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a372:	bc08      	pop	{r3}
 800a374:	469e      	mov	lr, r3
 800a376:	4770      	bx	lr
